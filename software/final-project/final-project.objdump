
final-project.elf:     file format elf32-littlenios2
final-project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00015394 memsz 0x00015394 flags r-x
    LOAD off    0x000163b4 vaddr 0x100153b4 paddr 0x10016ed0 align 2**12
         filesz 0x00001b1c memsz 0x00001b1c flags rw-
    LOAD off    0x000189ec vaddr 0x100189ec paddr 0x100189ec align 2**12
         filesz 0x00000000 memsz 0x00000184 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014498  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000cec  100146c8  100146c8  000156c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b1c  100153b4  10016ed0  000163b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000184  100189ec  100189ec  000189ec  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00017ed0  2**0
                  CONTENTS
  7 .sdram        00000000  10018b70  10018b70  00017ed0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00017ed0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001480  00000000  00000000  00017ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002f2b2  00000000  00000000  00019378  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000cf91  00000000  00000000  0004862a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000100b8  00000000  00000000  000555bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000031d4  00000000  00000000  00065674  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000071e0  00000000  00000000  00068848  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001ba80  00000000  00000000  0006fa28  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0008b4a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002090  00000000  00000000  0008b4e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000927d2  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000927d5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000927e1  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000927e2  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000927e3  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000927e7  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000927eb  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000927ef  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000927fa  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00092805  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00092810  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002d  00000000  00000000  0009281b  2**0
                  CONTENTS, READONLY
 30 .jdi          000000e9  00000000  00000000  00092848  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0007b999  00000000  00000000  00092931  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
100146c8 l    d  .rodata	00000000 .rodata
100153b4 l    d  .rwdata	00000000 .rwdata
100189ec l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10018b70 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final-project_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 game.cpp
00000000 l    df *ABS*	00000000 graphics.cpp
00000000 l    df *ABS*	00000000 io_handler.cpp
00000000 l    df *ABS*	00000000 main.cpp
100189ec l     O .bss	00000002 _ZZ4mainE7ctl_reg
100189ee l     O .bss	00000002 _ZZ4mainE9no_device
00000000 l    df *ABS*	00000000 usb.cpp
00000000 l    df *ABS*	00000000 new_opv.cc
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 new_handler.cc
100189f0 l     O .bss	00000004 _ZN12_GLOBAL__N_113__new_handlerE
00000000 l    df *ABS*	00000000 eh_personality.cc
100026c0 l     F .text	000000a4 _ZL21size_of_encoded_valueh
10002764 l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
10002970 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
100029c4 l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
10002a50 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
10002b84 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
10002c0c l     F .text	0000022c _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
10002e38 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 bad_alloc.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
10003764 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
10003b94 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
10018a38 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
10003c4c l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
10003dfc l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
100189f4 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
10004550 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
100189fc l     O .bss	00000004 fc_static
10004668 l     F .text	000000c0 _Unwind_RaiseException_Phase2
10004728 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
100150fa l     O .rodata	00000010 zeroes.4404
10007ce8 l     F .text	000000bc __sbprintf
1001510a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10007ef8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10009a50 l     F .text	00000008 __fp_unlock
10009a64 l     F .text	0000019c __sinit.part.1
10009c00 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
100157bc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
10015c00 l     O .rwdata	00000020 lc_ctype_charset
10015be0 l     O .rwdata	00000020 lc_message_charset
10015c20 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
1001513c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000c670 l     F .text	000000fc __sprint_r.part.0
10015260 l     O .rodata	00000010 zeroes.4349
1000dcac l     F .text	000000bc __sbprintf
10015270 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
10011ccc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10011de0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10011e40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
10011f54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
1001203c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
100121a8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10012294 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10012470 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10016ec0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
10012714 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10012850 l     F .text	00000034 alt_dev_reg
10015e00 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10012b2c l     F .text	0000020c altera_avalon_jtag_uart_irq
10012d38 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10013614 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10013a74 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10013bd4 l     F .text	0000003c alt_get_errno
10013c10 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
10018a34 g     O .bss	00000004 alt_instruction_exception_handler
10003d54 g     F .text	00000028 __cxa_free_exception
100041c8 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
1000bde4 g     F .text	00000074 _mprec_log10
10003b34 g     F .text	00000018 _ZSt10unexpectedv
1000bed0 g     F .text	0000008c __any_on
1000e260 g     F .text	00000054 _isatty_r
10015148 g     O .rodata	00000028 __mprec_tinytens
100123ac g     F .text	0000007c alt_main
1000248c g     F .text	0000008c _Z14UsbGetRetryCntv
10005450 g     F .text	000000c0 _puts_r
10018a70 g     O .bss	00000100 alt_irq
100041b4 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
10002598 g     F .text	00000094 _Znaj
1000e2b4 g     F .text	00000060 _lseek_r
100047e4 g     F .text	00000020 .hidden _Unwind_GetIPInfo
10016ed0 g       *ABS*	00000000 __flash_rwdata_start
100106a4 g     F .text	00000088 .hidden __eqdf2
10003838 g     F .text	00000084 __cxa_rethrow
10004770 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
10003b70 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
100047d4 g     F .text	00000010 .hidden _Unwind_GetIP
10018b70 g       *ABS*	00000000 __alt_heap_start
1000581c g     F .text	0000005c _kill_r
1000371c g     F .text	00000010 _ZNSt9bad_allocD2Ev
10005414 g     F .text	0000003c printf
1000e4cc g     F .text	0000009c _wcrtomb_r
100055e4 g     F .text	00000084 _signal_r
1000c60c g     F .text	0000005c __sseek
10009db0 g     F .text	00000010 __sinit
1000e374 g     F .text	00000140 __swbuf_r
10003dd0 g     F .text	0000002c __cxa_free_dependent_exception
10003ec8 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
1000a884 g     F .text	0000007c _setlocale_r
10014ea4  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
10009c08 g     F .text	00000078 __sfmoreglue
10000550 g     F .text	00000070 _Z8IO_writeht
1001244c g     F .text	00000024 __malloc_unlock
100041b4 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
10003a2c g     F .text	00000020 _ZSt18uncaught_exceptionv
10002408 g     F .text	00000084 _Z17UsbWaitTDListDonev
100014b4 g     F .text	000000b4 _Z12UsbSoftResetv
10004240 g     F .text	00000020 __cxa_deleted_virtual
1000ad48 g     F .text	0000015c memmove
1000418c g     F .text	00000004 _ZNSt9exceptionD2Ev
10009d98 g     F .text	00000018 _cleanup
1000aea4 g     F .text	000000a8 _Balloc
1001072c g     F .text	000000dc .hidden __gtdf2
10014fb0  w    O .rodata	00000014 _ZTVSt13bad_exception
10013ffc g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10004820 g     F .text	00000008 .hidden _Unwind_GetRegionStart
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000e204 g     F .text	0000005c _fstat_r
10018a0c g     O .bss	00000004 errno
1000c588 g     F .text	00000008 __seofread
100049fc g     F .text	00000074 .hidden _Unwind_Backtrace
10018a20 g     O .bss	00000004 alt_argv
1001ee60 g       *ABS*	00000000 _gp
100126e4 g     F .text	00000030 usleep
10011f34 g     F .text	00000020 getpid
100034e0 g     F .text	00000230 __cxa_call_unexpected
100038bc g     F .text	00000008 __cxa_get_exception_ptr
10015c80 g     O .rwdata	00000180 alt_fd_list
10004910 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
100047a0 g     F .text	00000018 .hidden _Unwind_GetCFA
10003b4c g     F .text	00000014 _ZSt13set_terminatePFvvE
10014020 g     F .text	00000090 alt_find_dev
1000ac00 g     F .text	00000148 memcpy
10003d7c g     F .text	00000054 __cxa_allocate_dependent_exception
10009a58 g     F .text	0000000c _cleanup_r
100042d8 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
10011ae4 g     F .text	000000dc .hidden __floatsidf
10013b58 g     F .text	0000007c alt_io_redirect
10010808 g     F .text	000000f4 .hidden __ltdf2
100146c8 g       *ABS*	00000000 __DTOR_END__
100042f0 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
10005510 g     F .text	00000014 puts
1001427c g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000c4c0 g     F .text	00000074 __fpclassifyd
1000bd40 g     F .text	000000a4 __ratio
1000dc90 g     F .text	0000001c __vfiprintf_internal
10012f30 g     F .text	0000021c altera_avalon_jtag_uart_read
10004a88 g     F .text	00000014 malloc
100053e4 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000f36c g     F .text	00000064 .hidden __udivsi3
10011f90 g     F .text	000000ac isatty
10005668 g     F .text	000000bc _raise_r
10015198 g     O .rodata	000000c8 __mprec_tens
1000a900 g     F .text	0000000c __locale_charset
10018a08 g     O .bss	00000004 __malloc_top_pad
10005878 g     F .text	00000004 _getpid_r
10016ea0 g     O .rwdata	00000004 __mb_cur_max
1000a930 g     F .text	0000000c _localeconv_r
1000b2d8 g     F .text	0000003c __i2b
1000a234 g     F .text	000004c8 __sfvwrite_r
10004470 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
10005724 g     F .text	000000a8 __sigtramp_r
10005524 g     F .text	00000054 _sbrk_r
10014ffc  w    O .rodata	00000020 _ZTVSt9type_info
1000e314 g     F .text	00000060 _read_r
10004194 g     F .text	0000000c _ZNKSt9exception4whatEv
10016eb8 g     O .rwdata	00000004 alt_max_fd
1000def8 g     F .text	000000f0 _fclose_r
10014e84  w    O .rodata	0000000c _ZTISt9bad_alloc
10009a20 g     F .text	00000030 fflush
10018a04 g     O .bss	00000004 __malloc_max_sbrked_mem
1000f428 g     F .text	000008ac .hidden __adddf3
10014ed8  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
1000bae8 g     F .text	0000010c __b2d
1000ecb0 g     F .text	000005c4 .hidden __umoddi3
100122d0 g     F .text	000000dc lseek
10004334 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
10003760 g     F .text	00000004 _ZdlPv
10016e98 g     O .rwdata	00000004 _global_impure_ptr
1000bf5c g     F .text	00000564 _realloc_r
10018b70 g       *ABS*	00000000 __bss_end
100026b0 g     F .text	00000010 _ZSt15get_new_handlerv
10013984 g     F .text	000000f0 alt_iic_isr_register
10013ef4 g     F .text	00000108 alt_tick
10004758 g     F .text	00000018 .hidden _Unwind_SjLj_Register
10001668 g     F .text	00000148 _Z17UsbGetDeviceDesc1v
1000e6b4 g     F .text	000005fc .hidden __udivdi3
1000e160 g     F .text	00000024 _fputwc_r
10015170 g     O .rodata	00000028 __mprec_bigtens
1000b0bc g     F .text	00000104 __s2b
10004a70 g     F .text	00000018 abort
10011bc0 g     F .text	000000a8 .hidden __floatunsidf
1000b828 g     F .text	00000060 __mcmp
10003978 g     F .text	000000b4 __cxa_end_catch
10009dd0 g     F .text	00000018 __fp_lock_all
10013938 g     F .text	0000004c alt_ic_irq_enabled
10004190 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
10013e58 g     F .text	0000009c alt_alarm_stop
10018a28 g     O .bss	00000004 alt_irq_active
10003b0c g     F .text	00000018 _ZSt9terminatev
100000fc g     F .exceptions	000000d4 alt_irq_handler
10015c58 g     O .rwdata	00000028 alt_dev_null
100041bc g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
10015058  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
100020c8 g     F .text	00000340 _Z16UsbGetReportDescv
100135f4 g     F .text	00000020 alt_dcache_flush_all
1000b1c0 g     F .text	00000068 __hi0bits
10016e6c  w    O .rwdata	00000008 _ZTISt9exception
10011a64 g     F .text	00000080 .hidden __fixdfsi
10016ed0 g       *ABS*	00000000 __ram_rwdata_end
100041c4 g     F .text	00000004 _ZNSt9type_infoD1Ev
10016eb0 g     O .rwdata	00000008 alt_dev_list
100041bc g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
10012750 g     F .text	00000100 write
100041d8 g     F .text	00000004 _ZNSt9type_infoD0Ev
100153b4 g       *ABS*	00000000 __ram_rodata_end
10011e7c g     F .text	000000b8 fstat
10012078 g     F .text	00000130 kill
10010808 g     F .text	000000f4 .hidden __ledf2
1000b5a0 g     F .text	00000140 __pow5mult
1000c784 g     F .text	0000150c ___vfiprintf_internal_r
10018a18 g     O .bss	00000004 __nlocale_changed
1000f3d0 g     F .text	00000058 .hidden __umodsi3
100041d0 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
10003b60 g     F .text	00000010 _ZSt13get_terminatev
10018b70 g       *ABS*	00000000 end
100049e4 g     F .text	00000018 .hidden _Unwind_DeleteException
10012a6c g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
100043a0 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
100146c1 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10011c68 g     F .text	00000064 .hidden __clzsi2
10004260 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
1001314c g     F .text	00000224 altera_avalon_jtag_uart_write
10009dc0 g     F .text	00000004 __sfp_lock_acquire
10014f38  w    O .rodata	00000012 _ZTSSt13bad_exception
1000ab1c g     F .text	000000e4 memchr
100059f0 g     F .text	000022dc ___vfprintf_internal_r
10009f24 g     F .text	00000310 _free_r
1000a90c g     F .text	00000010 __locale_mb_cur_max
100005c0 g     F .text	00000068 _Z7IO_readh
100144f8 g     F .text	00000180 __call_exitprocs
10018a14 g     O .bss	00000004 __mlocale_changed
10016e90 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
10018a2c g     O .bss	00000004 _alt_tick_rate
10014fec  w    O .rodata	0000000d _ZTSSt9type_info
10003710 g     F .text	0000000c _ZNKSt9bad_alloc4whatEv
10004220 g     F .text	00000020 __cxa_pure_virtual
10002518 g     F .text	00000080 _Z11UsbPrintMemv
1000b6e0 g     F .text	00000148 __lshift
10014e90  w    O .rodata	00000014 _ZTVSt9bad_alloc
10018a30 g     O .bss	00000004 _alt_nticks
100057e0 g     F .text	00000018 signal
100124ac g     F .text	00000104 read
100128bc g     F .text	0000004c alt_sys_init
100143e0 g     F .text	00000118 __register_exitproc
10014e74  w    O .rodata	0000000d _ZTSSt9bad_alloc
10003f0c g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
1000b314 g     F .text	0000028c __multiply
100017b0 g     F .text	000001d8 _Z17UsbGetDeviceDesc2v
10012dd8 g     F .text	00000068 altera_avalon_jtag_uart_close
10016e60 g     O .rwdata	00000004 GRAPHICS_PTR
10004528 g     F .text	00000028 .hidden __mulsi3
100153b4 g       *ABS*	00000000 __ram_rwdata_start
10004840 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
100146c8 g       *ABS*	00000000 __ram_rodata_start
10018a48 g     O .bss	00000028 __malloc_current_mallinfo
10004954 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
1000bbf4 g     F .text	0000014c __d2b
10014fd8  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
100041c4 g     F .text	00000004 _ZNSt9type_infoD2Ev
100041c0 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
10004108 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
10012908 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
100141b8 g     F .text	000000c4 alt_get_fd
1001349c g     F .text	00000158 alt_busy_sleep
10016e7c  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
1000ddc8 g     F .text	00000054 _close_r
1000026c g     F .text	00000100 _ZN4GameC2Ev
10014364 g     F .text	0000007c memcmp
100129c8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10018b70 g       *ABS*	00000000 __alt_stack_base
10012a18 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
1000372c g     F .text	00000034 _ZNSt9bad_allocD0Ev
10003ec8 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
10007da4 g     F .text	00000154 __swsetup_r
10001568 g     F .text	00000100 _Z13UsbSetAddressv
10004998 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
1000fcd4 g     F .text	000009d0 .hidden __divdf3
10009c80 g     F .text	00000118 __sfp
1000be58 g     F .text	00000078 __copybits
100041c8 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
100153b4 g     O .rwdata	00000408 __malloc_av_
10009dcc g     F .text	00000004 __sinit_lock_release
100108fc g     F .text	0000086c .hidden __muldf3
1000c534 g     F .text	00000054 __sread
10014f9c  w    O .rodata	00000014 _ZTVSt9exception
100041b8 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
100140b0 g     F .text	00000108 alt_find_file
10013650 g     F .text	000000a4 alt_dev_llist_insert
10012428 g     F .text	00000024 __malloc_lock
10012634 g     F .text	000000b0 sbrk
10015088  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
100037a8 g     F .text	00000090 __cxa_throw
100099c4 g     F .text	0000005c _fflush_r
10004804 g     F .text	00000010 .hidden _Unwind_SetIP
1000de1c g     F .text	000000dc _calloc_r
100189ec g       *ABS*	00000000 __bss_start
100052bc g     F .text	00000128 memset
10001f80 g     F .text	00000148 _Z13UsbGetHidDescv
10000628 g     F .text	00000df0 main
10018a24 g     O .bss	00000004 alt_envp
10018a00 g     O .bss	00000004 __malloc_max_total_mem
10012968 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000e4b4 g     F .text	00000018 __swbuf
10003eb0 g     F .text	0000000c __cxa_get_globals_fast
1000c668 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000dfe8 g     F .text	00000014 fclose
10008120 g     F .text	00001688 _dtoa_r
10004ab0 g     F .text	0000080c _malloc_r
1000e628 g     F .text	00000030 __ascii_wctomb
100041a0 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
10016ebc g     O .rwdata	00000004 alt_errno
10000438 g     F .text	00000090 _Z7drawImgiii
100057f8 g     F .text	00000010 _init_signal
1001507c  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
1000a6fc g     F .text	000000c4 _fwalk
10004190 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
1000f274 g     F .text	00000084 .hidden __divsi3
10009e00 g     F .text	00000124 _malloc_trim_r
10001418 g     F .text	00000058 _Z8UsbWritett
100146c8 g       *ABS*	00000000 __CTOR_END__
10001d80 g     F .text	00000100 _Z12UsbSetConfigv
1000587c g     F .text	000000dc strcmp
100146c8 g       *ABS*	00000000 __flash_rodata_start
10014fc4  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
100146c8 g       *ABS*	00000000 __DTOR_LIST__
10001988 g     F .text	00000190 _Z17UsbGetConfigDesc1v
100106a4 g     F .text	00000088 .hidden __nedf2
10012884 g     F .text	00000038 alt_irq_init
100125b0 g     F .text	00000084 alt_release_fd
10003ed8 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
10015280 g     O .rodata	00000100 .hidden __clz_tab
10018a10 g     O .bss	00000004 _PathLocale
10014318 g     F .text	00000014 atexit
1000dd68 g     F .text	00000060 _write_r
1000a93c g     F .text	00000018 setlocale
10004838 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
10003e58 g     F .text	00000058 __cxa_call_terminate
10016e9c g     O .rwdata	00000004 _impure_ptr
10016e74  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
10018a1c g     O .bss	00000004 alt_argc
10001e80 g     F .text	00000100 _Z15UsbClassRequestv
100097a8 g     F .text	0000021c __sflush_r
10013754 g     F .text	00000060 _do_dtors
1000a928 g     F .text	00000008 __locale_cjk_lang
10003b84 g     F .text	00000010 _ZSt14get_unexpectedv
10000020 g       .exceptions	00000000 alt_irq_entry
1000ba84 g     F .text	00000064 __ulp
10004828 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
10009de8 g     F .text	00000018 __fp_unlock_all
10016ea8 g     O .rwdata	00000008 alt_fs_list
10014f78  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
10004814 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
100004c8 g     F .text	00000088 _Z7IO_initv
100038c4 g     F .text	000000b4 __cxa_begin_catch
100042f0 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
10003b24 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000a954 g     F .text	0000000c localeconv
100041b0 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
10016e84 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
100137d4 g     F .text	00000050 alt_ic_isr_register
10003cf4 g     F .text	00000060 __cxa_allocate_exception
10014ecc  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
1000269c g     F .text	00000014 _ZSt15set_new_handlerPFvvE
10016ed0 g       *ABS*	00000000 _edata
1000026c g     F .text	00000100 _ZN4GameC1Ev
10018b70 g       *ABS*	00000000 _end
10016e64 g     O .rwdata	00000001 _ZSt7nothrow
10002ee0 g     F .text	00000600 __gxx_personality_sj0
1000dffc g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
1000036c g     F .text	00000078 _ZN4Game6updateEi
10012e40 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
1000418c g     F .text	00000004 _ZNSt9exceptionD1Ev
100138ac g     F .text	0000008c alt_ic_irq_disable
1000c590 g     F .text	0000007c __swrite
1000262c g     F .text	00000070 _Znwj
10016e94 g     O .rwdata	00000004 __malloc_trim_threshold
1000a91c g     F .text	0000000c __locale_msgcharset
1001432c g     F .text	00000038 exit
100047b8 g     F .text	0000001c .hidden _Unwind_SetGR
1000a7c0 g     F .text	000000c4 _fwalk_reent
1000406c g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
1000b888 g     F .text	000001fc __mdiff
10003a4c g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
1000f2f8 g     F .text	00000074 .hidden __modsi3
1000371c g     F .text	00000010 _ZNSt9bad_allocD1Ev
10001470 g     F .text	00000044 _Z7UsbReadt
100003e4 g     F .text	00000054 _ZN4Game4drawEv
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10009dc4 g     F .text	00000004 __sfp_lock_release
10014f4c  w    O .rodata	0000000c _ZTISt13bad_exception
10000000 g       *ABS*	00000000 __alt_mem_sdram
10011e0c g     F .text	00000034 _exit
10013370 g     F .text	0000012c alt_alarm_start
10004784 g     F .text	0000001c .hidden _Unwind_GetGR
10003ebc g     F .text	0000000c __cxa_get_globals
10001b18 g     F .text	00000268 _Z17UsbGetConfigDesc2v
1000a960 g     F .text	000001bc __smakebuf_r
10016e68 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
10005958 g     F .text	00000098 strlen
10005578 g     F .text	0000006c _init_signal_r
10016e88  w    O .rwdata	00000008 _ZTISt9type_info
10013cfc g     F .text	0000015c open
1001072c g     F .text	000000dc .hidden __gedf2
10014f28  w    O .rodata	0000000d _ZTSSt9exception
10016ea4 g     O .rwdata	00000004 __wctomb
100041ac g     F .text	00000004 _ZNSt9exceptionD0Ev
1000c76c g     F .text	00000018 __sprint_r
100137b4 g     F .text	00000020 alt_icache_flush_all
10004830 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
10016ec4 g     O .rwdata	00000004 alt_priority_mask
10013824 g     F .text	00000088 alt_ic_irq_enable
10007ccc g     F .text	0000001c __vfprintf_internal
1000e658 g     F .text	0000005c _wctomb_r
10011168 g     F .text	000008fc .hidden __subdf3
1000b228 g     F .text	000000b0 __lo0bits
10016ec8 g     O .rwdata	00000008 alt_alarm_list
100136f4 g     F .text	00000060 _do_ctors
10005808 g     F .text	00000014 __sigtramp
1000e568 g     F .text	000000c0 wcrtomb
10011d08 g     F .text	000000d8 close
10014f58  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
10012210 g     F .text	00000084 alt_load
100041dc g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
1000e184 g     F .text	00000080 fputwc
100057cc g     F .text	00000014 raise
10004a9c g     F .text	00000014 free
10009dc8 g     F .text	00000004 __sinit_lock_acquire
1000af74 g     F .text	00000148 __multadd
10004300 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
1000af4c g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	008400b4 	movhi	r2,4098
10000140:	10a29c04 	addi	r2,r2,-30096
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	008400b4 	movhi	r2,4098
10000158:	10a29c04 	addi	r2,r2,-30096
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a6f517 	ldw	r2,-25644(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a6f517 	ldw	r2,-25644(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6bb9814 	ori	gp,gp,61024
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	10a27b14 	ori	r2,r2,35308

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18e2dc14 	ori	r3,r3,35696

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	00122100 	call	10012210 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	00123ac0 	call	100123ac <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <_ZN4GameC1Ev>:
// Game board is 64x64 tiles where each tile is 16x16 pixels
#define SPRITE_SIZE 16
#define ROWS 64
#define COLS 64

Game::Game(){
1000026c:	defffa04 	addi	sp,sp,-24
10000270:	dfc00515 	stw	ra,20(sp)
10000274:	df000415 	stw	fp,16(sp)
10000278:	dc000315 	stw	r16,12(sp)
1000027c:	df000404 	addi	fp,sp,16
10000280:	e13ffe15 	stw	r4,-8(fp)
	// Setup board
	board = new Tile*[ROWS];
10000284:	01004004 	movi	r4,256
10000288:	00025980 	call	10002598 <_Znaj>
1000028c:	1007883a 	mov	r3,r2
10000290:	e0bffe17 	ldw	r2,-8(fp)
10000294:	10c00415 	stw	r3,16(r2)
	for(int r = 0; r < ROWS; r++){
10000298:	e03ffc15 	stw	zero,-16(fp)
1000029c:	e0bffc17 	ldw	r2,-16(fp)
100002a0:	10801008 	cmpgei	r2,r2,64
100002a4:	1000211e 	bne	r2,zero,1000032c <_ZN4GameC1Ev+0xc0>
		board[r] = new Tile[COLS];
100002a8:	e0bffe17 	ldw	r2,-8(fp)
100002ac:	10c00417 	ldw	r3,16(r2)
100002b0:	e0bffc17 	ldw	r2,-16(fp)
100002b4:	1085883a 	add	r2,r2,r2
100002b8:	1085883a 	add	r2,r2,r2
100002bc:	18a1883a 	add	r16,r3,r2
100002c0:	01004004 	movi	r4,256
100002c4:	00025980 	call	10002598 <_Znaj>
100002c8:	80800015 	stw	r2,0(r16)
		for(int c = 0; c < COLS; c++){
100002cc:	e03ffd15 	stw	zero,-12(fp)
100002d0:	e0bffd17 	ldw	r2,-12(fp)
100002d4:	10801008 	cmpgei	r2,r2,64
100002d8:	1000101e 	bne	r2,zero,1000031c <_ZN4GameC1Ev+0xb0>
			board[r][c] = TILE;
100002dc:	e0bffe17 	ldw	r2,-8(fp)
100002e0:	10c00417 	ldw	r3,16(r2)
100002e4:	e0bffc17 	ldw	r2,-16(fp)
100002e8:	1085883a 	add	r2,r2,r2
100002ec:	1085883a 	add	r2,r2,r2
100002f0:	1885883a 	add	r2,r3,r2
100002f4:	10c00017 	ldw	r3,0(r2)
100002f8:	e0bffd17 	ldw	r2,-12(fp)
100002fc:	1085883a 	add	r2,r2,r2
10000300:	1085883a 	add	r2,r2,r2
10000304:	1885883a 	add	r2,r3,r2
10000308:	10000015 	stw	zero,0(r2)
Game::Game(){
	// Setup board
	board = new Tile*[ROWS];
	for(int r = 0; r < ROWS; r++){
		board[r] = new Tile[COLS];
		for(int c = 0; c < COLS; c++){
1000030c:	e0bffd17 	ldw	r2,-12(fp)
10000310:	10800044 	addi	r2,r2,1
10000314:	e0bffd15 	stw	r2,-12(fp)
10000318:	003fed06 	br	100002d0 <__alt_data_end+0xf80002d0>
#define COLS 64

Game::Game(){
	// Setup board
	board = new Tile*[ROWS];
	for(int r = 0; r < ROWS; r++){
1000031c:	e0bffc17 	ldw	r2,-16(fp)
10000320:	10800044 	addi	r2,r2,1
10000324:	e0bffc15 	stw	r2,-16(fp)
10000328:	003fdc06 	br	1000029c <__alt_data_end+0xf800029c>
			board[r][c] = TILE;
		}
	}

	// Set initial player locations
	player.x = ROWS/2;
1000032c:	e0bffe17 	ldw	r2,-8(fp)
10000330:	00c00804 	movi	r3,32
10000334:	10c00015 	stw	r3,0(r2)
	player.y = COLS-1;
10000338:	e0bffe17 	ldw	r2,-8(fp)
1000033c:	00c00fc4 	movi	r3,63
10000340:	10c00115 	stw	r3,4(r2)
	player.light = 1;
10000344:	e0bffe17 	ldw	r2,-8(fp)
10000348:	00c00044 	movi	r3,1
1000034c:	10c00215 	stw	r3,8(r2)
}
10000350:	0001883a 	nop
10000354:	e6ffff04 	addi	sp,fp,-4
10000358:	dfc00217 	ldw	ra,8(sp)
1000035c:	df000117 	ldw	fp,4(sp)
10000360:	dc000017 	ldw	r16,0(sp)
10000364:	dec00304 	addi	sp,sp,12
10000368:	f800283a 	ret

1000036c <_ZN4Game6updateEi>:
#define KEYCODE_S 22
#define KEYCODE_D 7
#define KEYCODE_SPACE 44

// Game logic happens in update
void Game::update(int keycodes){
1000036c:	defffb04 	addi	sp,sp,-20
10000370:	df000415 	stw	fp,16(sp)
10000374:	df000404 	addi	fp,sp,16
10000378:	e13ffe15 	stw	r4,-8(fp)
1000037c:	e17fff15 	stw	r5,-4(fp)
	int key1 = keycodes & 0x0000ffff;
10000380:	e0bfff17 	ldw	r2,-4(fp)
10000384:	10bfffcc 	andi	r2,r2,65535
10000388:	e0bffc15 	stw	r2,-16(fp)
	int key2 = (keycodes & 0xffff0000) >> 16;
1000038c:	e0bfff17 	ldw	r2,-4(fp)
10000390:	1004d43a 	srli	r2,r2,16
10000394:	e0bffd15 	stw	r2,-12(fp)

	// FOR TESTING ONLY:
	if(key1 == KEYCODE_W){
10000398:	e0bffc17 	ldw	r2,-16(fp)
1000039c:	10800698 	cmpnei	r2,r2,26
100003a0:	1000051e 	bne	r2,zero,100003b8 <_ZN4Game6updateEi+0x4c>
		player.y--;
100003a4:	e0bffe17 	ldw	r2,-8(fp)
100003a8:	10800117 	ldw	r2,4(r2)
100003ac:	10ffffc4 	addi	r3,r2,-1
100003b0:	e0bffe17 	ldw	r2,-8(fp)
100003b4:	10c00115 	stw	r3,4(r2)
	}
	if(player.y < 0){
100003b8:	e0bffe17 	ldw	r2,-8(fp)
100003bc:	10800117 	ldw	r2,4(r2)
100003c0:	1000030e 	bge	r2,zero,100003d0 <_ZN4Game6updateEi+0x64>
		player.y = COLS-1;
100003c4:	e0bffe17 	ldw	r2,-8(fp)
100003c8:	00c00fc4 	movi	r3,63
100003cc:	10c00115 	stw	r3,4(r2)
	}
}
100003d0:	0001883a 	nop
100003d4:	e037883a 	mov	sp,fp
100003d8:	df000017 	ldw	fp,0(sp)
100003dc:	dec00104 	addi	sp,sp,4
100003e0:	f800283a 	ret

100003e4 <_ZN4Game4drawEv>:
// Image IDs
#define MAIN_CHARACTER_SPRITE 0
#define TILE_SPRITE 1

// Draws all sprites where they should be
void Game::draw(){
100003e4:	defffd04 	addi	sp,sp,-12
100003e8:	dfc00215 	stw	ra,8(sp)
100003ec:	df000115 	stw	fp,4(sp)
100003f0:	df000104 	addi	fp,sp,4
100003f4:	e13fff15 	stw	r4,-4(fp)
	// For testing, draw main character
	drawImg(MAIN_CHARACTER_SPRITE, player.x*SPRITE_SIZE, player.y*SPRITE_SIZE);
100003f8:	e0bfff17 	ldw	r2,-4(fp)
100003fc:	10800017 	ldw	r2,0(r2)
10000400:	1006913a 	slli	r3,r2,4
10000404:	e0bfff17 	ldw	r2,-4(fp)
10000408:	10800117 	ldw	r2,4(r2)
1000040c:	1004913a 	slli	r2,r2,4
10000410:	100d883a 	mov	r6,r2
10000414:	180b883a 	mov	r5,r3
10000418:	0009883a 	mov	r4,zero
1000041c:	00004380 	call	10000438 <_Z7drawImgiii>
}
10000420:	0001883a 	nop
10000424:	e037883a 	mov	sp,fp
10000428:	dfc00117 	ldw	ra,4(sp)
1000042c:	df000017 	ldw	fp,0(sp)
10000430:	dec00204 	addi	sp,sp,8
10000434:	f800283a 	ret

10000438 <_Z7drawImgiii>:
#include "system.h"

// Pointer to registers inside of graphics interface
volatile unsigned int * GRAPHICS_PTR = (unsigned int *) AVALON_GRAPHICS_INTERFACE_0_BASE;

void drawImg(int img_id, int imgX, int imgY){
10000438:	defffc04 	addi	sp,sp,-16
1000043c:	df000315 	stw	fp,12(sp)
10000440:	df000304 	addi	fp,sp,12
10000444:	e13ffd15 	stw	r4,-12(fp)
10000448:	e17ffe15 	stw	r5,-8(fp)
1000044c:	e1bfff15 	stw	r6,-4(fp)
	// Set img_id, imgX, and imgY
	GRAPHICS_PTR[0] = img_id;
10000450:	d0a00017 	ldw	r2,-32768(gp)
10000454:	e0fffd17 	ldw	r3,-12(fp)
10000458:	10c00015 	stw	r3,0(r2)
	GRAPHICS_PTR[1] = imgX;
1000045c:	d0a00017 	ldw	r2,-32768(gp)
10000460:	10800104 	addi	r2,r2,4
10000464:	e0fffe17 	ldw	r3,-8(fp)
10000468:	10c00015 	stw	r3,0(r2)
	GRAPHICS_PTR[2] = imgY;
1000046c:	d0a00017 	ldw	r2,-32768(gp)
10000470:	10800204 	addi	r2,r2,8
10000474:	e0ffff17 	ldw	r3,-4(fp)
10000478:	10c00015 	stw	r3,0(r2)

	// Tell accelerator to start
	GRAPHICS_PTR[3] = 1;
1000047c:	d0a00017 	ldw	r2,-32768(gp)
10000480:	10800304 	addi	r2,r2,12
10000484:	00c00044 	movi	r3,1
10000488:	10c00015 	stw	r3,0(r2)

	while(GRAPHICS_PTR[4] == 0){
1000048c:	d0a00017 	ldw	r2,-32768(gp)
10000490:	10800404 	addi	r2,r2,16
10000494:	10800017 	ldw	r2,0(r2)
10000498:	1005003a 	cmpeq	r2,r2,zero
1000049c:	10803fcc 	andi	r2,r2,255
100004a0:	10000126 	beq	r2,zero,100004a8 <_Z7drawImgiii+0x70>
100004a4:	003ff906 	br	1000048c <__alt_data_end+0xf800048c>
		// Wait for Done flag
	}

	// Lower start flag
	GRAPHICS_PTR[3] = 0;
100004a8:	d0a00017 	ldw	r2,-32768(gp)
100004ac:	10800304 	addi	r2,r2,12
100004b0:	10000015 	stw	zero,0(r2)
}
100004b4:	0001883a 	nop
100004b8:	e037883a 	mov	sp,fp
100004bc:	df000017 	ldw	fp,0(sp)
100004c0:	dec00104 	addi	sp,sp,4
100004c4:	f800283a 	ret

100004c8 <_Z7IO_initv>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
100004c8:	deffff04 	addi	sp,sp,-4
100004cc:	df000015 	stw	fp,0(sp)
100004d0:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
100004d4:	00804404 	movi	r2,272
100004d8:	00c00044 	movi	r3,1
100004dc:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100004e0:	00804804 	movi	r2,288
100004e4:	00c00044 	movi	r3,1
100004e8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
100004ec:	00805004 	movi	r2,320
100004f0:	00c00044 	movi	r3,1
100004f4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
100004f8:	00804c04 	movi	r2,304
100004fc:	00c00044 	movi	r3,1
10000500:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10000504:	00805804 	movi	r2,352
10000508:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
1000050c:	00805404 	movi	r2,336
10000510:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
10000514:	00804804 	movi	r2,288
10000518:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
1000051c:	00804404 	movi	r2,272
10000520:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
10000524:	00804404 	movi	r2,272
10000528:	00c00044 	movi	r3,1
1000052c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000530:	00804804 	movi	r2,288
10000534:	00c00044 	movi	r3,1
10000538:	10c00005 	stb	r3,0(r2)
}
1000053c:	0001883a 	nop
10000540:	e037883a 	mov	sp,fp
10000544:	df000017 	ldw	fp,0(sp)
10000548:	dec00104 	addi	sp,sp,4
1000054c:	f800283a 	ret

10000550 <_Z8IO_writeht>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
10000550:	defffd04 	addi	sp,sp,-12
10000554:	df000215 	stw	fp,8(sp)
10000558:	df000204 	addi	fp,sp,8
1000055c:	2007883a 	mov	r3,r4
10000560:	2805883a 	mov	r2,r5
10000564:	e0fffe05 	stb	r3,-8(fp)
10000568:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address; // Tell chip which address to write to
1000056c:	00805804 	movi	r2,352
10000570:	e0fffe03 	ldbu	r3,-8(fp)
10000574:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0; // Enable chip
10000578:	00804804 	movi	r2,288
1000057c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0; // Go into write mode
10000580:	00804c04 	movi	r2,304
10000584:	10000005 	stb	zero,0(r2)
	*otg_hpi_data = Data; // Tell chip what data to write
10000588:	00805404 	movi	r2,336
1000058c:	e0ffff0b 	ldhu	r3,-4(fp)
10000590:	10c00015 	stw	r3,0(r2)

	*otg_hpi_w = 1; // Leave write mode
10000594:	00804c04 	movi	r2,304
10000598:	00c00044 	movi	r3,1
1000059c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1; // Disable chip
100005a0:	00804804 	movi	r2,288
100005a4:	00c00044 	movi	r3,1
100005a8:	10c00005 	stb	r3,0(r2)
}
100005ac:	0001883a 	nop
100005b0:	e037883a 	mov	sp,fp
100005b4:	df000017 	ldw	fp,0(sp)
100005b8:	dec00104 	addi	sp,sp,4
100005bc:	f800283a 	ret

100005c0 <_Z7IO_readh>:

alt_u16 IO_read(alt_u8 Address)
{
100005c0:	defffd04 	addi	sp,sp,-12
100005c4:	df000215 	stw	fp,8(sp)
100005c8:	df000204 	addi	fp,sp,8
100005cc:	2005883a 	mov	r2,r4
100005d0:	e0bfff05 	stb	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address; // Tell chip which address to read from
100005d4:	00805804 	movi	r2,352
100005d8:	e0ffff03 	ldbu	r3,-4(fp)
100005dc:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0; // Enable chip
100005e0:	00804804 	movi	r2,288
100005e4:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0; // Go into read mode
100005e8:	00805004 	movi	r2,320
100005ec:	10000005 	stb	zero,0(r2)
	data = *otg_hpi_data; // Read data
100005f0:	00805404 	movi	r2,336
100005f4:	10800017 	ldw	r2,0(r2)
100005f8:	e0bffe0d 	sth	r2,-8(fp)

	*otg_hpi_r = 1; // Leave read mode
100005fc:	00805004 	movi	r2,320
10000600:	00c00044 	movi	r3,1
10000604:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1; // Disable chip
10000608:	00804804 	movi	r2,288
1000060c:	00c00044 	movi	r3,1
10000610:	10c00005 	stb	r3,0(r2)

	return data;
10000614:	e0bffe0b 	ldhu	r2,-8(fp)
}
10000618:	e037883a 	mov	sp,fp
1000061c:	df000017 	ldw	fp,0(sp)
10000620:	dec00104 	addi	sp,sp,4
10000624:	f800283a 	ret

10000628 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
10000628:	defff404 	addi	sp,sp,-48
1000062c:	dfc00b15 	stw	ra,44(sp)
10000630:	df000a15 	stw	fp,40(sp)
10000634:	df000a04 	addi	fp,sp,40
	IO_init();
10000638:	00004c80 	call	100004c8 <_Z7IO_initv>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
1000063c:	e03ff70d 	sth	zero,-36(fp)
	int keycode = 0;
10000640:	e03ff815 	stw	zero,-32(fp)
	alt_u8 toggle = 0;
10000644:	e03ff685 	stb	zero,-38(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	Game game;
10000648:	e0bffb04 	addi	r2,fp,-20
1000064c:	1009883a 	mov	r4,r2
10000650:	000026c0 	call	1000026c <_ZN4GameC1Ev>

	printf("USB keyboard setup...\n\n");
10000654:	01040074 	movhi	r4,4097
10000658:	2111b204 	addi	r4,r4,18120
1000065c:	00055100 	call	10005510 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
10000660:	00014b40 	call	100014b4 <_Z12UsbSoftResetv>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10000664:	000b883a 	mov	r5,zero
10000668:	01005104 	movi	r4,324
1000066c:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10000670:	017fffd4 	movui	r5,65535
10000674:	01302414 	movui	r4,49296
10000678:	00014180 	call	10001418 <_Z8UsbWritett>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
1000067c:	01409604 	movi	r5,600
10000680:	01006d04 	movi	r4,436
10000684:	00014180 	call	10001418 <_Z8UsbWritett>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10000688:	00811004 	movi	r2,1088
1000068c:	e0bff60d 	sth	r2,-40(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10000690:	e0bff60b 	ldhu	r2,-40(fp)
10000694:	100b883a 	mov	r5,r2
10000698:	01005084 	movi	r4,322
1000069c:	00014180 	call	10001418 <_Z8UsbWritett>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
100006a0:	00808404 	movi	r2,528
100006a4:	e0bff90d 	sth	r2,-28(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
100006a8:	e0bff90b 	ldhu	r2,-28(fp)
100006ac:	100b883a 	mov	r5,r2
100006b0:	01302314 	movui	r4,49292
100006b4:	00014180 	call	10001418 <_Z8UsbWritett>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
100006b8:	000b883a 	mov	r5,zero
100006bc:	01007104 	movi	r4,452
100006c0:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R1,0x0000);  //port number
100006c4:	000b883a 	mov	r5,zero
100006c8:	01007184 	movi	r4,454
100006cc:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R2,0x0000);  //r1
100006d0:	000b883a 	mov	r5,zero
100006d4:	01007204 	movi	r4,456
100006d8:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R3,0x0000);  //r1
100006dc:	000b883a 	mov	r5,zero
100006e0:	01007284 	movi	r4,458
100006e4:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R4,0x0000);  //r1
100006e8:	000b883a 	mov	r5,zero
100006ec:	01007304 	movi	r4,460
100006f0:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R5,0x0000);  //r1
100006f4:	000b883a 	mov	r5,zero
100006f8:	01007384 	movi	r4,462
100006fc:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R6,0x0000);  //r1
10000700:	000b883a 	mov	r5,zero
10000704:	01007404 	movi	r4,464
10000708:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R7,0x0000);  //r1
1000070c:	000b883a 	mov	r5,zero
10000710:	01007484 	movi	r4,466
10000714:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R8,0x0000);  //r1
10000718:	000b883a 	mov	r5,zero
1000071c:	01007504 	movi	r4,468
10000720:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R9,0x0000);  //r1
10000724:	000b883a 	mov	r5,zero
10000728:	01007584 	movi	r4,470
1000072c:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R10,0x0000);  //r1
10000730:	000b883a 	mov	r5,zero
10000734:	01007604 	movi	r4,472
10000738:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R11,0x0000);  //r1
1000073c:	000b883a 	mov	r5,zero
10000740:	01007684 	movi	r4,474
10000744:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R12,0x0000);  //r1
10000748:	000b883a 	mov	r5,zero
1000074c:	01007704 	movi	r4,476
10000750:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R13,0x0000);  //r1
10000754:	000b883a 	mov	r5,zero
10000758:	01007784 	movi	r4,478
1000075c:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
10000760:	01401c84 	movi	r5,114
10000764:	01007084 	movi	r4,450
10000768:	00014180 	call	10001418 <_Z8UsbWritett>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
1000076c:	01738054 	movui	r5,52737
10000770:	01000044 	movi	r4,1
10000774:	00005500 	call	10000550 <_Z8IO_writeht>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10000778:	010000c4 	movi	r4,3
1000077c:	00005c00 	call	100005c0 <_Z7IO_readh>
10000780:	10bfffcc 	andi	r2,r2,65535
10000784:	1005003a 	cmpeq	r2,r2,zero
10000788:	10803fcc 	andi	r2,r2,255
1000078c:	10000126 	beq	r2,zero,10000794 <main+0x16c>
10000790:	003ff906 	br	10000778 <__alt_data_end+0xf8000778>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000794:	01000044 	movi	r4,1
10000798:	00005c00 	call	100005c0 <_Z7IO_readh>
1000079c:	10bfffcc 	andi	r2,r2,65535
100007a0:	1083fb58 	cmpnei	r2,r2,4077
100007a4:	10803fcc 	andi	r2,r2,255
100007a8:	10000826 	beq	r2,zero,100007cc <main+0x1a4>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100007ac:	01000044 	movi	r4,1
100007b0:	00005c00 	call	100005c0 <_Z7IO_readh>
100007b4:	10bfffcc 	andi	r2,r2,65535
100007b8:	100b883a 	mov	r5,r2
100007bc:	01040074 	movhi	r4,4097
100007c0:	2111b804 	addi	r4,r4,18144
100007c4:	00054140 	call	10005414 <printf>
		goto USB_HOT_PLUG;
100007c8:	003fa506 	br	10000660 <__alt_data_end+0xf8000660>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
100007cc:	01040074 	movhi	r4,4097
100007d0:	2111c104 	addi	r4,r4,18180
100007d4:	00054140 	call	10005414 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
100007d8:	01401d04 	movi	r5,116
100007dc:	01007084 	movi	r4,450
100007e0:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R0,0x003c);//reset time
100007e4:	01400f04 	movi	r5,60
100007e8:	01007104 	movi	r4,452
100007ec:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R1,0x0000);  //port number
100007f0:	000b883a 	mov	r5,zero
100007f4:	01007184 	movi	r4,454
100007f8:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R2,0x0000);  //r1
100007fc:	000b883a 	mov	r5,zero
10000800:	01007204 	movi	r4,456
10000804:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R3,0x0000);  //r1
10000808:	000b883a 	mov	r5,zero
1000080c:	01007284 	movi	r4,458
10000810:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R4,0x0000);  //r1
10000814:	000b883a 	mov	r5,zero
10000818:	01007304 	movi	r4,460
1000081c:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R5,0x0000);  //r1
10000820:	000b883a 	mov	r5,zero
10000824:	01007384 	movi	r4,462
10000828:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R6,0x0000);  //r1
1000082c:	000b883a 	mov	r5,zero
10000830:	01007404 	movi	r4,464
10000834:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R7,0x0000);  //r1
10000838:	000b883a 	mov	r5,zero
1000083c:	01007484 	movi	r4,466
10000840:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R8,0x0000);  //r1
10000844:	000b883a 	mov	r5,zero
10000848:	01007504 	movi	r4,468
1000084c:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R9,0x0000);  //r1
10000850:	000b883a 	mov	r5,zero
10000854:	01007584 	movi	r4,470
10000858:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R10,0x0000);  //r1
1000085c:	000b883a 	mov	r5,zero
10000860:	01007604 	movi	r4,472
10000864:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R11,0x0000);  //r1
10000868:	000b883a 	mov	r5,zero
1000086c:	01007684 	movi	r4,474
10000870:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R12,0x0000);  //r1
10000874:	000b883a 	mov	r5,zero
10000878:	01007704 	movi	r4,476
1000087c:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite(COMM_R13,0x0000);  //r1
10000880:	000b883a 	mov	r5,zero
10000884:	01007784 	movi	r4,478
10000888:	00014180 	call	10001418 <_Z8UsbWritett>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
1000088c:	01738054 	movui	r5,52737
10000890:	01000044 	movi	r4,1
10000894:	00005500 	call	10000550 <_Z8IO_writeht>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000898:	01000044 	movi	r4,1
1000089c:	00005c00 	call	100005c0 <_Z7IO_readh>
100008a0:	10bfffcc 	andi	r2,r2,65535
100008a4:	1083fb58 	cmpnei	r2,r2,4077
100008a8:	10803fcc 	andi	r2,r2,255
100008ac:	10000826 	beq	r2,zero,100008d0 <main+0x2a8>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100008b0:	01000044 	movi	r4,1
100008b4:	00005c00 	call	100005c0 <_Z7IO_readh>
100008b8:	10bfffcc 	andi	r2,r2,65535
100008bc:	100b883a 	mov	r5,r2
100008c0:	01040074 	movhi	r4,4097
100008c4:	2111b804 	addi	r4,r4,18144
100008c8:	00054140 	call	10005414 <printf>
		goto USB_HOT_PLUG;
100008cc:	003f6406 	br	10000660 <__alt_data_end+0xf8000660>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
100008d0:	00b02284 	movi	r2,-16246
100008d4:	d0a6e30d 	sth	r2,-25716(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
100008d8:	008c0004 	movi	r2,12288
100008dc:	d0a6e38d 	sth	r2,-25714(gp)
	fs_device = A_DP_STAT;
100008e0:	00880004 	movi	r2,8192
100008e4:	e0bff70d 	sth	r2,-36(fp)
	usb_ctl_val = UsbRead(ctl_reg);
100008e8:	d0a6e30b 	ldhu	r2,-25716(gp)
100008ec:	10bfffcc 	andi	r2,r2,65535
100008f0:	1009883a 	mov	r4,r2
100008f4:	00014700 	call	10001470 <_Z7UsbReadt>
100008f8:	e0bff60d 	sth	r2,-40(fp)

	if (!(usb_ctl_val & no_device))
100008fc:	d0a6e38b 	ldhu	r2,-25714(gp)
10000900:	e0fff60b 	ldhu	r3,-40(fp)
10000904:	1884703a 	and	r2,r3,r2
10000908:	10bfffcc 	andi	r2,r2,65535
1000090c:	1000331e 	bne	r2,zero,100009dc <main+0x3b4>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000910:	e03ff6c5 	stb	zero,-37(fp)
10000914:	e0bff6c3 	ldbu	r2,-37(fp)
10000918:	10800168 	cmpgeui	r2,r2,5
1000091c:	1000111e 	bne	r2,zero,10000964 <main+0x33c>
		{
			usleep(5*1000);
10000920:	0104e204 	movi	r4,5000
10000924:	00126e40 	call	100126e4 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10000928:	d0a6e30b 	ldhu	r2,-25716(gp)
1000092c:	10bfffcc 	andi	r2,r2,65535
10000930:	1009883a 	mov	r4,r2
10000934:	00014700 	call	10001470 <_Z7UsbReadt>
10000938:	e0bff60d 	sth	r2,-40(fp)
			if(usb_ctl_val & no_device) break;
1000093c:	d0a6e38b 	ldhu	r2,-25714(gp)
10000940:	e0fff60b 	ldhu	r3,-40(fp)
10000944:	1884703a 	and	r2,r3,r2
10000948:	10bfffcc 	andi	r2,r2,65535
1000094c:	1000041e 	bne	r2,zero,10000960 <main+0x338>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000950:	e0bff6c3 	ldbu	r2,-37(fp)
10000954:	10800044 	addi	r2,r2,1
10000958:	e0bff6c5 	stb	r2,-37(fp)
1000095c:	003fed06 	br	10000914 <__alt_data_end+0xf8000914>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
10000960:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
10000964:	d0a6e38b 	ldhu	r2,-25714(gp)
10000968:	e0fff60b 	ldhu	r3,-40(fp)
1000096c:	1884703a 	and	r2,r3,r2
10000970:	10bfffcc 	andi	r2,r2,65535
10000974:	1000251e 	bne	r2,zero,10000a0c <main+0x3e4>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10000978:	01040074 	movhi	r4,4097
1000097c:	2111c504 	addi	r4,r4,18196
10000980:	00055100 	call	10005510 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10000984:	01040074 	movhi	r4,4097
10000988:	2111cf04 	addi	r4,r4,18236
1000098c:	00055100 	call	10005510 <puts>
			while (!(usb_ctl_val & no_device))
10000990:	d0a6e38b 	ldhu	r2,-25714(gp)
10000994:	e0fff60b 	ldhu	r3,-40(fp)
10000998:	1884703a 	and	r2,r3,r2
1000099c:	10bfffcc 	andi	r2,r2,65535
100009a0:	10001a1e 	bne	r2,zero,10000a0c <main+0x3e4>
			{
				usb_ctl_val = UsbRead(ctl_reg);
100009a4:	d0a6e30b 	ldhu	r2,-25716(gp)
100009a8:	10bfffcc 	andi	r2,r2,65535
100009ac:	1009883a 	mov	r4,r2
100009b0:	00014700 	call	10001470 <_Z7UsbReadt>
100009b4:	e0bff60d 	sth	r2,-40(fp)
				if(usb_ctl_val & no_device)
100009b8:	d0a6e38b 	ldhu	r2,-25714(gp)
100009bc:	e0fff60b 	ldhu	r3,-40(fp)
100009c0:	1884703a 	and	r2,r3,r2
100009c4:	10bfffcc 	andi	r2,r2,65535
100009c8:	10000126 	beq	r2,zero,100009d0 <main+0x3a8>
					goto USB_HOT_PLUG;
100009cc:	003f2406 	br	10000660 <__alt_data_end+0xf8000660>

				usleep(2000);
100009d0:	0101f404 	movi	r4,2000
100009d4:	00126e40 	call	100126e4 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
100009d8:	003fed06 	br	10000990 <__alt_data_end+0xf8000990>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
100009dc:	e0fff60b 	ldhu	r3,-40(fp)
100009e0:	e0bff70b 	ldhu	r2,-36(fp)
100009e4:	1884703a 	and	r2,r3,r2
100009e8:	10bfffcc 	andi	r2,r2,65535
100009ec:	10000426 	beq	r2,zero,10000a00 <main+0x3d8>
		{
			printf("[INFO]: full speed device\n");
100009f0:	01040074 	movhi	r4,4097
100009f4:	2111db04 	addi	r4,r4,18284
100009f8:	00055100 	call	10005510 <puts>
100009fc:	00000306 	br	10000a0c <main+0x3e4>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10000a00:	01040074 	movhi	r4,4097
10000a04:	2111e204 	addi	r4,r4,18312
10000a08:	00055100 	call	10005510 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10000a0c:	00015680 	call	10001568 <_Z13UsbSetAddressv>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a10:	010000c4 	movi	r4,3
10000a14:	00005c00 	call	100005c0 <_Z7IO_readh>
10000a18:	10bfffcc 	andi	r2,r2,65535
10000a1c:	1080040c 	andi	r2,r2,16
10000a20:	1005003a 	cmpeq	r2,r2,zero
10000a24:	10803fcc 	andi	r2,r2,255
10000a28:	10000426 	beq	r2,zero,10000a3c <main+0x414>
	{
		UsbSetAddress();
10000a2c:	00015680 	call	10001568 <_Z13UsbSetAddressv>
		usleep(10*1000);
10000a30:	0109c404 	movi	r4,10000
10000a34:	00126e40 	call	100126e4 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a38:	003ff506 	br	10000a10 <__alt_data_end+0xf8000a10>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000a3c:	00024080 	call	10002408 <_Z17UsbWaitTDListDonev>

	IO_write(HPI_ADDR,0x0506); // i
10000a40:	01414184 	movi	r5,1286
10000a44:	01000084 	movi	r4,2
10000a48:	00005500 	call	10000550 <_Z8IO_writeht>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000a4c:	0009883a 	mov	r4,zero
10000a50:	00005c00 	call	100005c0 <_Z7IO_readh>
10000a54:	10bfffcc 	andi	r2,r2,65535
10000a58:	100b883a 	mov	r5,r2
10000a5c:	01040074 	movhi	r4,4097
10000a60:	2111e904 	addi	r4,r4,18340
10000a64:	00054140 	call	10005414 <printf>

	IO_write(HPI_ADDR,0x0508); // n
10000a68:	01414204 	movi	r5,1288
10000a6c:	01000084 	movi	r4,2
10000a70:	00005500 	call	10000550 <_Z8IO_writeht>
	usb_ctl_val = IO_read(HPI_DATA);
10000a74:	0009883a 	mov	r4,zero
10000a78:	00005c00 	call	100005c0 <_Z7IO_readh>
10000a7c:	e0bff60d 	sth	r2,-40(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10000a80:	e0bff60b 	ldhu	r2,-40(fp)
10000a84:	100b883a 	mov	r5,r2
10000a88:	01040074 	movhi	r4,4097
10000a8c:	2111f404 	addi	r4,r4,18384
10000a90:	00054140 	call	10005414 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10000a94:	e0bff60b 	ldhu	r2,-40(fp)
10000a98:	108000e0 	cmpeqi	r2,r2,3
10000a9c:	1000031e 	bne	r2,zero,10000aac <main+0x484>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000aa0:	000248c0 	call	1000248c <_Z14UsbGetRetryCntv>
10000aa4:	e0bff60d 	sth	r2,-40(fp)

		goto USB_HOT_PLUG;
10000aa8:	003eed06 	br	10000660 <__alt_data_end+0xf8000660>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
10000aac:	01040074 	movhi	r4,4097
10000ab0:	21120004 	addi	r4,r4,18432
10000ab4:	00055100 	call	10005510 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10000ab8:	00016680 	call	10001668 <_Z17UsbGetDeviceDesc1v>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000abc:	010000c4 	movi	r4,3
10000ac0:	00005c00 	call	100005c0 <_Z7IO_readh>
10000ac4:	10bfffcc 	andi	r2,r2,65535
10000ac8:	1080040c 	andi	r2,r2,16
10000acc:	1005003a 	cmpeq	r2,r2,zero
10000ad0:	10803fcc 	andi	r2,r2,255
10000ad4:	10000426 	beq	r2,zero,10000ae8 <main+0x4c0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
10000ad8:	00016680 	call	10001668 <_Z17UsbGetDeviceDesc1v>
		usleep(10*1000);
10000adc:	0109c404 	movi	r4,10000
10000ae0:	00126e40 	call	100126e4 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ae4:	003ff506 	br	10000abc <__alt_data_end+0xf8000abc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000ae8:	00024080 	call	10002408 <_Z17UsbWaitTDListDonev>

	IO_write(HPI_ADDR,0x0506);
10000aec:	01414184 	movi	r5,1286
10000af0:	01000084 	movi	r4,2
10000af4:	00005500 	call	10000550 <_Z8IO_writeht>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000af8:	0009883a 	mov	r4,zero
10000afc:	00005c00 	call	100005c0 <_Z7IO_readh>
10000b00:	10bfffcc 	andi	r2,r2,65535
10000b04:	100b883a 	mov	r5,r2
10000b08:	01040074 	movhi	r4,4097
10000b0c:	21120f04 	addi	r4,r4,18492
10000b10:	00054140 	call	10005414 <printf>

	IO_write(HPI_ADDR,0x0508);
10000b14:	01414204 	movi	r5,1288
10000b18:	01000084 	movi	r4,2
10000b1c:	00005500 	call	10000550 <_Z8IO_writeht>
	usb_ctl_val = IO_read(HPI_DATA);
10000b20:	0009883a 	mov	r4,zero
10000b24:	00005c00 	call	100005c0 <_Z7IO_readh>
10000b28:	e0bff60d 	sth	r2,-40(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000b2c:	e0bff60b 	ldhu	r2,-40(fp)
10000b30:	100b883a 	mov	r5,r2
10000b34:	01040074 	movhi	r4,4097
10000b38:	21121a04 	addi	r4,r4,18536
10000b3c:	00054140 	call	10005414 <printf>
	while (usb_ctl_val != 0x03)
10000b40:	e0bff60b 	ldhu	r2,-40(fp)
10000b44:	108000e0 	cmpeqi	r2,r2,3
10000b48:	1000061e 	bne	r2,zero,10000b64 <main+0x53c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000b4c:	000248c0 	call	1000248c <_Z14UsbGetRetryCntv>
10000b50:	e0bff60d 	sth	r2,-40(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000b54:	01040074 	movhi	r4,4097
10000b58:	21122604 	addi	r4,r4,18584
10000b5c:	00055100 	call	10005510 <puts>
		goto USB_HOT_PLUG;
10000b60:	003ebf06 	br	10000660 <__alt_data_end+0xf8000660>
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10000b64:	01040074 	movhi	r4,4097
10000b68:	21122f04 	addi	r4,r4,18620
10000b6c:	00055100 	call	10005510 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
10000b70:	00017b00 	call	100017b0 <_Z17UsbGetDeviceDesc2v>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b74:	010000c4 	movi	r4,3
10000b78:	00005c00 	call	100005c0 <_Z7IO_readh>
10000b7c:	10bfffcc 	andi	r2,r2,65535
10000b80:	1080040c 	andi	r2,r2,16
10000b84:	1005003a 	cmpeq	r2,r2,zero
10000b88:	10803fcc 	andi	r2,r2,255
10000b8c:	10000426 	beq	r2,zero,10000ba0 <main+0x578>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10000b90:	00017b00 	call	100017b0 <_Z17UsbGetDeviceDesc2v>
		usleep(10*1000);
10000b94:	0109c404 	movi	r4,10000
10000b98:	00126e40 	call	100126e4 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b9c:	003ff506 	br	10000b74 <__alt_data_end+0xf8000b74>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000ba0:	00024080 	call	10002408 <_Z17UsbWaitTDListDonev>

	IO_write(HPI_ADDR,0x0506);
10000ba4:	01414184 	movi	r5,1286
10000ba8:	01000084 	movi	r4,2
10000bac:	00005500 	call	10000550 <_Z8IO_writeht>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000bb0:	0009883a 	mov	r4,zero
10000bb4:	00005c00 	call	100005c0 <_Z7IO_readh>
10000bb8:	10bfffcc 	andi	r2,r2,65535
10000bbc:	100b883a 	mov	r5,r2
10000bc0:	01040074 	movhi	r4,4097
10000bc4:	21120f04 	addi	r4,r4,18492
10000bc8:	00054140 	call	10005414 <printf>

	IO_write(HPI_ADDR,0x0508);
10000bcc:	01414204 	movi	r5,1288
10000bd0:	01000084 	movi	r4,2
10000bd4:	00005500 	call	10000550 <_Z8IO_writeht>
	usb_ctl_val = IO_read(HPI_DATA);
10000bd8:	0009883a 	mov	r4,zero
10000bdc:	00005c00 	call	100005c0 <_Z7IO_readh>
10000be0:	e0bff60d 	sth	r2,-40(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000be4:	e0bff60b 	ldhu	r2,-40(fp)
10000be8:	100b883a 	mov	r5,r2
10000bec:	01040074 	movhi	r4,4097
10000bf0:	21121a04 	addi	r4,r4,18536
10000bf4:	00054140 	call	10005414 <printf>
	while (usb_ctl_val != 0x03)
10000bf8:	e0bff60b 	ldhu	r2,-40(fp)
10000bfc:	108000e0 	cmpeqi	r2,r2,3
10000c00:	1000061e 	bne	r2,zero,10000c1c <main+0x5f4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000c04:	000248c0 	call	1000248c <_Z14UsbGetRetryCntv>
10000c08:	e0bff60d 	sth	r2,-40(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000c0c:	01040074 	movhi	r4,4097
10000c10:	21122604 	addi	r4,r4,18584
10000c14:	00055100 	call	10005510 <puts>
		goto USB_HOT_PLUG;
10000c18:	003e9106 	br	10000660 <__alt_data_end+0xf8000660>
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10000c1c:	01040074 	movhi	r4,4097
10000c20:	21124304 	addi	r4,r4,18700
10000c24:	00055100 	call	10005510 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10000c28:	00019880 	call	10001988 <_Z17UsbGetConfigDesc1v>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c2c:	010000c4 	movi	r4,3
10000c30:	00005c00 	call	100005c0 <_Z7IO_readh>
10000c34:	10bfffcc 	andi	r2,r2,65535
10000c38:	1080040c 	andi	r2,r2,16
10000c3c:	1005003a 	cmpeq	r2,r2,zero
10000c40:	10803fcc 	andi	r2,r2,255
10000c44:	10000426 	beq	r2,zero,10000c58 <main+0x630>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10000c48:	00019880 	call	10001988 <_Z17UsbGetConfigDesc1v>
		usleep(10*1000);
10000c4c:	0109c404 	movi	r4,10000
10000c50:	00126e40 	call	100126e4 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c54:	003ff506 	br	10000c2c <__alt_data_end+0xf8000c2c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000c58:	00024080 	call	10002408 <_Z17UsbWaitTDListDonev>

	IO_write(HPI_ADDR,0x0506);
10000c5c:	01414184 	movi	r5,1286
10000c60:	01000084 	movi	r4,2
10000c64:	00005500 	call	10000550 <_Z8IO_writeht>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c68:	0009883a 	mov	r4,zero
10000c6c:	00005c00 	call	100005c0 <_Z7IO_readh>
10000c70:	10bfffcc 	andi	r2,r2,65535
10000c74:	100b883a 	mov	r5,r2
10000c78:	01040074 	movhi	r4,4097
10000c7c:	21125504 	addi	r4,r4,18772
10000c80:	00054140 	call	10005414 <printf>

	IO_write(HPI_ADDR,0x0508);
10000c84:	01414204 	movi	r5,1288
10000c88:	01000084 	movi	r4,2
10000c8c:	00005500 	call	10000550 <_Z8IO_writeht>
	usb_ctl_val = IO_read(HPI_DATA);
10000c90:	0009883a 	mov	r4,zero
10000c94:	00005c00 	call	100005c0 <_Z7IO_readh>
10000c98:	e0bff60d 	sth	r2,-40(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
10000c9c:	e0bff60b 	ldhu	r2,-40(fp)
10000ca0:	100b883a 	mov	r5,r2
10000ca4:	01040074 	movhi	r4,4097
10000ca8:	21126004 	addi	r4,r4,18816
10000cac:	00054140 	call	10005414 <printf>
	while (usb_ctl_val != 0x03)
10000cb0:	e0bff60b 	ldhu	r2,-40(fp)
10000cb4:	108000e0 	cmpeqi	r2,r2,3
10000cb8:	1000061e 	bne	r2,zero,10000cd4 <main+0x6ac>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000cbc:	000248c0 	call	1000248c <_Z14UsbGetRetryCntv>
10000cc0:	e0bff60d 	sth	r2,-40(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000cc4:	01040074 	movhi	r4,4097
10000cc8:	21122604 	addi	r4,r4,18584
10000ccc:	00055100 	call	10005510 <puts>
		goto USB_HOT_PLUG;
10000cd0:	003e6306 	br	10000660 <__alt_data_end+0xf8000660>
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000cd4:	01040074 	movhi	r4,4097
10000cd8:	21126c04 	addi	r4,r4,18864
10000cdc:	00055100 	call	10005510 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10000ce0:	0001b180 	call	10001b18 <_Z17UsbGetConfigDesc2v>

	usleep(100*1000);
10000ce4:	010000b4 	movhi	r4,2
10000ce8:	2121a804 	addi	r4,r4,-31072
10000cec:	00126e40 	call	100126e4 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000cf0:	010000c4 	movi	r4,3
10000cf4:	00005c00 	call	100005c0 <_Z7IO_readh>
10000cf8:	10bfffcc 	andi	r2,r2,65535
10000cfc:	1080040c 	andi	r2,r2,16
10000d00:	1005003a 	cmpeq	r2,r2,zero
10000d04:	10803fcc 	andi	r2,r2,255
10000d08:	10000426 	beq	r2,zero,10000d1c <main+0x6f4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
10000d0c:	0001b180 	call	10001b18 <_Z17UsbGetConfigDesc2v>
		usleep(10*1000);
10000d10:	0109c404 	movi	r4,10000
10000d14:	00126e40 	call	100126e4 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d18:	003ff506 	br	10000cf0 <__alt_data_end+0xf8000cf0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d1c:	00024080 	call	10002408 <_Z17UsbWaitTDListDonev>

	IO_write(HPI_ADDR,0x0506);
10000d20:	01414184 	movi	r5,1286
10000d24:	01000084 	movi	r4,2
10000d28:	00005500 	call	10000550 <_Z8IO_writeht>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d2c:	0009883a 	mov	r4,zero
10000d30:	00005c00 	call	100005c0 <_Z7IO_readh>
10000d34:	10bfffcc 	andi	r2,r2,65535
10000d38:	100b883a 	mov	r5,r2
10000d3c:	01040074 	movhi	r4,4097
10000d40:	21127f04 	addi	r4,r4,18940
10000d44:	00054140 	call	10005414 <printf>

	IO_write(HPI_ADDR,0x0508);
10000d48:	01414204 	movi	r5,1288
10000d4c:	01000084 	movi	r4,2
10000d50:	00005500 	call	10000550 <_Z8IO_writeht>
	usb_ctl_val = IO_read(HPI_DATA);
10000d54:	0009883a 	mov	r4,zero
10000d58:	00005c00 	call	100005c0 <_Z7IO_readh>
10000d5c:	e0bff60d 	sth	r2,-40(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000d60:	e0bff60b 	ldhu	r2,-40(fp)
10000d64:	100b883a 	mov	r5,r2
10000d68:	01040074 	movhi	r4,4097
10000d6c:	21128a04 	addi	r4,r4,18984
10000d70:	00054140 	call	10005414 <printf>
	while (usb_ctl_val != 0x03)
10000d74:	e0bff60b 	ldhu	r2,-40(fp)
10000d78:	108000e0 	cmpeqi	r2,r2,3
10000d7c:	1000061e 	bne	r2,zero,10000d98 <main+0x770>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d80:	000248c0 	call	1000248c <_Z14UsbGetRetryCntv>
10000d84:	e0bff60d 	sth	r2,-40(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000d88:	01040074 	movhi	r4,4097
10000d8c:	21122604 	addi	r4,r4,18584
10000d90:	00055100 	call	10005510 <puts>
		goto USB_HOT_PLUG;
10000d94:	003e3206 	br	10000660 <__alt_data_end+0xf8000660>
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000d98:	01040074 	movhi	r4,4097
10000d9c:	21129604 	addi	r4,r4,19032
10000da0:	00055100 	call	10005510 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000da4:	01415b04 	movi	r5,1388
10000da8:	01000084 	movi	r4,2
10000dac:	00005500 	call	10000550 <_Z8IO_writeht>
	code = IO_read(HPI_DATA);
10000db0:	0009883a 	mov	r4,zero
10000db4:	00005c00 	call	100005c0 <_Z7IO_readh>
10000db8:	e0bff98d 	sth	r2,-26(fp)
	code = code & 0x003;
10000dbc:	e0bff98b 	ldhu	r2,-26(fp)
10000dc0:	108000cc 	andi	r2,r2,3
10000dc4:	e0bff98d 	sth	r2,-26(fp)
	printf("\ncode = %x\n", code);
10000dc8:	e0bff98b 	ldhu	r2,-26(fp)
10000dcc:	100b883a 	mov	r5,r2
10000dd0:	01040074 	movhi	r4,4097
10000dd4:	2112a904 	addi	r4,r4,19108
10000dd8:	00054140 	call	10005414 <printf>

	if (code == 0x01)
10000ddc:	e0bff98b 	ldhu	r2,-26(fp)
10000de0:	10800058 	cmpnei	r2,r2,1
10000de4:	1000041e 	bne	r2,zero,10000df8 <main+0x7d0>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000de8:	01040074 	movhi	r4,4097
10000dec:	2112ac04 	addi	r4,r4,19120
10000df0:	00055100 	call	10005510 <puts>
10000df4:	00000306 	br	10000e04 <main+0x7dc>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000df8:	01040074 	movhi	r4,4097
10000dfc:	2112bb04 	addi	r4,r4,19180
10000e00:	00055100 	call	10005510 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000e04:	01415d84 	movi	r5,1398
10000e08:	01000084 	movi	r4,2
10000e0c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x073F);
10000e10:	0141cfc4 	movi	r5,1855
10000e14:	0009883a 	mov	r4,zero
10000e18:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x8105);
10000e1c:	01604154 	movui	r5,33029
10000e20:	0009883a 	mov	r4,zero
10000e24:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0003);
10000e28:	014000c4 	movi	r5,3
10000e2c:	0009883a 	mov	r4,zero
10000e30:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008);
10000e34:	01400204 	movi	r5,8
10000e38:	0009883a 	mov	r4,zero
10000e3c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0xAC0A);
10000e40:	016b0294 	movui	r5,44042
10000e44:	0009883a 	mov	r4,zero
10000e48:	00005500 	call	10000550 <_Z8IO_writeht>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000e4c:	01415d84 	movi	r5,1398
10000e50:	01006c04 	movi	r4,432
10000e54:	00014180 	call	10001418 <_Z8UsbWritett>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000e58:	01415f04 	movi	r5,1404
10000e5c:	01000084 	movi	r4,2
10000e60:	00005500 	call	10000550 <_Z8IO_writeht>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000e64:	0009883a 	mov	r4,zero
10000e68:	00005c00 	call	100005c0 <_Z7IO_readh>
10000e6c:	e0bffa05 	stb	r2,-24(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000e70:	e0bffa03 	ldbu	r2,-24(fp)
10000e74:	100b883a 	mov	r5,r2
10000e78:	01040074 	movhi	r4,4097
10000e7c:	2112c404 	addi	r4,r4,19216
10000e80:	00054140 	call	10005414 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000e84:	0001d800 	call	10001d80 <_Z12UsbSetConfigv>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000e88:	010000c4 	movi	r4,3
10000e8c:	00005c00 	call	100005c0 <_Z7IO_readh>
10000e90:	10bfffcc 	andi	r2,r2,65535
10000e94:	1080040c 	andi	r2,r2,16
10000e98:	1005003a 	cmpeq	r2,r2,zero
10000e9c:	10803fcc 	andi	r2,r2,255
10000ea0:	10000426 	beq	r2,zero,10000eb4 <main+0x88c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000ea4:	0001d800 	call	10001d80 <_Z12UsbSetConfigv>
		usleep(10*1000);
10000ea8:	0109c404 	movi	r4,10000
10000eac:	00126e40 	call	100126e4 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000eb0:	003ff506 	br	10000e88 <__alt_data_end+0xf8000e88>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000eb4:	00024080 	call	10002408 <_Z17UsbWaitTDListDonev>

	IO_write(HPI_ADDR,0x0506);
10000eb8:	01414184 	movi	r5,1286
10000ebc:	01000084 	movi	r4,2
10000ec0:	00005500 	call	10000550 <_Z8IO_writeht>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000ec4:	0009883a 	mov	r4,zero
10000ec8:	00005c00 	call	100005c0 <_Z7IO_readh>
10000ecc:	10bfffcc 	andi	r2,r2,65535
10000ed0:	100b883a 	mov	r5,r2
10000ed4:	01040074 	movhi	r4,4097
10000ed8:	2112ce04 	addi	r4,r4,19256
10000edc:	00054140 	call	10005414 <printf>

	IO_write(HPI_ADDR,0x0508);
10000ee0:	01414204 	movi	r5,1288
10000ee4:	01000084 	movi	r4,2
10000ee8:	00005500 	call	10000550 <_Z8IO_writeht>
	usb_ctl_val = IO_read(HPI_DATA);
10000eec:	0009883a 	mov	r4,zero
10000ef0:	00005c00 	call	100005c0 <_Z7IO_readh>
10000ef4:	e0bff60d 	sth	r2,-40(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000ef8:	e0bff60b 	ldhu	r2,-40(fp)
10000efc:	100b883a 	mov	r5,r2
10000f00:	01040074 	movhi	r4,4097
10000f04:	2112d904 	addi	r4,r4,19300
10000f08:	00054140 	call	10005414 <printf>
	while (usb_ctl_val != 0x03)
10000f0c:	e0bff60b 	ldhu	r2,-40(fp)
10000f10:	108000e0 	cmpeqi	r2,r2,3
10000f14:	1000061e 	bne	r2,zero,10000f30 <main+0x908>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000f18:	000248c0 	call	1000248c <_Z14UsbGetRetryCntv>
10000f1c:	e0bff60d 	sth	r2,-40(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000f20:	01040074 	movhi	r4,4097
10000f24:	21122604 	addi	r4,r4,18584
10000f28:	00055100 	call	10005510 <puts>
		goto USB_HOT_PLUG;
10000f2c:	003dcc06 	br	10000660 <__alt_data_end+0xf8000660>
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000f30:	01040074 	movhi	r4,4097
10000f34:	2112e504 	addi	r4,r4,19348
10000f38:	00055100 	call	10005510 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000f3c:	0001e800 	call	10001e80 <_Z15UsbClassRequestv>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000f40:	010000c4 	movi	r4,3
10000f44:	00005c00 	call	100005c0 <_Z7IO_readh>
10000f48:	10bfffcc 	andi	r2,r2,65535
10000f4c:	1080040c 	andi	r2,r2,16
10000f50:	1005003a 	cmpeq	r2,r2,zero
10000f54:	10803fcc 	andi	r2,r2,255
10000f58:	10000426 	beq	r2,zero,10000f6c <main+0x944>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000f5c:	0001e800 	call	10001e80 <_Z15UsbClassRequestv>
		usleep(10*1000);
10000f60:	0109c404 	movi	r4,10000
10000f64:	00126e40 	call	100126e4 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000f68:	003ff506 	br	10000f40 <__alt_data_end+0xf8000f40>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000f6c:	00024080 	call	10002408 <_Z17UsbWaitTDListDonev>

	IO_write(HPI_ADDR,0x0506);
10000f70:	01414184 	movi	r5,1286
10000f74:	01000084 	movi	r4,2
10000f78:	00005500 	call	10000550 <_Z8IO_writeht>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000f7c:	0009883a 	mov	r4,zero
10000f80:	00005c00 	call	100005c0 <_Z7IO_readh>
10000f84:	10bfffcc 	andi	r2,r2,65535
10000f88:	100b883a 	mov	r5,r2
10000f8c:	01040074 	movhi	r4,4097
10000f90:	2112f704 	addi	r4,r4,19420
10000f94:	00054140 	call	10005414 <printf>

	IO_write(HPI_ADDR,0x0508);
10000f98:	01414204 	movi	r5,1288
10000f9c:	01000084 	movi	r4,2
10000fa0:	00005500 	call	10000550 <_Z8IO_writeht>
	usb_ctl_val = IO_read(HPI_DATA);
10000fa4:	0009883a 	mov	r4,zero
10000fa8:	00005c00 	call	100005c0 <_Z7IO_readh>
10000fac:	e0bff60d 	sth	r2,-40(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000fb0:	e0bff60b 	ldhu	r2,-40(fp)
10000fb4:	100b883a 	mov	r5,r2
10000fb8:	01040074 	movhi	r4,4097
10000fbc:	21130204 	addi	r4,r4,19464
10000fc0:	00054140 	call	10005414 <printf>
	while (usb_ctl_val != 0x03)
10000fc4:	e0bff60b 	ldhu	r2,-40(fp)
10000fc8:	108000e0 	cmpeqi	r2,r2,3
10000fcc:	1000061e 	bne	r2,zero,10000fe8 <main+0x9c0>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000fd0:	000248c0 	call	1000248c <_Z14UsbGetRetryCntv>
10000fd4:	e0bff60d 	sth	r2,-40(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000fd8:	01040074 	movhi	r4,4097
10000fdc:	21122604 	addi	r4,r4,18584
10000fe0:	00055100 	call	10005510 <puts>
		goto USB_HOT_PLUG;
10000fe4:	003d9e06 	br	10000660 <__alt_data_end+0xf8000660>
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000fe8:	01040074 	movhi	r4,4097
10000fec:	21130e04 	addi	r4,r4,19512
10000ff0:	00055100 	call	10005510 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000ff4:	0001f800 	call	10001f80 <_Z13UsbGetHidDescv>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ff8:	010000c4 	movi	r4,3
10000ffc:	00005c00 	call	100005c0 <_Z7IO_readh>
10001000:	10bfffcc 	andi	r2,r2,65535
10001004:	1080040c 	andi	r2,r2,16
10001008:	1005003a 	cmpeq	r2,r2,zero
1000100c:	10803fcc 	andi	r2,r2,255
10001010:	10000426 	beq	r2,zero,10001024 <main+0x9fc>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10001014:	0001f800 	call	10001f80 <_Z13UsbGetHidDescv>
		usleep(10*1000);
10001018:	0109c404 	movi	r4,10000
1000101c:	00126e40 	call	100126e4 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001020:	003ff506 	br	10000ff8 <__alt_data_end+0xf8000ff8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10001024:	00024080 	call	10002408 <_Z17UsbWaitTDListDonev>

	IO_write(HPI_ADDR,0x0506);
10001028:	01414184 	movi	r5,1286
1000102c:	01000084 	movi	r4,2
10001030:	00005500 	call	10000550 <_Z8IO_writeht>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10001034:	0009883a 	mov	r4,zero
10001038:	00005c00 	call	100005c0 <_Z7IO_readh>
1000103c:	10bfffcc 	andi	r2,r2,65535
10001040:	100b883a 	mov	r5,r2
10001044:	01040074 	movhi	r4,4097
10001048:	2112f704 	addi	r4,r4,19420
1000104c:	00054140 	call	10005414 <printf>

	IO_write(HPI_ADDR,0x0508);
10001050:	01414204 	movi	r5,1288
10001054:	01000084 	movi	r4,2
10001058:	00005500 	call	10000550 <_Z8IO_writeht>
	usb_ctl_val = IO_read(HPI_DATA);
1000105c:	0009883a 	mov	r4,zero
10001060:	00005c00 	call	100005c0 <_Z7IO_readh>
10001064:	e0bff60d 	sth	r2,-40(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10001068:	e0bff60b 	ldhu	r2,-40(fp)
1000106c:	100b883a 	mov	r5,r2
10001070:	01040074 	movhi	r4,4097
10001074:	21130204 	addi	r4,r4,19464
10001078:	00054140 	call	10005414 <printf>
	while (usb_ctl_val != 0x03)
1000107c:	e0bff60b 	ldhu	r2,-40(fp)
10001080:	108000e0 	cmpeqi	r2,r2,3
10001084:	1000061e 	bne	r2,zero,100010a0 <main+0xa78>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001088:	000248c0 	call	1000248c <_Z14UsbGetRetryCntv>
1000108c:	e0bff60d 	sth	r2,-40(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10001090:	01040074 	movhi	r4,4097
10001094:	21122604 	addi	r4,r4,18584
10001098:	00055100 	call	10005510 <puts>
		goto USB_HOT_PLUG;
1000109c:	003d7006 	br	10000660 <__alt_data_end+0xf8000660>
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
100010a0:	01040074 	movhi	r4,4097
100010a4:	21132004 	addi	r4,r4,19584
100010a8:	00055100 	call	10005510 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
100010ac:	00020c80 	call	100020c8 <_Z16UsbGetReportDescv>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100010b0:	010000c4 	movi	r4,3
100010b4:	00005c00 	call	100005c0 <_Z7IO_readh>
100010b8:	10bfffcc 	andi	r2,r2,65535
100010bc:	1080040c 	andi	r2,r2,16
100010c0:	1005003a 	cmpeq	r2,r2,zero
100010c4:	10803fcc 	andi	r2,r2,255
100010c8:	10000426 	beq	r2,zero,100010dc <main+0xab4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
100010cc:	00020c80 	call	100020c8 <_Z16UsbGetReportDescv>
		usleep(10*1000);
100010d0:	0109c404 	movi	r4,10000
100010d4:	00126e40 	call	100126e4 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100010d8:	003ff506 	br	100010b0 <__alt_data_end+0xf80010b0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100010dc:	00024080 	call	10002408 <_Z17UsbWaitTDListDonev>

	IO_write(HPI_ADDR,0x0506);
100010e0:	01414184 	movi	r5,1286
100010e4:	01000084 	movi	r4,2
100010e8:	00005500 	call	10000550 <_Z8IO_writeht>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
100010ec:	0009883a 	mov	r4,zero
100010f0:	00005c00 	call	100005c0 <_Z7IO_readh>
100010f4:	10bfffcc 	andi	r2,r2,65535
100010f8:	100b883a 	mov	r5,r2
100010fc:	01040074 	movhi	r4,4097
10001100:	21133404 	addi	r4,r4,19664
10001104:	00054140 	call	10005414 <printf>

	IO_write(HPI_ADDR,0x0508);
10001108:	01414204 	movi	r5,1288
1000110c:	01000084 	movi	r4,2
10001110:	00005500 	call	10000550 <_Z8IO_writeht>
	usb_ctl_val = IO_read(HPI_DATA);
10001114:	0009883a 	mov	r4,zero
10001118:	00005c00 	call	100005c0 <_Z7IO_readh>
1000111c:	e0bff60d 	sth	r2,-40(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10001120:	e0bff60b 	ldhu	r2,-40(fp)
10001124:	100b883a 	mov	r5,r2
10001128:	01040074 	movhi	r4,4097
1000112c:	21134004 	addi	r4,r4,19712
10001130:	00054140 	call	10005414 <printf>
	while (usb_ctl_val != 0x03)
10001134:	e0bff60b 	ldhu	r2,-40(fp)
10001138:	108000e0 	cmpeqi	r2,r2,3
1000113c:	1000061e 	bne	r2,zero,10001158 <main+0xb30>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001140:	000248c0 	call	1000248c <_Z14UsbGetRetryCntv>
10001144:	e0bff60d 	sth	r2,-40(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10001148:	01040074 	movhi	r4,4097
1000114c:	21122604 	addi	r4,r4,18584
10001150:	00055100 	call	10005510 <puts>
		goto USB_HOT_PLUG;
10001154:	003d4206 	br	10000660 <__alt_data_end+0xf8000660>
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10001158:	01040074 	movhi	r4,4097
1000115c:	21134c04 	addi	r4,r4,19760
10001160:	00055100 	call	10005510 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10001164:	0109c404 	movi	r4,10000
10001168:	00126e40 	call	100126e4 <usleep>
	while(1)
	{
		toggle++;
1000116c:	e0bff683 	ldbu	r2,-38(fp)
10001170:	10800044 	addi	r2,r2,1
10001174:	e0bff685 	stb	r2,-38(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10001178:	01414004 	movi	r5,1280
1000117c:	01000084 	movi	r4,2
10001180:	00005500 	call	10000550 <_Z8IO_writeht>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10001184:	01414704 	movi	r5,1308
10001188:	0009883a 	mov	r4,zero
1000118c:	00005500 	call	10000550 <_Z8IO_writeht>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10001190:	e0bffa03 	ldbu	r2,-24(fp)
10001194:	108003cc 	andi	r2,r2,15
10001198:	100b883a 	mov	r5,r2
1000119c:	0009883a 	mov	r4,zero
100011a0:	00005500 	call	10000550 <_Z8IO_writeht>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
100011a4:	0140a444 	movi	r5,657
100011a8:	0009883a 	mov	r4,zero
100011ac:	00005500 	call	10000550 <_Z8IO_writeht>
		if(toggle%2)
100011b0:	e0bff683 	ldbu	r2,-38(fp)
100011b4:	1080004c 	andi	r2,r2,1
100011b8:	10000426 	beq	r2,zero,100011cc <main+0xba4>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
100011bc:	01400044 	movi	r5,1
100011c0:	0009883a 	mov	r4,zero
100011c4:	00005500 	call	10000550 <_Z8IO_writeht>
100011c8:	00000306 	br	100011d8 <main+0xbb0>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
100011cc:	01401044 	movi	r5,65
100011d0:	0009883a 	mov	r4,zero
100011d4:	00005500 	call	10000550 <_Z8IO_writeht>
		}
		IO_write(HPI_DATA,0x0013);//8
100011d8:	014004c4 	movi	r5,19
100011dc:	0009883a 	mov	r4,zero
100011e0:	00005500 	call	10000550 <_Z8IO_writeht>
		IO_write(HPI_DATA,0x0000);//a
100011e4:	000b883a 	mov	r5,zero
100011e8:	0009883a 	mov	r4,zero
100011ec:	00005500 	call	10000550 <_Z8IO_writeht>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100011f0:	01414004 	movi	r5,1280
100011f4:	01006c04 	movi	r4,432
100011f8:	00014180 	call	10001418 <_Z8UsbWritett>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100011fc:	010000c4 	movi	r4,3
10001200:	00005c00 	call	100005c0 <_Z7IO_readh>
10001204:	10bfffcc 	andi	r2,r2,65535
10001208:	1080040c 	andi	r2,r2,16
1000120c:	1005003a 	cmpeq	r2,r2,zero
10001210:	10803fcc 	andi	r2,r2,255
10001214:	10002426 	beq	r2,zero,100012a8 <main+0xc80>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10001218:	01414004 	movi	r5,1280
1000121c:	01000084 	movi	r4,2
10001220:	00005500 	call	10000550 <_Z8IO_writeht>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10001224:	01414704 	movi	r5,1308
10001228:	0009883a 	mov	r4,zero
1000122c:	00005500 	call	10000550 <_Z8IO_writeht>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10001230:	e0bffa03 	ldbu	r2,-24(fp)
10001234:	108003cc 	andi	r2,r2,15
10001238:	100b883a 	mov	r5,r2
1000123c:	0009883a 	mov	r4,zero
10001240:	00005500 	call	10000550 <_Z8IO_writeht>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10001244:	0140a444 	movi	r5,657
10001248:	0009883a 	mov	r4,zero
1000124c:	00005500 	call	10000550 <_Z8IO_writeht>
			if(toggle%2)
10001250:	e0bff683 	ldbu	r2,-38(fp)
10001254:	1080004c 	andi	r2,r2,1
10001258:	10000426 	beq	r2,zero,1000126c <main+0xc44>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
1000125c:	01400044 	movi	r5,1
10001260:	0009883a 	mov	r4,zero
10001264:	00005500 	call	10000550 <_Z8IO_writeht>
10001268:	00000306 	br	10001278 <main+0xc50>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
1000126c:	01401044 	movi	r5,65
10001270:	0009883a 	mov	r4,zero
10001274:	00005500 	call	10000550 <_Z8IO_writeht>
			}
			IO_write(HPI_DATA,0x0013);//8
10001278:	014004c4 	movi	r5,19
1000127c:	0009883a 	mov	r4,zero
10001280:	00005500 	call	10000550 <_Z8IO_writeht>
			IO_write(HPI_DATA,0x0000);//
10001284:	000b883a 	mov	r5,zero
10001288:	0009883a 	mov	r4,zero
1000128c:	00005500 	call	10000550 <_Z8IO_writeht>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001290:	01414004 	movi	r5,1280
10001294:	01006c04 	movi	r4,432
10001298:	00014180 	call	10001418 <_Z8UsbWritett>
			usleep(10*1000);
1000129c:	0109c404 	movi	r4,10000
100012a0:	00126e40 	call	100126e4 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100012a4:	003fd506 	br	100011fc <__alt_data_end+0xf80011fc>
			IO_write(HPI_DATA,0x0000);//
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
100012a8:	00024080 	call	10002408 <_Z17UsbWaitTDListDonev>
100012ac:	e0bff60d 	sth	r2,-40(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.
		keycode = UsbRead(0x051e);
100012b0:	01014784 	movi	r4,1310
100012b4:	00014700 	call	10001470 <_Z7UsbReadt>
100012b8:	10bfffcc 	andi	r2,r2,65535
100012bc:	e0bff815 	stw	r2,-32(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
100012c0:	e17ff817 	ldw	r5,-32(fp)
100012c4:	01040074 	movhi	r4,4097
100012c8:	21136004 	addi	r4,r4,19840
100012cc:	00054140 	call	10005414 <printf>
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		*keycode_base = keycode & 0xff; 
100012d0:	00805c04 	movi	r2,368
100012d4:	e0fff817 	ldw	r3,-32(fp)
100012d8:	10c00005 	stb	r3,0(r2)

		usleep(200);//usleep(5000);
100012dc:	01003204 	movi	r4,200
100012e0:	00126e40 	call	100126e4 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
100012e4:	d0a6e30b 	ldhu	r2,-25716(gp)
100012e8:	10bfffcc 	andi	r2,r2,65535
100012ec:	1009883a 	mov	r4,r2
100012f0:	00014700 	call	10001470 <_Z7UsbReadt>
100012f4:	e0bff60d 	sth	r2,-40(fp)

		if(!(usb_ctl_val & no_device))
100012f8:	d0a6e38b 	ldhu	r2,-25714(gp)
100012fc:	e0fff60b 	ldhu	r3,-40(fp)
10001300:	1884703a 	and	r2,r3,r2
10001304:	10bfffcc 	andi	r2,r2,65535
10001308:	1000201e 	bne	r2,zero,1000138c <main+0xd64>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
1000130c:	e03ff6c5 	stb	zero,-37(fp)
10001310:	e0bff6c3 	ldbu	r2,-37(fp)
10001314:	108001e8 	cmpgeui	r2,r2,7
10001318:	1000111e 	bne	r2,zero,10001360 <main+0xd38>
			{
				usleep(5*1000);
1000131c:	0104e204 	movi	r4,5000
10001320:	00126e40 	call	100126e4 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
10001324:	d0a6e30b 	ldhu	r2,-25716(gp)
10001328:	10bfffcc 	andi	r2,r2,65535
1000132c:	1009883a 	mov	r4,r2
10001330:	00014700 	call	10001470 <_Z7UsbReadt>
10001334:	e0bff60d 	sth	r2,-40(fp)
				if(usb_ctl_val & no_device) break;
10001338:	d0a6e38b 	ldhu	r2,-25714(gp)
1000133c:	e0fff60b 	ldhu	r3,-40(fp)
10001340:	1884703a 	and	r2,r3,r2
10001344:	10bfffcc 	andi	r2,r2,65535
10001348:	1000041e 	bne	r2,zero,1000135c <main+0xd34>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
1000134c:	e0bff6c3 	ldbu	r2,-37(fp)
10001350:	10800044 	addi	r2,r2,1
10001354:	e0bff6c5 	stb	r2,-37(fp)
10001358:	003fed06 	br	10001310 <__alt_data_end+0xf8001310>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
1000135c:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
10001360:	d0a6e38b 	ldhu	r2,-25714(gp)
10001364:	e0fff60b 	ldhu	r3,-40(fp)
10001368:	1884703a 	and	r2,r3,r2
1000136c:	10bfffcc 	andi	r2,r2,65535
10001370:	1000061e 	bne	r2,zero,1000138c <main+0xd64>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
10001374:	01040074 	movhi	r4,4097
10001378:	21136904 	addi	r4,r4,19876
1000137c:	00055100 	call	10005510 <puts>
				printf("[INFO]: please insert again!!! \n");
10001380:	01040074 	movhi	r4,4097
10001384:	21137404 	addi	r4,r4,19920
10001388:	00055100 	call	10005510 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
1000138c:	d0a6e38b 	ldhu	r2,-25714(gp)
10001390:	e0fff60b 	ldhu	r3,-40(fp)
10001394:	1884703a 	and	r2,r3,r2
10001398:	10bfffcc 	andi	r2,r2,65535
1000139c:	103f731e 	bne	r2,zero,1000116c <__alt_data_end+0xf800116c>
		{

			usb_ctl_val = UsbRead(ctl_reg);
100013a0:	d0a6e30b 	ldhu	r2,-25716(gp)
100013a4:	10bfffcc 	andi	r2,r2,65535
100013a8:	1009883a 	mov	r4,r2
100013ac:	00014700 	call	10001470 <_Z7UsbReadt>
100013b0:	e0bff60d 	sth	r2,-40(fp)
			usleep(5*1000);
100013b4:	0104e204 	movi	r4,5000
100013b8:	00126e40 	call	100126e4 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100013bc:	d0a6e30b 	ldhu	r2,-25716(gp)
100013c0:	10bfffcc 	andi	r2,r2,65535
100013c4:	1009883a 	mov	r4,r2
100013c8:	00014700 	call	10001470 <_Z7UsbReadt>
100013cc:	e0bff60d 	sth	r2,-40(fp)
			usleep(5*1000);
100013d0:	0104e204 	movi	r4,5000
100013d4:	00126e40 	call	100126e4 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100013d8:	d0a6e30b 	ldhu	r2,-25716(gp)
100013dc:	10bfffcc 	andi	r2,r2,65535
100013e0:	1009883a 	mov	r4,r2
100013e4:	00014700 	call	10001470 <_Z7UsbReadt>
100013e8:	e0bff60d 	sth	r2,-40(fp)
			usleep(5*1000);
100013ec:	0104e204 	movi	r4,5000
100013f0:	00126e40 	call	100126e4 <usleep>

			if(usb_ctl_val & no_device)
100013f4:	d0a6e38b 	ldhu	r2,-25714(gp)
100013f8:	e0fff60b 	ldhu	r3,-40(fp)
100013fc:	1884703a 	and	r2,r3,r2
10001400:	10bfffcc 	andi	r2,r2,65535
10001404:	10000126 	beq	r2,zero,1000140c <main+0xde4>
				goto USB_HOT_PLUG;
10001408:	003c9506 	br	10000660 <__alt_data_end+0xf8000660>

			usleep(200);
1000140c:	01003204 	movi	r4,200
10001410:	00126e40 	call	100126e4 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
10001414:	003fdd06 	br	1000138c <__alt_data_end+0xf800138c>

10001418 <_Z8UsbWritett>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10001418:	defffc04 	addi	sp,sp,-16
1000141c:	dfc00315 	stw	ra,12(sp)
10001420:	df000215 	stw	fp,8(sp)
10001424:	df000204 	addi	fp,sp,8
10001428:	2007883a 	mov	r3,r4
1000142c:	2805883a 	mov	r2,r5
10001430:	e0fffe0d 	sth	r3,-8(fp)
10001434:	e0bfff0d 	sth	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	// Write address
	IO_write(HPI_ADDR, Address);
10001438:	e0bffe0b 	ldhu	r2,-8(fp)
1000143c:	100b883a 	mov	r5,r2
10001440:	01000084 	movi	r4,2
10001444:	00005500 	call	10000550 <_Z8IO_writeht>
	// Write data
	IO_write(HPI_DATA, Data);
10001448:	e0bfff0b 	ldhu	r2,-4(fp)
1000144c:	100b883a 	mov	r5,r2
10001450:	0009883a 	mov	r4,zero
10001454:	00005500 	call	10000550 <_Z8IO_writeht>
}
10001458:	0001883a 	nop
1000145c:	e037883a 	mov	sp,fp
10001460:	dfc00117 	ldw	ra,4(sp)
10001464:	df000017 	ldw	fp,0(sp)
10001468:	dec00204 	addi	sp,sp,8
1000146c:	f800283a 	ret

10001470 <_Z7UsbReadt>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10001470:	defffd04 	addi	sp,sp,-12
10001474:	dfc00215 	stw	ra,8(sp)
10001478:	df000115 	stw	fp,4(sp)
1000147c:	df000104 	addi	fp,sp,4
10001480:	2005883a 	mov	r2,r4
10001484:	e0bfff0d 	sth	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	// Write address
	IO_write(HPI_ADDR, Address);
10001488:	e0bfff0b 	ldhu	r2,-4(fp)
1000148c:	100b883a 	mov	r5,r2
10001490:	01000084 	movi	r4,2
10001494:	00005500 	call	10000550 <_Z8IO_writeht>
	// Read from data
	return IO_read(HPI_DATA);
10001498:	0009883a 	mov	r4,zero
1000149c:	00005c00 	call	100005c0 <_Z7IO_readh>
}
100014a0:	e037883a 	mov	sp,fp
100014a4:	dfc00117 	ldw	ra,4(sp)
100014a8:	df000017 	ldw	fp,0(sp)
100014ac:	dec00204 	addi	sp,sp,8
100014b0:	f800283a 	ret

100014b4 <_Z12UsbSoftResetv>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
100014b4:	defffe04 	addi	sp,sp,-8
100014b8:	dfc00115 	stw	ra,4(sp)
100014bc:	df000015 	stw	fp,0(sp)
100014c0:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
100014c4:	017e9414 	movui	r5,64080
100014c8:	01000044 	movi	r4,1
100014cc:	00005500 	call	10000550 <_Z8IO_writeht>
	usleep(100000);
100014d0:	010000b4 	movhi	r4,2
100014d4:	2121a804 	addi	r4,r4,-31072
100014d8:	00126e40 	call	100126e4 <usleep>
	printf("[USB INIT]:reset finished!\n");
100014dc:	01040074 	movhi	r4,4097
100014e0:	21137c04 	addi	r4,r4,19952
100014e4:	00055100 	call	10005510 <puts>

	usleep(500000);
100014e8:	01000234 	movhi	r4,8
100014ec:	21284804 	addi	r4,r4,-24288
100014f0:	00126e40 	call	100126e4 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
100014f4:	01040074 	movhi	r4,4097
100014f8:	21138304 	addi	r4,r4,19980
100014fc:	00055100 	call	10005510 <puts>
	IO_read(HPI_MAILBOX);
10001500:	01000044 	movi	r4,1
10001504:	00005c00 	call	100005c0 <_Z7IO_readh>
	IO_read(HPI_STATUS);
10001508:	010000c4 	movi	r4,3
1000150c:	00005c00 	call	100005c0 <_Z7IO_readh>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10001510:	01005104 	movi	r4,324
10001514:	00014700 	call	10001470 <_Z7UsbReadt>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10001518:	000b883a 	mov	r5,zero
1000151c:	01005104 	movi	r4,324
10001520:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbRead (HPI_SIE2_MSG_ADR);
10001524:	01005204 	movi	r4,328
10001528:	00014700 	call	10001470 <_Z7UsbReadt>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
1000152c:	000b883a 	mov	r5,zero
10001530:	01005204 	movi	r4,328
10001534:	00014180 	call	10001418 <_Z8UsbWritett>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10001538:	017fffd4 	movui	r5,65535
1000153c:	01302414 	movui	r4,49296
10001540:	00014180 	call	10001418 <_Z8UsbWritett>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10001544:	017fffd4 	movui	r5,65535
10001548:	01302c14 	movui	r4,49328
1000154c:	00014180 	call	10001418 <_Z8UsbWritett>
}
10001550:	0001883a 	nop
10001554:	e037883a 	mov	sp,fp
10001558:	dfc00117 	ldw	ra,4(sp)
1000155c:	df000017 	ldw	fp,0(sp)
10001560:	dec00204 	addi	sp,sp,8
10001564:	f800283a 	ret

10001568 <_Z13UsbSetAddressv>:


void UsbSetAddress()
{
10001568:	defffe04 	addi	sp,sp,-8
1000156c:	dfc00115 	stw	ra,4(sp)
10001570:	df000015 	stw	fp,0(sp)
10001574:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001578:	01414004 	movi	r5,1280
1000157c:	01000084 	movi	r4,2
10001580:	00005500 	call	10000550 <_Z8IO_writeht>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10001584:	01414304 	movi	r5,1292
10001588:	0009883a 	mov	r4,zero
1000158c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008); //4 port number
10001590:	01400204 	movi	r5,8
10001594:	0009883a 	mov	r4,zero
10001598:	00005500 	call	10000550 <_Z8IO_writeht>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
1000159c:	01403404 	movi	r5,208
100015a0:	0009883a 	mov	r4,zero
100015a4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0001);
100015a8:	01400044 	movi	r5,1
100015ac:	0009883a 	mov	r4,zero
100015b0:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);
100015b4:	014004c4 	movi	r5,19
100015b8:	0009883a 	mov	r4,zero
100015bc:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0514);
100015c0:	01414504 	movi	r5,1300
100015c4:	0009883a 	mov	r4,zero
100015c8:	00005500 	call	10000550 <_Z8IO_writeht>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
100015cc:	01414004 	movi	r5,1280
100015d0:	0009883a 	mov	r4,zero
100015d4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0002);
100015d8:	01400084 	movi	r5,2
100015dc:	0009883a 	mov	r4,zero
100015e0:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);
100015e4:	000b883a 	mov	r5,zero
100015e8:	0009883a 	mov	r4,zero
100015ec:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);
100015f0:	000b883a 	mov	r5,zero
100015f4:	0009883a 	mov	r4,zero
100015f8:	00005500 	call	10000550 <_Z8IO_writeht>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
100015fc:	000b883a 	mov	r5,zero
10001600:	0009883a 	mov	r4,zero
10001604:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);//
10001608:	000b883a 	mov	r5,zero
1000160c:	0009883a 	mov	r4,zero
10001610:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0090);//
10001614:	01402404 	movi	r5,144
10001618:	0009883a 	mov	r4,zero
1000161c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0041);
10001620:	01401044 	movi	r5,65
10001624:	0009883a 	mov	r4,zero
10001628:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);
1000162c:	014004c4 	movi	r5,19
10001630:	0009883a 	mov	r4,zero
10001634:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);
10001638:	000b883a 	mov	r5,zero
1000163c:	0009883a 	mov	r4,zero
10001640:	00005500 	call	10000550 <_Z8IO_writeht>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001644:	01414004 	movi	r5,1280
10001648:	01006c04 	movi	r4,432
1000164c:	00014180 	call	10001418 <_Z8UsbWritett>
}
10001650:	0001883a 	nop
10001654:	e037883a 	mov	sp,fp
10001658:	dfc00117 	ldw	ra,4(sp)
1000165c:	df000017 	ldw	fp,0(sp)
10001660:	dec00204 	addi	sp,sp,8
10001664:	f800283a 	ret

10001668 <_Z17UsbGetDeviceDesc1v>:


void UsbGetDeviceDesc1()
{
10001668:	defffe04 	addi	sp,sp,-8
1000166c:	dfc00115 	stw	ra,4(sp)
10001670:	df000015 	stw	fp,0(sp)
10001674:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001678:	01414004 	movi	r5,1280
1000167c:	01000084 	movi	r4,2
10001680:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x050C);
10001684:	01414304 	movi	r5,1292
10001688:	0009883a 	mov	r4,zero
1000168c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008); //4 port number
10001690:	01400204 	movi	r5,8
10001694:	0009883a 	mov	r4,zero
10001698:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x02D0); //device address
1000169c:	0140b404 	movi	r5,720
100016a0:	0009883a 	mov	r4,zero
100016a4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0001);
100016a8:	01400044 	movi	r5,1
100016ac:	0009883a 	mov	r4,zero
100016b0:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);
100016b4:	014004c4 	movi	r5,19
100016b8:	0009883a 	mov	r4,zero
100016bc:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0514);
100016c0:	01414504 	movi	r5,1300
100016c4:	0009883a 	mov	r4,zero
100016c8:	00005500 	call	10000550 <_Z8IO_writeht>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100016cc:	0141a004 	movi	r5,1664
100016d0:	0009883a 	mov	r4,zero
100016d4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0100); //device 0x01
100016d8:	01404004 	movi	r5,256
100016dc:	0009883a 	mov	r4,zero
100016e0:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);
100016e4:	000b883a 	mov	r5,zero
100016e8:	0009883a 	mov	r4,zero
100016ec:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008);
100016f0:	01400204 	movi	r5,8
100016f4:	0009883a 	mov	r4,zero
100016f8:	00005500 	call	10000550 <_Z8IO_writeht>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
100016fc:	01414b04 	movi	r5,1324
10001700:	0009883a 	mov	r4,zero
10001704:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008);//
10001708:	01400204 	movi	r5,8
1000170c:	0009883a 	mov	r4,zero
10001710:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0290);//
10001714:	0140a404 	movi	r5,656
10001718:	0009883a 	mov	r4,zero
1000171c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0041);
10001720:	01401044 	movi	r5,65
10001724:	0009883a 	mov	r4,zero
10001728:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);
1000172c:	014004c4 	movi	r5,19
10001730:	0009883a 	mov	r4,zero
10001734:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0520);
10001738:	01414804 	movi	r5,1312
1000173c:	0009883a 	mov	r4,zero
10001740:	00005500 	call	10000550 <_Z8IO_writeht>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10001744:	000b883a 	mov	r5,zero
10001748:	0009883a 	mov	r4,zero
1000174c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);//port number
10001750:	000b883a 	mov	r5,zero
10001754:	0009883a 	mov	r4,zero
10001758:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0210);//device address
1000175c:	01408404 	movi	r5,528
10001760:	0009883a 	mov	r4,zero
10001764:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0041);
10001768:	01401044 	movi	r5,65
1000176c:	0009883a 	mov	r4,zero
10001770:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);
10001774:	014004c4 	movi	r5,19
10001778:	0009883a 	mov	r4,zero
1000177c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);
10001780:	000b883a 	mov	r5,zero
10001784:	0009883a 	mov	r4,zero
10001788:	00005500 	call	10000550 <_Z8IO_writeht>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000178c:	01414004 	movi	r5,1280
10001790:	01006c04 	movi	r4,432
10001794:	00014180 	call	10001418 <_Z8UsbWritett>
}
10001798:	0001883a 	nop
1000179c:	e037883a 	mov	sp,fp
100017a0:	dfc00117 	ldw	ra,4(sp)
100017a4:	df000017 	ldw	fp,0(sp)
100017a8:	dec00204 	addi	sp,sp,8
100017ac:	f800283a 	ret

100017b0 <_Z17UsbGetDeviceDesc2v>:

void UsbGetDeviceDesc2()
{
100017b0:	defffe04 	addi	sp,sp,-8
100017b4:	dfc00115 	stw	ra,4(sp)
100017b8:	df000015 	stw	fp,0(sp)
100017bc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100017c0:	01414004 	movi	r5,1280
100017c4:	01000084 	movi	r4,2
100017c8:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x050C);
100017cc:	01414304 	movi	r5,1292
100017d0:	0009883a 	mov	r4,zero
100017d4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008); //4 port number
100017d8:	01400204 	movi	r5,8
100017dc:	0009883a 	mov	r4,zero
100017e0:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x02D0); //device address
100017e4:	0140b404 	movi	r5,720
100017e8:	0009883a 	mov	r4,zero
100017ec:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0001);
100017f0:	01400044 	movi	r5,1
100017f4:	0009883a 	mov	r4,zero
100017f8:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);
100017fc:	014004c4 	movi	r5,19
10001800:	0009883a 	mov	r4,zero
10001804:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0514);
10001808:	01414504 	movi	r5,1300
1000180c:	0009883a 	mov	r4,zero
10001810:	00005500 	call	10000550 <_Z8IO_writeht>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001814:	0141a004 	movi	r5,1664
10001818:	0009883a 	mov	r4,zero
1000181c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10001820:	01404004 	movi	r5,256
10001824:	0009883a 	mov	r4,zero
10001828:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);//0
1000182c:	000b883a 	mov	r5,zero
10001830:	0009883a 	mov	r4,zero
10001834:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0012);//2
10001838:	01400484 	movi	r5,18
1000183c:	0009883a 	mov	r4,zero
10001840:	00005500 	call	10000550 <_Z8IO_writeht>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001844:	01415104 	movi	r5,1348
10001848:	0009883a 	mov	r4,zero
1000184c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008);//6
10001850:	01400204 	movi	r5,8
10001854:	0009883a 	mov	r4,zero
10001858:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0290);//8
1000185c:	0140a404 	movi	r5,656
10001860:	0009883a 	mov	r4,zero
10001864:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0041);//a
10001868:	01401044 	movi	r5,65
1000186c:	0009883a 	mov	r4,zero
10001870:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//c
10001874:	014004c4 	movi	r5,19
10001878:	0009883a 	mov	r4,zero
1000187c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0520);//e
10001880:	01414804 	movi	r5,1312
10001884:	0009883a 	mov	r4,zero
10001888:	00005500 	call	10000550 <_Z8IO_writeht>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
1000188c:	01415304 	movi	r5,1356
10001890:	0009883a 	mov	r4,zero
10001894:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008);//2
10001898:	01400204 	movi	r5,8
1000189c:	0009883a 	mov	r4,zero
100018a0:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0290);//4
100018a4:	0140a404 	movi	r5,656
100018a8:	0009883a 	mov	r4,zero
100018ac:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0001);//6
100018b0:	01400044 	movi	r5,1
100018b4:	0009883a 	mov	r4,zero
100018b8:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//8
100018bc:	014004c4 	movi	r5,19
100018c0:	0009883a 	mov	r4,zero
100018c4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x052c);//a
100018c8:	01414b04 	movi	r5,1324
100018cc:	0009883a 	mov	r4,zero
100018d0:	00005500 	call	10000550 <_Z8IO_writeht>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
100018d4:	01415504 	movi	r5,1364
100018d8:	0009883a 	mov	r4,zero
100018dc:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0002);//e
100018e0:	01400084 	movi	r5,2
100018e4:	0009883a 	mov	r4,zero
100018e8:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0290);//530
100018ec:	0140a404 	movi	r5,656
100018f0:	0009883a 	mov	r4,zero
100018f4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0041);//2
100018f8:	01401044 	movi	r5,65
100018fc:	0009883a 	mov	r4,zero
10001900:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//4
10001904:	014004c4 	movi	r5,19
10001908:	0009883a 	mov	r4,zero
1000190c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0538);//6
10001910:	01414e04 	movi	r5,1336
10001914:	0009883a 	mov	r4,zero
10001918:	00005500 	call	10000550 <_Z8IO_writeht>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
1000191c:	000b883a 	mov	r5,zero
10001920:	0009883a 	mov	r4,zero
10001924:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);//a
10001928:	000b883a 	mov	r5,zero
1000192c:	0009883a 	mov	r4,zero
10001930:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0210);//c
10001934:	01408404 	movi	r5,528
10001938:	0009883a 	mov	r4,zero
1000193c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0041);//e
10001940:	01401044 	movi	r5,65
10001944:	0009883a 	mov	r4,zero
10001948:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//540
1000194c:	014004c4 	movi	r5,19
10001950:	0009883a 	mov	r4,zero
10001954:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);//2
10001958:	000b883a 	mov	r5,zero
1000195c:	0009883a 	mov	r4,zero
10001960:	00005500 	call	10000550 <_Z8IO_writeht>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001964:	01414004 	movi	r5,1280
10001968:	01006c04 	movi	r4,432
1000196c:	00014180 	call	10001418 <_Z8UsbWritett>
}
10001970:	0001883a 	nop
10001974:	e037883a 	mov	sp,fp
10001978:	dfc00117 	ldw	ra,4(sp)
1000197c:	df000017 	ldw	fp,0(sp)
10001980:	dec00204 	addi	sp,sp,8
10001984:	f800283a 	ret

10001988 <_Z17UsbGetConfigDesc1v>:


void UsbGetConfigDesc1()
{
10001988:	defffe04 	addi	sp,sp,-8
1000198c:	dfc00115 	stw	ra,4(sp)
10001990:	df000015 	stw	fp,0(sp)
10001994:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001998:	01414004 	movi	r5,1280
1000199c:	01000084 	movi	r4,2
100019a0:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x050C);
100019a4:	01414304 	movi	r5,1292
100019a8:	0009883a 	mov	r4,zero
100019ac:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008); //4 port number
100019b0:	01400204 	movi	r5,8
100019b4:	0009883a 	mov	r4,zero
100019b8:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x02D0); //device address
100019bc:	0140b404 	movi	r5,720
100019c0:	0009883a 	mov	r4,zero
100019c4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0001);
100019c8:	01400044 	movi	r5,1
100019cc:	0009883a 	mov	r4,zero
100019d0:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);
100019d4:	014004c4 	movi	r5,19
100019d8:	0009883a 	mov	r4,zero
100019dc:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0514);
100019e0:	01414504 	movi	r5,1300
100019e4:	0009883a 	mov	r4,zero
100019e8:	00005500 	call	10000550 <_Z8IO_writeht>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100019ec:	0141a004 	movi	r5,1664
100019f0:	0009883a 	mov	r4,zero
100019f4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100019f8:	01408004 	movi	r5,512
100019fc:	0009883a 	mov	r4,zero
10001a00:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);//0
10001a04:	000b883a 	mov	r5,zero
10001a08:	0009883a 	mov	r4,zero
10001a0c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0009);//2
10001a10:	01400244 	movi	r5,9
10001a14:	0009883a 	mov	r4,zero
10001a18:	00005500 	call	10000550 <_Z8IO_writeht>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001a1c:	01415104 	movi	r5,1348
10001a20:	0009883a 	mov	r4,zero
10001a24:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008);//6
10001a28:	01400204 	movi	r5,8
10001a2c:	0009883a 	mov	r4,zero
10001a30:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0290);//8
10001a34:	0140a404 	movi	r5,656
10001a38:	0009883a 	mov	r4,zero
10001a3c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0041);//a
10001a40:	01401044 	movi	r5,65
10001a44:	0009883a 	mov	r4,zero
10001a48:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//c
10001a4c:	014004c4 	movi	r5,19
10001a50:	0009883a 	mov	r4,zero
10001a54:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0520);//e
10001a58:	01414804 	movi	r5,1312
10001a5c:	0009883a 	mov	r4,zero
10001a60:	00005500 	call	10000550 <_Z8IO_writeht>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10001a64:	01415304 	movi	r5,1356
10001a68:	0009883a 	mov	r4,zero
10001a6c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0001);//2
10001a70:	01400044 	movi	r5,1
10001a74:	0009883a 	mov	r4,zero
10001a78:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0290);//4
10001a7c:	0140a404 	movi	r5,656
10001a80:	0009883a 	mov	r4,zero
10001a84:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001a88:	01400044 	movi	r5,1
10001a8c:	0009883a 	mov	r4,zero
10001a90:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//8
10001a94:	014004c4 	movi	r5,19
10001a98:	0009883a 	mov	r4,zero
10001a9c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x052c);//a
10001aa0:	01414b04 	movi	r5,1324
10001aa4:	0009883a 	mov	r4,zero
10001aa8:	00005500 	call	10000550 <_Z8IO_writeht>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10001aac:	000b883a 	mov	r5,zero
10001ab0:	0009883a 	mov	r4,zero
10001ab4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);//e
10001ab8:	000b883a 	mov	r5,zero
10001abc:	0009883a 	mov	r4,zero
10001ac0:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0210);//530
10001ac4:	01408404 	movi	r5,528
10001ac8:	0009883a 	mov	r4,zero
10001acc:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0041);//2
10001ad0:	01401044 	movi	r5,65
10001ad4:	0009883a 	mov	r4,zero
10001ad8:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//4
10001adc:	014004c4 	movi	r5,19
10001ae0:	0009883a 	mov	r4,zero
10001ae4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);//6
10001ae8:	000b883a 	mov	r5,zero
10001aec:	0009883a 	mov	r4,zero
10001af0:	00005500 	call	10000550 <_Z8IO_writeht>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001af4:	01414004 	movi	r5,1280
10001af8:	01006c04 	movi	r4,432
10001afc:	00014180 	call	10001418 <_Z8UsbWritett>
}
10001b00:	0001883a 	nop
10001b04:	e037883a 	mov	sp,fp
10001b08:	dfc00117 	ldw	ra,4(sp)
10001b0c:	df000017 	ldw	fp,0(sp)
10001b10:	dec00204 	addi	sp,sp,8
10001b14:	f800283a 	ret

10001b18 <_Z17UsbGetConfigDesc2v>:


void UsbGetConfigDesc2()
{
10001b18:	defffe04 	addi	sp,sp,-8
10001b1c:	dfc00115 	stw	ra,4(sp)
10001b20:	df000015 	stw	fp,0(sp)
10001b24:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001b28:	01414004 	movi	r5,1280
10001b2c:	01000084 	movi	r4,2
10001b30:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x050C);
10001b34:	01414304 	movi	r5,1292
10001b38:	0009883a 	mov	r4,zero
10001b3c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008); //4 port number
10001b40:	01400204 	movi	r5,8
10001b44:	0009883a 	mov	r4,zero
10001b48:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x02D0); //device address
10001b4c:	0140b404 	movi	r5,720
10001b50:	0009883a 	mov	r4,zero
10001b54:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0001);
10001b58:	01400044 	movi	r5,1
10001b5c:	0009883a 	mov	r4,zero
10001b60:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);
10001b64:	014004c4 	movi	r5,19
10001b68:	0009883a 	mov	r4,zero
10001b6c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0514);
10001b70:	01414504 	movi	r5,1300
10001b74:	0009883a 	mov	r4,zero
10001b78:	00005500 	call	10000550 <_Z8IO_writeht>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001b7c:	0141a004 	movi	r5,1664
10001b80:	0009883a 	mov	r4,zero
10001b84:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10001b88:	01408004 	movi	r5,512
10001b8c:	0009883a 	mov	r4,zero
10001b90:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);//0
10001b94:	000b883a 	mov	r5,zero
10001b98:	0009883a 	mov	r4,zero
10001b9c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x00FF);//2
10001ba0:	01403fc4 	movi	r5,255
10001ba4:	0009883a 	mov	r4,zero
10001ba8:	00005500 	call	10000550 <_Z8IO_writeht>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
10001bac:	01415704 	movi	r5,1372
10001bb0:	0009883a 	mov	r4,zero
10001bb4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008);//6
10001bb8:	01400204 	movi	r5,8
10001bbc:	0009883a 	mov	r4,zero
10001bc0:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0290);//8
10001bc4:	0140a404 	movi	r5,656
10001bc8:	0009883a 	mov	r4,zero
10001bcc:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0041);//a
10001bd0:	01401044 	movi	r5,65
10001bd4:	0009883a 	mov	r4,zero
10001bd8:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//c
10001bdc:	014004c4 	movi	r5,19
10001be0:	0009883a 	mov	r4,zero
10001be4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0520);//e
10001be8:	01414804 	movi	r5,1312
10001bec:	0009883a 	mov	r4,zero
10001bf0:	00005500 	call	10000550 <_Z8IO_writeht>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10001bf4:	01415904 	movi	r5,1380
10001bf8:	0009883a 	mov	r4,zero
10001bfc:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008);//2
10001c00:	01400204 	movi	r5,8
10001c04:	0009883a 	mov	r4,zero
10001c08:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0290);//4
10001c0c:	0140a404 	movi	r5,656
10001c10:	0009883a 	mov	r4,zero
10001c14:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001c18:	01400044 	movi	r5,1
10001c1c:	0009883a 	mov	r4,zero
10001c20:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//8
10001c24:	014004c4 	movi	r5,19
10001c28:	0009883a 	mov	r4,zero
10001c2c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x052c);//a
10001c30:	01414b04 	movi	r5,1324
10001c34:	0009883a 	mov	r4,zero
10001c38:	00005500 	call	10000550 <_Z8IO_writeht>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10001c3c:	01415b04 	movi	r5,1388
10001c40:	0009883a 	mov	r4,zero
10001c44:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008);//e
10001c48:	01400204 	movi	r5,8
10001c4c:	0009883a 	mov	r4,zero
10001c50:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0290);//530
10001c54:	0140a404 	movi	r5,656
10001c58:	0009883a 	mov	r4,zero
10001c5c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0041);//2
10001c60:	01401044 	movi	r5,65
10001c64:	0009883a 	mov	r4,zero
10001c68:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//4
10001c6c:	014004c4 	movi	r5,19
10001c70:	0009883a 	mov	r4,zero
10001c74:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0538);//6
10001c78:	01414e04 	movi	r5,1336
10001c7c:	0009883a 	mov	r4,zero
10001c80:	00005500 	call	10000550 <_Z8IO_writeht>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10001c84:	01415d04 	movi	r5,1396
10001c88:	0009883a 	mov	r4,zero
10001c8c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008);//a
10001c90:	01400204 	movi	r5,8
10001c94:	0009883a 	mov	r4,zero
10001c98:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0290);//c
10001c9c:	0140a404 	movi	r5,656
10001ca0:	0009883a 	mov	r4,zero
10001ca4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0001);//e //data0
10001ca8:	01400044 	movi	r5,1
10001cac:	0009883a 	mov	r4,zero
10001cb0:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//540
10001cb4:	014004c4 	movi	r5,19
10001cb8:	0009883a 	mov	r4,zero
10001cbc:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0544);//2
10001cc0:	01415104 	movi	r5,1348
10001cc4:	0009883a 	mov	r4,zero
10001cc8:	00005500 	call	10000550 <_Z8IO_writeht>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10001ccc:	01415f04 	movi	r5,1404
10001cd0:	0009883a 	mov	r4,zero
10001cd4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0002);//6
10001cd8:	01400084 	movi	r5,2
10001cdc:	0009883a 	mov	r4,zero
10001ce0:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0290);//8
10001ce4:	0140a404 	movi	r5,656
10001ce8:	0009883a 	mov	r4,zero
10001cec:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0041);//a //data1
10001cf0:	01401044 	movi	r5,65
10001cf4:	0009883a 	mov	r4,zero
10001cf8:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//c
10001cfc:	014004c4 	movi	r5,19
10001d00:	0009883a 	mov	r4,zero
10001d04:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0550);//e
10001d08:	01415404 	movi	r5,1360
10001d0c:	0009883a 	mov	r4,zero
10001d10:	00005500 	call	10000550 <_Z8IO_writeht>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10001d14:	000b883a 	mov	r5,zero
10001d18:	0009883a 	mov	r4,zero
10001d1c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);//2
10001d20:	000b883a 	mov	r5,zero
10001d24:	0009883a 	mov	r4,zero
10001d28:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0210);//4
10001d2c:	01408404 	movi	r5,528
10001d30:	0009883a 	mov	r4,zero
10001d34:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0041);//6
10001d38:	01401044 	movi	r5,65
10001d3c:	0009883a 	mov	r4,zero
10001d40:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//8
10001d44:	014004c4 	movi	r5,19
10001d48:	0009883a 	mov	r4,zero
10001d4c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);//a
10001d50:	000b883a 	mov	r5,zero
10001d54:	0009883a 	mov	r4,zero
10001d58:	00005500 	call	10000550 <_Z8IO_writeht>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001d5c:	01414004 	movi	r5,1280
10001d60:	01006c04 	movi	r4,432
10001d64:	00014180 	call	10001418 <_Z8UsbWritett>
}
10001d68:	0001883a 	nop
10001d6c:	e037883a 	mov	sp,fp
10001d70:	dfc00117 	ldw	ra,4(sp)
10001d74:	df000017 	ldw	fp,0(sp)
10001d78:	dec00204 	addi	sp,sp,8
10001d7c:	f800283a 	ret

10001d80 <_Z12UsbSetConfigv>:

void UsbSetConfig()
{
10001d80:	defffe04 	addi	sp,sp,-8
10001d84:	dfc00115 	stw	ra,4(sp)
10001d88:	df000015 	stw	fp,0(sp)
10001d8c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001d90:	01414004 	movi	r5,1280
10001d94:	01000084 	movi	r4,2
10001d98:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x050C);
10001d9c:	01414304 	movi	r5,1292
10001da0:	0009883a 	mov	r4,zero
10001da4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008); //4 port number
10001da8:	01400204 	movi	r5,8
10001dac:	0009883a 	mov	r4,zero
10001db0:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x02D0); //port address
10001db4:	0140b404 	movi	r5,720
10001db8:	0009883a 	mov	r4,zero
10001dbc:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0001);
10001dc0:	01400044 	movi	r5,1
10001dc4:	0009883a 	mov	r4,zero
10001dc8:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);
10001dcc:	014004c4 	movi	r5,19
10001dd0:	0009883a 	mov	r4,zero
10001dd4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0514);
10001dd8:	01414504 	movi	r5,1300
10001ddc:	0009883a 	mov	r4,zero
10001de0:	00005500 	call	10000550 <_Z8IO_writeht>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10001de4:	01424004 	movi	r5,2304
10001de8:	0009883a 	mov	r4,zero
10001dec:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0001);//device address
10001df0:	01400044 	movi	r5,1
10001df4:	0009883a 	mov	r4,zero
10001df8:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);
10001dfc:	000b883a 	mov	r5,zero
10001e00:	0009883a 	mov	r4,zero
10001e04:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);
10001e08:	000b883a 	mov	r5,zero
10001e0c:	0009883a 	mov	r4,zero
10001e10:	00005500 	call	10000550 <_Z8IO_writeht>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001e14:	000b883a 	mov	r5,zero
10001e18:	0009883a 	mov	r4,zero
10001e1c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);//port number
10001e20:	000b883a 	mov	r5,zero
10001e24:	0009883a 	mov	r4,zero
10001e28:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0290);//device address
10001e2c:	0140a404 	movi	r5,656
10001e30:	0009883a 	mov	r4,zero
10001e34:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0041); //data 1
10001e38:	01401044 	movi	r5,65
10001e3c:	0009883a 	mov	r4,zero
10001e40:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);
10001e44:	014004c4 	movi	r5,19
10001e48:	0009883a 	mov	r4,zero
10001e4c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);
10001e50:	000b883a 	mov	r5,zero
10001e54:	0009883a 	mov	r4,zero
10001e58:	00005500 	call	10000550 <_Z8IO_writeht>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001e5c:	01414004 	movi	r5,1280
10001e60:	01006c04 	movi	r4,432
10001e64:	00014180 	call	10001418 <_Z8UsbWritett>

}
10001e68:	0001883a 	nop
10001e6c:	e037883a 	mov	sp,fp
10001e70:	dfc00117 	ldw	ra,4(sp)
10001e74:	df000017 	ldw	fp,0(sp)
10001e78:	dec00204 	addi	sp,sp,8
10001e7c:	f800283a 	ret

10001e80 <_Z15UsbClassRequestv>:

void UsbClassRequest()
{
10001e80:	defffe04 	addi	sp,sp,-8
10001e84:	dfc00115 	stw	ra,4(sp)
10001e88:	df000015 	stw	fp,0(sp)
10001e8c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001e90:	01414004 	movi	r5,1280
10001e94:	01000084 	movi	r4,2
10001e98:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x050C);
10001e9c:	01414304 	movi	r5,1292
10001ea0:	0009883a 	mov	r4,zero
10001ea4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008); //4 port number
10001ea8:	01400204 	movi	r5,8
10001eac:	0009883a 	mov	r4,zero
10001eb0:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x02D0); //port address
10001eb4:	0140b404 	movi	r5,720
10001eb8:	0009883a 	mov	r4,zero
10001ebc:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0001);
10001ec0:	01400044 	movi	r5,1
10001ec4:	0009883a 	mov	r4,zero
10001ec8:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);
10001ecc:	014004c4 	movi	r5,19
10001ed0:	0009883a 	mov	r4,zero
10001ed4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0514);
10001ed8:	01414504 	movi	r5,1300
10001edc:	0009883a 	mov	r4,zero
10001ee0:	00005500 	call	10000550 <_Z8IO_writeht>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10001ee4:	01428844 	movi	r5,2593
10001ee8:	0009883a 	mov	r4,zero
10001eec:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);//device address
10001ef0:	000b883a 	mov	r5,zero
10001ef4:	0009883a 	mov	r4,zero
10001ef8:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);
10001efc:	000b883a 	mov	r5,zero
10001f00:	0009883a 	mov	r4,zero
10001f04:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);
10001f08:	000b883a 	mov	r5,zero
10001f0c:	0009883a 	mov	r4,zero
10001f10:	00005500 	call	10000550 <_Z8IO_writeht>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001f14:	000b883a 	mov	r5,zero
10001f18:	0009883a 	mov	r4,zero
10001f1c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);//port number /data length
10001f20:	000b883a 	mov	r5,zero
10001f24:	0009883a 	mov	r4,zero
10001f28:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0290);//device address
10001f2c:	0140a404 	movi	r5,656
10001f30:	0009883a 	mov	r4,zero
10001f34:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0041); //data 1
10001f38:	01401044 	movi	r5,65
10001f3c:	0009883a 	mov	r4,zero
10001f40:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);
10001f44:	014004c4 	movi	r5,19
10001f48:	0009883a 	mov	r4,zero
10001f4c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);
10001f50:	000b883a 	mov	r5,zero
10001f54:	0009883a 	mov	r4,zero
10001f58:	00005500 	call	10000550 <_Z8IO_writeht>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001f5c:	01414004 	movi	r5,1280
10001f60:	01006c04 	movi	r4,432
10001f64:	00014180 	call	10001418 <_Z8UsbWritett>
}
10001f68:	0001883a 	nop
10001f6c:	e037883a 	mov	sp,fp
10001f70:	dfc00117 	ldw	ra,4(sp)
10001f74:	df000017 	ldw	fp,0(sp)
10001f78:	dec00204 	addi	sp,sp,8
10001f7c:	f800283a 	ret

10001f80 <_Z13UsbGetHidDescv>:


void UsbGetHidDesc()
{
10001f80:	defffe04 	addi	sp,sp,-8
10001f84:	dfc00115 	stw	ra,4(sp)
10001f88:	df000015 	stw	fp,0(sp)
10001f8c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001f90:	01414004 	movi	r5,1280
10001f94:	01000084 	movi	r4,2
10001f98:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x050C);
10001f9c:	01414304 	movi	r5,1292
10001fa0:	0009883a 	mov	r4,zero
10001fa4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008); //4 port number
10001fa8:	01400204 	movi	r5,8
10001fac:	0009883a 	mov	r4,zero
10001fb0:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x02D0); //port address
10001fb4:	0140b404 	movi	r5,720
10001fb8:	0009883a 	mov	r4,zero
10001fbc:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0001);
10001fc0:	01400044 	movi	r5,1
10001fc4:	0009883a 	mov	r4,zero
10001fc8:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);
10001fcc:	014004c4 	movi	r5,19
10001fd0:	0009883a 	mov	r4,zero
10001fd4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0514);
10001fd8:	01414504 	movi	r5,1300
10001fdc:	0009883a 	mov	r4,zero
10001fe0:	00005500 	call	10000550 <_Z8IO_writeht>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001fe4:	0141a044 	movi	r5,1665
10001fe8:	0009883a 	mov	r4,zero
10001fec:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10001ff0:	01484004 	movi	r5,8448
10001ff4:	0009883a 	mov	r4,zero
10001ff8:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);//0
10001ffc:	000b883a 	mov	r5,zero
10002000:	0009883a 	mov	r4,zero
10002004:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x007B);//2
10002008:	01401ec4 	movi	r5,123
1000200c:	0009883a 	mov	r4,zero
10002010:	00005500 	call	10000550 <_Z8IO_writeht>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10002014:	01415104 	movi	r5,1348
10002018:	0009883a 	mov	r4,zero
1000201c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008);//6
10002020:	01400204 	movi	r5,8
10002024:	0009883a 	mov	r4,zero
10002028:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0290);//8
1000202c:	0140a404 	movi	r5,656
10002030:	0009883a 	mov	r4,zero
10002034:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0041);//a
10002038:	01401044 	movi	r5,65
1000203c:	0009883a 	mov	r4,zero
10002040:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//c
10002044:	014004c4 	movi	r5,19
10002048:	0009883a 	mov	r4,zero
1000204c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0520);//e
10002050:	01414804 	movi	r5,1312
10002054:	0009883a 	mov	r4,zero
10002058:	00005500 	call	10000550 <_Z8IO_writeht>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
1000205c:	000b883a 	mov	r5,zero
10002060:	0009883a 	mov	r4,zero
10002064:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);//e
10002068:	000b883a 	mov	r5,zero
1000206c:	0009883a 	mov	r4,zero
10002070:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0210);//530
10002074:	01408404 	movi	r5,528
10002078:	0009883a 	mov	r4,zero
1000207c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0041);//2
10002080:	01401044 	movi	r5,65
10002084:	0009883a 	mov	r4,zero
10002088:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//4
1000208c:	014004c4 	movi	r5,19
10002090:	0009883a 	mov	r4,zero
10002094:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);//6
10002098:	000b883a 	mov	r5,zero
1000209c:	0009883a 	mov	r4,zero
100020a0:	00005500 	call	10000550 <_Z8IO_writeht>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100020a4:	01414004 	movi	r5,1280
100020a8:	01006c04 	movi	r4,432
100020ac:	00014180 	call	10001418 <_Z8UsbWritett>

}
100020b0:	0001883a 	nop
100020b4:	e037883a 	mov	sp,fp
100020b8:	dfc00117 	ldw	ra,4(sp)
100020bc:	df000017 	ldw	fp,0(sp)
100020c0:	dec00204 	addi	sp,sp,8
100020c4:	f800283a 	ret

100020c8 <_Z16UsbGetReportDescv>:


void UsbGetReportDesc()
{
100020c8:	defffe04 	addi	sp,sp,-8
100020cc:	dfc00115 	stw	ra,4(sp)
100020d0:	df000015 	stw	fp,0(sp)
100020d4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100020d8:	01414004 	movi	r5,1280
100020dc:	01000084 	movi	r4,2
100020e0:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x050C);
100020e4:	01414304 	movi	r5,1292
100020e8:	0009883a 	mov	r4,zero
100020ec:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008); //4 port number
100020f0:	01400204 	movi	r5,8
100020f4:	0009883a 	mov	r4,zero
100020f8:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x02D0); //device address
100020fc:	0140b404 	movi	r5,720
10002100:	0009883a 	mov	r4,zero
10002104:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0001);
10002108:	01400044 	movi	r5,1
1000210c:	0009883a 	mov	r4,zero
10002110:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);
10002114:	014004c4 	movi	r5,19
10002118:	0009883a 	mov	r4,zero
1000211c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0514);
10002120:	01414504 	movi	r5,1300
10002124:	0009883a 	mov	r4,zero
10002128:	00005500 	call	10000550 <_Z8IO_writeht>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
1000212c:	0141a044 	movi	r5,1665
10002130:	0009883a 	mov	r4,zero
10002134:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10002138:	01488004 	movi	r5,8704
1000213c:	0009883a 	mov	r4,zero
10002140:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);//0
10002144:	000b883a 	mov	r5,zero
10002148:	0009883a 	mov	r4,zero
1000214c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x007B);//2
10002150:	01401ec4 	movi	r5,123
10002154:	0009883a 	mov	r4,zero
10002158:	00005500 	call	10000550 <_Z8IO_writeht>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
1000215c:	01416004 	movi	r5,1408
10002160:	0009883a 	mov	r4,zero
10002164:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008);//6
10002168:	01400204 	movi	r5,8
1000216c:	0009883a 	mov	r4,zero
10002170:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0290);//8
10002174:	0140a404 	movi	r5,656
10002178:	0009883a 	mov	r4,zero
1000217c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0041);//a
10002180:	01401044 	movi	r5,65
10002184:	0009883a 	mov	r4,zero
10002188:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//c
1000218c:	014004c4 	movi	r5,19
10002190:	0009883a 	mov	r4,zero
10002194:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0520);//e
10002198:	01414804 	movi	r5,1312
1000219c:	0009883a 	mov	r4,zero
100021a0:	00005500 	call	10000550 <_Z8IO_writeht>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
100021a4:	01416204 	movi	r5,1416
100021a8:	0009883a 	mov	r4,zero
100021ac:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008);//2
100021b0:	01400204 	movi	r5,8
100021b4:	0009883a 	mov	r4,zero
100021b8:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0290);//4
100021bc:	0140a404 	movi	r5,656
100021c0:	0009883a 	mov	r4,zero
100021c4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0001);//6 //data0
100021c8:	01400044 	movi	r5,1
100021cc:	0009883a 	mov	r4,zero
100021d0:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//8
100021d4:	014004c4 	movi	r5,19
100021d8:	0009883a 	mov	r4,zero
100021dc:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x052c);//a
100021e0:	01414b04 	movi	r5,1324
100021e4:	0009883a 	mov	r4,zero
100021e8:	00005500 	call	10000550 <_Z8IO_writeht>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
100021ec:	01416404 	movi	r5,1424
100021f0:	0009883a 	mov	r4,zero
100021f4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008);//e
100021f8:	01400204 	movi	r5,8
100021fc:	0009883a 	mov	r4,zero
10002200:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0290);//530
10002204:	0140a404 	movi	r5,656
10002208:	0009883a 	mov	r4,zero
1000220c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0041);//2
10002210:	01401044 	movi	r5,65
10002214:	0009883a 	mov	r4,zero
10002218:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//4
1000221c:	014004c4 	movi	r5,19
10002220:	0009883a 	mov	r4,zero
10002224:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0538);//6
10002228:	01414e04 	movi	r5,1336
1000222c:	0009883a 	mov	r4,zero
10002230:	00005500 	call	10000550 <_Z8IO_writeht>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10002234:	01416604 	movi	r5,1432
10002238:	0009883a 	mov	r4,zero
1000223c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008);//a
10002240:	01400204 	movi	r5,8
10002244:	0009883a 	mov	r4,zero
10002248:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0290);//c
1000224c:	0140a404 	movi	r5,656
10002250:	0009883a 	mov	r4,zero
10002254:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0001);//e //data0
10002258:	01400044 	movi	r5,1
1000225c:	0009883a 	mov	r4,zero
10002260:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//540
10002264:	014004c4 	movi	r5,19
10002268:	0009883a 	mov	r4,zero
1000226c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0544);//2
10002270:	01415104 	movi	r5,1348
10002274:	0009883a 	mov	r4,zero
10002278:	00005500 	call	10000550 <_Z8IO_writeht>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
1000227c:	01416804 	movi	r5,1440
10002280:	0009883a 	mov	r4,zero
10002284:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008);//6
10002288:	01400204 	movi	r5,8
1000228c:	0009883a 	mov	r4,zero
10002290:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0290);//8
10002294:	0140a404 	movi	r5,656
10002298:	0009883a 	mov	r4,zero
1000229c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0041);//a //data1
100022a0:	01401044 	movi	r5,65
100022a4:	0009883a 	mov	r4,zero
100022a8:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//c
100022ac:	014004c4 	movi	r5,19
100022b0:	0009883a 	mov	r4,zero
100022b4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0550);//e
100022b8:	01415404 	movi	r5,1360
100022bc:	0009883a 	mov	r4,zero
100022c0:	00005500 	call	10000550 <_Z8IO_writeht>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
100022c4:	01416a04 	movi	r5,1448
100022c8:	0009883a 	mov	r4,zero
100022cc:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008);//2
100022d0:	01400204 	movi	r5,8
100022d4:	0009883a 	mov	r4,zero
100022d8:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0290);//4
100022dc:	0140a404 	movi	r5,656
100022e0:	0009883a 	mov	r4,zero
100022e4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0001);//6 //data0
100022e8:	01400044 	movi	r5,1
100022ec:	0009883a 	mov	r4,zero
100022f0:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//8
100022f4:	014004c4 	movi	r5,19
100022f8:	0009883a 	mov	r4,zero
100022fc:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x055c);//a
10002300:	01415704 	movi	r5,1372
10002304:	0009883a 	mov	r4,zero
10002308:	00005500 	call	10000550 <_Z8IO_writeht>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
1000230c:	01416c04 	movi	r5,1456
10002310:	0009883a 	mov	r4,zero
10002314:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0008);//e
10002318:	01400204 	movi	r5,8
1000231c:	0009883a 	mov	r4,zero
10002320:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0290);//560
10002324:	0140a404 	movi	r5,656
10002328:	0009883a 	mov	r4,zero
1000232c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0041);//2 //data1
10002330:	01401044 	movi	r5,65
10002334:	0009883a 	mov	r4,zero
10002338:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//4
1000233c:	014004c4 	movi	r5,19
10002340:	0009883a 	mov	r4,zero
10002344:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0568);//6
10002348:	01415a04 	movi	r5,1384
1000234c:	0009883a 	mov	r4,zero
10002350:	00005500 	call	10000550 <_Z8IO_writeht>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10002354:	01416e04 	movi	r5,1464
10002358:	0009883a 	mov	r4,zero
1000235c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0003);//a
10002360:	014000c4 	movi	r5,3
10002364:	0009883a 	mov	r4,zero
10002368:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0290);//c
1000236c:	0140a404 	movi	r5,656
10002370:	0009883a 	mov	r4,zero
10002374:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0001);//e //data0
10002378:	01400044 	movi	r5,1
1000237c:	0009883a 	mov	r4,zero
10002380:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//570
10002384:	014004c4 	movi	r5,19
10002388:	0009883a 	mov	r4,zero
1000238c:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0574);//2
10002390:	01415d04 	movi	r5,1396
10002394:	0009883a 	mov	r4,zero
10002398:	00005500 	call	10000550 <_Z8IO_writeht>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
1000239c:	000b883a 	mov	r5,zero
100023a0:	0009883a 	mov	r4,zero
100023a4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);//6
100023a8:	000b883a 	mov	r5,zero
100023ac:	0009883a 	mov	r4,zero
100023b0:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0210);//8
100023b4:	01408404 	movi	r5,528
100023b8:	0009883a 	mov	r4,zero
100023bc:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0041);//a
100023c0:	01401044 	movi	r5,65
100023c4:	0009883a 	mov	r4,zero
100023c8:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0013);//c
100023cc:	014004c4 	movi	r5,19
100023d0:	0009883a 	mov	r4,zero
100023d4:	00005500 	call	10000550 <_Z8IO_writeht>
	IO_write(HPI_DATA,0x0000);//e
100023d8:	000b883a 	mov	r5,zero
100023dc:	0009883a 	mov	r4,zero
100023e0:	00005500 	call	10000550 <_Z8IO_writeht>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100023e4:	01414004 	movi	r5,1280
100023e8:	01006c04 	movi	r4,432
100023ec:	00014180 	call	10001418 <_Z8UsbWritett>

}
100023f0:	0001883a 	nop
100023f4:	e037883a 	mov	sp,fp
100023f8:	dfc00117 	ldw	ra,4(sp)
100023fc:	df000017 	ldw	fp,0(sp)
10002400:	dec00204 	addi	sp,sp,8
10002404:	f800283a 	ret

10002408 <_Z17UsbWaitTDListDonev>:


alt_u16 UsbWaitTDListDone()
{
10002408:	defffd04 	addi	sp,sp,-12
1000240c:	dfc00215 	stw	ra,8(sp)
10002410:	df000115 	stw	fp,4(sp)
10002414:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10002418:	01005104 	movi	r4,324
1000241c:	00014700 	call	10001470 <_Z7UsbReadt>
10002420:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002424:	000b883a 	mov	r5,zero
10002428:	01005104 	movi	r4,324
1000242c:	00014180 	call	10001418 <_Z8UsbWritett>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002430:	e0bfff0b 	ldhu	r2,-4(fp)
10002434:	10840020 	cmpeqi	r2,r2,4096
10002438:	10000e1e 	bne	r2,zero,10002474 <_Z17UsbWaitTDListDonev+0x6c>
	{
		if(usb_ctl_val == 0x0000)
1000243c:	e0bfff0b 	ldhu	r2,-4(fp)
10002440:	10000526 	beq	r2,zero,10002458 <_Z17UsbWaitTDListDonev+0x50>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10002444:	e0bfff0b 	ldhu	r2,-4(fp)
10002448:	100b883a 	mov	r5,r2
1000244c:	01040074 	movhi	r4,4097
10002450:	21138c04 	addi	r4,r4,20016
10002454:	00054140 	call	10005414 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002458:	01005104 	movi	r4,324
1000245c:	00014700 	call	10001470 <_Z7UsbReadt>
10002460:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002464:	000b883a 	mov	r5,zero
10002468:	01005104 	movi	r4,324
1000246c:	00014180 	call	10001418 <_Z8UsbWritett>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002470:	003fef06 	br	10002430 <__alt_data_end+0xf8002430>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10002474:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002478:	e037883a 	mov	sp,fp
1000247c:	dfc00117 	ldw	ra,4(sp)
10002480:	df000017 	ldw	fp,0(sp)
10002484:	dec00204 	addi	sp,sp,8
10002488:	f800283a 	ret

1000248c <_Z14UsbGetRetryCntv>:


alt_u16 UsbGetRetryCnt()
{
1000248c:	defffd04 	addi	sp,sp,-12
10002490:	dfc00215 	stw	ra,8(sp)
10002494:	df000115 	stw	fp,4(sp)
10002498:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
1000249c:	010000c4 	movi	r4,3
100024a0:	00005c00 	call	100005c0 <_Z7IO_readh>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
100024a4:	01005104 	movi	r4,324
100024a8:	00014700 	call	10001470 <_Z7UsbReadt>
100024ac:	10bfffcc 	andi	r2,r2,65535
100024b0:	10840020 	cmpeqi	r2,r2,4096
100024b4:	10803fcc 	andi	r2,r2,255
100024b8:	10000b26 	beq	r2,zero,100024e8 <_Z14UsbGetRetryCntv+0x5c>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
100024bc:	000b883a 	mov	r5,zero
100024c0:	01005104 	movi	r4,324
100024c4:	00014180 	call	10001418 <_Z8UsbWritett>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100024c8:	010000c4 	movi	r4,3
100024cc:	00005c00 	call	100005c0 <_Z7IO_readh>
100024d0:	10bfffcc 	andi	r2,r2,65535
100024d4:	1080040c 	andi	r2,r2,16
100024d8:	1005003a 	cmpeq	r2,r2,zero
100024dc:	10803fcc 	andi	r2,r2,255
100024e0:	10000126 	beq	r2,zero,100024e8 <_Z14UsbGetRetryCntv+0x5c>
100024e4:	003ff806 	br	100024c8 <__alt_data_end+0xf80024c8>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
100024e8:	01414204 	movi	r5,1288
100024ec:	01000084 	movi	r4,2
100024f0:	00005500 	call	10000550 <_Z8IO_writeht>
	usb_ctl_val = IO_read(HPI_DATA);
100024f4:	0009883a 	mov	r4,zero
100024f8:	00005c00 	call	100005c0 <_Z7IO_readh>
100024fc:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
10002500:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002504:	e037883a 	mov	sp,fp
10002508:	dfc00117 	ldw	ra,4(sp)
1000250c:	df000017 	ldw	fp,0(sp)
10002510:	dec00204 	addi	sp,sp,8
10002514:	f800283a 	ret

10002518 <_Z11UsbPrintMemv>:


void UsbPrintMem()
{
10002518:	defffc04 	addi	sp,sp,-16
1000251c:	dfc00315 	stw	ra,12(sp)
10002520:	df000215 	stw	fp,8(sp)
10002524:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10002528:	01414004 	movi	r5,1280
1000252c:	01000084 	movi	r4,2
10002530:	00005500 	call	10000550 <_Z8IO_writeht>
	for (i = 0; i <= 200; i += 2)
10002534:	e03ffe15 	stw	zero,-8(fp)
10002538:	e0bffe17 	ldw	r2,-8(fp)
1000253c:	10803248 	cmpgei	r2,r2,201
10002540:	10000f1e 	bne	r2,zero,10002580 <_Z11UsbPrintMemv+0x68>
	{
		code = IO_read(HPI_DATA);
10002544:	0009883a 	mov	r4,zero
10002548:	00005c00 	call	100005c0 <_Z7IO_readh>
1000254c:	10bfffcc 	andi	r2,r2,65535
10002550:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10002554:	e0bffe17 	ldw	r2,-8(fp)
10002558:	10814004 	addi	r2,r2,1280
1000255c:	e1bfff17 	ldw	r6,-4(fp)
10002560:	100b883a 	mov	r5,r2
10002564:	01040074 	movhi	r4,4097
10002568:	21139404 	addi	r4,r4,20048
1000256c:	00054140 	call	10005414 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10002570:	e0bffe17 	ldw	r2,-8(fp)
10002574:	10800084 	addi	r2,r2,2
10002578:	e0bffe15 	stw	r2,-8(fp)
1000257c:	003fee06 	br	10002538 <__alt_data_end+0xf8002538>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
10002580:	0001883a 	nop
10002584:	e037883a 	mov	sp,fp
10002588:	dfc00117 	ldw	ra,4(sp)
1000258c:	df000017 	ldw	fp,0(sp)
10002590:	dec00204 	addi	sp,sp,8
10002594:	f800283a 	ret

10002598 <_Znaj>:
10002598:	00840034 	movhi	r2,4096
1000259c:	defff004 	addi	sp,sp,-64
100025a0:	108bb804 	addi	r2,r2,12000
100025a4:	d8800615 	stw	r2,24(sp)
100025a8:	00840074 	movhi	r2,4097
100025ac:	10919e04 	addi	r2,r2,18040
100025b0:	d8800715 	stw	r2,28(sp)
100025b4:	00840034 	movhi	r2,4096
100025b8:	10898304 	addi	r2,r2,9740
100025bc:	d9000d15 	stw	r4,52(sp)
100025c0:	d809883a 	mov	r4,sp
100025c4:	d8800915 	stw	r2,36(sp)
100025c8:	dfc00f15 	stw	ra,60(sp)
100025cc:	df000e15 	stw	fp,56(sp)
100025d0:	dec00815 	stw	sp,32(sp)
100025d4:	dec00a15 	stw	sp,40(sp)
100025d8:	00047580 	call	10004758 <_Unwind_SjLj_Register>
100025dc:	d9000d17 	ldw	r4,52(sp)
100025e0:	00800044 	movi	r2,1
100025e4:	d8800115 	stw	r2,4(sp)
100025e8:	000262c0 	call	1000262c <_Znwj>
100025ec:	d809883a 	mov	r4,sp
100025f0:	d8800d15 	stw	r2,52(sp)
100025f4:	00047700 	call	10004770 <_Unwind_SjLj_Unregister>
100025f8:	d8800d17 	ldw	r2,52(sp)
100025fc:	dfc00f17 	ldw	ra,60(sp)
10002600:	df000e17 	ldw	fp,56(sp)
10002604:	dec01004 	addi	sp,sp,64
10002608:	f800283a 	ret
1000260c:	d8800317 	ldw	r2,12(sp)
10002610:	00ffffc4 	movi	r3,-1
10002614:	d9000217 	ldw	r4,8(sp)
10002618:	10c00226 	beq	r2,r3,10002624 <_Znaj+0x8c>
1000261c:	d8c00115 	stw	r3,4(sp)
10002620:	00049540 	call	10004954 <_Unwind_SjLj_Resume>
10002624:	d8800115 	stw	r2,4(sp)
10002628:	00034e00 	call	100034e0 <__cxa_call_unexpected>

1000262c <_Znwj>:
1000262c:	defffe04 	addi	sp,sp,-8
10002630:	dc000015 	stw	r16,0(sp)
10002634:	dfc00115 	stw	ra,4(sp)
10002638:	2021883a 	mov	r16,r4
1000263c:	2000011e 	bne	r4,zero,10002644 <_Znwj+0x18>
10002640:	04000044 	movi	r16,1
10002644:	8009883a 	mov	r4,r16
10002648:	0004a880 	call	10004a88 <malloc>
1000264c:	10000426 	beq	r2,zero,10002660 <_Znwj+0x34>
10002650:	dfc00117 	ldw	ra,4(sp)
10002654:	dc000017 	ldw	r16,0(sp)
10002658:	dec00204 	addi	sp,sp,8
1000265c:	f800283a 	ret
10002660:	00026b00 	call	100026b0 <_ZSt15get_new_handlerv>
10002664:	10000226 	beq	r2,zero,10002670 <_Znwj+0x44>
10002668:	103ee83a 	callr	r2
1000266c:	003ff506 	br	10002644 <__alt_data_end+0xf8002644>
10002670:	01000104 	movi	r4,4
10002674:	0003cf40 	call	10003cf4 <__cxa_allocate_exception>
10002678:	00c40074 	movhi	r3,4097
1000267c:	01840034 	movhi	r6,4096
10002680:	01440074 	movhi	r5,4097
10002684:	18d3a604 	addi	r3,r3,20120
10002688:	318dc704 	addi	r6,r6,14108
1000268c:	2953a104 	addi	r5,r5,20100
10002690:	1009883a 	mov	r4,r2
10002694:	10c00015 	stw	r3,0(r2)
10002698:	00037a80 	call	100037a8 <__cxa_throw>

1000269c <_ZSt15set_new_handlerPFvvE>:
1000269c:	00c400b4 	movhi	r3,4098
100026a0:	18e27c04 	addi	r3,r3,-30224
100026a4:	18800017 	ldw	r2,0(r3)
100026a8:	19000015 	stw	r4,0(r3)
100026ac:	f800283a 	ret

100026b0 <_ZSt15get_new_handlerv>:
100026b0:	008400b4 	movhi	r2,4098
100026b4:	10a27c04 	addi	r2,r2,-30224
100026b8:	10800017 	ldw	r2,0(r2)
100026bc:	f800283a 	ret

100026c0 <_ZL21size_of_encoded_valueh>:
100026c0:	deffff04 	addi	sp,sp,-4
100026c4:	dfc00015 	stw	ra,0(sp)
100026c8:	20c03fcc 	andi	r3,r4,255
100026cc:	00803fc4 	movi	r2,255
100026d0:	18802026 	beq	r3,r2,10002754 <_ZL21size_of_encoded_valueh+0x94>
100026d4:	210001cc 	andi	r4,r4,7
100026d8:	00800144 	movi	r2,5
100026dc:	11001c36 	bltu	r2,r4,10002750 <_ZL21size_of_encoded_valueh+0x90>
100026e0:	200890ba 	slli	r4,r4,2
100026e4:	00840034 	movhi	r2,4096
100026e8:	1089be04 	addi	r2,r2,9976
100026ec:	2089883a 	add	r4,r4,r2
100026f0:	20800017 	ldw	r2,0(r4)
100026f4:	1000683a 	jmp	r2
100026f8:	10002710 	cmplti	zero,r2,156
100026fc:	10002750 	cmplti	zero,r2,157
10002700:	10002720 	cmpeqi	zero,r2,156
10002704:	10002710 	cmplti	zero,r2,156
10002708:	10002740 	call	11000274 <_gp+0xfe1414>
1000270c:	10002730 	cmpltui	zero,r2,156
10002710:	00800104 	movi	r2,4
10002714:	dfc00017 	ldw	ra,0(sp)
10002718:	dec00104 	addi	sp,sp,4
1000271c:	f800283a 	ret
10002720:	00800084 	movi	r2,2
10002724:	dfc00017 	ldw	ra,0(sp)
10002728:	dec00104 	addi	sp,sp,4
1000272c:	f800283a 	ret
10002730:	00800044 	movi	r2,1
10002734:	dfc00017 	ldw	ra,0(sp)
10002738:	dec00104 	addi	sp,sp,4
1000273c:	f800283a 	ret
10002740:	00800204 	movi	r2,8
10002744:	dfc00017 	ldw	ra,0(sp)
10002748:	dec00104 	addi	sp,sp,4
1000274c:	f800283a 	ret
10002750:	0004a700 	call	10004a70 <abort>
10002754:	0005883a 	mov	r2,zero
10002758:	dfc00017 	ldw	ra,0(sp)
1000275c:	dec00104 	addi	sp,sp,4
10002760:	f800283a 	ret

10002764 <_ZL28read_encoded_value_with_basehjPKhPj>:
10002764:	deffff04 	addi	sp,sp,-4
10002768:	dfc00015 	stw	ra,0(sp)
1000276c:	20c03fcc 	andi	r3,r4,255
10002770:	00801404 	movi	r2,80
10002774:	18807326 	beq	r3,r2,10002944 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
10002778:	20c003cc 	andi	r3,r4,15
1000277c:	00800304 	movi	r2,12
10002780:	10c06f36 	bltu	r2,r3,10002940 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
10002784:	180690ba 	slli	r3,r3,2
10002788:	02040034 	movhi	r8,4096
1000278c:	4209e704 	addi	r8,r8,10140
10002790:	1a07883a 	add	r3,r3,r8
10002794:	18800017 	ldw	r2,0(r3)
10002798:	1000683a 	jmp	r2
1000279c:	100027d0 	cmplti	zero,r2,159
100027a0:	100028ec 	andhi	zero,r2,163
100027a4:	10002928 	cmpgeui	zero,r2,164
100027a8:	100027d0 	cmplti	zero,r2,159
100027ac:	10002834 	orhi	zero,r2,160
100027b0:	10002888 	cmpgei	zero,r2,162
100027b4:	10002940 	call	11000294 <_gp+0xfe1434>
100027b8:	10002940 	call	11000294 <_gp+0xfe1434>
100027bc:	10002940 	call	11000294 <_gp+0xfe1434>
100027c0:	10002894 	ori	zero,r2,162
100027c4:	10002864 	muli	zero,r2,161
100027c8:	100027d0 	cmplti	zero,r2,159
100027cc:	10002834 	orhi	zero,r2,160
100027d0:	30800043 	ldbu	r2,1(r6)
100027d4:	30c00083 	ldbu	r3,2(r6)
100027d8:	324000c3 	ldbu	r9,3(r6)
100027dc:	32000003 	ldbu	r8,0(r6)
100027e0:	1004923a 	slli	r2,r2,8
100027e4:	1806943a 	slli	r3,r3,16
100027e8:	4812963a 	slli	r9,r9,24
100027ec:	1204b03a 	or	r2,r2,r8
100027f0:	1884b03a 	or	r2,r3,r2
100027f4:	4886b03a 	or	r3,r9,r2
100027f8:	30800104 	addi	r2,r6,4
100027fc:	18000926 	beq	r3,zero,10002824 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
10002800:	22001c0c 	andi	r8,r4,112
10002804:	02400404 	movi	r9,16
10002808:	42405726 	beq	r8,r9,10002968 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
1000280c:	21003fcc 	andi	r4,r4,255
10002810:	2100201c 	xori	r4,r4,128
10002814:	213fe004 	addi	r4,r4,-128
10002818:	1947883a 	add	r3,r3,r5
1000281c:	2000010e 	bge	r4,zero,10002824 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
10002820:	18c00017 	ldw	r3,0(r3)
10002824:	38c00015 	stw	r3,0(r7)
10002828:	dfc00017 	ldw	ra,0(sp)
1000282c:	dec00104 	addi	sp,sp,4
10002830:	f800283a 	ret
10002834:	30800043 	ldbu	r2,1(r6)
10002838:	30c00083 	ldbu	r3,2(r6)
1000283c:	324000c3 	ldbu	r9,3(r6)
10002840:	32000003 	ldbu	r8,0(r6)
10002844:	1004923a 	slli	r2,r2,8
10002848:	1806943a 	slli	r3,r3,16
1000284c:	4812963a 	slli	r9,r9,24
10002850:	1204b03a 	or	r2,r2,r8
10002854:	1884b03a 	or	r2,r3,r2
10002858:	4886b03a 	or	r3,r9,r2
1000285c:	30800204 	addi	r2,r6,8
10002860:	003fe606 	br	100027fc <__alt_data_end+0xf80027fc>
10002864:	30c00043 	ldbu	r3,1(r6)
10002868:	32000003 	ldbu	r8,0(r6)
1000286c:	30800084 	addi	r2,r6,2
10002870:	1806923a 	slli	r3,r3,8
10002874:	1a06b03a 	or	r3,r3,r8
10002878:	18ffffcc 	andi	r3,r3,65535
1000287c:	18e0001c 	xori	r3,r3,32768
10002880:	18e00004 	addi	r3,r3,-32768
10002884:	003fdd06 	br	100027fc <__alt_data_end+0xf80027fc>
10002888:	30c00003 	ldbu	r3,0(r6)
1000288c:	30800044 	addi	r2,r6,1
10002890:	003fda06 	br	100027fc <__alt_data_end+0xf80027fc>
10002894:	3017883a 	mov	r11,r6
10002898:	0007883a 	mov	r3,zero
1000289c:	0013883a 	mov	r9,zero
100028a0:	5a800003 	ldbu	r10,0(r11)
100028a4:	58800044 	addi	r2,r11,1
100028a8:	1017883a 	mov	r11,r2
100028ac:	52001fcc 	andi	r8,r10,127
100028b0:	4250983a 	sll	r8,r8,r9
100028b4:	53003fcc 	andi	r12,r10,255
100028b8:	6300201c 	xori	r12,r12,128
100028bc:	633fe004 	addi	r12,r12,-128
100028c0:	1a06b03a 	or	r3,r3,r8
100028c4:	4a4001c4 	addi	r9,r9,7
100028c8:	603ff516 	blt	r12,zero,100028a0 <__alt_data_end+0xf80028a0>
100028cc:	020007c4 	movi	r8,31
100028d0:	427fca36 	bltu	r8,r9,100027fc <__alt_data_end+0xf80027fc>
100028d4:	5280100c 	andi	r10,r10,64
100028d8:	503fc826 	beq	r10,zero,100027fc <__alt_data_end+0xf80027fc>
100028dc:	023fffc4 	movi	r8,-1
100028e0:	4252983a 	sll	r9,r8,r9
100028e4:	1a46b03a 	or	r3,r3,r9
100028e8:	003fc506 	br	10002800 <__alt_data_end+0xf8002800>
100028ec:	3017883a 	mov	r11,r6
100028f0:	0007883a 	mov	r3,zero
100028f4:	0015883a 	mov	r10,zero
100028f8:	5a000003 	ldbu	r8,0(r11)
100028fc:	58800044 	addi	r2,r11,1
10002900:	1017883a 	mov	r11,r2
10002904:	42401fcc 	andi	r9,r8,127
10002908:	4a92983a 	sll	r9,r9,r10
1000290c:	42003fcc 	andi	r8,r8,255
10002910:	4200201c 	xori	r8,r8,128
10002914:	423fe004 	addi	r8,r8,-128
10002918:	1a46b03a 	or	r3,r3,r9
1000291c:	528001c4 	addi	r10,r10,7
10002920:	403ff516 	blt	r8,zero,100028f8 <__alt_data_end+0xf80028f8>
10002924:	003fb506 	br	100027fc <__alt_data_end+0xf80027fc>
10002928:	30c00043 	ldbu	r3,1(r6)
1000292c:	32000003 	ldbu	r8,0(r6)
10002930:	30800084 	addi	r2,r6,2
10002934:	1806923a 	slli	r3,r3,8
10002938:	1a06b03a 	or	r3,r3,r8
1000293c:	003faf06 	br	100027fc <__alt_data_end+0xf80027fc>
10002940:	0004a700 	call	10004a70 <abort>
10002944:	308000c4 	addi	r2,r6,3
10002948:	00ffff04 	movi	r3,-4
1000294c:	10c4703a 	and	r2,r2,r3
10002950:	10c00017 	ldw	r3,0(r2)
10002954:	10800104 	addi	r2,r2,4
10002958:	38c00015 	stw	r3,0(r7)
1000295c:	dfc00017 	ldw	ra,0(sp)
10002960:	dec00104 	addi	sp,sp,4
10002964:	f800283a 	ret
10002968:	300b883a 	mov	r5,r6
1000296c:	003fa706 	br	1000280c <__alt_data_end+0xf800280c>

10002970 <_ZL15get_ttype_entryP16lsda_header_infom>:
10002970:	defffc04 	addi	sp,sp,-16
10002974:	dfc00315 	stw	ra,12(sp)
10002978:	dc000215 	stw	r16,8(sp)
1000297c:	2021883a 	mov	r16,r4
10002980:	21000503 	ldbu	r4,20(r4)
10002984:	d9400115 	stw	r5,4(sp)
10002988:	00026c00 	call	100026c0 <_ZL21size_of_encoded_valueh>
1000298c:	d9400117 	ldw	r5,4(sp)
10002990:	1009883a 	mov	r4,r2
10002994:	00045280 	call	10004528 <__mulsi3>
10002998:	81800317 	ldw	r6,12(r16)
1000299c:	81400217 	ldw	r5,8(r16)
100029a0:	81000503 	ldbu	r4,20(r16)
100029a4:	d80f883a 	mov	r7,sp
100029a8:	308dc83a 	sub	r6,r6,r2
100029ac:	00027640 	call	10002764 <_ZL28read_encoded_value_with_basehjPKhPj>
100029b0:	d8800017 	ldw	r2,0(sp)
100029b4:	dfc00317 	ldw	ra,12(sp)
100029b8:	dc000217 	ldw	r16,8(sp)
100029bc:	dec00404 	addi	sp,sp,16
100029c0:	f800283a 	ret

100029c4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
100029c4:	deffff04 	addi	sp,sp,-4
100029c8:	dfc00015 	stw	ra,0(sp)
100029cc:	20c03fcc 	andi	r3,r4,255
100029d0:	00803fc4 	movi	r2,255
100029d4:	18800e26 	beq	r3,r2,10002a10 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
100029d8:	20801c0c 	andi	r2,r4,112
100029dc:	00c00804 	movi	r3,32
100029e0:	10c01726 	beq	r2,r3,10002a40 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
100029e4:	18800e2e 	bgeu	r3,r2,10002a20 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
100029e8:	00c01004 	movi	r3,64
100029ec:	10c01026 	beq	r2,r3,10002a30 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
100029f0:	00c01404 	movi	r3,80
100029f4:	10c00626 	beq	r2,r3,10002a10 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
100029f8:	00c00c04 	movi	r3,48
100029fc:	10c00b1e 	bne	r2,r3,10002a2c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
10002a00:	2809883a 	mov	r4,r5
10002a04:	dfc00017 	ldw	ra,0(sp)
10002a08:	dec00104 	addi	sp,sp,4
10002a0c:	00048301 	jmpi	10004830 <_Unwind_GetDataRelBase>
10002a10:	0005883a 	mov	r2,zero
10002a14:	dfc00017 	ldw	ra,0(sp)
10002a18:	dec00104 	addi	sp,sp,4
10002a1c:	f800283a 	ret
10002a20:	103ffb26 	beq	r2,zero,10002a10 <__alt_data_end+0xf8002a10>
10002a24:	00c00404 	movi	r3,16
10002a28:	10fff926 	beq	r2,r3,10002a10 <__alt_data_end+0xf8002a10>
10002a2c:	0004a700 	call	10004a70 <abort>
10002a30:	2809883a 	mov	r4,r5
10002a34:	dfc00017 	ldw	ra,0(sp)
10002a38:	dec00104 	addi	sp,sp,4
10002a3c:	00048201 	jmpi	10004820 <_Unwind_GetRegionStart>
10002a40:	2809883a 	mov	r4,r5
10002a44:	dfc00017 	ldw	ra,0(sp)
10002a48:	dec00104 	addi	sp,sp,4
10002a4c:	00048381 	jmpi	10004838 <_Unwind_GetTextRelBase>

10002a50 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
10002a50:	defffb04 	addi	sp,sp,-20
10002a54:	dcc00315 	stw	r19,12(sp)
10002a58:	dc400115 	stw	r17,4(sp)
10002a5c:	dc000015 	stw	r16,0(sp)
10002a60:	dfc00415 	stw	ra,16(sp)
10002a64:	dc800215 	stw	r18,8(sp)
10002a68:	2027883a 	mov	r19,r4
10002a6c:	2821883a 	mov	r16,r5
10002a70:	3023883a 	mov	r17,r6
10002a74:	20003f26 	beq	r4,zero,10002b74 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
10002a78:	00048200 	call	10004820 <_Unwind_GetRegionStart>
10002a7c:	88800015 	stw	r2,0(r17)
10002a80:	84800003 	ldbu	r18,0(r16)
10002a84:	00c03fc4 	movi	r3,255
10002a88:	84000044 	addi	r16,r16,1
10002a8c:	90c03726 	beq	r18,r3,10002b6c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
10002a90:	980b883a 	mov	r5,r19
10002a94:	9009883a 	mov	r4,r18
10002a98:	00029c40 	call	100029c4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
10002a9c:	800d883a 	mov	r6,r16
10002aa0:	89c00104 	addi	r7,r17,4
10002aa4:	100b883a 	mov	r5,r2
10002aa8:	9009883a 	mov	r4,r18
10002aac:	00027640 	call	10002764 <_ZL28read_encoded_value_with_basehjPKhPj>
10002ab0:	1021883a 	mov	r16,r2
10002ab4:	80c00003 	ldbu	r3,0(r16)
10002ab8:	01003fc4 	movi	r4,255
10002abc:	80800044 	addi	r2,r16,1
10002ac0:	88c00505 	stb	r3,20(r17)
10002ac4:	18c03fcc 	andi	r3,r3,255
10002ac8:	19002c26 	beq	r3,r4,10002b7c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
10002acc:	100f883a 	mov	r7,r2
10002ad0:	000d883a 	mov	r6,zero
10002ad4:	000b883a 	mov	r5,zero
10002ad8:	38c00003 	ldbu	r3,0(r7)
10002adc:	10800044 	addi	r2,r2,1
10002ae0:	100f883a 	mov	r7,r2
10002ae4:	19001fcc 	andi	r4,r3,127
10002ae8:	2148983a 	sll	r4,r4,r5
10002aec:	18c03fcc 	andi	r3,r3,255
10002af0:	18c0201c 	xori	r3,r3,128
10002af4:	18ffe004 	addi	r3,r3,-128
10002af8:	310cb03a 	or	r6,r6,r4
10002afc:	294001c4 	addi	r5,r5,7
10002b00:	183ff516 	blt	r3,zero,10002ad8 <__alt_data_end+0xf8002ad8>
10002b04:	118d883a 	add	r6,r2,r6
10002b08:	89800315 	stw	r6,12(r17)
10002b0c:	10c00003 	ldbu	r3,0(r2)
10002b10:	000d883a 	mov	r6,zero
10002b14:	10800044 	addi	r2,r2,1
10002b18:	88c00545 	stb	r3,21(r17)
10002b1c:	000b883a 	mov	r5,zero
10002b20:	10c00003 	ldbu	r3,0(r2)
10002b24:	10800044 	addi	r2,r2,1
10002b28:	19001fcc 	andi	r4,r3,127
10002b2c:	2148983a 	sll	r4,r4,r5
10002b30:	18c03fcc 	andi	r3,r3,255
10002b34:	18c0201c 	xori	r3,r3,128
10002b38:	18ffe004 	addi	r3,r3,-128
10002b3c:	310cb03a 	or	r6,r6,r4
10002b40:	294001c4 	addi	r5,r5,7
10002b44:	183ff616 	blt	r3,zero,10002b20 <__alt_data_end+0xf8002b20>
10002b48:	118d883a 	add	r6,r2,r6
10002b4c:	89800415 	stw	r6,16(r17)
10002b50:	dfc00417 	ldw	ra,16(sp)
10002b54:	dcc00317 	ldw	r19,12(sp)
10002b58:	dc800217 	ldw	r18,8(sp)
10002b5c:	dc400117 	ldw	r17,4(sp)
10002b60:	dc000017 	ldw	r16,0(sp)
10002b64:	dec00504 	addi	sp,sp,20
10002b68:	f800283a 	ret
10002b6c:	88800115 	stw	r2,4(r17)
10002b70:	003fd006 	br	10002ab4 <__alt_data_end+0xf8002ab4>
10002b74:	0005883a 	mov	r2,zero
10002b78:	003fc006 	br	10002a7c <__alt_data_end+0xf8002a7c>
10002b7c:	88000315 	stw	zero,12(r17)
10002b80:	003fe206 	br	10002b0c <__alt_data_end+0xf8002b0c>

10002b84 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
10002b84:	28800017 	ldw	r2,0(r5)
10002b88:	30c00017 	ldw	r3,0(r6)
10002b8c:	defffb04 	addi	sp,sp,-20
10002b90:	10800217 	ldw	r2,8(r2)
10002b94:	dc400315 	stw	r17,12(sp)
10002b98:	dc000215 	stw	r16,8(sp)
10002b9c:	d9400115 	stw	r5,4(sp)
10002ba0:	dfc00415 	stw	ra,16(sp)
10002ba4:	2021883a 	mov	r16,r4
10002ba8:	d8c00015 	stw	r3,0(sp)
10002bac:	2809883a 	mov	r4,r5
10002bb0:	3023883a 	mov	r17,r6
10002bb4:	103ee83a 	callr	r2
10002bb8:	10803fcc 	andi	r2,r2,255
10002bbc:	d9400117 	ldw	r5,4(sp)
10002bc0:	10000326 	beq	r2,zero,10002bd0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
10002bc4:	d8800017 	ldw	r2,0(sp)
10002bc8:	10800017 	ldw	r2,0(r2)
10002bcc:	d8800015 	stw	r2,0(sp)
10002bd0:	80800017 	ldw	r2,0(r16)
10002bd4:	01c00044 	movi	r7,1
10002bd8:	d80d883a 	mov	r6,sp
10002bdc:	10800417 	ldw	r2,16(r2)
10002be0:	8009883a 	mov	r4,r16
10002be4:	103ee83a 	callr	r2
10002be8:	10c03fcc 	andi	r3,r2,255
10002bec:	18000226 	beq	r3,zero,10002bf8 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
10002bf0:	d8c00017 	ldw	r3,0(sp)
10002bf4:	88c00015 	stw	r3,0(r17)
10002bf8:	dfc00417 	ldw	ra,16(sp)
10002bfc:	dc400317 	ldw	r17,12(sp)
10002c00:	dc000217 	ldw	r16,8(sp)
10002c04:	dec00504 	addi	sp,sp,20
10002c08:	f800283a 	ret

10002c0c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
10002c0c:	defff304 	addi	sp,sp,-52
10002c10:	dc800615 	stw	r18,24(sp)
10002c14:	3825d23a 	srai	r18,r7,8
10002c18:	dd000815 	stw	r20,32(sp)
10002c1c:	dcc00715 	stw	r19,28(sp)
10002c20:	dfc00c15 	stw	ra,48(sp)
10002c24:	ddc00b15 	stw	r23,44(sp)
10002c28:	dd800a15 	stw	r22,40(sp)
10002c2c:	dd400915 	stw	r21,36(sp)
10002c30:	dc400515 	stw	r17,20(sp)
10002c34:	dc000415 	stw	r16,16(sp)
10002c38:	d9400215 	stw	r5,8(sp)
10002c3c:	3827883a 	mov	r19,r7
10002c40:	2029883a 	mov	r20,r4
10002c44:	9000010e 	bge	r18,zero,10002c4c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x40>
10002c48:	04a5c83a 	sub	r18,zero,r18
10002c4c:	000b883a 	mov	r5,zero
10002c50:	01000144 	movi	r4,5
10002c54:	d9800315 	stw	r6,12(sp)
10002c58:	00029c40 	call	100029c4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
10002c5c:	d9800317 	ldw	r6,12(sp)
10002c60:	d9c00104 	addi	r7,sp,4
10002c64:	100b883a 	mov	r5,r2
10002c68:	01000144 	movi	r4,5
10002c6c:	00027640 	call	10002764 <_ZL28read_encoded_value_with_basehjPKhPj>
10002c70:	017ffe44 	movi	r5,-7
10002c74:	1009883a 	mov	r4,r2
10002c78:	1021883a 	mov	r16,r2
10002c7c:	00045280 	call	10004528 <__mulsi3>
10002c80:	102d883a 	mov	r22,r2
10002c84:	0023883a 	mov	r17,zero
10002c88:	85400003 	ldbu	r21,0(r16)
10002c8c:	8009883a 	mov	r4,r16
10002c90:	014001c4 	movi	r5,7
10002c94:	00045280 	call	10004528 <__mulsi3>
10002c98:	a8c01fcc 	andi	r3,r21,127
10002c9c:	1585883a 	add	r2,r2,r22
10002ca0:	1886983a 	sll	r3,r3,r2
10002ca4:	ad403fcc 	andi	r21,r21,255
10002ca8:	ad40201c 	xori	r21,r21,128
10002cac:	ad7fe004 	addi	r21,r21,-128
10002cb0:	84000044 	addi	r16,r16,1
10002cb4:	88e2b03a 	or	r17,r17,r3
10002cb8:	a83ff316 	blt	r21,zero,10002c88 <__alt_data_end+0xf8002c88>
10002cbc:	8461883a 	add	r16,r16,r17
10002cc0:	017ffe44 	movi	r5,-7
10002cc4:	8009883a 	mov	r4,r16
10002cc8:	00045280 	call	10004528 <__mulsi3>
10002ccc:	102d883a 	mov	r22,r2
10002cd0:	002b883a 	mov	r21,zero
10002cd4:	84400003 	ldbu	r17,0(r16)
10002cd8:	8009883a 	mov	r4,r16
10002cdc:	014001c4 	movi	r5,7
10002ce0:	00045280 	call	10004528 <__mulsi3>
10002ce4:	88c01fcc 	andi	r3,r17,127
10002ce8:	1585883a 	add	r2,r2,r22
10002cec:	1886983a 	sll	r3,r3,r2
10002cf0:	8c403fcc 	andi	r17,r17,255
10002cf4:	8c40201c 	xori	r17,r17,128
10002cf8:	8c7fe004 	addi	r17,r17,-128
10002cfc:	84000044 	addi	r16,r16,1
10002d00:	a8eab03a 	or	r21,r21,r3
10002d04:	883ff316 	blt	r17,zero,10002cd4 <__alt_data_end+0xf8002cd4>
10002d08:	94403fcc 	andi	r17,r18,255
10002d0c:	8c7fffc4 	addi	r17,r17,-1
10002d10:	8463883a 	add	r17,r16,r17
10002d14:	ad4000c4 	addi	r21,r21,3
10002d18:	00bfff04 	movi	r2,-4
10002d1c:	ac21883a 	add	r16,r21,r16
10002d20:	017ffe44 	movi	r5,-7
10002d24:	8809883a 	mov	r4,r17
10002d28:	80a0703a 	and	r16,r16,r2
10002d2c:	00045280 	call	10004528 <__mulsi3>
10002d30:	0025883a 	mov	r18,zero
10002d34:	102f883a 	mov	r23,r2
10002d38:	8d800003 	ldbu	r22,0(r17)
10002d3c:	8809883a 	mov	r4,r17
10002d40:	014001c4 	movi	r5,7
10002d44:	00045280 	call	10004528 <__mulsi3>
10002d48:	b0c01fcc 	andi	r3,r22,127
10002d4c:	15c5883a 	add	r2,r2,r23
10002d50:	1886983a 	sll	r3,r3,r2
10002d54:	b5803fcc 	andi	r22,r22,255
10002d58:	b580201c 	xori	r22,r22,128
10002d5c:	8d400044 	addi	r21,r17,1
10002d60:	b5bfe004 	addi	r22,r22,-128
10002d64:	90e4b03a 	or	r18,r18,r3
10002d68:	a823883a 	mov	r17,r21
10002d6c:	b03ff216 	blt	r22,zero,10002d38 <__alt_data_end+0xf8002d38>
10002d70:	9cc03fcc 	andi	r19,r19,255
10002d74:	90002426 	beq	r18,zero,10002e08 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1fc>
10002d78:	9809883a 	mov	r4,r19
10002d7c:	00026c00 	call	100026c0 <_ZL21size_of_encoded_valueh>
10002d80:	100b883a 	mov	r5,r2
10002d84:	913fffc4 	addi	r4,r18,-1
10002d88:	00045280 	call	10004528 <__mulsi3>
10002d8c:	d9400d17 	ldw	r5,52(sp)
10002d90:	d80f883a 	mov	r7,sp
10002d94:	9809883a 	mov	r4,r19
10002d98:	140d883a 	add	r6,r2,r16
10002d9c:	00027640 	call	10002764 <_ZL28read_encoded_value_with_basehjPKhPj>
10002da0:	d9000017 	ldw	r4,0(sp)
10002da4:	d9800204 	addi	r6,sp,8
10002da8:	a00b883a 	mov	r5,r20
10002dac:	0002b840 	call	10002b84 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
10002db0:	10c03fcc 	andi	r3,r2,255
10002db4:	1800151e 	bne	r3,zero,10002e0c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x200>
10002db8:	a809883a 	mov	r4,r21
10002dbc:	017ffe44 	movi	r5,-7
10002dc0:	00045280 	call	10004528 <__mulsi3>
10002dc4:	102d883a 	mov	r22,r2
10002dc8:	a809883a 	mov	r4,r21
10002dcc:	0025883a 	mov	r18,zero
10002dd0:	24400003 	ldbu	r17,0(r4)
10002dd4:	014001c4 	movi	r5,7
10002dd8:	00045280 	call	10004528 <__mulsi3>
10002ddc:	88c01fcc 	andi	r3,r17,127
10002de0:	1585883a 	add	r2,r2,r22
10002de4:	1886983a 	sll	r3,r3,r2
10002de8:	8c403fcc 	andi	r17,r17,255
10002dec:	8c40201c 	xori	r17,r17,128
10002df0:	ad400044 	addi	r21,r21,1
10002df4:	8c7fe004 	addi	r17,r17,-128
10002df8:	90e4b03a 	or	r18,r18,r3
10002dfc:	a809883a 	mov	r4,r21
10002e00:	883ff316 	blt	r17,zero,10002dd0 <__alt_data_end+0xf8002dd0>
10002e04:	003fdb06 	br	10002d74 <__alt_data_end+0xf8002d74>
10002e08:	0005883a 	mov	r2,zero
10002e0c:	dfc00c17 	ldw	ra,48(sp)
10002e10:	ddc00b17 	ldw	r23,44(sp)
10002e14:	dd800a17 	ldw	r22,40(sp)
10002e18:	dd400917 	ldw	r21,36(sp)
10002e1c:	dd000817 	ldw	r20,32(sp)
10002e20:	dcc00717 	ldw	r19,28(sp)
10002e24:	dc800617 	ldw	r18,24(sp)
10002e28:	dc400517 	ldw	r17,20(sp)
10002e2c:	dc000417 	ldw	r16,16(sp)
10002e30:	dec00d04 	addi	sp,sp,52
10002e34:	f800283a 	ret

10002e38 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
10002e38:	defffb04 	addi	sp,sp,-20
10002e3c:	dc000115 	stw	r16,4(sp)
10002e40:	24000317 	ldw	r16,12(r4)
10002e44:	01ce303a 	nor	r7,zero,r7
10002e48:	dc800315 	stw	r18,12(sp)
10002e4c:	dc400215 	stw	r17,8(sp)
10002e50:	dfc00415 	stw	ra,16(sp)
10002e54:	2023883a 	mov	r17,r4
10002e58:	2825883a 	mov	r18,r5
10002e5c:	d9800015 	stw	r6,0(sp)
10002e60:	81e1883a 	add	r16,r16,r7
10002e64:	800d883a 	mov	r6,r16
10002e68:	000b883a 	mov	r5,zero
10002e6c:	0009883a 	mov	r4,zero
10002e70:	30800003 	ldbu	r2,0(r6)
10002e74:	84000044 	addi	r16,r16,1
10002e78:	800d883a 	mov	r6,r16
10002e7c:	10c01fcc 	andi	r3,r2,127
10002e80:	1906983a 	sll	r3,r3,r4
10002e84:	10803fcc 	andi	r2,r2,255
10002e88:	1080201c 	xori	r2,r2,128
10002e8c:	10bfe004 	addi	r2,r2,-128
10002e90:	28cab03a 	or	r5,r5,r3
10002e94:	210001c4 	addi	r4,r4,7
10002e98:	103ff516 	blt	r2,zero,10002e70 <__alt_data_end+0xf8002e70>
10002e9c:	28000e26 	beq	r5,zero,10002ed8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
10002ea0:	8809883a 	mov	r4,r17
10002ea4:	00029700 	call	10002970 <_ZL15get_ttype_entryP16lsda_header_infom>
10002ea8:	d80d883a 	mov	r6,sp
10002eac:	900b883a 	mov	r5,r18
10002eb0:	1009883a 	mov	r4,r2
10002eb4:	0002b840 	call	10002b84 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
10002eb8:	10c03fcc 	andi	r3,r2,255
10002ebc:	183fe926 	beq	r3,zero,10002e64 <__alt_data_end+0xf8002e64>
10002ec0:	dfc00417 	ldw	ra,16(sp)
10002ec4:	dc800317 	ldw	r18,12(sp)
10002ec8:	dc400217 	ldw	r17,8(sp)
10002ecc:	dc000117 	ldw	r16,4(sp)
10002ed0:	dec00504 	addi	sp,sp,20
10002ed4:	f800283a 	ret
10002ed8:	0005883a 	mov	r2,zero
10002edc:	003ff806 	br	10002ec0 <__alt_data_end+0xf8002ec0>

10002ee0 <__gxx_personality_sj0>:
10002ee0:	00840034 	movhi	r2,4096
10002ee4:	deffdd04 	addi	sp,sp,-140
10002ee8:	108bb804 	addi	r2,r2,12000
10002eec:	d8800e15 	stw	r2,56(sp)
10002ef0:	00840074 	movhi	r2,4097
10002ef4:	1091a304 	addi	r2,r2,18060
10002ef8:	d8800f15 	stw	r2,60(sp)
10002efc:	00840034 	movhi	r2,4096
10002f00:	108d2e04 	addi	r2,r2,13496
10002f04:	d9001515 	stw	r4,84(sp)
10002f08:	d9000804 	addi	r4,sp,32
10002f0c:	d8801115 	stw	r2,68(sp)
10002f10:	dfc02215 	stw	ra,136(sp)
10002f14:	df002115 	stw	fp,132(sp)
10002f18:	dec01015 	stw	sp,64(sp)
10002f1c:	dec01215 	stw	sp,72(sp)
10002f20:	d9401915 	stw	r5,100(sp)
10002f24:	d9801615 	stw	r6,88(sp)
10002f28:	d9c01715 	stw	r7,92(sp)
10002f2c:	00047580 	call	10004758 <_Unwind_SjLj_Register>
10002f30:	d8c01517 	ldw	r3,84(sp)
10002f34:	d8000715 	stw	zero,28(sp)
10002f38:	d8000615 	stw	zero,24(sp)
10002f3c:	00800044 	movi	r2,1
10002f40:	18800926 	beq	r3,r2,10002f68 <__gxx_personality_sj0+0x88>
10002f44:	01c000c4 	movi	r7,3
10002f48:	d9c01515 	stw	r7,84(sp)
10002f4c:	d9000804 	addi	r4,sp,32
10002f50:	00047700 	call	10004770 <_Unwind_SjLj_Unregister>
10002f54:	d8801517 	ldw	r2,84(sp)
10002f58:	dfc02217 	ldw	ra,136(sp)
10002f5c:	df002117 	ldw	fp,132(sp)
10002f60:	dec02304 	addi	sp,sp,140
10002f64:	f800283a 	ret
10002f68:	d9001617 	ldw	r4,88(sp)
10002f6c:	00af3574 	movhi	r2,48341
10002f70:	d9c01717 	ldw	r7,92(sp)
10002f74:	10b54004 	addi	r2,r2,-11008
10002f78:	00ee2cb4 	movhi	r3,47282
10002f7c:	2085883a 	add	r2,r4,r2
10002f80:	18eaaf04 	addi	r3,r3,-21828
10002f84:	d8801b15 	stw	r2,108(sp)
10002f88:	38c7883a 	add	r3,r7,r3
10002f8c:	1105803a 	cmpltu	r2,r2,r4
10002f90:	10c7883a 	add	r3,r2,r3
10002f94:	d8c01c15 	stw	r3,112(sp)
10002f98:	d8c01917 	ldw	r3,100(sp)
10002f9c:	00800184 	movi	r2,6
10002fa0:	18805426 	beq	r3,r2,100030f4 <__gxx_personality_sj0+0x214>
10002fa4:	d9002417 	ldw	r4,144(sp)
10002fa8:	00bfffc4 	movi	r2,-1
10002fac:	d8800915 	stw	r2,36(sp)
10002fb0:	00048140 	call	10004814 <_Unwind_GetLanguageSpecificData>
10002fb4:	d8801a15 	stw	r2,104(sp)
10002fb8:	1000c926 	beq	r2,zero,100032e0 <__gxx_personality_sj0+0x400>
10002fbc:	d9002417 	ldw	r4,144(sp)
10002fc0:	d80d883a 	mov	r6,sp
10002fc4:	100b883a 	mov	r5,r2
10002fc8:	0002a500 	call	10002a50 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
10002fcc:	d9402417 	ldw	r5,144(sp)
10002fd0:	d9000503 	ldbu	r4,20(sp)
10002fd4:	d8801515 	stw	r2,84(sp)
10002fd8:	00029c40 	call	100029c4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
10002fdc:	d9002417 	ldw	r4,144(sp)
10002fe0:	d9400604 	addi	r5,sp,24
10002fe4:	d8800215 	stw	r2,8(sp)
10002fe8:	00047e40 	call	100047e4 <_Unwind_GetIPInfo>
10002fec:	d8c00617 	ldw	r3,24(sp)
10002ff0:	18006126 	beq	r3,zero,10003178 <__gxx_personality_sj0+0x298>
10002ff4:	1000ba16 	blt	r2,zero,100032e0 <__gxx_personality_sj0+0x400>
10002ff8:	10002f1e 	bne	r2,zero,100030b8 <__gxx_personality_sj0+0x1d8>
10002ffc:	d8001515 	stw	zero,84(sp)
10003000:	d8001f15 	stw	zero,124(sp)
10003004:	d8001815 	stw	zero,96(sp)
10003008:	00c00044 	movi	r3,1
1000300c:	d9001917 	ldw	r4,100(sp)
10003010:	2080004c 	andi	r2,r4,1
10003014:	1000b51e 	bne	r2,zero,100032ec <__gxx_personality_sj0+0x40c>
10003018:	d9001917 	ldw	r4,100(sp)
1000301c:	2080020c 	andi	r2,r4,8
10003020:	1000b71e 	bne	r2,zero,10003300 <__gxx_personality_sj0+0x420>
10003024:	d9c01c17 	ldw	r7,112(sp)
10003028:	3800b826 	beq	r7,zero,1000330c <__gxx_personality_sj0+0x42c>
1000302c:	00800044 	movi	r2,1
10003030:	1880b526 	beq	r3,r2,10003308 <__gxx_personality_sj0+0x428>
10003034:	d9c01517 	ldw	r7,84(sp)
10003038:	3800f516 	blt	r7,zero,10003410 <__gxx_personality_sj0+0x530>
1000303c:	d9002417 	ldw	r4,144(sp)
10003040:	d9802317 	ldw	r6,140(sp)
10003044:	00bfffc4 	movi	r2,-1
10003048:	000b883a 	mov	r5,zero
1000304c:	d8800915 	stw	r2,36(sp)
10003050:	00047b80 	call	100047b8 <_Unwind_SetGR>
10003054:	d9801517 	ldw	r6,84(sp)
10003058:	d9002417 	ldw	r4,144(sp)
1000305c:	01400044 	movi	r5,1
10003060:	00047b80 	call	100047b8 <_Unwind_SetGR>
10003064:	d9002417 	ldw	r4,144(sp)
10003068:	d9401f17 	ldw	r5,124(sp)
1000306c:	00048040 	call	10004804 <_Unwind_SetIP>
10003070:	010001c4 	movi	r4,7
10003074:	d9001515 	stw	r4,84(sp)
10003078:	003fb406 	br	10002f4c <__alt_data_end+0xf8002f4c>
1000307c:	000f883a 	mov	r7,zero
10003080:	000d883a 	mov	r6,zero
10003084:	19000003 	ldbu	r4,0(r3)
10003088:	18c00044 	addi	r3,r3,1
1000308c:	d8c01515 	stw	r3,84(sp)
10003090:	21401fcc 	andi	r5,r4,127
10003094:	298a983a 	sll	r5,r5,r6
10003098:	21003fcc 	andi	r4,r4,255
1000309c:	2100201c 	xori	r4,r4,128
100030a0:	213fe004 	addi	r4,r4,-128
100030a4:	394eb03a 	or	r7,r7,r5
100030a8:	318001c4 	addi	r6,r6,7
100030ac:	203ff516 	blt	r4,zero,10003084 <__alt_data_end+0xf8003084>
100030b0:	10bfffc4 	addi	r2,r2,-1
100030b4:	10003226 	beq	r2,zero,10003180 <__gxx_personality_sj0+0x2a0>
100030b8:	d9c01517 	ldw	r7,84(sp)
100030bc:	0011883a 	mov	r8,zero
100030c0:	000d883a 	mov	r6,zero
100030c4:	39000003 	ldbu	r4,0(r7)
100030c8:	38c00044 	addi	r3,r7,1
100030cc:	180f883a 	mov	r7,r3
100030d0:	21401fcc 	andi	r5,r4,127
100030d4:	298a983a 	sll	r5,r5,r6
100030d8:	21003fcc 	andi	r4,r4,255
100030dc:	2100201c 	xori	r4,r4,128
100030e0:	213fe004 	addi	r4,r4,-128
100030e4:	4150b03a 	or	r8,r8,r5
100030e8:	318001c4 	addi	r6,r6,7
100030ec:	203ff516 	blt	r4,zero,100030c4 <__alt_data_end+0xf80030c4>
100030f0:	003fe206 	br	1000307c <__alt_data_end+0xf800307c>
100030f4:	d9001c17 	ldw	r4,112(sp)
100030f8:	203faa1e 	bne	r4,zero,10002fa4 <__alt_data_end+0xf8002fa4>
100030fc:	d9c01517 	ldw	r7,84(sp)
10003100:	d8801b17 	ldw	r2,108(sp)
10003104:	38bfa736 	bltu	r7,r2,10002fa4 <__alt_data_end+0xf8002fa4>
10003108:	d8c02317 	ldw	r3,140(sp)
1000310c:	18fffe17 	ldw	r3,-8(r3)
10003110:	d8c01f15 	stw	r3,124(sp)
10003114:	18008226 	beq	r3,zero,10003320 <__gxx_personality_sj0+0x440>
10003118:	d9002317 	ldw	r4,140(sp)
1000311c:	d9c02317 	ldw	r7,140(sp)
10003120:	213ffb17 	ldw	r4,-20(r4)
10003124:	39fffd17 	ldw	r7,-12(r7)
10003128:	d9001515 	stw	r4,84(sp)
1000312c:	d9c01a15 	stw	r7,104(sp)
10003130:	d8801517 	ldw	r2,84(sp)
10003134:	103fc10e 	bge	r2,zero,1000303c <__alt_data_end+0xf800303c>
10003138:	d9002417 	ldw	r4,144(sp)
1000313c:	d9401a17 	ldw	r5,104(sp)
10003140:	d80d883a 	mov	r6,sp
10003144:	00bfffc4 	movi	r2,-1
10003148:	d8800915 	stw	r2,36(sp)
1000314c:	0002a500 	call	10002a50 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
10003150:	d9402417 	ldw	r5,144(sp)
10003154:	d9000503 	ldbu	r4,20(sp)
10003158:	00029c40 	call	100029c4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
1000315c:	d9000503 	ldbu	r4,20(sp)
10003160:	d9402417 	ldw	r5,144(sp)
10003164:	d8800215 	stw	r2,8(sp)
10003168:	00029c40 	call	100029c4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
1000316c:	d8c02317 	ldw	r3,140(sp)
10003170:	18bffe15 	stw	r2,-8(r3)
10003174:	003fb106 	br	1000303c <__alt_data_end+0xf800303c>
10003178:	10bfffc4 	addi	r2,r2,-1
1000317c:	003f9d06 	br	10002ff4 <__alt_data_end+0xf8002ff4>
10003180:	42000044 	addi	r8,r8,1
10003184:	da001f15 	stw	r8,124(sp)
10003188:	38005326 	beq	r7,zero,100032d8 <__gxx_personality_sj0+0x3f8>
1000318c:	d8800417 	ldw	r2,16(sp)
10003190:	39ffffc4 	addi	r7,r7,-1
10003194:	11c5883a 	add	r2,r2,r7
10003198:	d8801815 	stw	r2,96(sp)
1000319c:	40005026 	beq	r8,zero,100032e0 <__gxx_personality_sj0+0x400>
100031a0:	10007426 	beq	r2,zero,10003374 <__gxx_personality_sj0+0x494>
100031a4:	d8801917 	ldw	r2,100(sp)
100031a8:	1080020c 	andi	r2,r2,8
100031ac:	d8802015 	stw	r2,128(sp)
100031b0:	1000a21e 	bne	r2,zero,1000343c <__gxx_personality_sj0+0x55c>
100031b4:	d8c01c17 	ldw	r3,112(sp)
100031b8:	1800b026 	beq	r3,zero,1000347c <__gxx_personality_sj0+0x59c>
100031bc:	01c40074 	movhi	r7,4097
100031c0:	39db9f04 	addi	r7,r7,28284
100031c4:	d9c01e15 	stw	r7,120(sp)
100031c8:	d8001d05 	stb	zero,116(sp)
100031cc:	d8c01817 	ldw	r3,96(sp)
100031d0:	d8001515 	stw	zero,84(sp)
100031d4:	0009883a 	mov	r4,zero
100031d8:	19400003 	ldbu	r5,0(r3)
100031dc:	18800044 	addi	r2,r3,1
100031e0:	d9c01517 	ldw	r7,84(sp)
100031e4:	28c01fcc 	andi	r3,r5,127
100031e8:	1906983a 	sll	r3,r3,r4
100031ec:	29803fcc 	andi	r6,r5,255
100031f0:	3180201c 	xori	r6,r6,128
100031f4:	38ceb03a 	or	r7,r7,r3
100031f8:	d8801715 	stw	r2,92(sp)
100031fc:	31bfe004 	addi	r6,r6,-128
10003200:	d9c01515 	stw	r7,84(sp)
10003204:	210001c4 	addi	r4,r4,7
10003208:	1007883a 	mov	r3,r2
1000320c:	303ff216 	blt	r6,zero,100031d8 <__alt_data_end+0xf80031d8>
10003210:	00c007c4 	movi	r3,31
10003214:	19000836 	bltu	r3,r4,10003238 <__gxx_personality_sj0+0x358>
10003218:	2940100c 	andi	r5,r5,64
1000321c:	28000626 	beq	r5,zero,10003238 <__gxx_personality_sj0+0x358>
10003220:	01c00044 	movi	r7,1
10003224:	3908983a 	sll	r4,r7,r4
10003228:	d8c01517 	ldw	r3,84(sp)
1000322c:	0109c83a 	sub	r4,zero,r4
10003230:	1906b03a 	or	r3,r3,r4
10003234:	d8c01515 	stw	r3,84(sp)
10003238:	d8001615 	stw	zero,88(sp)
1000323c:	0009883a 	mov	r4,zero
10003240:	11400003 	ldbu	r5,0(r2)
10003244:	d9c01617 	ldw	r7,88(sp)
10003248:	10800044 	addi	r2,r2,1
1000324c:	28c01fcc 	andi	r3,r5,127
10003250:	1906983a 	sll	r3,r3,r4
10003254:	29803fcc 	andi	r6,r5,255
10003258:	3180201c 	xori	r6,r6,128
1000325c:	38ceb03a 	or	r7,r7,r3
10003260:	31bfe004 	addi	r6,r6,-128
10003264:	d9c01615 	stw	r7,88(sp)
10003268:	210001c4 	addi	r4,r4,7
1000326c:	303ff416 	blt	r6,zero,10003240 <__alt_data_end+0xf8003240>
10003270:	008007c4 	movi	r2,31
10003274:	11000736 	bltu	r2,r4,10003294 <__gxx_personality_sj0+0x3b4>
10003278:	2940100c 	andi	r5,r5,64
1000327c:	28000526 	beq	r5,zero,10003294 <__gxx_personality_sj0+0x3b4>
10003280:	00c00044 	movi	r3,1
10003284:	1908983a 	sll	r4,r3,r4
10003288:	0109c83a 	sub	r4,zero,r4
1000328c:	390eb03a 	or	r7,r7,r4
10003290:	d9c01615 	stw	r7,88(sp)
10003294:	d9001517 	ldw	r4,84(sp)
10003298:	20003c26 	beq	r4,zero,1000338c <__gxx_personality_sj0+0x4ac>
1000329c:	01003e0e 	bge	zero,r4,10003398 <__gxx_personality_sj0+0x4b8>
100032a0:	01ffffc4 	movi	r7,-1
100032a4:	200b883a 	mov	r5,r4
100032a8:	d809883a 	mov	r4,sp
100032ac:	d9c00915 	stw	r7,36(sp)
100032b0:	00029700 	call	10002970 <_ZL15get_ttype_entryP16lsda_header_infom>
100032b4:	10005f26 	beq	r2,zero,10003434 <__gxx_personality_sj0+0x554>
100032b8:	d8c01e17 	ldw	r3,120(sp)
100032bc:	1800571e 	bne	r3,zero,1000341c <__gxx_personality_sj0+0x53c>
100032c0:	d9001617 	ldw	r4,88(sp)
100032c4:	20002926 	beq	r4,zero,1000336c <__gxx_personality_sj0+0x48c>
100032c8:	d9c01717 	ldw	r7,92(sp)
100032cc:	390f883a 	add	r7,r7,r4
100032d0:	d9c01815 	stw	r7,96(sp)
100032d4:	003fbd06 	br	100031cc <__alt_data_end+0xf80031cc>
100032d8:	d8c01f17 	ldw	r3,124(sp)
100032dc:	1800251e 	bne	r3,zero,10003374 <__gxx_personality_sj0+0x494>
100032e0:	01000204 	movi	r4,8
100032e4:	d9001515 	stw	r4,84(sp)
100032e8:	003f1806 	br	10002f4c <__alt_data_end+0xf8002f4c>
100032ec:	d8801c17 	ldw	r2,112(sp)
100032f0:	10000d26 	beq	r2,zero,10003328 <__gxx_personality_sj0+0x448>
100032f4:	00800184 	movi	r2,6
100032f8:	d8801515 	stw	r2,84(sp)
100032fc:	003f1306 	br	10002f4c <__alt_data_end+0xf8002f4c>
10003300:	00800044 	movi	r2,1
10003304:	18bf4d1e 	bne	r3,r2,1000303c <__alt_data_end+0xf800303c>
10003308:	0003b0c0 	call	10003b0c <_ZSt9terminatev>
1000330c:	d9001b17 	ldw	r4,108(sp)
10003310:	00800044 	movi	r2,1
10003314:	113f4536 	bltu	r2,r4,1000302c <__alt_data_end+0xf800302c>
10003318:	00800044 	movi	r2,1
1000331c:	18bf841e 	bne	r3,r2,10003130 <__alt_data_end+0xf8003130>
10003320:	d9002317 	ldw	r4,140(sp)
10003324:	0003e580 	call	10003e58 <__cxa_call_terminate>
10003328:	d8c01b17 	ldw	r3,108(sp)
1000332c:	00800044 	movi	r2,1
10003330:	10fff036 	bltu	r2,r3,100032f4 <__alt_data_end+0xf80032f4>
10003334:	d9002317 	ldw	r4,140(sp)
10003338:	d8801817 	ldw	r2,96(sp)
1000333c:	d9c01517 	ldw	r7,84(sp)
10003340:	d8c01a17 	ldw	r3,104(sp)
10003344:	20bffc15 	stw	r2,-16(r4)
10003348:	d8800717 	ldw	r2,28(sp)
1000334c:	21fffb15 	stw	r7,-20(r4)
10003350:	d9c01f17 	ldw	r7,124(sp)
10003354:	20bfff15 	stw	r2,-4(r4)
10003358:	00800184 	movi	r2,6
1000335c:	20fffd15 	stw	r3,-12(r4)
10003360:	21fffe15 	stw	r7,-8(r4)
10003364:	d8801515 	stw	r2,84(sp)
10003368:	003ef806 	br	10002f4c <__alt_data_end+0xf8002f4c>
1000336c:	d8801d03 	ldbu	r2,116(sp)
10003370:	103fdb26 	beq	r2,zero,100032e0 <__alt_data_end+0xf80032e0>
10003374:	d8c01917 	ldw	r3,100(sp)
10003378:	1880004c 	andi	r2,r3,1
1000337c:	103fd81e 	bne	r2,zero,100032e0 <__alt_data_end+0xf80032e0>
10003380:	d8001515 	stw	zero,84(sp)
10003384:	00c00084 	movi	r3,2
10003388:	003f2306 	br	10003018 <__alt_data_end+0xf8003018>
1000338c:	00c00044 	movi	r3,1
10003390:	d8c01d05 	stb	r3,116(sp)
10003394:	003fca06 	br	100032c0 <__alt_data_end+0xf80032c0>
10003398:	d9001e17 	ldw	r4,120(sp)
1000339c:	20000426 	beq	r4,zero,100033b0 <__gxx_personality_sj0+0x4d0>
100033a0:	d9c02017 	ldw	r7,128(sp)
100033a4:	3800021e 	bne	r7,zero,100033b0 <__gxx_personality_sj0+0x4d0>
100033a8:	d8801c17 	ldw	r2,112(sp)
100033ac:	10002726 	beq	r2,zero,1000344c <__gxx_personality_sj0+0x56c>
100033b0:	d8801517 	ldw	r2,84(sp)
100033b4:	000d883a 	mov	r6,zero
100033b8:	000b883a 	mov	r5,zero
100033bc:	0088303a 	nor	r4,zero,r2
100033c0:	d8800317 	ldw	r2,12(sp)
100033c4:	1109883a 	add	r4,r2,r4
100033c8:	20800003 	ldbu	r2,0(r4)
100033cc:	21000044 	addi	r4,r4,1
100033d0:	10c01fcc 	andi	r3,r2,127
100033d4:	1946983a 	sll	r3,r3,r5
100033d8:	10803fcc 	andi	r2,r2,255
100033dc:	1080201c 	xori	r2,r2,128
100033e0:	10bfe004 	addi	r2,r2,-128
100033e4:	30ccb03a 	or	r6,r6,r3
100033e8:	294001c4 	addi	r5,r5,7
100033ec:	103ff616 	blt	r2,zero,100033c8 <__alt_data_end+0xf80033c8>
100033f0:	3005003a 	cmpeq	r2,r6,zero
100033f4:	10803fcc 	andi	r2,r2,255
100033f8:	103fb126 	beq	r2,zero,100032c0 <__alt_data_end+0xf80032c0>
100033fc:	d9c01917 	ldw	r7,100(sp)
10003400:	3880004c 	andi	r2,r7,1
10003404:	103fb91e 	bne	r2,zero,100032ec <__alt_data_end+0xf80032ec>
10003408:	d8802017 	ldw	r2,128(sp)
1000340c:	10002d26 	beq	r2,zero,100034c4 <__gxx_personality_sj0+0x5e4>
10003410:	00800044 	movi	r2,1
10003414:	d8800915 	stw	r2,36(sp)
10003418:	0003b340 	call	10003b34 <_ZSt10unexpectedv>
1000341c:	d9800704 	addi	r6,sp,28
10003420:	180b883a 	mov	r5,r3
10003424:	1009883a 	mov	r4,r2
10003428:	0002b840 	call	10002b84 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
1000342c:	10803fcc 	andi	r2,r2,255
10003430:	103fa326 	beq	r2,zero,100032c0 <__alt_data_end+0xf80032c0>
10003434:	00c000c4 	movi	r3,3
10003438:	003ef406 	br	1000300c <__alt_data_end+0xf800300c>
1000343c:	01040074 	movhi	r4,4097
10003440:	211b9d04 	addi	r4,r4,28276
10003444:	d9001e15 	stw	r4,120(sp)
10003448:	003f5f06 	br	100031c8 <__alt_data_end+0xf80031c8>
1000344c:	d9001b17 	ldw	r4,108(sp)
10003450:	00c00044 	movi	r3,1
10003454:	193fd636 	bltu	r3,r4,100033b0 <__alt_data_end+0xf80033b0>
10003458:	01ffffc4 	movi	r7,-1
1000345c:	d9c00915 	stw	r7,36(sp)
10003460:	d9800717 	ldw	r6,28(sp)
10003464:	d9c01517 	ldw	r7,84(sp)
10003468:	d9401e17 	ldw	r5,120(sp)
1000346c:	d809883a 	mov	r4,sp
10003470:	0002e380 	call	10002e38 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
10003474:	1080005c 	xori	r2,r2,1
10003478:	003fde06 	br	100033f4 <__alt_data_end+0xf80033f4>
1000347c:	d9001b17 	ldw	r4,108(sp)
10003480:	00800044 	movi	r2,1
10003484:	113f4d36 	bltu	r2,r4,100031bc <__alt_data_end+0xf80031bc>
10003488:	d9c02317 	ldw	r7,140(sp)
1000348c:	38800017 	ldw	r2,0(r7)
10003490:	1080004c 	andi	r2,r2,1
10003494:	1000061e 	bne	r2,zero,100034b0 <__gxx_personality_sj0+0x5d0>
10003498:	d8c02317 	ldw	r3,140(sp)
1000349c:	18800504 	addi	r2,r3,20
100034a0:	d8800715 	stw	r2,28(sp)
100034a4:	10bff017 	ldw	r2,-64(r2)
100034a8:	d8801e15 	stw	r2,120(sp)
100034ac:	003f4606 	br	100031c8 <__alt_data_end+0xf80031c8>
100034b0:	38bff517 	ldw	r2,-44(r7)
100034b4:	003ffa06 	br	100034a0 <__alt_data_end+0xf80034a0>
100034b8:	d9000a17 	ldw	r4,40(sp)
100034bc:	00038c40 	call	100038c4 <__cxa_begin_catch>
100034c0:	003f9106 	br	10003308 <__alt_data_end+0xf8003308>
100034c4:	d9c01c17 	ldw	r7,112(sp)
100034c8:	383eda1e 	bne	r7,zero,10003034 <__alt_data_end+0xf8003034>
100034cc:	d8c01b17 	ldw	r3,108(sp)
100034d0:	00800044 	movi	r2,1
100034d4:	10fed736 	bltu	r2,r3,10003034 <__alt_data_end+0xf8003034>
100034d8:	00c000c4 	movi	r3,3
100034dc:	003f8e06 	br	10003318 <__alt_data_end+0xf8003318>

100034e0 <__cxa_call_unexpected>:
100034e0:	00840034 	movhi	r2,4096
100034e4:	deffe604 	addi	sp,sp,-104
100034e8:	108bb804 	addi	r2,r2,12000
100034ec:	d8800d15 	stw	r2,52(sp)
100034f0:	00840074 	movhi	r2,4097
100034f4:	1091a704 	addi	r2,r2,18076
100034f8:	d8800e15 	stw	r2,56(sp)
100034fc:	d8800104 	addi	r2,sp,4
10003500:	d8800f15 	stw	r2,60(sp)
10003504:	00840034 	movhi	r2,4096
10003508:	108d5b04 	addi	r2,r2,13676
1000350c:	d9001415 	stw	r4,80(sp)
10003510:	d9000704 	addi	r4,sp,28
10003514:	dfc01915 	stw	ra,100(sp)
10003518:	d8801015 	stw	r2,64(sp)
1000351c:	df001815 	stw	fp,96(sp)
10003520:	dec01115 	stw	sp,68(sp)
10003524:	00047580 	call	10004758 <_Unwind_SjLj_Register>
10003528:	d9001417 	ldw	r4,80(sp)
1000352c:	00038c40 	call	100038c4 <__cxa_begin_catch>
10003530:	d8c01417 	ldw	r3,80(sp)
10003534:	18bffe17 	ldw	r2,-8(r3)
10003538:	193ff717 	ldw	r4,-36(r3)
1000353c:	18fffd17 	ldw	r3,-12(r3)
10003540:	d8800315 	stw	r2,12(sp)
10003544:	d8c01615 	stw	r3,88(sp)
10003548:	d8c01417 	ldw	r3,80(sp)
1000354c:	18fffb17 	ldw	r3,-20(r3)
10003550:	d8c01515 	stw	r3,84(sp)
10003554:	d8c01417 	ldw	r3,80(sp)
10003558:	18fff817 	ldw	r3,-32(r3)
1000355c:	d8c01415 	stw	r3,80(sp)
10003560:	00c00044 	movi	r3,1
10003564:	d8c00815 	stw	r3,32(sp)
10003568:	0003b240 	call	10003b24 <_ZN10__cxxabiv112__unexpectedEPFvvE>
1000356c:	d8c00917 	ldw	r3,36(sp)
10003570:	d8800817 	ldw	r2,32(sp)
10003574:	d8c01715 	stw	r3,92(sp)
10003578:	10000a26 	beq	r2,zero,100035a4 <__cxa_call_unexpected+0xc4>
1000357c:	10bfffc4 	addi	r2,r2,-1
10003580:	10000126 	beq	r2,zero,10003588 <__cxa_call_unexpected+0xa8>
10003584:	003b68fa 	trap	3
10003588:	d8000815 	stw	zero,32(sp)
1000358c:	00039780 	call	10003978 <__cxa_end_catch>
10003590:	00039780 	call	10003978 <__cxa_end_catch>
10003594:	d9001717 	ldw	r4,92(sp)
10003598:	00bfffc4 	movi	r2,-1
1000359c:	d8800815 	stw	r2,32(sp)
100035a0:	00049540 	call	10004954 <_Unwind_SjLj_Resume>
100035a4:	d9001717 	ldw	r4,92(sp)
100035a8:	00038c40 	call	100038c4 <__cxa_begin_catch>
100035ac:	0003eb00 	call	10003eb0 <__cxa_get_globals_fast>
100035b0:	10800017 	ldw	r2,0(r2)
100035b4:	10c00b17 	ldw	r3,44(r2)
100035b8:	18c0004c 	andi	r3,r3,1
100035bc:	18001e26 	beq	r3,zero,10003638 <__cxa_call_unexpected+0x158>
100035c0:	10800017 	ldw	r2,0(r2)
100035c4:	d8801715 	stw	r2,92(sp)
100035c8:	d8801517 	ldw	r2,84(sp)
100035cc:	00802b0e 	bge	zero,r2,1000367c <__cxa_call_unexpected+0x19c>
100035d0:	d8c01717 	ldw	r3,92(sp)
100035d4:	d8800317 	ldw	r2,12(sp)
100035d8:	d9c01517 	ldw	r7,84(sp)
100035dc:	193ff017 	ldw	r4,-64(r3)
100035e0:	d9801617 	ldw	r6,88(sp)
100035e4:	d8800015 	stw	r2,0(sp)
100035e8:	180b883a 	mov	r5,r3
100035ec:	00800084 	movi	r2,2
100035f0:	d8800815 	stw	r2,32(sp)
100035f4:	0002c0c0 	call	10002c0c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
100035f8:	10803fcc 	andi	r2,r2,255
100035fc:	10001e1e 	bne	r2,zero,10003678 <__cxa_call_unexpected+0x198>
10003600:	d8800317 	ldw	r2,12(sp)
10003604:	d9c01517 	ldw	r7,84(sp)
10003608:	d9801617 	ldw	r6,88(sp)
1000360c:	01040074 	movhi	r4,4097
10003610:	d8800015 	stw	r2,0(sp)
10003614:	2113d304 	addi	r4,r4,20300
10003618:	00800084 	movi	r2,2
1000361c:	000b883a 	mov	r5,zero
10003620:	d8800815 	stw	r2,32(sp)
10003624:	0002c0c0 	call	10002c0c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
10003628:	10803fcc 	andi	r2,r2,255
1000362c:	1000051e 	bne	r2,zero,10003644 <__cxa_call_unexpected+0x164>
10003630:	d9001417 	ldw	r4,80(sp)
10003634:	0003a4c0 	call	10003a4c <_ZN10__cxxabiv111__terminateEPFvvE>
10003638:	10801004 	addi	r2,r2,64
1000363c:	d8801715 	stw	r2,92(sp)
10003640:	003fe106 	br	100035c8 <__alt_data_end+0xf80035c8>
10003644:	01000104 	movi	r4,4
10003648:	0003cf40 	call	10003cf4 <__cxa_allocate_exception>
1000364c:	00c40074 	movhi	r3,4097
10003650:	18d3ee04 	addi	r3,r3,20408
10003654:	01840034 	movhi	r6,4096
10003658:	01440074 	movhi	r5,4097
1000365c:	10c00015 	stw	r3,0(r2)
10003660:	31906404 	addi	r6,r6,16784
10003664:	00c00084 	movi	r3,2
10003668:	2953d304 	addi	r5,r5,20300
1000366c:	1009883a 	mov	r4,r2
10003670:	d8c00815 	stw	r3,32(sp)
10003674:	00037a80 	call	100037a8 <__cxa_throw>
10003678:	00038380 	call	10003838 <__cxa_rethrow>
1000367c:	d9401617 	ldw	r5,88(sp)
10003680:	00800084 	movi	r2,2
10003684:	d9800104 	addi	r6,sp,4
10003688:	0009883a 	mov	r4,zero
1000368c:	d8800815 	stw	r2,32(sp)
10003690:	0002a500 	call	10002a50 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
10003694:	d9801717 	ldw	r6,92(sp)
10003698:	d9c01517 	ldw	r7,84(sp)
1000369c:	d9000104 	addi	r4,sp,4
100036a0:	317ff017 	ldw	r5,-64(r6)
100036a4:	0002e380 	call	10002e38 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
100036a8:	10803fcc 	andi	r2,r2,255
100036ac:	1000171e 	bne	r2,zero,1000370c <__cxa_call_unexpected+0x22c>
100036b0:	d9c01517 	ldw	r7,84(sp)
100036b4:	01440074 	movhi	r5,4097
100036b8:	00800084 	movi	r2,2
100036bc:	2953d304 	addi	r5,r5,20300
100036c0:	000d883a 	mov	r6,zero
100036c4:	d9000104 	addi	r4,sp,4
100036c8:	d8800815 	stw	r2,32(sp)
100036cc:	0002e380 	call	10002e38 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
100036d0:	10803fcc 	andi	r2,r2,255
100036d4:	103fd626 	beq	r2,zero,10003630 <__alt_data_end+0xf8003630>
100036d8:	01000104 	movi	r4,4
100036dc:	0003cf40 	call	10003cf4 <__cxa_allocate_exception>
100036e0:	00c40074 	movhi	r3,4097
100036e4:	18d3ee04 	addi	r3,r3,20408
100036e8:	01840034 	movhi	r6,4096
100036ec:	01440074 	movhi	r5,4097
100036f0:	10c00015 	stw	r3,0(r2)
100036f4:	31906404 	addi	r6,r6,16784
100036f8:	00c00084 	movi	r3,2
100036fc:	2953d304 	addi	r5,r5,20300
10003700:	1009883a 	mov	r4,r2
10003704:	d8c00815 	stw	r3,32(sp)
10003708:	00037a80 	call	100037a8 <__cxa_throw>
1000370c:	00038380 	call	10003838 <__cxa_rethrow>

10003710 <_ZNKSt9bad_alloc4whatEv>:
10003710:	00840074 	movhi	r2,4097
10003714:	10939904 	addi	r2,r2,20068
10003718:	f800283a 	ret

1000371c <_ZNSt9bad_allocD1Ev>:
1000371c:	00840074 	movhi	r2,4097
10003720:	1093a604 	addi	r2,r2,20120
10003724:	20800015 	stw	r2,0(r4)
10003728:	000418c1 	jmpi	1000418c <_ZNSt9exceptionD1Ev>

1000372c <_ZNSt9bad_allocD0Ev>:
1000372c:	defffe04 	addi	sp,sp,-8
10003730:	00840074 	movhi	r2,4097
10003734:	dc000015 	stw	r16,0(sp)
10003738:	dfc00115 	stw	ra,4(sp)
1000373c:	1093a604 	addi	r2,r2,20120
10003740:	20800015 	stw	r2,0(r4)
10003744:	2021883a 	mov	r16,r4
10003748:	000418c0 	call	1000418c <_ZNSt9exceptionD1Ev>
1000374c:	8009883a 	mov	r4,r16
10003750:	dfc00117 	ldw	ra,4(sp)
10003754:	dc000017 	ldw	r16,0(sp)
10003758:	dec00204 	addi	sp,sp,8
1000375c:	00037601 	jmpi	10003760 <_ZdlPv>

10003760 <_ZdlPv>:
10003760:	0004a9c1 	jmpi	10004a9c <free>

10003764 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
10003764:	defffe04 	addi	sp,sp,-8
10003768:	dfc00115 	stw	ra,4(sp)
1000376c:	dc000015 	stw	r16,0(sp)
10003770:	00800044 	movi	r2,1
10003774:	11000a36 	bltu	r2,r4,100037a0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
10003778:	28bff617 	ldw	r2,-40(r5)
1000377c:	2c000504 	addi	r16,r5,20
10003780:	10000226 	beq	r2,zero,1000378c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
10003784:	8009883a 	mov	r4,r16
10003788:	103ee83a 	callr	r2
1000378c:	8009883a 	mov	r4,r16
10003790:	dfc00117 	ldw	ra,4(sp)
10003794:	dc000017 	ldw	r16,0(sp)
10003798:	dec00204 	addi	sp,sp,8
1000379c:	0003d541 	jmpi	10003d54 <__cxa_free_exception>
100037a0:	293ff817 	ldw	r4,-32(r5)
100037a4:	0003a4c0 	call	10003a4c <_ZN10__cxxabiv111__terminateEPFvvE>

100037a8 <__cxa_throw>:
100037a8:	defffb04 	addi	sp,sp,-20
100037ac:	dfc00415 	stw	ra,16(sp)
100037b0:	dcc00315 	stw	r19,12(sp)
100037b4:	dc800215 	stw	r18,8(sp)
100037b8:	2827883a 	mov	r19,r5
100037bc:	3025883a 	mov	r18,r6
100037c0:	dc400115 	stw	r17,4(sp)
100037c4:	dc000015 	stw	r16,0(sp)
100037c8:	2021883a 	mov	r16,r4
100037cc:	0003ebc0 	call	10003ebc <__cxa_get_globals>
100037d0:	10c00117 	ldw	r3,4(r2)
100037d4:	847ffb04 	addi	r17,r16,-20
100037d8:	18c00044 	addi	r3,r3,1
100037dc:	10c00115 	stw	r3,4(r2)
100037e0:	00800044 	movi	r2,1
100037e4:	80bfef15 	stw	r2,-68(r16)
100037e8:	84fff015 	stw	r19,-64(r16)
100037ec:	84bff115 	stw	r18,-60(r16)
100037f0:	0003b840 	call	10003b84 <_ZSt14get_unexpectedv>
100037f4:	80bff215 	stw	r2,-56(r16)
100037f8:	0003b600 	call	10003b60 <_ZSt13get_terminatev>
100037fc:	80bff315 	stw	r2,-52(r16)
10003800:	0090caf4 	movhi	r2,17195
10003804:	108ac004 	addi	r2,r2,11008
10003808:	80bffb15 	stw	r2,-20(r16)
1000380c:	0091d3b4 	movhi	r2,18254
10003810:	109550c4 	addi	r2,r2,21827
10003814:	80bffc15 	stw	r2,-16(r16)
10003818:	00840034 	movhi	r2,4096
1000381c:	108dd904 	addi	r2,r2,14180
10003820:	8809883a 	mov	r4,r17
10003824:	80bffd15 	stw	r2,-12(r16)
10003828:	00048400 	call	10004840 <_Unwind_SjLj_RaiseException>
1000382c:	8809883a 	mov	r4,r17
10003830:	00038c40 	call	100038c4 <__cxa_begin_catch>
10003834:	0003b0c0 	call	10003b0c <_ZSt9terminatev>

10003838 <__cxa_rethrow>:
10003838:	defffe04 	addi	sp,sp,-8
1000383c:	dfc00115 	stw	ra,4(sp)
10003840:	dc000015 	stw	r16,0(sp)
10003844:	0003ebc0 	call	10003ebc <__cxa_get_globals>
10003848:	10c00117 	ldw	r3,4(r2)
1000384c:	11000017 	ldw	r4,0(r2)
10003850:	18c00044 	addi	r3,r3,1
10003854:	10c00115 	stw	r3,4(r2)
10003858:	20001126 	beq	r4,zero,100038a0 <__cxa_rethrow+0x68>
1000385c:	21400b17 	ldw	r5,44(r4)
10003860:	01ef3574 	movhi	r7,48341
10003864:	39f54004 	addi	r7,r7,-11008
10003868:	29cf883a 	add	r7,r5,r7
1000386c:	20c00c17 	ldw	r3,48(r4)
10003870:	394d803a 	cmpltu	r6,r7,r5
10003874:	016e2cb4 	movhi	r5,47282
10003878:	296aaf04 	addi	r5,r5,-21828
1000387c:	1947883a 	add	r3,r3,r5
10003880:	30c7883a 	add	r3,r6,r3
10003884:	18000726 	beq	r3,zero,100038a4 <__cxa_rethrow+0x6c>
10003888:	10000015 	stw	zero,0(r2)
1000388c:	24000b04 	addi	r16,r4,44
10003890:	8009883a 	mov	r4,r16
10003894:	00049980 	call	10004998 <_Unwind_SjLj_Resume_or_Rethrow>
10003898:	8009883a 	mov	r4,r16
1000389c:	00038c40 	call	100038c4 <__cxa_begin_catch>
100038a0:	0003b0c0 	call	10003b0c <_ZSt9terminatev>
100038a4:	00c00044 	movi	r3,1
100038a8:	19fff736 	bltu	r3,r7,10003888 <__alt_data_end+0xf8003888>
100038ac:	20800517 	ldw	r2,20(r4)
100038b0:	0085c83a 	sub	r2,zero,r2
100038b4:	20800515 	stw	r2,20(r4)
100038b8:	003ff406 	br	1000388c <__alt_data_end+0xf800388c>

100038bc <__cxa_get_exception_ptr>:
100038bc:	20bfff17 	ldw	r2,-4(r4)
100038c0:	f800283a 	ret

100038c4 <__cxa_begin_catch>:
100038c4:	defffe04 	addi	sp,sp,-8
100038c8:	dc000015 	stw	r16,0(sp)
100038cc:	dfc00115 	stw	ra,4(sp)
100038d0:	2021883a 	mov	r16,r4
100038d4:	0003ebc0 	call	10003ebc <__cxa_get_globals>
100038d8:	81000017 	ldw	r4,0(r16)
100038dc:	80c00117 	ldw	r3,4(r16)
100038e0:	01af3574 	movhi	r6,48341
100038e4:	31b54004 	addi	r6,r6,-11008
100038e8:	016e2cb4 	movhi	r5,47282
100038ec:	296aaf04 	addi	r5,r5,-21828
100038f0:	218d883a 	add	r6,r4,r6
100038f4:	3109803a 	cmpltu	r4,r6,r4
100038f8:	1947883a 	add	r3,r3,r5
100038fc:	20c7883a 	add	r3,r4,r3
10003900:	817ff504 	addi	r5,r16,-44
10003904:	11000017 	ldw	r4,0(r2)
10003908:	18000726 	beq	r3,zero,10003928 <__cxa_begin_catch+0x64>
1000390c:	2000191e 	bne	r4,zero,10003974 <__cxa_begin_catch+0xb0>
10003910:	11400015 	stw	r5,0(r2)
10003914:	0005883a 	mov	r2,zero
10003918:	dfc00117 	ldw	ra,4(sp)
1000391c:	dc000017 	ldw	r16,0(sp)
10003920:	dec00204 	addi	sp,sp,8
10003924:	f800283a 	ret
10003928:	01c00044 	movi	r7,1
1000392c:	39bff736 	bltu	r7,r6,1000390c <__alt_data_end+0xf800390c>
10003930:	80fffa17 	ldw	r3,-24(r16)
10003934:	18000d16 	blt	r3,zero,1000396c <__cxa_begin_catch+0xa8>
10003938:	18c00044 	addi	r3,r3,1
1000393c:	11800117 	ldw	r6,4(r2)
10003940:	80fffa15 	stw	r3,-24(r16)
10003944:	30ffffc4 	addi	r3,r6,-1
10003948:	10c00115 	stw	r3,4(r2)
1000394c:	21400226 	beq	r4,r5,10003958 <__cxa_begin_catch+0x94>
10003950:	813ff915 	stw	r4,-28(r16)
10003954:	11400015 	stw	r5,0(r2)
10003958:	80bfff17 	ldw	r2,-4(r16)
1000395c:	dfc00117 	ldw	ra,4(sp)
10003960:	dc000017 	ldw	r16,0(sp)
10003964:	dec00204 	addi	sp,sp,8
10003968:	f800283a 	ret
1000396c:	38c7c83a 	sub	r3,r7,r3
10003970:	003ff206 	br	1000393c <__alt_data_end+0xf800393c>
10003974:	0003b0c0 	call	10003b0c <_ZSt9terminatev>

10003978 <__cxa_end_catch>:
10003978:	deffff04 	addi	sp,sp,-4
1000397c:	dfc00015 	stw	ra,0(sp)
10003980:	0003eb00 	call	10003eb0 <__cxa_get_globals_fast>
10003984:	11000017 	ldw	r4,0(r2)
10003988:	20001426 	beq	r4,zero,100039dc <__cxa_end_catch+0x64>
1000398c:	21400b17 	ldw	r5,44(r4)
10003990:	01ef3574 	movhi	r7,48341
10003994:	39f54004 	addi	r7,r7,-11008
10003998:	29cf883a 	add	r7,r5,r7
1000399c:	20c00c17 	ldw	r3,48(r4)
100039a0:	394d803a 	cmpltu	r6,r7,r5
100039a4:	016e2cb4 	movhi	r5,47282
100039a8:	296aaf04 	addi	r5,r5,-21828
100039ac:	1947883a 	add	r3,r3,r5
100039b0:	30c7883a 	add	r3,r6,r3
100039b4:	18000c1e 	bne	r3,zero,100039e8 <__cxa_end_catch+0x70>
100039b8:	00c00044 	movi	r3,1
100039bc:	19c00a36 	bltu	r3,r7,100039e8 <__cxa_end_catch+0x70>
100039c0:	20c00517 	ldw	r3,20(r4)
100039c4:	18000d16 	blt	r3,zero,100039fc <__cxa_end_catch+0x84>
100039c8:	18ffffc4 	addi	r3,r3,-1
100039cc:	18001026 	beq	r3,zero,10003a10 <__cxa_end_catch+0x98>
100039d0:	00bfffc4 	movi	r2,-1
100039d4:	18801426 	beq	r3,r2,10003a28 <__cxa_end_catch+0xb0>
100039d8:	20c00515 	stw	r3,20(r4)
100039dc:	dfc00017 	ldw	ra,0(sp)
100039e0:	dec00104 	addi	sp,sp,4
100039e4:	f800283a 	ret
100039e8:	21000b04 	addi	r4,r4,44
100039ec:	10000015 	stw	zero,0(r2)
100039f0:	dfc00017 	ldw	ra,0(sp)
100039f4:	dec00104 	addi	sp,sp,4
100039f8:	00049e41 	jmpi	100049e4 <_Unwind_DeleteException>
100039fc:	18c00044 	addi	r3,r3,1
10003a00:	183ff51e 	bne	r3,zero,100039d8 <__alt_data_end+0xf80039d8>
10003a04:	21400417 	ldw	r5,16(r4)
10003a08:	11400015 	stw	r5,0(r2)
10003a0c:	003ff206 	br	100039d8 <__alt_data_end+0xf80039d8>
10003a10:	20c00417 	ldw	r3,16(r4)
10003a14:	21000b04 	addi	r4,r4,44
10003a18:	10c00015 	stw	r3,0(r2)
10003a1c:	dfc00017 	ldw	ra,0(sp)
10003a20:	dec00104 	addi	sp,sp,4
10003a24:	00049e41 	jmpi	100049e4 <_Unwind_DeleteException>
10003a28:	0003b0c0 	call	10003b0c <_ZSt9terminatev>

10003a2c <_ZSt18uncaught_exceptionv>:
10003a2c:	deffff04 	addi	sp,sp,-4
10003a30:	dfc00015 	stw	ra,0(sp)
10003a34:	0003ebc0 	call	10003ebc <__cxa_get_globals>
10003a38:	10800117 	ldw	r2,4(r2)
10003a3c:	1004c03a 	cmpne	r2,r2,zero
10003a40:	dfc00017 	ldw	ra,0(sp)
10003a44:	dec00104 	addi	sp,sp,4
10003a48:	f800283a 	ret

10003a4c <_ZN10__cxxabiv111__terminateEPFvvE>:
10003a4c:	00840034 	movhi	r2,4096
10003a50:	deffef04 	addi	sp,sp,-68
10003a54:	108bb804 	addi	r2,r2,12000
10003a58:	d8800615 	stw	r2,24(sp)
10003a5c:	00840074 	movhi	r2,4097
10003a60:	1091ab04 	addi	r2,r2,18092
10003a64:	d8800715 	stw	r2,28(sp)
10003a68:	00840034 	movhi	r2,4096
10003a6c:	108ea904 	addi	r2,r2,15012
10003a70:	d9000d15 	stw	r4,52(sp)
10003a74:	d809883a 	mov	r4,sp
10003a78:	d8800915 	stw	r2,36(sp)
10003a7c:	dfc01015 	stw	ra,64(sp)
10003a80:	df000f15 	stw	fp,60(sp)
10003a84:	dec00815 	stw	sp,32(sp)
10003a88:	dec00a15 	stw	sp,40(sp)
10003a8c:	00047580 	call	10004758 <_Unwind_SjLj_Register>
10003a90:	00800044 	movi	r2,1
10003a94:	d8800115 	stw	r2,4(sp)
10003a98:	d8800d17 	ldw	r2,52(sp)
10003a9c:	103ee83a 	callr	r2
10003aa0:	0004a700 	call	10004a70 <abort>
10003aa4:	d8c00217 	ldw	r3,8(sp)
10003aa8:	d8800117 	ldw	r2,4(sp)
10003aac:	d8c00d15 	stw	r3,52(sp)
10003ab0:	d8c00317 	ldw	r3,12(sp)
10003ab4:	d8c00e15 	stw	r3,56(sp)
10003ab8:	10000b26 	beq	r2,zero,10003ae8 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
10003abc:	10bfffc4 	addi	r2,r2,-1
10003ac0:	10000126 	beq	r2,zero,10003ac8 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
10003ac4:	003b68fa 	trap	3
10003ac8:	d8000115 	stw	zero,4(sp)
10003acc:	00039780 	call	10003978 <__cxa_end_catch>
10003ad0:	d8c00e17 	ldw	r3,56(sp)
10003ad4:	00bfffc4 	movi	r2,-1
10003ad8:	18800826 	beq	r3,r2,10003afc <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
10003adc:	d9000d17 	ldw	r4,52(sp)
10003ae0:	d8800115 	stw	r2,4(sp)
10003ae4:	00049540 	call	10004954 <_Unwind_SjLj_Resume>
10003ae8:	d9000d17 	ldw	r4,52(sp)
10003aec:	00038c40 	call	100038c4 <__cxa_begin_catch>
10003af0:	00800084 	movi	r2,2
10003af4:	d8800115 	stw	r2,4(sp)
10003af8:	0004a700 	call	10004a70 <abort>
10003afc:	d8800e17 	ldw	r2,56(sp)
10003b00:	d9000d17 	ldw	r4,52(sp)
10003b04:	d8800115 	stw	r2,4(sp)
10003b08:	00034e00 	call	100034e0 <__cxa_call_unexpected>

10003b0c <_ZSt9terminatev>:
10003b0c:	00840074 	movhi	r2,4097
10003b10:	109ba104 	addi	r2,r2,28292
10003b14:	11000017 	ldw	r4,0(r2)
10003b18:	deffff04 	addi	sp,sp,-4
10003b1c:	dfc00015 	stw	ra,0(sp)
10003b20:	0003a4c0 	call	10003a4c <_ZN10__cxxabiv111__terminateEPFvvE>

10003b24 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
10003b24:	deffff04 	addi	sp,sp,-4
10003b28:	dfc00015 	stw	ra,0(sp)
10003b2c:	203ee83a 	callr	r4
10003b30:	0003b0c0 	call	10003b0c <_ZSt9terminatev>

10003b34 <_ZSt10unexpectedv>:
10003b34:	00840074 	movhi	r2,4097
10003b38:	109b9a04 	addi	r2,r2,28264
10003b3c:	11000017 	ldw	r4,0(r2)
10003b40:	deffff04 	addi	sp,sp,-4
10003b44:	dfc00015 	stw	ra,0(sp)
10003b48:	0003b240 	call	10003b24 <_ZN10__cxxabiv112__unexpectedEPFvvE>

10003b4c <_ZSt13set_terminatePFvvE>:
10003b4c:	00c40074 	movhi	r3,4097
10003b50:	18dba104 	addi	r3,r3,28292
10003b54:	18800017 	ldw	r2,0(r3)
10003b58:	19000015 	stw	r4,0(r3)
10003b5c:	f800283a 	ret

10003b60 <_ZSt13get_terminatev>:
10003b60:	00840074 	movhi	r2,4097
10003b64:	109ba104 	addi	r2,r2,28292
10003b68:	10800017 	ldw	r2,0(r2)
10003b6c:	f800283a 	ret

10003b70 <_ZSt14set_unexpectedPFvvE>:
10003b70:	00c40074 	movhi	r3,4097
10003b74:	18db9a04 	addi	r3,r3,28264
10003b78:	18800017 	ldw	r2,0(r3)
10003b7c:	19000015 	stw	r4,0(r3)
10003b80:	f800283a 	ret

10003b84 <_ZSt14get_unexpectedv>:
10003b84:	00840074 	movhi	r2,4097
10003b88:	109b9a04 	addi	r2,r2,28264
10003b8c:	10800017 	ldw	r2,0(r2)
10003b90:	f800283a 	ret

10003b94 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
10003b94:	018400b4 	movhi	r6,4098
10003b98:	31a28e04 	addi	r6,r6,-30152
10003b9c:	31400117 	ldw	r5,4(r6)
10003ba0:	223fff04 	addi	r8,r4,-4
10003ba4:	227fff17 	ldw	r9,-4(r4)
10003ba8:	28001326 	beq	r5,zero,10003bf8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
10003bac:	424f883a 	add	r7,r8,r9
10003bb0:	29c01426 	beq	r5,r7,10003c04 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
10003bb4:	28c00117 	ldw	r3,4(r5)
10003bb8:	18001c26 	beq	r3,zero,10003c2c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
10003bbc:	38c00336 	bltu	r7,r3,10003bcc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
10003bc0:	00001e06 	br	10003c3c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
10003bc4:	3880052e 	bgeu	r7,r2,10003bdc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
10003bc8:	1007883a 	mov	r3,r2
10003bcc:	18800117 	ldw	r2,4(r3)
10003bd0:	29800104 	addi	r6,r5,4
10003bd4:	180b883a 	mov	r5,r3
10003bd8:	103ffa1e 	bne	r2,zero,10003bc4 <__alt_data_end+0xf8003bc4>
10003bdc:	19400017 	ldw	r5,0(r3)
10003be0:	194f883a 	add	r7,r3,r5
10003be4:	41c00e26 	beq	r8,r7,10003c20 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
10003be8:	20800015 	stw	r2,0(r4)
10003bec:	30800017 	ldw	r2,0(r6)
10003bf0:	12000115 	stw	r8,4(r2)
10003bf4:	f800283a 	ret
10003bf8:	20000015 	stw	zero,0(r4)
10003bfc:	32000115 	stw	r8,4(r6)
10003c00:	f800283a 	ret
10003c04:	28c00017 	ldw	r3,0(r5)
10003c08:	28800117 	ldw	r2,4(r5)
10003c0c:	1a53883a 	add	r9,r3,r9
10003c10:	227fff15 	stw	r9,-4(r4)
10003c14:	20800015 	stw	r2,0(r4)
10003c18:	32000115 	stw	r8,4(r6)
10003c1c:	f800283a 	ret
10003c20:	494b883a 	add	r5,r9,r5
10003c24:	19400015 	stw	r5,0(r3)
10003c28:	f800283a 	ret
10003c2c:	0005883a 	mov	r2,zero
10003c30:	2807883a 	mov	r3,r5
10003c34:	31800104 	addi	r6,r6,4
10003c38:	003fe806 	br	10003bdc <__alt_data_end+0xf8003bdc>
10003c3c:	1805883a 	mov	r2,r3
10003c40:	31800104 	addi	r6,r6,4
10003c44:	2807883a 	mov	r3,r5
10003c48:	003fe406 	br	10003bdc <__alt_data_end+0xf8003bdc>

10003c4c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
10003c4c:	20800104 	addi	r2,r4,4
10003c50:	00c001c4 	movi	r3,7
10003c54:	1880112e 	bgeu	r3,r2,10003c9c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
10003c58:	20c9883a 	add	r4,r4,r3
10003c5c:	00bfff04 	movi	r2,-4
10003c60:	208a703a 	and	r5,r4,r2
10003c64:	018400b4 	movhi	r6,4098
10003c68:	31a28e04 	addi	r6,r6,-30152
10003c6c:	30c00117 	ldw	r3,4(r6)
10003c70:	18000826 	beq	r3,zero,10003c94 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
10003c74:	19000017 	ldw	r4,0(r3)
10003c78:	21400436 	bltu	r4,r5,10003c8c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
10003c7c:	00001a06 	br	10003ce8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
10003c80:	11000017 	ldw	r4,0(r2)
10003c84:	2140072e 	bgeu	r4,r5,10003ca4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
10003c88:	1007883a 	mov	r3,r2
10003c8c:	18800117 	ldw	r2,4(r3)
10003c90:	103ffb1e 	bne	r2,zero,10003c80 <__alt_data_end+0xf8003c80>
10003c94:	0005883a 	mov	r2,zero
10003c98:	f800283a 	ret
10003c9c:	01400204 	movi	r5,8
10003ca0:	003ff006 	br	10003c64 <__alt_data_end+0xf8003c64>
10003ca4:	18c00104 	addi	r3,r3,4
10003ca8:	2149c83a 	sub	r4,r4,r5
10003cac:	018001c4 	movi	r6,7
10003cb0:	3100092e 	bgeu	r6,r4,10003cd8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
10003cb4:	11c00117 	ldw	r7,4(r2)
10003cb8:	114d883a 	add	r6,r2,r5
10003cbc:	31000015 	stw	r4,0(r6)
10003cc0:	31c00115 	stw	r7,4(r6)
10003cc4:	18800017 	ldw	r2,0(r3)
10003cc8:	11400015 	stw	r5,0(r2)
10003ccc:	19800015 	stw	r6,0(r3)
10003cd0:	10800104 	addi	r2,r2,4
10003cd4:	f800283a 	ret
10003cd8:	11000117 	ldw	r4,4(r2)
10003cdc:	10800104 	addi	r2,r2,4
10003ce0:	19000015 	stw	r4,0(r3)
10003ce4:	f800283a 	ret
10003ce8:	1805883a 	mov	r2,r3
10003cec:	30c00104 	addi	r3,r6,4
10003cf0:	003fed06 	br	10003ca8 <__alt_data_end+0xf8003ca8>

10003cf4 <__cxa_allocate_exception>:
10003cf4:	defffd04 	addi	sp,sp,-12
10003cf8:	dc400115 	stw	r17,4(sp)
10003cfc:	24401104 	addi	r17,r4,68
10003d00:	8809883a 	mov	r4,r17
10003d04:	dc000015 	stw	r16,0(sp)
10003d08:	dfc00215 	stw	ra,8(sp)
10003d0c:	0004a880 	call	10004a88 <malloc>
10003d10:	1021883a 	mov	r16,r2
10003d14:	10000a26 	beq	r2,zero,10003d40 <__cxa_allocate_exception+0x4c>
10003d18:	01801104 	movi	r6,68
10003d1c:	000b883a 	mov	r5,zero
10003d20:	8009883a 	mov	r4,r16
10003d24:	00052bc0 	call	100052bc <memset>
10003d28:	80801104 	addi	r2,r16,68
10003d2c:	dfc00217 	ldw	ra,8(sp)
10003d30:	dc400117 	ldw	r17,4(sp)
10003d34:	dc000017 	ldw	r16,0(sp)
10003d38:	dec00304 	addi	sp,sp,12
10003d3c:	f800283a 	ret
10003d40:	8809883a 	mov	r4,r17
10003d44:	0003c4c0 	call	10003c4c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
10003d48:	1021883a 	mov	r16,r2
10003d4c:	103ff21e 	bne	r2,zero,10003d18 <__alt_data_end+0xf8003d18>
10003d50:	0003b0c0 	call	10003b0c <_ZSt9terminatev>

10003d54 <__cxa_free_exception>:
10003d54:	00c400b4 	movhi	r3,4098
10003d58:	18e28e04 	addi	r3,r3,-30152
10003d5c:	18800217 	ldw	r2,8(r3)
10003d60:	213fef04 	addi	r4,r4,-68
10003d64:	1100042e 	bgeu	r2,r4,10003d78 <__cxa_free_exception+0x24>
10003d68:	18c00317 	ldw	r3,12(r3)
10003d6c:	10c5883a 	add	r2,r2,r3
10003d70:	2080012e 	bgeu	r4,r2,10003d78 <__cxa_free_exception+0x24>
10003d74:	0003b941 	jmpi	10003b94 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
10003d78:	0004a9c1 	jmpi	10004a9c <free>

10003d7c <__cxa_allocate_dependent_exception>:
10003d7c:	defffe04 	addi	sp,sp,-8
10003d80:	01001004 	movi	r4,64
10003d84:	dc000015 	stw	r16,0(sp)
10003d88:	dfc00115 	stw	ra,4(sp)
10003d8c:	0004a880 	call	10004a88 <malloc>
10003d90:	1021883a 	mov	r16,r2
10003d94:	10000926 	beq	r2,zero,10003dbc <__cxa_allocate_dependent_exception+0x40>
10003d98:	01801004 	movi	r6,64
10003d9c:	000b883a 	mov	r5,zero
10003da0:	8009883a 	mov	r4,r16
10003da4:	00052bc0 	call	100052bc <memset>
10003da8:	8005883a 	mov	r2,r16
10003dac:	dfc00117 	ldw	ra,4(sp)
10003db0:	dc000017 	ldw	r16,0(sp)
10003db4:	dec00204 	addi	sp,sp,8
10003db8:	f800283a 	ret
10003dbc:	01001004 	movi	r4,64
10003dc0:	0003c4c0 	call	10003c4c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
10003dc4:	1021883a 	mov	r16,r2
10003dc8:	103ff31e 	bne	r2,zero,10003d98 <__alt_data_end+0xf8003d98>
10003dcc:	0003b0c0 	call	10003b0c <_ZSt9terminatev>

10003dd0 <__cxa_free_dependent_exception>:
10003dd0:	014400b4 	movhi	r5,4098
10003dd4:	29628e04 	addi	r5,r5,-30152
10003dd8:	28c00217 	ldw	r3,8(r5)
10003ddc:	2005883a 	mov	r2,r4
10003de0:	1900042e 	bgeu	r3,r4,10003df4 <__cxa_free_dependent_exception+0x24>
10003de4:	29400317 	ldw	r5,12(r5)
10003de8:	1947883a 	add	r3,r3,r5
10003dec:	20c0012e 	bgeu	r4,r3,10003df4 <__cxa_free_dependent_exception+0x24>
10003df0:	0003b941 	jmpi	10003b94 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
10003df4:	1009883a 	mov	r4,r2
10003df8:	0004a9c1 	jmpi	10004a9c <free>

10003dfc <_GLOBAL__sub_I___cxa_allocate_exception>:
10003dfc:	defffd04 	addi	sp,sp,-12
10003e00:	dc400115 	stw	r17,4(sp)
10003e04:	dc000015 	stw	r16,0(sp)
10003e08:	04424004 	movi	r17,2304
10003e0c:	040400b4 	movhi	r16,4098
10003e10:	84228e04 	addi	r16,r16,-30152
10003e14:	8809883a 	mov	r4,r17
10003e18:	dfc00215 	stw	ra,8(sp)
10003e1c:	84400315 	stw	r17,12(r16)
10003e20:	0004a880 	call	10004a88 <malloc>
10003e24:	80800215 	stw	r2,8(r16)
10003e28:	10000826 	beq	r2,zero,10003e4c <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
10003e2c:	80800115 	stw	r2,4(r16)
10003e30:	14400015 	stw	r17,0(r2)
10003e34:	10000115 	stw	zero,4(r2)
10003e38:	dfc00217 	ldw	ra,8(sp)
10003e3c:	dc400117 	ldw	r17,4(sp)
10003e40:	dc000017 	ldw	r16,0(sp)
10003e44:	dec00304 	addi	sp,sp,12
10003e48:	f800283a 	ret
10003e4c:	80000315 	stw	zero,12(r16)
10003e50:	80000115 	stw	zero,4(r16)
10003e54:	003ff806 	br	10003e38 <__alt_data_end+0xf8003e38>

10003e58 <__cxa_call_terminate>:
10003e58:	defffe04 	addi	sp,sp,-8
10003e5c:	dfc00115 	stw	ra,4(sp)
10003e60:	dc000015 	stw	r16,0(sp)
10003e64:	20000d26 	beq	r4,zero,10003e9c <__cxa_call_terminate+0x44>
10003e68:	2021883a 	mov	r16,r4
10003e6c:	00038c40 	call	100038c4 <__cxa_begin_catch>
10003e70:	80c00017 	ldw	r3,0(r16)
10003e74:	016f3574 	movhi	r5,48341
10003e78:	29754004 	addi	r5,r5,-11008
10003e7c:	194b883a 	add	r5,r3,r5
10003e80:	80800117 	ldw	r2,4(r16)
10003e84:	28c9803a 	cmpltu	r4,r5,r3
10003e88:	00ee2cb4 	movhi	r3,47282
10003e8c:	18eaaf04 	addi	r3,r3,-21828
10003e90:	10c5883a 	add	r2,r2,r3
10003e94:	2085883a 	add	r2,r4,r2
10003e98:	10000126 	beq	r2,zero,10003ea0 <__cxa_call_terminate+0x48>
10003e9c:	0003b0c0 	call	10003b0c <_ZSt9terminatev>
10003ea0:	00800044 	movi	r2,1
10003ea4:	117ffd36 	bltu	r2,r5,10003e9c <__alt_data_end+0xf8003e9c>
10003ea8:	813ff817 	ldw	r4,-32(r16)
10003eac:	0003a4c0 	call	10003a4c <_ZN10__cxxabiv111__terminateEPFvvE>

10003eb0 <__cxa_get_globals_fast>:
10003eb0:	008400b4 	movhi	r2,4098
10003eb4:	10a27d04 	addi	r2,r2,-30220
10003eb8:	f800283a 	ret

10003ebc <__cxa_get_globals>:
10003ebc:	008400b4 	movhi	r2,4098
10003ec0:	10a27d04 	addi	r2,r2,-30220
10003ec4:	f800283a 	ret

10003ec8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
10003ec8:	00840074 	movhi	r2,4097
10003ecc:	1093b804 	addi	r2,r2,20192
10003ed0:	20800015 	stw	r2,0(r4)
10003ed4:	00042f01 	jmpi	100042f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>

10003ed8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
10003ed8:	defffe04 	addi	sp,sp,-8
10003edc:	00840074 	movhi	r2,4097
10003ee0:	dc000015 	stw	r16,0(sp)
10003ee4:	dfc00115 	stw	ra,4(sp)
10003ee8:	1093b804 	addi	r2,r2,20192
10003eec:	20800015 	stw	r2,0(r4)
10003ef0:	2021883a 	mov	r16,r4
10003ef4:	00042f00 	call	100042f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
10003ef8:	8009883a 	mov	r4,r16
10003efc:	dfc00117 	ldw	ra,4(sp)
10003f00:	dc000017 	ldw	r16,0(sp)
10003f04:	dec00204 	addi	sp,sp,8
10003f08:	00037601 	jmpi	10003760 <_ZdlPv>

10003f0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
10003f0c:	defff504 	addi	sp,sp,-44
10003f10:	dc000115 	stw	r16,4(sp)
10003f14:	38800117 	ldw	r2,4(r7)
10003f18:	24000117 	ldw	r16,4(r4)
10003f1c:	df000915 	stw	fp,36(sp)
10003f20:	ddc00815 	stw	r23,32(sp)
10003f24:	dd800715 	stw	r22,28(sp)
10003f28:	dcc00415 	stw	r19,16(sp)
10003f2c:	dc800315 	stw	r18,12(sp)
10003f30:	dc400215 	stw	r17,8(sp)
10003f34:	dfc00a15 	stw	ra,40(sp)
10003f38:	dd400615 	stw	r21,24(sp)
10003f3c:	dd000515 	stw	r20,20(sp)
10003f40:	2823883a 	mov	r17,r5
10003f44:	3039883a 	mov	fp,r6
10003f48:	dcc00b17 	ldw	r19,44(sp)
10003f4c:	ddc00c17 	ldw	r23,48(sp)
10003f50:	dd800d17 	ldw	r22,52(sp)
10003f54:	dc800e17 	ldw	r18,56(sp)
10003f58:	80800b26 	beq	r16,r2,10003f88 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
10003f5c:	80c00007 	ldb	r3,0(r16)
10003f60:	2029883a 	mov	r20,r4
10003f64:	01000a84 	movi	r4,42
10003f68:	382b883a 	mov	r21,r7
10003f6c:	19001a26 	beq	r3,r4,10003fd8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
10003f70:	100b883a 	mov	r5,r2
10003f74:	8009883a 	mov	r4,r16
10003f78:	d8c00015 	stw	r3,0(sp)
10003f7c:	000587c0 	call	1000587c <strcmp>
10003f80:	d8c00017 	ldw	r3,0(sp)
10003f84:	1000141e 	bne	r2,zero,10003fd8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
10003f88:	94c00015 	stw	r19,0(r18)
10003f8c:	97000115 	stw	fp,4(r18)
10003f90:	88002816 	blt	r17,zero,10004034 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
10003f94:	9c63883a 	add	r17,r19,r17
10003f98:	b4403226 	beq	r22,r17,10004064 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
10003f9c:	00800044 	movi	r2,1
10003fa0:	90800315 	stw	r2,12(r18)
10003fa4:	0005883a 	mov	r2,zero
10003fa8:	dfc00a17 	ldw	ra,40(sp)
10003fac:	df000917 	ldw	fp,36(sp)
10003fb0:	ddc00817 	ldw	r23,32(sp)
10003fb4:	dd800717 	ldw	r22,28(sp)
10003fb8:	dd400617 	ldw	r21,24(sp)
10003fbc:	dd000517 	ldw	r20,20(sp)
10003fc0:	dcc00417 	ldw	r19,16(sp)
10003fc4:	dc800317 	ldw	r18,12(sp)
10003fc8:	dc400217 	ldw	r17,8(sp)
10003fcc:	dc000117 	ldw	r16,4(sp)
10003fd0:	dec00b04 	addi	sp,sp,44
10003fd4:	f800283a 	ret
10003fd8:	9d801926 	beq	r19,r22,10004040 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
10003fdc:	a1000217 	ldw	r4,8(r20)
10003fe0:	a80f883a 	mov	r7,r21
10003fe4:	e00d883a 	mov	r6,fp
10003fe8:	20800017 	ldw	r2,0(r4)
10003fec:	dc800e15 	stw	r18,56(sp)
10003ff0:	dd800d15 	stw	r22,52(sp)
10003ff4:	ddc00c15 	stw	r23,48(sp)
10003ff8:	dcc00b15 	stw	r19,44(sp)
10003ffc:	10800717 	ldw	r2,28(r2)
10004000:	880b883a 	mov	r5,r17
10004004:	dfc00a17 	ldw	ra,40(sp)
10004008:	df000917 	ldw	fp,36(sp)
1000400c:	ddc00817 	ldw	r23,32(sp)
10004010:	dd800717 	ldw	r22,28(sp)
10004014:	dd400617 	ldw	r21,24(sp)
10004018:	dd000517 	ldw	r20,20(sp)
1000401c:	dcc00417 	ldw	r19,16(sp)
10004020:	dc800317 	ldw	r18,12(sp)
10004024:	dc400217 	ldw	r17,8(sp)
10004028:	dc000117 	ldw	r16,4(sp)
1000402c:	dec00b04 	addi	sp,sp,44
10004030:	1000683a 	jmp	r2
10004034:	00bfff84 	movi	r2,-2
10004038:	88bfda1e 	bne	r17,r2,10003fa4 <__alt_data_end+0xf8003fa4>
1000403c:	003fd706 	br	10003f9c <__alt_data_end+0xf8003f9c>
10004040:	b9400117 	ldw	r5,4(r23)
10004044:	81400526 	beq	r16,r5,1000405c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
10004048:	00800a84 	movi	r2,42
1000404c:	18bfe326 	beq	r3,r2,10003fdc <__alt_data_end+0xf8003fdc>
10004050:	8009883a 	mov	r4,r16
10004054:	000587c0 	call	1000587c <strcmp>
10004058:	103fe01e 	bne	r2,zero,10003fdc <__alt_data_end+0xf8003fdc>
1000405c:	97000215 	stw	fp,8(r18)
10004060:	003fd006 	br	10003fa4 <__alt_data_end+0xf8003fa4>
10004064:	00800184 	movi	r2,6
10004068:	003fcd06 	br	10003fa0 <__alt_data_end+0xf8003fa0>

1000406c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
1000406c:	defffa04 	addi	sp,sp,-24
10004070:	dc000215 	stw	r16,8(sp)
10004074:	dc000617 	ldw	r16,24(sp)
10004078:	dc800415 	stw	r18,16(sp)
1000407c:	dc400315 	stw	r17,12(sp)
10004080:	dfc00515 	stw	ra,20(sp)
10004084:	2023883a 	mov	r17,r4
10004088:	2825883a 	mov	r18,r5
1000408c:	81800b26 	beq	r16,r6,100040bc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
10004090:	89000217 	ldw	r4,8(r17)
10004094:	900b883a 	mov	r5,r18
10004098:	20800017 	ldw	r2,0(r4)
1000409c:	dc000615 	stw	r16,24(sp)
100040a0:	10800817 	ldw	r2,32(r2)
100040a4:	dfc00517 	ldw	ra,20(sp)
100040a8:	dc800417 	ldw	r18,16(sp)
100040ac:	dc400317 	ldw	r17,12(sp)
100040b0:	dc000217 	ldw	r16,8(sp)
100040b4:	dec00604 	addi	sp,sp,24
100040b8:	1000683a 	jmp	r2
100040bc:	21000117 	ldw	r4,4(r4)
100040c0:	39400117 	ldw	r5,4(r7)
100040c4:	21400926 	beq	r4,r5,100040ec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
100040c8:	20c00007 	ldb	r3,0(r4)
100040cc:	00800a84 	movi	r2,42
100040d0:	18bfef26 	beq	r3,r2,10004090 <__alt_data_end+0xf8004090>
100040d4:	d9800015 	stw	r6,0(sp)
100040d8:	d9c00115 	stw	r7,4(sp)
100040dc:	000587c0 	call	1000587c <strcmp>
100040e0:	d9800017 	ldw	r6,0(sp)
100040e4:	d9c00117 	ldw	r7,4(sp)
100040e8:	103fe91e 	bne	r2,zero,10004090 <__alt_data_end+0xf8004090>
100040ec:	00800184 	movi	r2,6
100040f0:	dfc00517 	ldw	ra,20(sp)
100040f4:	dc800417 	ldw	r18,16(sp)
100040f8:	dc400317 	ldw	r17,12(sp)
100040fc:	dc000217 	ldw	r16,8(sp)
10004100:	dec00604 	addi	sp,sp,24
10004104:	f800283a 	ret

10004108 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
10004108:	defffb04 	addi	sp,sp,-20
1000410c:	dcc00315 	stw	r19,12(sp)
10004110:	dc800215 	stw	r18,8(sp)
10004114:	dc400115 	stw	r17,4(sp)
10004118:	dc000015 	stw	r16,0(sp)
1000411c:	dfc00415 	stw	ra,16(sp)
10004120:	2027883a 	mov	r19,r4
10004124:	2821883a 	mov	r16,r5
10004128:	3023883a 	mov	r17,r6
1000412c:	3825883a 	mov	r18,r7
10004130:	00043340 	call	10004334 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
10004134:	10c03fcc 	andi	r3,r2,255
10004138:	18000726 	beq	r3,zero,10004158 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
1000413c:	dfc00417 	ldw	ra,16(sp)
10004140:	dcc00317 	ldw	r19,12(sp)
10004144:	dc800217 	ldw	r18,8(sp)
10004148:	dc400117 	ldw	r17,4(sp)
1000414c:	dc000017 	ldw	r16,0(sp)
10004150:	dec00504 	addi	sp,sp,20
10004154:	f800283a 	ret
10004158:	99000217 	ldw	r4,8(r19)
1000415c:	900f883a 	mov	r7,r18
10004160:	880d883a 	mov	r6,r17
10004164:	20800017 	ldw	r2,0(r4)
10004168:	800b883a 	mov	r5,r16
1000416c:	10800617 	ldw	r2,24(r2)
10004170:	dfc00417 	ldw	ra,16(sp)
10004174:	dcc00317 	ldw	r19,12(sp)
10004178:	dc800217 	ldw	r18,8(sp)
1000417c:	dc400117 	ldw	r17,4(sp)
10004180:	dc000017 	ldw	r16,0(sp)
10004184:	dec00504 	addi	sp,sp,20
10004188:	1000683a 	jmp	r2

1000418c <_ZNSt9exceptionD1Ev>:
1000418c:	f800283a 	ret

10004190 <_ZNSt13bad_exceptionD1Ev>:
10004190:	f800283a 	ret

10004194 <_ZNKSt9exception4whatEv>:
10004194:	00840074 	movhi	r2,4097
10004198:	1093c104 	addi	r2,r2,20228
1000419c:	f800283a 	ret

100041a0 <_ZNKSt13bad_exception4whatEv>:
100041a0:	00840074 	movhi	r2,4097
100041a4:	1093c504 	addi	r2,r2,20244
100041a8:	f800283a 	ret

100041ac <_ZNSt9exceptionD0Ev>:
100041ac:	00037601 	jmpi	10003760 <_ZdlPv>

100041b0 <_ZNSt13bad_exceptionD0Ev>:
100041b0:	00037601 	jmpi	10003760 <_ZdlPv>

100041b4 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
100041b4:	f800283a 	ret

100041b8 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
100041b8:	00037601 	jmpi	10003760 <_ZdlPv>

100041bc <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
100041bc:	f800283a 	ret

100041c0 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
100041c0:	00037601 	jmpi	10003760 <_ZdlPv>

100041c4 <_ZNSt9type_infoD1Ev>:
100041c4:	f800283a 	ret

100041c8 <_ZNKSt9type_info14__is_pointer_pEv>:
100041c8:	0005883a 	mov	r2,zero
100041cc:	f800283a 	ret

100041d0 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
100041d0:	0005883a 	mov	r2,zero
100041d4:	f800283a 	ret

100041d8 <_ZNSt9type_infoD0Ev>:
100041d8:	00037601 	jmpi	10003760 <_ZdlPv>

100041dc <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
100041dc:	21000117 	ldw	r4,4(r4)
100041e0:	29400117 	ldw	r5,4(r5)
100041e4:	21400c26 	beq	r4,r5,10004218 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
100041e8:	20c00007 	ldb	r3,0(r4)
100041ec:	00800a84 	movi	r2,42
100041f0:	18800726 	beq	r3,r2,10004210 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
100041f4:	deffff04 	addi	sp,sp,-4
100041f8:	dfc00015 	stw	ra,0(sp)
100041fc:	000587c0 	call	1000587c <strcmp>
10004200:	1005003a 	cmpeq	r2,r2,zero
10004204:	dfc00017 	ldw	ra,0(sp)
10004208:	dec00104 	addi	sp,sp,4
1000420c:	f800283a 	ret
10004210:	0005883a 	mov	r2,zero
10004214:	f800283a 	ret
10004218:	00800044 	movi	r2,1
1000421c:	f800283a 	ret

10004220 <__cxa_pure_virtual>:
10004220:	01440074 	movhi	r5,4097
10004224:	deffff04 	addi	sp,sp,-4
10004228:	29540704 	addi	r5,r5,20508
1000422c:	018006c4 	movi	r6,27
10004230:	01000084 	movi	r4,2
10004234:	dfc00015 	stw	ra,0(sp)
10004238:	00127500 	call	10012750 <write>
1000423c:	0003b0c0 	call	10003b0c <_ZSt9terminatev>

10004240 <__cxa_deleted_virtual>:
10004240:	01440074 	movhi	r5,4097
10004244:	deffff04 	addi	sp,sp,-4
10004248:	29540e04 	addi	r5,r5,20536
1000424c:	01800784 	movi	r6,30
10004250:	01000084 	movi	r4,2
10004254:	dfc00015 	stw	ra,0(sp)
10004258:	00127500 	call	10012750 <write>
1000425c:	0003b0c0 	call	10003b0c <_ZSt9terminatev>

10004260 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
10004260:	20800017 	ldw	r2,0(r4)
10004264:	defffa04 	addi	sp,sp,-24
10004268:	dc000415 	stw	r16,16(sp)
1000426c:	10800617 	ldw	r2,24(r2)
10004270:	3021883a 	mov	r16,r6
10004274:	31800017 	ldw	r6,0(r6)
10004278:	00c00404 	movi	r3,16
1000427c:	d8c00215 	stw	r3,8(sp)
10004280:	dfc00515 	stw	ra,20(sp)
10004284:	d8000015 	stw	zero,0(sp)
10004288:	d8000115 	stw	zero,4(sp)
1000428c:	d8000315 	stw	zero,12(sp)
10004290:	d80f883a 	mov	r7,sp
10004294:	103ee83a 	callr	r2
10004298:	d8800117 	ldw	r2,4(sp)
1000429c:	00c00184 	movi	r3,6
100042a0:	1080018c 	andi	r2,r2,6
100042a4:	10c00526 	beq	r2,r3,100042bc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
100042a8:	0005883a 	mov	r2,zero
100042ac:	dfc00517 	ldw	ra,20(sp)
100042b0:	dc000417 	ldw	r16,16(sp)
100042b4:	dec00604 	addi	sp,sp,24
100042b8:	f800283a 	ret
100042bc:	d8c00017 	ldw	r3,0(sp)
100042c0:	00800044 	movi	r2,1
100042c4:	80c00015 	stw	r3,0(r16)
100042c8:	dfc00517 	ldw	ra,20(sp)
100042cc:	dc000417 	ldw	r16,16(sp)
100042d0:	dec00604 	addi	sp,sp,24
100042d4:	f800283a 	ret

100042d8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
100042d8:	d8800017 	ldw	r2,0(sp)
100042dc:	11800226 	beq	r2,r6,100042e8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
100042e0:	00800044 	movi	r2,1
100042e4:	f800283a 	ret
100042e8:	00800184 	movi	r2,6
100042ec:	f800283a 	ret

100042f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
100042f0:	00840074 	movhi	r2,4097
100042f4:	10942404 	addi	r2,r2,20624
100042f8:	20800015 	stw	r2,0(r4)
100042fc:	00041c41 	jmpi	100041c4 <_ZNSt9type_infoD1Ev>

10004300 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
10004300:	defffe04 	addi	sp,sp,-8
10004304:	00840074 	movhi	r2,4097
10004308:	dc000015 	stw	r16,0(sp)
1000430c:	dfc00115 	stw	ra,4(sp)
10004310:	10942404 	addi	r2,r2,20624
10004314:	20800015 	stw	r2,0(r4)
10004318:	2021883a 	mov	r16,r4
1000431c:	00041c40 	call	100041c4 <_ZNSt9type_infoD1Ev>
10004320:	8009883a 	mov	r4,r16
10004324:	dfc00117 	ldw	ra,4(sp)
10004328:	dc000017 	ldw	r16,0(sp)
1000432c:	dec00204 	addi	sp,sp,8
10004330:	00037601 	jmpi	10003760 <_ZdlPv>

10004334 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
10004334:	21000117 	ldw	r4,4(r4)
10004338:	29400117 	ldw	r5,4(r5)
1000433c:	defffd04 	addi	sp,sp,-12
10004340:	dc400115 	stw	r17,4(sp)
10004344:	dc000015 	stw	r16,0(sp)
10004348:	dfc00215 	stw	ra,8(sp)
1000434c:	3023883a 	mov	r17,r6
10004350:	3821883a 	mov	r16,r7
10004354:	21400526 	beq	r4,r5,1000436c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
10004358:	20c00007 	ldb	r3,0(r4)
1000435c:	00800a84 	movi	r2,42
10004360:	18800d26 	beq	r3,r2,10004398 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
10004364:	000587c0 	call	1000587c <strcmp>
10004368:	10000b1e 	bne	r2,zero,10004398 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
1000436c:	00800204 	movi	r2,8
10004370:	80800315 	stw	r2,12(r16)
10004374:	00800184 	movi	r2,6
10004378:	80800115 	stw	r2,4(r16)
1000437c:	84400015 	stw	r17,0(r16)
10004380:	00800044 	movi	r2,1
10004384:	dfc00217 	ldw	ra,8(sp)
10004388:	dc400117 	ldw	r17,4(sp)
1000438c:	dc000017 	ldw	r16,0(sp)
10004390:	dec00304 	addi	sp,sp,12
10004394:	f800283a 	ret
10004398:	0005883a 	mov	r2,zero
1000439c:	003ff906 	br	10004384 <__alt_data_end+0xf8004384>

100043a0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
100043a0:	defffa04 	addi	sp,sp,-24
100043a4:	dc800415 	stw	r18,16(sp)
100043a8:	d8800817 	ldw	r2,32(sp)
100043ac:	dc800617 	ldw	r18,24(sp)
100043b0:	dc400315 	stw	r17,12(sp)
100043b4:	dc000215 	stw	r16,8(sp)
100043b8:	dfc00515 	stw	ra,20(sp)
100043bc:	dc400917 	ldw	r17,36(sp)
100043c0:	24000117 	ldw	r16,4(r4)
100043c4:	90801526 	beq	r18,r2,1000441c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
100043c8:	39400117 	ldw	r5,4(r7)
100043cc:	2c000826 	beq	r5,r16,100043f0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
100043d0:	80c00007 	ldb	r3,0(r16)
100043d4:	00800a84 	movi	r2,42
100043d8:	18800926 	beq	r3,r2,10004400 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
100043dc:	8009883a 	mov	r4,r16
100043e0:	d9800115 	stw	r6,4(sp)
100043e4:	000587c0 	call	1000587c <strcmp>
100043e8:	d9800117 	ldw	r6,4(sp)
100043ec:	1000041e 	bne	r2,zero,10004400 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
100043f0:	00800044 	movi	r2,1
100043f4:	8c800015 	stw	r18,0(r17)
100043f8:	89800115 	stw	r6,4(r17)
100043fc:	88800315 	stw	r2,12(r17)
10004400:	0005883a 	mov	r2,zero
10004404:	dfc00517 	ldw	ra,20(sp)
10004408:	dc800417 	ldw	r18,16(sp)
1000440c:	dc400317 	ldw	r17,12(sp)
10004410:	dc000217 	ldw	r16,8(sp)
10004414:	dec00604 	addi	sp,sp,24
10004418:	f800283a 	ret
1000441c:	d8800717 	ldw	r2,28(sp)
10004420:	11400117 	ldw	r5,4(r2)
10004424:	81400a26 	beq	r16,r5,10004450 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
10004428:	80c00007 	ldb	r3,0(r16)
1000442c:	00800a84 	movi	r2,42
10004430:	18800c26 	beq	r3,r2,10004464 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
10004434:	8009883a 	mov	r4,r16
10004438:	d9800115 	stw	r6,4(sp)
1000443c:	d9c00015 	stw	r7,0(sp)
10004440:	000587c0 	call	1000587c <strcmp>
10004444:	d9800117 	ldw	r6,4(sp)
10004448:	d9c00017 	ldw	r7,0(sp)
1000444c:	1000021e 	bne	r2,zero,10004458 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
10004450:	89800215 	stw	r6,8(r17)
10004454:	003fea06 	br	10004400 <__alt_data_end+0xf8004400>
10004458:	39400117 	ldw	r5,4(r7)
1000445c:	817fdf1e 	bne	r16,r5,100043dc <__alt_data_end+0xf80043dc>
10004460:	003fe306 	br	100043f0 <__alt_data_end+0xf80043f0>
10004464:	38800117 	ldw	r2,4(r7)
10004468:	80bfe51e 	bne	r16,r2,10004400 <__alt_data_end+0xf8004400>
1000446c:	003fe006 	br	100043f0 <__alt_data_end+0xf80043f0>

10004470 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
10004470:	20800117 	ldw	r2,4(r4)
10004474:	28c00117 	ldw	r3,4(r5)
10004478:	10c02926 	beq	r2,r3,10004520 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
1000447c:	defffb04 	addi	sp,sp,-20
10004480:	dcc00315 	stw	r19,12(sp)
10004484:	dc800215 	stw	r18,8(sp)
10004488:	dc400115 	stw	r17,4(sp)
1000448c:	dc000015 	stw	r16,0(sp)
10004490:	dfc00415 	stw	ra,16(sp)
10004494:	2821883a 	mov	r16,r5
10004498:	11400007 	ldb	r5,0(r2)
1000449c:	2025883a 	mov	r18,r4
100044a0:	01000a84 	movi	r4,42
100044a4:	3823883a 	mov	r17,r7
100044a8:	3027883a 	mov	r19,r6
100044ac:	29000626 	beq	r5,r4,100044c8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
100044b0:	180b883a 	mov	r5,r3
100044b4:	1009883a 	mov	r4,r2
100044b8:	000587c0 	call	1000587c <strcmp>
100044bc:	1000021e 	bne	r2,zero,100044c8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
100044c0:	00800044 	movi	r2,1
100044c4:	00000306 	br	100044d4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
100044c8:	008000c4 	movi	r2,3
100044cc:	1440082e 	bgeu	r2,r17,100044f0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
100044d0:	0005883a 	mov	r2,zero
100044d4:	dfc00417 	ldw	ra,16(sp)
100044d8:	dcc00317 	ldw	r19,12(sp)
100044dc:	dc800217 	ldw	r18,8(sp)
100044e0:	dc400117 	ldw	r17,4(sp)
100044e4:	dc000017 	ldw	r16,0(sp)
100044e8:	dec00504 	addi	sp,sp,20
100044ec:	f800283a 	ret
100044f0:	80800017 	ldw	r2,0(r16)
100044f4:	980d883a 	mov	r6,r19
100044f8:	900b883a 	mov	r5,r18
100044fc:	10800517 	ldw	r2,20(r2)
10004500:	8009883a 	mov	r4,r16
10004504:	dfc00417 	ldw	ra,16(sp)
10004508:	dcc00317 	ldw	r19,12(sp)
1000450c:	dc800217 	ldw	r18,8(sp)
10004510:	dc400117 	ldw	r17,4(sp)
10004514:	dc000017 	ldw	r16,0(sp)
10004518:	dec00504 	addi	sp,sp,20
1000451c:	1000683a 	jmp	r2
10004520:	00800044 	movi	r2,1
10004524:	f800283a 	ret

10004528 <__mulsi3>:
10004528:	0005883a 	mov	r2,zero
1000452c:	20000726 	beq	r4,zero,1000454c <__mulsi3+0x24>
10004530:	20c0004c 	andi	r3,r4,1
10004534:	2008d07a 	srli	r4,r4,1
10004538:	18000126 	beq	r3,zero,10004540 <__mulsi3+0x18>
1000453c:	1145883a 	add	r2,r2,r5
10004540:	294b883a 	add	r5,r5,r5
10004544:	203ffa1e 	bne	r4,zero,10004530 <__alt_data_end+0xf8004530>
10004548:	f800283a 	ret
1000454c:	f800283a 	ret

10004550 <_Unwind_ForcedUnwind_Phase2>:
10004550:	defff404 	addi	sp,sp,-48
10004554:	dd800915 	stw	r22,36(sp)
10004558:	058400b4 	movhi	r22,4098
1000455c:	ddc00a15 	stw	r23,40(sp)
10004560:	dd400815 	stw	r21,32(sp)
10004564:	dd000715 	stw	r20,28(sp)
10004568:	dcc00615 	stw	r19,24(sp)
1000456c:	dc400415 	stw	r17,16(sp)
10004570:	dc000315 	stw	r16,12(sp)
10004574:	dfc00b15 	stw	ra,44(sp)
10004578:	dc800515 	stw	r18,20(sp)
1000457c:	2021883a 	mov	r16,r4
10004580:	2823883a 	mov	r17,r5
10004584:	24c00317 	ldw	r19,12(r4)
10004588:	25000417 	ldw	r20,16(r4)
1000458c:	28c00017 	ldw	r3,0(r5)
10004590:	b5a27f04 	addi	r22,r22,-30212
10004594:	054001c4 	movi	r21,7
10004598:	05c00204 	movi	r23,8
1000459c:	00001606 	br	100045f8 <_Unwind_ForcedUnwind_Phase2+0xa8>
100045a0:	81800017 	ldw	r6,0(r16)
100045a4:	81c00117 	ldw	r7,4(r16)
100045a8:	1c800617 	ldw	r18,24(r3)
100045ac:	dd000215 	stw	r20,8(sp)
100045b0:	dc400115 	stw	r17,4(sp)
100045b4:	dc000015 	stw	r16,0(sp)
100045b8:	983ee83a 	callr	r19
100045bc:	01400284 	movi	r5,10
100045c0:	01000044 	movi	r4,1
100045c4:	1000241e 	bne	r2,zero,10004658 <_Unwind_ForcedUnwind_Phase2+0x108>
100045c8:	90000726 	beq	r18,zero,100045e8 <_Unwind_ForcedUnwind_Phase2+0x98>
100045cc:	81800017 	ldw	r6,0(r16)
100045d0:	81c00117 	ldw	r7,4(r16)
100045d4:	dc400115 	stw	r17,4(sp)
100045d8:	dc000015 	stw	r16,0(sp)
100045dc:	903ee83a 	callr	r18
100045e0:	15401f26 	beq	r2,r21,10004660 <_Unwind_ForcedUnwind_Phase2+0x110>
100045e4:	15c01c1e 	bne	r2,r23,10004658 <_Unwind_ForcedUnwind_Phase2+0x108>
100045e8:	88800017 	ldw	r2,0(r17)
100045ec:	10c00017 	ldw	r3,0(r2)
100045f0:	b0c00015 	stw	r3,0(r22)
100045f4:	88c00015 	stw	r3,0(r17)
100045f8:	01400284 	movi	r5,10
100045fc:	01000044 	movi	r4,1
10004600:	183fe71e 	bne	r3,zero,100045a0 <__alt_data_end+0xf80045a0>
10004604:	81800017 	ldw	r6,0(r16)
10004608:	81c00117 	ldw	r7,4(r16)
1000460c:	01400684 	movi	r5,26
10004610:	dd000215 	stw	r20,8(sp)
10004614:	dc400115 	stw	r17,4(sp)
10004618:	dc000015 	stw	r16,0(sp)
1000461c:	01000044 	movi	r4,1
10004620:	983ee83a 	callr	r19
10004624:	10000c1e 	bne	r2,zero,10004658 <_Unwind_ForcedUnwind_Phase2+0x108>
10004628:	00800144 	movi	r2,5
1000462c:	dfc00b17 	ldw	ra,44(sp)
10004630:	ddc00a17 	ldw	r23,40(sp)
10004634:	dd800917 	ldw	r22,36(sp)
10004638:	dd400817 	ldw	r21,32(sp)
1000463c:	dd000717 	ldw	r20,28(sp)
10004640:	dcc00617 	ldw	r19,24(sp)
10004644:	dc800517 	ldw	r18,20(sp)
10004648:	dc400417 	ldw	r17,16(sp)
1000464c:	dc000317 	ldw	r16,12(sp)
10004650:	dec00c04 	addi	sp,sp,48
10004654:	f800283a 	ret
10004658:	00800084 	movi	r2,2
1000465c:	003ff306 	br	1000462c <__alt_data_end+0xf800462c>
10004660:	a805883a 	mov	r2,r21
10004664:	003ff106 	br	1000462c <__alt_data_end+0xf800462c>

10004668 <_Unwind_RaiseException_Phase2>:
10004668:	28c00017 	ldw	r3,0(r5)
1000466c:	defff804 	addi	sp,sp,-32
10004670:	dcc00515 	stw	r19,20(sp)
10004674:	dc800415 	stw	r18,16(sp)
10004678:	dc400315 	stw	r17,12(sp)
1000467c:	dc000215 	stw	r16,8(sp)
10004680:	dfc00715 	stw	ra,28(sp)
10004684:	dd000615 	stw	r20,24(sp)
10004688:	2823883a 	mov	r17,r5
1000468c:	2021883a 	mov	r16,r4
10004690:	048001c4 	movi	r18,7
10004694:	04c00204 	movi	r19,8
10004698:	18001326 	beq	r3,zero,100046e8 <_Unwind_RaiseException_Phase2+0x80>
1000469c:	81000417 	ldw	r4,16(r16)
100046a0:	1a000617 	ldw	r8,24(r3)
100046a4:	19001926 	beq	r3,r4,1000470c <_Unwind_RaiseException_Phase2+0xa4>
100046a8:	40000c26 	beq	r8,zero,100046dc <_Unwind_RaiseException_Phase2+0x74>
100046ac:	01400084 	movi	r5,2
100046b0:	0029883a 	mov	r20,zero
100046b4:	81800017 	ldw	r6,0(r16)
100046b8:	81c00117 	ldw	r7,4(r16)
100046bc:	01000044 	movi	r4,1
100046c0:	dc400115 	stw	r17,4(sp)
100046c4:	dc000015 	stw	r16,0(sp)
100046c8:	403ee83a 	callr	r8
100046cc:	14801326 	beq	r2,r18,1000471c <_Unwind_RaiseException_Phase2+0xb4>
100046d0:	14c0051e 	bne	r2,r19,100046e8 <_Unwind_RaiseException_Phase2+0x80>
100046d4:	a000131e 	bne	r20,zero,10004724 <_Unwind_RaiseException_Phase2+0xbc>
100046d8:	88c00017 	ldw	r3,0(r17)
100046dc:	18c00017 	ldw	r3,0(r3)
100046e0:	88c00015 	stw	r3,0(r17)
100046e4:	183fed1e 	bne	r3,zero,1000469c <__alt_data_end+0xf800469c>
100046e8:	00800084 	movi	r2,2
100046ec:	dfc00717 	ldw	ra,28(sp)
100046f0:	dd000617 	ldw	r20,24(sp)
100046f4:	dcc00517 	ldw	r19,20(sp)
100046f8:	dc800417 	ldw	r18,16(sp)
100046fc:	dc400317 	ldw	r17,12(sp)
10004700:	dc000217 	ldw	r16,8(sp)
10004704:	dec00804 	addi	sp,sp,32
10004708:	f800283a 	ret
1000470c:	40000526 	beq	r8,zero,10004724 <_Unwind_RaiseException_Phase2+0xbc>
10004710:	01400184 	movi	r5,6
10004714:	05000104 	movi	r20,4
10004718:	003fe606 	br	100046b4 <__alt_data_end+0xf80046b4>
1000471c:	9005883a 	mov	r2,r18
10004720:	003ff206 	br	100046ec <__alt_data_end+0xf80046ec>
10004724:	0004a700 	call	10004a70 <abort>

10004728 <uw_install_context.isra.1>:
10004728:	20c00017 	ldw	r3,0(r4)
1000472c:	deffff04 	addi	sp,sp,-4
10004730:	014400b4 	movhi	r5,4098
10004734:	19000917 	ldw	r4,36(r3)
10004738:	df000015 	stw	fp,0(sp)
1000473c:	18800804 	addi	r2,r3,32
10004740:	d839883a 	mov	fp,sp
10004744:	29627f04 	addi	r5,r5,-30212
10004748:	28c00015 	stw	r3,0(r5)
1000474c:	17000017 	ldw	fp,0(r2)
10004750:	1ec00a17 	ldw	sp,40(r3)
10004754:	2000683a 	jmp	r4

10004758 <_Unwind_SjLj_Register>:
10004758:	008400b4 	movhi	r2,4098
1000475c:	10a27f04 	addi	r2,r2,-30212
10004760:	10c00017 	ldw	r3,0(r2)
10004764:	11000015 	stw	r4,0(r2)
10004768:	20c00015 	stw	r3,0(r4)
1000476c:	f800283a 	ret

10004770 <_Unwind_SjLj_Unregister>:
10004770:	20c00017 	ldw	r3,0(r4)
10004774:	008400b4 	movhi	r2,4098
10004778:	10a27f04 	addi	r2,r2,-30212
1000477c:	10c00015 	stw	r3,0(r2)
10004780:	f800283a 	ret

10004784 <_Unwind_GetGR>:
10004784:	20800017 	ldw	r2,0(r4)
10004788:	29400084 	addi	r5,r5,2
1000478c:	294b883a 	add	r5,r5,r5
10004790:	294b883a 	add	r5,r5,r5
10004794:	114b883a 	add	r5,r2,r5
10004798:	28800017 	ldw	r2,0(r5)
1000479c:	f800283a 	ret

100047a0 <_Unwind_GetCFA>:
100047a0:	20800017 	ldw	r2,0(r4)
100047a4:	10000226 	beq	r2,zero,100047b0 <_Unwind_GetCFA+0x10>
100047a8:	10800a17 	ldw	r2,40(r2)
100047ac:	f800283a 	ret
100047b0:	0005883a 	mov	r2,zero
100047b4:	f800283a 	ret

100047b8 <_Unwind_SetGR>:
100047b8:	20800017 	ldw	r2,0(r4)
100047bc:	29400084 	addi	r5,r5,2
100047c0:	294b883a 	add	r5,r5,r5
100047c4:	294b883a 	add	r5,r5,r5
100047c8:	114b883a 	add	r5,r2,r5
100047cc:	29800015 	stw	r6,0(r5)
100047d0:	f800283a 	ret

100047d4 <_Unwind_GetIP>:
100047d4:	20800017 	ldw	r2,0(r4)
100047d8:	10800117 	ldw	r2,4(r2)
100047dc:	10800044 	addi	r2,r2,1
100047e0:	f800283a 	ret

100047e4 <_Unwind_GetIPInfo>:
100047e4:	20800017 	ldw	r2,0(r4)
100047e8:	28000015 	stw	zero,0(r5)
100047ec:	10000326 	beq	r2,zero,100047fc <_Unwind_GetIPInfo+0x18>
100047f0:	10800117 	ldw	r2,4(r2)
100047f4:	10800044 	addi	r2,r2,1
100047f8:	f800283a 	ret
100047fc:	0005883a 	mov	r2,zero
10004800:	f800283a 	ret

10004804 <_Unwind_SetIP>:
10004804:	20800017 	ldw	r2,0(r4)
10004808:	297fffc4 	addi	r5,r5,-1
1000480c:	11400115 	stw	r5,4(r2)
10004810:	f800283a 	ret

10004814 <_Unwind_GetLanguageSpecificData>:
10004814:	20800017 	ldw	r2,0(r4)
10004818:	10800717 	ldw	r2,28(r2)
1000481c:	f800283a 	ret

10004820 <_Unwind_GetRegionStart>:
10004820:	0005883a 	mov	r2,zero
10004824:	f800283a 	ret

10004828 <_Unwind_FindEnclosingFunction>:
10004828:	0005883a 	mov	r2,zero
1000482c:	f800283a 	ret

10004830 <_Unwind_GetDataRelBase>:
10004830:	0005883a 	mov	r2,zero
10004834:	f800283a 	ret

10004838 <_Unwind_GetTextRelBase>:
10004838:	0005883a 	mov	r2,zero
1000483c:	f800283a 	ret

10004840 <_Unwind_SjLj_RaiseException>:
10004840:	008400b4 	movhi	r2,4098
10004844:	defff804 	addi	sp,sp,-32
10004848:	10a27f04 	addi	r2,r2,-30212
1000484c:	dc800515 	stw	r18,20(sp)
10004850:	14800017 	ldw	r18,0(r2)
10004854:	dfc00715 	stw	ra,28(sp)
10004858:	dcc00615 	stw	r19,24(sp)
1000485c:	dc400415 	stw	r17,16(sp)
10004860:	dc000315 	stw	r16,12(sp)
10004864:	dc800215 	stw	r18,8(sp)
10004868:	90001426 	beq	r18,zero,100048bc <_Unwind_SjLj_RaiseException+0x7c>
1000486c:	2021883a 	mov	r16,r4
10004870:	9005883a 	mov	r2,r18
10004874:	04400184 	movi	r17,6
10004878:	04c00204 	movi	r19,8
1000487c:	10800617 	ldw	r2,24(r2)
10004880:	10000a26 	beq	r2,zero,100048ac <_Unwind_SjLj_RaiseException+0x6c>
10004884:	81800017 	ldw	r6,0(r16)
10004888:	81c00117 	ldw	r7,4(r16)
1000488c:	01400044 	movi	r5,1
10004890:	d8c00204 	addi	r3,sp,8
10004894:	d8c00115 	stw	r3,4(sp)
10004898:	dc000015 	stw	r16,0(sp)
1000489c:	2809883a 	mov	r4,r5
100048a0:	103ee83a 	callr	r2
100048a4:	14400d26 	beq	r2,r17,100048dc <_Unwind_SjLj_RaiseException+0x9c>
100048a8:	14c0171e 	bne	r2,r19,10004908 <_Unwind_SjLj_RaiseException+0xc8>
100048ac:	d8800217 	ldw	r2,8(sp)
100048b0:	10800017 	ldw	r2,0(r2)
100048b4:	d8800215 	stw	r2,8(sp)
100048b8:	103ff01e 	bne	r2,zero,1000487c <__alt_data_end+0xf800487c>
100048bc:	00800144 	movi	r2,5
100048c0:	dfc00717 	ldw	ra,28(sp)
100048c4:	dcc00617 	ldw	r19,24(sp)
100048c8:	dc800517 	ldw	r18,20(sp)
100048cc:	dc400417 	ldw	r17,16(sp)
100048d0:	dc000317 	ldw	r16,12(sp)
100048d4:	dec00804 	addi	sp,sp,32
100048d8:	f800283a 	ret
100048dc:	d8800217 	ldw	r2,8(sp)
100048e0:	80000315 	stw	zero,12(r16)
100048e4:	d9400204 	addi	r5,sp,8
100048e8:	80800415 	stw	r2,16(r16)
100048ec:	8009883a 	mov	r4,r16
100048f0:	dc800215 	stw	r18,8(sp)
100048f4:	00046680 	call	10004668 <_Unwind_RaiseException_Phase2>
100048f8:	00c001c4 	movi	r3,7
100048fc:	10fff01e 	bne	r2,r3,100048c0 <__alt_data_end+0xf80048c0>
10004900:	d9000204 	addi	r4,sp,8
10004904:	00047280 	call	10004728 <uw_install_context.isra.1>
10004908:	008000c4 	movi	r2,3
1000490c:	003fec06 	br	100048c0 <__alt_data_end+0xf80048c0>

10004910 <_Unwind_SjLj_ForcedUnwind>:
10004910:	00c400b4 	movhi	r3,4098
10004914:	18e27f04 	addi	r3,r3,-30212
10004918:	defffe04 	addi	sp,sp,-8
1000491c:	18c00017 	ldw	r3,0(r3)
10004920:	dfc00115 	stw	ra,4(sp)
10004924:	21400315 	stw	r5,12(r4)
10004928:	21800415 	stw	r6,16(r4)
1000492c:	d80b883a 	mov	r5,sp
10004930:	d8c00015 	stw	r3,0(sp)
10004934:	00045500 	call	10004550 <_Unwind_ForcedUnwind_Phase2>
10004938:	00c001c4 	movi	r3,7
1000493c:	10c00326 	beq	r2,r3,1000494c <_Unwind_SjLj_ForcedUnwind+0x3c>
10004940:	dfc00117 	ldw	ra,4(sp)
10004944:	dec00204 	addi	sp,sp,8
10004948:	f800283a 	ret
1000494c:	d809883a 	mov	r4,sp
10004950:	00047280 	call	10004728 <uw_install_context.isra.1>

10004954 <_Unwind_SjLj_Resume>:
10004954:	00c400b4 	movhi	r3,4098
10004958:	18e27f04 	addi	r3,r3,-30212
1000495c:	18c00017 	ldw	r3,0(r3)
10004960:	20800317 	ldw	r2,12(r4)
10004964:	defffe04 	addi	sp,sp,-8
10004968:	dfc00115 	stw	ra,4(sp)
1000496c:	d8c00015 	stw	r3,0(sp)
10004970:	d80b883a 	mov	r5,sp
10004974:	1000041e 	bne	r2,zero,10004988 <_Unwind_SjLj_Resume+0x34>
10004978:	00046680 	call	10004668 <_Unwind_RaiseException_Phase2>
1000497c:	00c001c4 	movi	r3,7
10004980:	10c00326 	beq	r2,r3,10004990 <_Unwind_SjLj_Resume+0x3c>
10004984:	0004a700 	call	10004a70 <abort>
10004988:	00045500 	call	10004550 <_Unwind_ForcedUnwind_Phase2>
1000498c:	003ffb06 	br	1000497c <__alt_data_end+0xf800497c>
10004990:	d809883a 	mov	r4,sp
10004994:	00047280 	call	10004728 <uw_install_context.isra.1>

10004998 <_Unwind_SjLj_Resume_or_Rethrow>:
10004998:	20800317 	ldw	r2,12(r4)
1000499c:	defffe04 	addi	sp,sp,-8
100049a0:	dfc00115 	stw	ra,4(sp)
100049a4:	1000041e 	bne	r2,zero,100049b8 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
100049a8:	00048400 	call	10004840 <_Unwind_SjLj_RaiseException>
100049ac:	dfc00117 	ldw	ra,4(sp)
100049b0:	dec00204 	addi	sp,sp,8
100049b4:	f800283a 	ret
100049b8:	008400b4 	movhi	r2,4098
100049bc:	10a27f04 	addi	r2,r2,-30212
100049c0:	10800017 	ldw	r2,0(r2)
100049c4:	d80b883a 	mov	r5,sp
100049c8:	d8800015 	stw	r2,0(sp)
100049cc:	00045500 	call	10004550 <_Unwind_ForcedUnwind_Phase2>
100049d0:	00c001c4 	movi	r3,7
100049d4:	10c00126 	beq	r2,r3,100049dc <_Unwind_SjLj_Resume_or_Rethrow+0x44>
100049d8:	0004a700 	call	10004a70 <abort>
100049dc:	d809883a 	mov	r4,sp
100049e0:	00047280 	call	10004728 <uw_install_context.isra.1>

100049e4 <_Unwind_DeleteException>:
100049e4:	20800217 	ldw	r2,8(r4)
100049e8:	10000326 	beq	r2,zero,100049f8 <_Unwind_DeleteException+0x14>
100049ec:	200b883a 	mov	r5,r4
100049f0:	01000044 	movi	r4,1
100049f4:	1000683a 	jmp	r2
100049f8:	f800283a 	ret

100049fc <_Unwind_Backtrace>:
100049fc:	008400b4 	movhi	r2,4098
10004a00:	10a27f04 	addi	r2,r2,-30212
10004a04:	10800017 	ldw	r2,0(r2)
10004a08:	defffc04 	addi	sp,sp,-16
10004a0c:	dc400215 	stw	r17,8(sp)
10004a10:	dc000115 	stw	r16,4(sp)
10004a14:	dfc00315 	stw	ra,12(sp)
10004a18:	2023883a 	mov	r17,r4
10004a1c:	2821883a 	mov	r16,r5
10004a20:	d8800015 	stw	r2,0(sp)
10004a24:	00000506 	br	10004a3c <_Unwind_Backtrace+0x40>
10004a28:	883ee83a 	callr	r17
10004a2c:	10000e1e 	bne	r2,zero,10004a68 <_Unwind_Backtrace+0x6c>
10004a30:	d8800017 	ldw	r2,0(sp)
10004a34:	10800017 	ldw	r2,0(r2)
10004a38:	d8800015 	stw	r2,0(sp)
10004a3c:	800b883a 	mov	r5,r16
10004a40:	d809883a 	mov	r4,sp
10004a44:	103ff81e 	bne	r2,zero,10004a28 <__alt_data_end+0xf8004a28>
10004a48:	883ee83a 	callr	r17
10004a4c:	1000061e 	bne	r2,zero,10004a68 <_Unwind_Backtrace+0x6c>
10004a50:	00800144 	movi	r2,5
10004a54:	dfc00317 	ldw	ra,12(sp)
10004a58:	dc400217 	ldw	r17,8(sp)
10004a5c:	dc000117 	ldw	r16,4(sp)
10004a60:	dec00404 	addi	sp,sp,16
10004a64:	f800283a 	ret
10004a68:	008000c4 	movi	r2,3
10004a6c:	003ff906 	br	10004a54 <__alt_data_end+0xf8004a54>

10004a70 <abort>:
10004a70:	deffff04 	addi	sp,sp,-4
10004a74:	01000184 	movi	r4,6
10004a78:	dfc00015 	stw	ra,0(sp)
10004a7c:	00057cc0 	call	100057cc <raise>
10004a80:	01000044 	movi	r4,1
10004a84:	0011e0c0 	call	10011e0c <_exit>

10004a88 <malloc>:
10004a88:	00840074 	movhi	r2,4097
10004a8c:	109ba704 	addi	r2,r2,28316
10004a90:	200b883a 	mov	r5,r4
10004a94:	11000017 	ldw	r4,0(r2)
10004a98:	0004ab01 	jmpi	10004ab0 <_malloc_r>

10004a9c <free>:
10004a9c:	00840074 	movhi	r2,4097
10004aa0:	109ba704 	addi	r2,r2,28316
10004aa4:	200b883a 	mov	r5,r4
10004aa8:	11000017 	ldw	r4,0(r2)
10004aac:	0009f241 	jmpi	10009f24 <_free_r>

10004ab0 <_malloc_r>:
10004ab0:	defff504 	addi	sp,sp,-44
10004ab4:	dc800315 	stw	r18,12(sp)
10004ab8:	dfc00a15 	stw	ra,40(sp)
10004abc:	df000915 	stw	fp,36(sp)
10004ac0:	ddc00815 	stw	r23,32(sp)
10004ac4:	dd800715 	stw	r22,28(sp)
10004ac8:	dd400615 	stw	r21,24(sp)
10004acc:	dd000515 	stw	r20,20(sp)
10004ad0:	dcc00415 	stw	r19,16(sp)
10004ad4:	dc400215 	stw	r17,8(sp)
10004ad8:	dc000115 	stw	r16,4(sp)
10004adc:	288002c4 	addi	r2,r5,11
10004ae0:	00c00584 	movi	r3,22
10004ae4:	2025883a 	mov	r18,r4
10004ae8:	18807f2e 	bgeu	r3,r2,10004ce8 <_malloc_r+0x238>
10004aec:	047ffe04 	movi	r17,-8
10004af0:	1462703a 	and	r17,r2,r17
10004af4:	8800a316 	blt	r17,zero,10004d84 <_malloc_r+0x2d4>
10004af8:	8940a236 	bltu	r17,r5,10004d84 <_malloc_r+0x2d4>
10004afc:	00124280 	call	10012428 <__malloc_lock>
10004b00:	00807dc4 	movi	r2,503
10004b04:	1441e92e 	bgeu	r2,r17,100052ac <_malloc_r+0x7fc>
10004b08:	8804d27a 	srli	r2,r17,9
10004b0c:	1000a126 	beq	r2,zero,10004d94 <_malloc_r+0x2e4>
10004b10:	00c00104 	movi	r3,4
10004b14:	18811e36 	bltu	r3,r2,10004f90 <_malloc_r+0x4e0>
10004b18:	8804d1ba 	srli	r2,r17,6
10004b1c:	12000e44 	addi	r8,r2,57
10004b20:	11c00e04 	addi	r7,r2,56
10004b24:	4209883a 	add	r4,r8,r8
10004b28:	04c40074 	movhi	r19,4097
10004b2c:	2109883a 	add	r4,r4,r4
10004b30:	9cd4ed04 	addi	r19,r19,21428
10004b34:	2109883a 	add	r4,r4,r4
10004b38:	9909883a 	add	r4,r19,r4
10004b3c:	24000117 	ldw	r16,4(r4)
10004b40:	213ffe04 	addi	r4,r4,-8
10004b44:	24009726 	beq	r4,r16,10004da4 <_malloc_r+0x2f4>
10004b48:	80800117 	ldw	r2,4(r16)
10004b4c:	01bfff04 	movi	r6,-4
10004b50:	014003c4 	movi	r5,15
10004b54:	1184703a 	and	r2,r2,r6
10004b58:	1447c83a 	sub	r3,r2,r17
10004b5c:	28c00716 	blt	r5,r3,10004b7c <_malloc_r+0xcc>
10004b60:	1800920e 	bge	r3,zero,10004dac <_malloc_r+0x2fc>
10004b64:	84000317 	ldw	r16,12(r16)
10004b68:	24008e26 	beq	r4,r16,10004da4 <_malloc_r+0x2f4>
10004b6c:	80800117 	ldw	r2,4(r16)
10004b70:	1184703a 	and	r2,r2,r6
10004b74:	1447c83a 	sub	r3,r2,r17
10004b78:	28fff90e 	bge	r5,r3,10004b60 <__alt_data_end+0xf8004b60>
10004b7c:	3809883a 	mov	r4,r7
10004b80:	01840074 	movhi	r6,4097
10004b84:	9c000417 	ldw	r16,16(r19)
10004b88:	3194ed04 	addi	r6,r6,21428
10004b8c:	32000204 	addi	r8,r6,8
10004b90:	82013426 	beq	r16,r8,10005064 <_malloc_r+0x5b4>
10004b94:	80c00117 	ldw	r3,4(r16)
10004b98:	00bfff04 	movi	r2,-4
10004b9c:	188e703a 	and	r7,r3,r2
10004ba0:	3c45c83a 	sub	r2,r7,r17
10004ba4:	00c003c4 	movi	r3,15
10004ba8:	18811f16 	blt	r3,r2,10005028 <_malloc_r+0x578>
10004bac:	32000515 	stw	r8,20(r6)
10004bb0:	32000415 	stw	r8,16(r6)
10004bb4:	10007f0e 	bge	r2,zero,10004db4 <_malloc_r+0x304>
10004bb8:	00807fc4 	movi	r2,511
10004bbc:	11c0fd36 	bltu	r2,r7,10004fb4 <_malloc_r+0x504>
10004bc0:	3806d0fa 	srli	r3,r7,3
10004bc4:	01c00044 	movi	r7,1
10004bc8:	30800117 	ldw	r2,4(r6)
10004bcc:	19400044 	addi	r5,r3,1
10004bd0:	294b883a 	add	r5,r5,r5
10004bd4:	1807d0ba 	srai	r3,r3,2
10004bd8:	294b883a 	add	r5,r5,r5
10004bdc:	294b883a 	add	r5,r5,r5
10004be0:	298b883a 	add	r5,r5,r6
10004be4:	38c6983a 	sll	r3,r7,r3
10004be8:	29c00017 	ldw	r7,0(r5)
10004bec:	2a7ffe04 	addi	r9,r5,-8
10004bf0:	1886b03a 	or	r3,r3,r2
10004bf4:	82400315 	stw	r9,12(r16)
10004bf8:	81c00215 	stw	r7,8(r16)
10004bfc:	30c00115 	stw	r3,4(r6)
10004c00:	2c000015 	stw	r16,0(r5)
10004c04:	3c000315 	stw	r16,12(r7)
10004c08:	2005d0ba 	srai	r2,r4,2
10004c0c:	01400044 	movi	r5,1
10004c10:	288a983a 	sll	r5,r5,r2
10004c14:	19406f36 	bltu	r3,r5,10004dd4 <_malloc_r+0x324>
10004c18:	28c4703a 	and	r2,r5,r3
10004c1c:	10000a1e 	bne	r2,zero,10004c48 <_malloc_r+0x198>
10004c20:	00bfff04 	movi	r2,-4
10004c24:	294b883a 	add	r5,r5,r5
10004c28:	2088703a 	and	r4,r4,r2
10004c2c:	28c4703a 	and	r2,r5,r3
10004c30:	21000104 	addi	r4,r4,4
10004c34:	1000041e 	bne	r2,zero,10004c48 <_malloc_r+0x198>
10004c38:	294b883a 	add	r5,r5,r5
10004c3c:	28c4703a 	and	r2,r5,r3
10004c40:	21000104 	addi	r4,r4,4
10004c44:	103ffc26 	beq	r2,zero,10004c38 <__alt_data_end+0xf8004c38>
10004c48:	02bfff04 	movi	r10,-4
10004c4c:	024003c4 	movi	r9,15
10004c50:	21800044 	addi	r6,r4,1
10004c54:	318d883a 	add	r6,r6,r6
10004c58:	318d883a 	add	r6,r6,r6
10004c5c:	318d883a 	add	r6,r6,r6
10004c60:	998d883a 	add	r6,r19,r6
10004c64:	333ffe04 	addi	r12,r6,-8
10004c68:	2017883a 	mov	r11,r4
10004c6c:	31800104 	addi	r6,r6,4
10004c70:	34000017 	ldw	r16,0(r6)
10004c74:	31fffd04 	addi	r7,r6,-12
10004c78:	81c0041e 	bne	r16,r7,10004c8c <_malloc_r+0x1dc>
10004c7c:	0000fb06 	br	1000506c <_malloc_r+0x5bc>
10004c80:	1801030e 	bge	r3,zero,10005090 <_malloc_r+0x5e0>
10004c84:	84000317 	ldw	r16,12(r16)
10004c88:	81c0f826 	beq	r16,r7,1000506c <_malloc_r+0x5bc>
10004c8c:	80800117 	ldw	r2,4(r16)
10004c90:	1284703a 	and	r2,r2,r10
10004c94:	1447c83a 	sub	r3,r2,r17
10004c98:	48fff90e 	bge	r9,r3,10004c80 <__alt_data_end+0xf8004c80>
10004c9c:	80800317 	ldw	r2,12(r16)
10004ca0:	81000217 	ldw	r4,8(r16)
10004ca4:	89400054 	ori	r5,r17,1
10004ca8:	81400115 	stw	r5,4(r16)
10004cac:	20800315 	stw	r2,12(r4)
10004cb0:	11000215 	stw	r4,8(r2)
10004cb4:	8463883a 	add	r17,r16,r17
10004cb8:	9c400515 	stw	r17,20(r19)
10004cbc:	9c400415 	stw	r17,16(r19)
10004cc0:	18800054 	ori	r2,r3,1
10004cc4:	88800115 	stw	r2,4(r17)
10004cc8:	8a000315 	stw	r8,12(r17)
10004ccc:	8a000215 	stw	r8,8(r17)
10004cd0:	88e3883a 	add	r17,r17,r3
10004cd4:	88c00015 	stw	r3,0(r17)
10004cd8:	9009883a 	mov	r4,r18
10004cdc:	001244c0 	call	1001244c <__malloc_unlock>
10004ce0:	80800204 	addi	r2,r16,8
10004ce4:	00001b06 	br	10004d54 <_malloc_r+0x2a4>
10004ce8:	04400404 	movi	r17,16
10004cec:	89402536 	bltu	r17,r5,10004d84 <_malloc_r+0x2d4>
10004cf0:	00124280 	call	10012428 <__malloc_lock>
10004cf4:	00800184 	movi	r2,6
10004cf8:	01000084 	movi	r4,2
10004cfc:	04c40074 	movhi	r19,4097
10004d00:	1085883a 	add	r2,r2,r2
10004d04:	9cd4ed04 	addi	r19,r19,21428
10004d08:	1085883a 	add	r2,r2,r2
10004d0c:	9885883a 	add	r2,r19,r2
10004d10:	14000117 	ldw	r16,4(r2)
10004d14:	10fffe04 	addi	r3,r2,-8
10004d18:	80c0d926 	beq	r16,r3,10005080 <_malloc_r+0x5d0>
10004d1c:	80c00117 	ldw	r3,4(r16)
10004d20:	81000317 	ldw	r4,12(r16)
10004d24:	00bfff04 	movi	r2,-4
10004d28:	1884703a 	and	r2,r3,r2
10004d2c:	81400217 	ldw	r5,8(r16)
10004d30:	8085883a 	add	r2,r16,r2
10004d34:	10c00117 	ldw	r3,4(r2)
10004d38:	29000315 	stw	r4,12(r5)
10004d3c:	21400215 	stw	r5,8(r4)
10004d40:	18c00054 	ori	r3,r3,1
10004d44:	10c00115 	stw	r3,4(r2)
10004d48:	9009883a 	mov	r4,r18
10004d4c:	001244c0 	call	1001244c <__malloc_unlock>
10004d50:	80800204 	addi	r2,r16,8
10004d54:	dfc00a17 	ldw	ra,40(sp)
10004d58:	df000917 	ldw	fp,36(sp)
10004d5c:	ddc00817 	ldw	r23,32(sp)
10004d60:	dd800717 	ldw	r22,28(sp)
10004d64:	dd400617 	ldw	r21,24(sp)
10004d68:	dd000517 	ldw	r20,20(sp)
10004d6c:	dcc00417 	ldw	r19,16(sp)
10004d70:	dc800317 	ldw	r18,12(sp)
10004d74:	dc400217 	ldw	r17,8(sp)
10004d78:	dc000117 	ldw	r16,4(sp)
10004d7c:	dec00b04 	addi	sp,sp,44
10004d80:	f800283a 	ret
10004d84:	00800304 	movi	r2,12
10004d88:	90800015 	stw	r2,0(r18)
10004d8c:	0005883a 	mov	r2,zero
10004d90:	003ff006 	br	10004d54 <__alt_data_end+0xf8004d54>
10004d94:	01002004 	movi	r4,128
10004d98:	02001004 	movi	r8,64
10004d9c:	01c00fc4 	movi	r7,63
10004da0:	003f6106 	br	10004b28 <__alt_data_end+0xf8004b28>
10004da4:	4009883a 	mov	r4,r8
10004da8:	003f7506 	br	10004b80 <__alt_data_end+0xf8004b80>
10004dac:	81000317 	ldw	r4,12(r16)
10004db0:	003fde06 	br	10004d2c <__alt_data_end+0xf8004d2c>
10004db4:	81c5883a 	add	r2,r16,r7
10004db8:	11400117 	ldw	r5,4(r2)
10004dbc:	9009883a 	mov	r4,r18
10004dc0:	29400054 	ori	r5,r5,1
10004dc4:	11400115 	stw	r5,4(r2)
10004dc8:	001244c0 	call	1001244c <__malloc_unlock>
10004dcc:	80800204 	addi	r2,r16,8
10004dd0:	003fe006 	br	10004d54 <__alt_data_end+0xf8004d54>
10004dd4:	9c000217 	ldw	r16,8(r19)
10004dd8:	00bfff04 	movi	r2,-4
10004ddc:	85800117 	ldw	r22,4(r16)
10004de0:	b0ac703a 	and	r22,r22,r2
10004de4:	b4400336 	bltu	r22,r17,10004df4 <_malloc_r+0x344>
10004de8:	b445c83a 	sub	r2,r22,r17
10004dec:	00c003c4 	movi	r3,15
10004df0:	18805d16 	blt	r3,r2,10004f68 <_malloc_r+0x4b8>
10004df4:	05c40074 	movhi	r23,4097
10004df8:	008400b4 	movhi	r2,4098
10004dfc:	10a28204 	addi	r2,r2,-30200
10004e00:	bddba404 	addi	r23,r23,28304
10004e04:	15400017 	ldw	r21,0(r2)
10004e08:	b8c00017 	ldw	r3,0(r23)
10004e0c:	00bfffc4 	movi	r2,-1
10004e10:	858d883a 	add	r6,r16,r22
10004e14:	8d6b883a 	add	r21,r17,r21
10004e18:	1880ea26 	beq	r3,r2,100051c4 <_malloc_r+0x714>
10004e1c:	ad4403c4 	addi	r21,r21,4111
10004e20:	00bc0004 	movi	r2,-4096
10004e24:	a8aa703a 	and	r21,r21,r2
10004e28:	a80b883a 	mov	r5,r21
10004e2c:	9009883a 	mov	r4,r18
10004e30:	d9800015 	stw	r6,0(sp)
10004e34:	00055240 	call	10005524 <_sbrk_r>
10004e38:	1029883a 	mov	r20,r2
10004e3c:	00bfffc4 	movi	r2,-1
10004e40:	d9800017 	ldw	r6,0(sp)
10004e44:	a080e826 	beq	r20,r2,100051e8 <_malloc_r+0x738>
10004e48:	a180a636 	bltu	r20,r6,100050e4 <_malloc_r+0x634>
10004e4c:	070400b4 	movhi	fp,4098
10004e50:	e7229204 	addi	fp,fp,-30136
10004e54:	e0800017 	ldw	r2,0(fp)
10004e58:	a887883a 	add	r3,r21,r2
10004e5c:	e0c00015 	stw	r3,0(fp)
10004e60:	3500e626 	beq	r6,r20,100051fc <_malloc_r+0x74c>
10004e64:	b9000017 	ldw	r4,0(r23)
10004e68:	00bfffc4 	movi	r2,-1
10004e6c:	2080ee26 	beq	r4,r2,10005228 <_malloc_r+0x778>
10004e70:	a185c83a 	sub	r2,r20,r6
10004e74:	10c5883a 	add	r2,r2,r3
10004e78:	e0800015 	stw	r2,0(fp)
10004e7c:	a0c001cc 	andi	r3,r20,7
10004e80:	1800bc26 	beq	r3,zero,10005174 <_malloc_r+0x6c4>
10004e84:	a0e9c83a 	sub	r20,r20,r3
10004e88:	00840204 	movi	r2,4104
10004e8c:	a5000204 	addi	r20,r20,8
10004e90:	10c7c83a 	sub	r3,r2,r3
10004e94:	a545883a 	add	r2,r20,r21
10004e98:	1083ffcc 	andi	r2,r2,4095
10004e9c:	18abc83a 	sub	r21,r3,r2
10004ea0:	a80b883a 	mov	r5,r21
10004ea4:	9009883a 	mov	r4,r18
10004ea8:	00055240 	call	10005524 <_sbrk_r>
10004eac:	00ffffc4 	movi	r3,-1
10004eb0:	10c0e126 	beq	r2,r3,10005238 <_malloc_r+0x788>
10004eb4:	1505c83a 	sub	r2,r2,r20
10004eb8:	1545883a 	add	r2,r2,r21
10004ebc:	10800054 	ori	r2,r2,1
10004ec0:	e0c00017 	ldw	r3,0(fp)
10004ec4:	9d000215 	stw	r20,8(r19)
10004ec8:	a0800115 	stw	r2,4(r20)
10004ecc:	a8c7883a 	add	r3,r21,r3
10004ed0:	e0c00015 	stw	r3,0(fp)
10004ed4:	84c00e26 	beq	r16,r19,10004f10 <_malloc_r+0x460>
10004ed8:	018003c4 	movi	r6,15
10004edc:	3580a72e 	bgeu	r6,r22,1000517c <_malloc_r+0x6cc>
10004ee0:	81400117 	ldw	r5,4(r16)
10004ee4:	013ffe04 	movi	r4,-8
10004ee8:	b0bffd04 	addi	r2,r22,-12
10004eec:	1104703a 	and	r2,r2,r4
10004ef0:	2900004c 	andi	r4,r5,1
10004ef4:	2088b03a 	or	r4,r4,r2
10004ef8:	81000115 	stw	r4,4(r16)
10004efc:	01400144 	movi	r5,5
10004f00:	8089883a 	add	r4,r16,r2
10004f04:	21400115 	stw	r5,4(r4)
10004f08:	21400215 	stw	r5,8(r4)
10004f0c:	3080cd36 	bltu	r6,r2,10005244 <_malloc_r+0x794>
10004f10:	008400b4 	movhi	r2,4098
10004f14:	10a28104 	addi	r2,r2,-30204
10004f18:	11000017 	ldw	r4,0(r2)
10004f1c:	20c0012e 	bgeu	r4,r3,10004f24 <_malloc_r+0x474>
10004f20:	10c00015 	stw	r3,0(r2)
10004f24:	008400b4 	movhi	r2,4098
10004f28:	10a28004 	addi	r2,r2,-30208
10004f2c:	11000017 	ldw	r4,0(r2)
10004f30:	9c000217 	ldw	r16,8(r19)
10004f34:	20c0012e 	bgeu	r4,r3,10004f3c <_malloc_r+0x48c>
10004f38:	10c00015 	stw	r3,0(r2)
10004f3c:	80c00117 	ldw	r3,4(r16)
10004f40:	00bfff04 	movi	r2,-4
10004f44:	1886703a 	and	r3,r3,r2
10004f48:	1c45c83a 	sub	r2,r3,r17
10004f4c:	1c400236 	bltu	r3,r17,10004f58 <_malloc_r+0x4a8>
10004f50:	00c003c4 	movi	r3,15
10004f54:	18800416 	blt	r3,r2,10004f68 <_malloc_r+0x4b8>
10004f58:	9009883a 	mov	r4,r18
10004f5c:	001244c0 	call	1001244c <__malloc_unlock>
10004f60:	0005883a 	mov	r2,zero
10004f64:	003f7b06 	br	10004d54 <__alt_data_end+0xf8004d54>
10004f68:	88c00054 	ori	r3,r17,1
10004f6c:	80c00115 	stw	r3,4(r16)
10004f70:	8463883a 	add	r17,r16,r17
10004f74:	10800054 	ori	r2,r2,1
10004f78:	9c400215 	stw	r17,8(r19)
10004f7c:	88800115 	stw	r2,4(r17)
10004f80:	9009883a 	mov	r4,r18
10004f84:	001244c0 	call	1001244c <__malloc_unlock>
10004f88:	80800204 	addi	r2,r16,8
10004f8c:	003f7106 	br	10004d54 <__alt_data_end+0xf8004d54>
10004f90:	00c00504 	movi	r3,20
10004f94:	18804a2e 	bgeu	r3,r2,100050c0 <_malloc_r+0x610>
10004f98:	00c01504 	movi	r3,84
10004f9c:	18806e36 	bltu	r3,r2,10005158 <_malloc_r+0x6a8>
10004fa0:	8804d33a 	srli	r2,r17,12
10004fa4:	12001bc4 	addi	r8,r2,111
10004fa8:	11c01b84 	addi	r7,r2,110
10004fac:	4209883a 	add	r4,r8,r8
10004fb0:	003edd06 	br	10004b28 <__alt_data_end+0xf8004b28>
10004fb4:	3804d27a 	srli	r2,r7,9
10004fb8:	00c00104 	movi	r3,4
10004fbc:	1880442e 	bgeu	r3,r2,100050d0 <_malloc_r+0x620>
10004fc0:	00c00504 	movi	r3,20
10004fc4:	18808136 	bltu	r3,r2,100051cc <_malloc_r+0x71c>
10004fc8:	11401704 	addi	r5,r2,92
10004fcc:	10c016c4 	addi	r3,r2,91
10004fd0:	294b883a 	add	r5,r5,r5
10004fd4:	294b883a 	add	r5,r5,r5
10004fd8:	294b883a 	add	r5,r5,r5
10004fdc:	994b883a 	add	r5,r19,r5
10004fe0:	28800017 	ldw	r2,0(r5)
10004fe4:	01840074 	movhi	r6,4097
10004fe8:	297ffe04 	addi	r5,r5,-8
10004fec:	3194ed04 	addi	r6,r6,21428
10004ff0:	28806526 	beq	r5,r2,10005188 <_malloc_r+0x6d8>
10004ff4:	01bfff04 	movi	r6,-4
10004ff8:	10c00117 	ldw	r3,4(r2)
10004ffc:	1986703a 	and	r3,r3,r6
10005000:	38c0022e 	bgeu	r7,r3,1000500c <_malloc_r+0x55c>
10005004:	10800217 	ldw	r2,8(r2)
10005008:	28bffb1e 	bne	r5,r2,10004ff8 <__alt_data_end+0xf8004ff8>
1000500c:	11400317 	ldw	r5,12(r2)
10005010:	98c00117 	ldw	r3,4(r19)
10005014:	81400315 	stw	r5,12(r16)
10005018:	80800215 	stw	r2,8(r16)
1000501c:	2c000215 	stw	r16,8(r5)
10005020:	14000315 	stw	r16,12(r2)
10005024:	003ef806 	br	10004c08 <__alt_data_end+0xf8004c08>
10005028:	88c00054 	ori	r3,r17,1
1000502c:	80c00115 	stw	r3,4(r16)
10005030:	8463883a 	add	r17,r16,r17
10005034:	34400515 	stw	r17,20(r6)
10005038:	34400415 	stw	r17,16(r6)
1000503c:	10c00054 	ori	r3,r2,1
10005040:	8a000315 	stw	r8,12(r17)
10005044:	8a000215 	stw	r8,8(r17)
10005048:	88c00115 	stw	r3,4(r17)
1000504c:	88a3883a 	add	r17,r17,r2
10005050:	88800015 	stw	r2,0(r17)
10005054:	9009883a 	mov	r4,r18
10005058:	001244c0 	call	1001244c <__malloc_unlock>
1000505c:	80800204 	addi	r2,r16,8
10005060:	003f3c06 	br	10004d54 <__alt_data_end+0xf8004d54>
10005064:	30c00117 	ldw	r3,4(r6)
10005068:	003ee706 	br	10004c08 <__alt_data_end+0xf8004c08>
1000506c:	5ac00044 	addi	r11,r11,1
10005070:	588000cc 	andi	r2,r11,3
10005074:	31800204 	addi	r6,r6,8
10005078:	103efd1e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
1000507c:	00002406 	br	10005110 <_malloc_r+0x660>
10005080:	14000317 	ldw	r16,12(r2)
10005084:	143f251e 	bne	r2,r16,10004d1c <__alt_data_end+0xf8004d1c>
10005088:	21000084 	addi	r4,r4,2
1000508c:	003ebc06 	br	10004b80 <__alt_data_end+0xf8004b80>
10005090:	8085883a 	add	r2,r16,r2
10005094:	10c00117 	ldw	r3,4(r2)
10005098:	81000317 	ldw	r4,12(r16)
1000509c:	81400217 	ldw	r5,8(r16)
100050a0:	18c00054 	ori	r3,r3,1
100050a4:	10c00115 	stw	r3,4(r2)
100050a8:	29000315 	stw	r4,12(r5)
100050ac:	21400215 	stw	r5,8(r4)
100050b0:	9009883a 	mov	r4,r18
100050b4:	001244c0 	call	1001244c <__malloc_unlock>
100050b8:	80800204 	addi	r2,r16,8
100050bc:	003f2506 	br	10004d54 <__alt_data_end+0xf8004d54>
100050c0:	12001704 	addi	r8,r2,92
100050c4:	11c016c4 	addi	r7,r2,91
100050c8:	4209883a 	add	r4,r8,r8
100050cc:	003e9606 	br	10004b28 <__alt_data_end+0xf8004b28>
100050d0:	3804d1ba 	srli	r2,r7,6
100050d4:	11400e44 	addi	r5,r2,57
100050d8:	10c00e04 	addi	r3,r2,56
100050dc:	294b883a 	add	r5,r5,r5
100050e0:	003fbc06 	br	10004fd4 <__alt_data_end+0xf8004fd4>
100050e4:	84ff5926 	beq	r16,r19,10004e4c <__alt_data_end+0xf8004e4c>
100050e8:	00840074 	movhi	r2,4097
100050ec:	1094ed04 	addi	r2,r2,21428
100050f0:	14000217 	ldw	r16,8(r2)
100050f4:	00bfff04 	movi	r2,-4
100050f8:	80c00117 	ldw	r3,4(r16)
100050fc:	1886703a 	and	r3,r3,r2
10005100:	003f9106 	br	10004f48 <__alt_data_end+0xf8004f48>
10005104:	60800217 	ldw	r2,8(r12)
10005108:	213fffc4 	addi	r4,r4,-1
1000510c:	1300651e 	bne	r2,r12,100052a4 <_malloc_r+0x7f4>
10005110:	208000cc 	andi	r2,r4,3
10005114:	633ffe04 	addi	r12,r12,-8
10005118:	103ffa1e 	bne	r2,zero,10005104 <__alt_data_end+0xf8005104>
1000511c:	98800117 	ldw	r2,4(r19)
10005120:	0146303a 	nor	r3,zero,r5
10005124:	1884703a 	and	r2,r3,r2
10005128:	98800115 	stw	r2,4(r19)
1000512c:	294b883a 	add	r5,r5,r5
10005130:	117f2836 	bltu	r2,r5,10004dd4 <__alt_data_end+0xf8004dd4>
10005134:	283f2726 	beq	r5,zero,10004dd4 <__alt_data_end+0xf8004dd4>
10005138:	2886703a 	and	r3,r5,r2
1000513c:	5809883a 	mov	r4,r11
10005140:	183ec31e 	bne	r3,zero,10004c50 <__alt_data_end+0xf8004c50>
10005144:	294b883a 	add	r5,r5,r5
10005148:	2886703a 	and	r3,r5,r2
1000514c:	21000104 	addi	r4,r4,4
10005150:	183ffc26 	beq	r3,zero,10005144 <__alt_data_end+0xf8005144>
10005154:	003ebe06 	br	10004c50 <__alt_data_end+0xf8004c50>
10005158:	00c05504 	movi	r3,340
1000515c:	18801236 	bltu	r3,r2,100051a8 <_malloc_r+0x6f8>
10005160:	8804d3fa 	srli	r2,r17,15
10005164:	12001e04 	addi	r8,r2,120
10005168:	11c01dc4 	addi	r7,r2,119
1000516c:	4209883a 	add	r4,r8,r8
10005170:	003e6d06 	br	10004b28 <__alt_data_end+0xf8004b28>
10005174:	00c40004 	movi	r3,4096
10005178:	003f4606 	br	10004e94 <__alt_data_end+0xf8004e94>
1000517c:	00800044 	movi	r2,1
10005180:	a0800115 	stw	r2,4(r20)
10005184:	003f7406 	br	10004f58 <__alt_data_end+0xf8004f58>
10005188:	1805d0ba 	srai	r2,r3,2
1000518c:	01c00044 	movi	r7,1
10005190:	30c00117 	ldw	r3,4(r6)
10005194:	388e983a 	sll	r7,r7,r2
10005198:	2805883a 	mov	r2,r5
1000519c:	38c6b03a 	or	r3,r7,r3
100051a0:	30c00115 	stw	r3,4(r6)
100051a4:	003f9b06 	br	10005014 <__alt_data_end+0xf8005014>
100051a8:	00c15504 	movi	r3,1364
100051ac:	18801a36 	bltu	r3,r2,10005218 <_malloc_r+0x768>
100051b0:	8804d4ba 	srli	r2,r17,18
100051b4:	12001f44 	addi	r8,r2,125
100051b8:	11c01f04 	addi	r7,r2,124
100051bc:	4209883a 	add	r4,r8,r8
100051c0:	003e5906 	br	10004b28 <__alt_data_end+0xf8004b28>
100051c4:	ad400404 	addi	r21,r21,16
100051c8:	003f1706 	br	10004e28 <__alt_data_end+0xf8004e28>
100051cc:	00c01504 	movi	r3,84
100051d0:	18802336 	bltu	r3,r2,10005260 <_malloc_r+0x7b0>
100051d4:	3804d33a 	srli	r2,r7,12
100051d8:	11401bc4 	addi	r5,r2,111
100051dc:	10c01b84 	addi	r3,r2,110
100051e0:	294b883a 	add	r5,r5,r5
100051e4:	003f7b06 	br	10004fd4 <__alt_data_end+0xf8004fd4>
100051e8:	9c000217 	ldw	r16,8(r19)
100051ec:	00bfff04 	movi	r2,-4
100051f0:	80c00117 	ldw	r3,4(r16)
100051f4:	1886703a 	and	r3,r3,r2
100051f8:	003f5306 	br	10004f48 <__alt_data_end+0xf8004f48>
100051fc:	3083ffcc 	andi	r2,r6,4095
10005200:	103f181e 	bne	r2,zero,10004e64 <__alt_data_end+0xf8004e64>
10005204:	99000217 	ldw	r4,8(r19)
10005208:	b545883a 	add	r2,r22,r21
1000520c:	10800054 	ori	r2,r2,1
10005210:	20800115 	stw	r2,4(r4)
10005214:	003f3e06 	br	10004f10 <__alt_data_end+0xf8004f10>
10005218:	01003f84 	movi	r4,254
1000521c:	02001fc4 	movi	r8,127
10005220:	01c01f84 	movi	r7,126
10005224:	003e4006 	br	10004b28 <__alt_data_end+0xf8004b28>
10005228:	00840074 	movhi	r2,4097
1000522c:	109ba404 	addi	r2,r2,28304
10005230:	15000015 	stw	r20,0(r2)
10005234:	003f1106 	br	10004e7c <__alt_data_end+0xf8004e7c>
10005238:	00800044 	movi	r2,1
1000523c:	002b883a 	mov	r21,zero
10005240:	003f1f06 	br	10004ec0 <__alt_data_end+0xf8004ec0>
10005244:	81400204 	addi	r5,r16,8
10005248:	9009883a 	mov	r4,r18
1000524c:	0009f240 	call	10009f24 <_free_r>
10005250:	008400b4 	movhi	r2,4098
10005254:	10a29204 	addi	r2,r2,-30136
10005258:	10c00017 	ldw	r3,0(r2)
1000525c:	003f2c06 	br	10004f10 <__alt_data_end+0xf8004f10>
10005260:	00c05504 	movi	r3,340
10005264:	18800536 	bltu	r3,r2,1000527c <_malloc_r+0x7cc>
10005268:	3804d3fa 	srli	r2,r7,15
1000526c:	11401e04 	addi	r5,r2,120
10005270:	10c01dc4 	addi	r3,r2,119
10005274:	294b883a 	add	r5,r5,r5
10005278:	003f5606 	br	10004fd4 <__alt_data_end+0xf8004fd4>
1000527c:	00c15504 	movi	r3,1364
10005280:	18800536 	bltu	r3,r2,10005298 <_malloc_r+0x7e8>
10005284:	3804d4ba 	srli	r2,r7,18
10005288:	11401f44 	addi	r5,r2,125
1000528c:	10c01f04 	addi	r3,r2,124
10005290:	294b883a 	add	r5,r5,r5
10005294:	003f4f06 	br	10004fd4 <__alt_data_end+0xf8004fd4>
10005298:	01403f84 	movi	r5,254
1000529c:	00c01f84 	movi	r3,126
100052a0:	003f4c06 	br	10004fd4 <__alt_data_end+0xf8004fd4>
100052a4:	98800117 	ldw	r2,4(r19)
100052a8:	003fa006 	br	1000512c <__alt_data_end+0xf800512c>
100052ac:	8808d0fa 	srli	r4,r17,3
100052b0:	20800044 	addi	r2,r4,1
100052b4:	1085883a 	add	r2,r2,r2
100052b8:	003e9006 	br	10004cfc <__alt_data_end+0xf8004cfc>

100052bc <memset>:
100052bc:	20c000cc 	andi	r3,r4,3
100052c0:	2005883a 	mov	r2,r4
100052c4:	18004426 	beq	r3,zero,100053d8 <memset+0x11c>
100052c8:	31ffffc4 	addi	r7,r6,-1
100052cc:	30004026 	beq	r6,zero,100053d0 <memset+0x114>
100052d0:	2813883a 	mov	r9,r5
100052d4:	200d883a 	mov	r6,r4
100052d8:	2007883a 	mov	r3,r4
100052dc:	00000406 	br	100052f0 <memset+0x34>
100052e0:	3a3fffc4 	addi	r8,r7,-1
100052e4:	31800044 	addi	r6,r6,1
100052e8:	38003926 	beq	r7,zero,100053d0 <memset+0x114>
100052ec:	400f883a 	mov	r7,r8
100052f0:	18c00044 	addi	r3,r3,1
100052f4:	32400005 	stb	r9,0(r6)
100052f8:	1a0000cc 	andi	r8,r3,3
100052fc:	403ff81e 	bne	r8,zero,100052e0 <__alt_data_end+0xf80052e0>
10005300:	010000c4 	movi	r4,3
10005304:	21c02d2e 	bgeu	r4,r7,100053bc <memset+0x100>
10005308:	29003fcc 	andi	r4,r5,255
1000530c:	200c923a 	slli	r6,r4,8
10005310:	3108b03a 	or	r4,r6,r4
10005314:	200c943a 	slli	r6,r4,16
10005318:	218cb03a 	or	r6,r4,r6
1000531c:	010003c4 	movi	r4,15
10005320:	21c0182e 	bgeu	r4,r7,10005384 <memset+0xc8>
10005324:	3b3ffc04 	addi	r12,r7,-16
10005328:	6018d13a 	srli	r12,r12,4
1000532c:	1a000104 	addi	r8,r3,4
10005330:	1ac00204 	addi	r11,r3,8
10005334:	6008913a 	slli	r4,r12,4
10005338:	1a800304 	addi	r10,r3,12
1000533c:	1813883a 	mov	r9,r3
10005340:	21000504 	addi	r4,r4,20
10005344:	1909883a 	add	r4,r3,r4
10005348:	49800015 	stw	r6,0(r9)
1000534c:	41800015 	stw	r6,0(r8)
10005350:	59800015 	stw	r6,0(r11)
10005354:	51800015 	stw	r6,0(r10)
10005358:	42000404 	addi	r8,r8,16
1000535c:	4a400404 	addi	r9,r9,16
10005360:	5ac00404 	addi	r11,r11,16
10005364:	52800404 	addi	r10,r10,16
10005368:	413ff71e 	bne	r8,r4,10005348 <__alt_data_end+0xf8005348>
1000536c:	63000044 	addi	r12,r12,1
10005370:	6018913a 	slli	r12,r12,4
10005374:	39c003cc 	andi	r7,r7,15
10005378:	010000c4 	movi	r4,3
1000537c:	1b07883a 	add	r3,r3,r12
10005380:	21c00e2e 	bgeu	r4,r7,100053bc <memset+0x100>
10005384:	1813883a 	mov	r9,r3
10005388:	3811883a 	mov	r8,r7
1000538c:	010000c4 	movi	r4,3
10005390:	49800015 	stw	r6,0(r9)
10005394:	423fff04 	addi	r8,r8,-4
10005398:	4a400104 	addi	r9,r9,4
1000539c:	223ffc36 	bltu	r4,r8,10005390 <__alt_data_end+0xf8005390>
100053a0:	393fff04 	addi	r4,r7,-4
100053a4:	2008d0ba 	srli	r4,r4,2
100053a8:	39c000cc 	andi	r7,r7,3
100053ac:	21000044 	addi	r4,r4,1
100053b0:	2109883a 	add	r4,r4,r4
100053b4:	2109883a 	add	r4,r4,r4
100053b8:	1907883a 	add	r3,r3,r4
100053bc:	38000526 	beq	r7,zero,100053d4 <memset+0x118>
100053c0:	19cf883a 	add	r7,r3,r7
100053c4:	19400005 	stb	r5,0(r3)
100053c8:	18c00044 	addi	r3,r3,1
100053cc:	38fffd1e 	bne	r7,r3,100053c4 <__alt_data_end+0xf80053c4>
100053d0:	f800283a 	ret
100053d4:	f800283a 	ret
100053d8:	2007883a 	mov	r3,r4
100053dc:	300f883a 	mov	r7,r6
100053e0:	003fc706 	br	10005300 <__alt_data_end+0xf8005300>

100053e4 <_printf_r>:
100053e4:	defffd04 	addi	sp,sp,-12
100053e8:	2805883a 	mov	r2,r5
100053ec:	dfc00015 	stw	ra,0(sp)
100053f0:	d9800115 	stw	r6,4(sp)
100053f4:	d9c00215 	stw	r7,8(sp)
100053f8:	21400217 	ldw	r5,8(r4)
100053fc:	d9c00104 	addi	r7,sp,4
10005400:	100d883a 	mov	r6,r2
10005404:	00059f00 	call	100059f0 <___vfprintf_internal_r>
10005408:	dfc00017 	ldw	ra,0(sp)
1000540c:	dec00304 	addi	sp,sp,12
10005410:	f800283a 	ret

10005414 <printf>:
10005414:	defffc04 	addi	sp,sp,-16
10005418:	dfc00015 	stw	ra,0(sp)
1000541c:	d9400115 	stw	r5,4(sp)
10005420:	d9800215 	stw	r6,8(sp)
10005424:	d9c00315 	stw	r7,12(sp)
10005428:	00840074 	movhi	r2,4097
1000542c:	109ba704 	addi	r2,r2,28316
10005430:	10800017 	ldw	r2,0(r2)
10005434:	200b883a 	mov	r5,r4
10005438:	d9800104 	addi	r6,sp,4
1000543c:	11000217 	ldw	r4,8(r2)
10005440:	0007ccc0 	call	10007ccc <__vfprintf_internal>
10005444:	dfc00017 	ldw	ra,0(sp)
10005448:	dec00404 	addi	sp,sp,16
1000544c:	f800283a 	ret

10005450 <_puts_r>:
10005450:	defff604 	addi	sp,sp,-40
10005454:	dc000715 	stw	r16,28(sp)
10005458:	2021883a 	mov	r16,r4
1000545c:	2809883a 	mov	r4,r5
10005460:	dc400815 	stw	r17,32(sp)
10005464:	dfc00915 	stw	ra,36(sp)
10005468:	2823883a 	mov	r17,r5
1000546c:	00059580 	call	10005958 <strlen>
10005470:	10c00044 	addi	r3,r2,1
10005474:	d8800115 	stw	r2,4(sp)
10005478:	00840074 	movhi	r2,4097
1000547c:	10942d04 	addi	r2,r2,20660
10005480:	d8800215 	stw	r2,8(sp)
10005484:	00800044 	movi	r2,1
10005488:	d8800315 	stw	r2,12(sp)
1000548c:	00800084 	movi	r2,2
10005490:	dc400015 	stw	r17,0(sp)
10005494:	d8c00615 	stw	r3,24(sp)
10005498:	dec00415 	stw	sp,16(sp)
1000549c:	d8800515 	stw	r2,20(sp)
100054a0:	80000226 	beq	r16,zero,100054ac <_puts_r+0x5c>
100054a4:	80800e17 	ldw	r2,56(r16)
100054a8:	10001426 	beq	r2,zero,100054fc <_puts_r+0xac>
100054ac:	81400217 	ldw	r5,8(r16)
100054b0:	2880030b 	ldhu	r2,12(r5)
100054b4:	10c8000c 	andi	r3,r2,8192
100054b8:	1800061e 	bne	r3,zero,100054d4 <_puts_r+0x84>
100054bc:	29001917 	ldw	r4,100(r5)
100054c0:	00f7ffc4 	movi	r3,-8193
100054c4:	10880014 	ori	r2,r2,8192
100054c8:	20c6703a 	and	r3,r4,r3
100054cc:	2880030d 	sth	r2,12(r5)
100054d0:	28c01915 	stw	r3,100(r5)
100054d4:	d9800404 	addi	r6,sp,16
100054d8:	8009883a 	mov	r4,r16
100054dc:	000a2340 	call	1000a234 <__sfvwrite_r>
100054e0:	1000091e 	bne	r2,zero,10005508 <_puts_r+0xb8>
100054e4:	00800284 	movi	r2,10
100054e8:	dfc00917 	ldw	ra,36(sp)
100054ec:	dc400817 	ldw	r17,32(sp)
100054f0:	dc000717 	ldw	r16,28(sp)
100054f4:	dec00a04 	addi	sp,sp,40
100054f8:	f800283a 	ret
100054fc:	8009883a 	mov	r4,r16
10005500:	0009db00 	call	10009db0 <__sinit>
10005504:	003fe906 	br	100054ac <__alt_data_end+0xf80054ac>
10005508:	00bfffc4 	movi	r2,-1
1000550c:	003ff606 	br	100054e8 <__alt_data_end+0xf80054e8>

10005510 <puts>:
10005510:	00840074 	movhi	r2,4097
10005514:	109ba704 	addi	r2,r2,28316
10005518:	200b883a 	mov	r5,r4
1000551c:	11000017 	ldw	r4,0(r2)
10005520:	00054501 	jmpi	10005450 <_puts_r>

10005524 <_sbrk_r>:
10005524:	defffd04 	addi	sp,sp,-12
10005528:	dc000015 	stw	r16,0(sp)
1000552c:	040400b4 	movhi	r16,4098
10005530:	dc400115 	stw	r17,4(sp)
10005534:	84228304 	addi	r16,r16,-30196
10005538:	2023883a 	mov	r17,r4
1000553c:	2809883a 	mov	r4,r5
10005540:	dfc00215 	stw	ra,8(sp)
10005544:	80000015 	stw	zero,0(r16)
10005548:	00126340 	call	10012634 <sbrk>
1000554c:	00ffffc4 	movi	r3,-1
10005550:	10c00526 	beq	r2,r3,10005568 <_sbrk_r+0x44>
10005554:	dfc00217 	ldw	ra,8(sp)
10005558:	dc400117 	ldw	r17,4(sp)
1000555c:	dc000017 	ldw	r16,0(sp)
10005560:	dec00304 	addi	sp,sp,12
10005564:	f800283a 	ret
10005568:	80c00017 	ldw	r3,0(r16)
1000556c:	183ff926 	beq	r3,zero,10005554 <__alt_data_end+0xf8005554>
10005570:	88c00015 	stw	r3,0(r17)
10005574:	003ff706 	br	10005554 <__alt_data_end+0xf8005554>

10005578 <_init_signal_r>:
10005578:	2080b717 	ldw	r2,732(r4)
1000557c:	10000226 	beq	r2,zero,10005588 <_init_signal_r+0x10>
10005580:	0005883a 	mov	r2,zero
10005584:	f800283a 	ret
10005588:	defffe04 	addi	sp,sp,-8
1000558c:	01402004 	movi	r5,128
10005590:	dc000015 	stw	r16,0(sp)
10005594:	dfc00115 	stw	ra,4(sp)
10005598:	2021883a 	mov	r16,r4
1000559c:	0004ab00 	call	10004ab0 <_malloc_r>
100055a0:	8080b715 	stw	r2,732(r16)
100055a4:	10000d26 	beq	r2,zero,100055dc <_init_signal_r+0x64>
100055a8:	0007883a 	mov	r3,zero
100055ac:	01002004 	movi	r4,128
100055b0:	00000106 	br	100055b8 <_init_signal_r+0x40>
100055b4:	8080b717 	ldw	r2,732(r16)
100055b8:	10c5883a 	add	r2,r2,r3
100055bc:	10000015 	stw	zero,0(r2)
100055c0:	18c00104 	addi	r3,r3,4
100055c4:	193ffb1e 	bne	r3,r4,100055b4 <__alt_data_end+0xf80055b4>
100055c8:	0005883a 	mov	r2,zero
100055cc:	dfc00117 	ldw	ra,4(sp)
100055d0:	dc000017 	ldw	r16,0(sp)
100055d4:	dec00204 	addi	sp,sp,8
100055d8:	f800283a 	ret
100055dc:	00bfffc4 	movi	r2,-1
100055e0:	003ffa06 	br	100055cc <__alt_data_end+0xf80055cc>

100055e4 <_signal_r>:
100055e4:	00c007c4 	movi	r3,31
100055e8:	19401536 	bltu	r3,r5,10005640 <_signal_r+0x5c>
100055ec:	2080b717 	ldw	r2,732(r4)
100055f0:	defffc04 	addi	sp,sp,-16
100055f4:	dc800215 	stw	r18,8(sp)
100055f8:	dc400115 	stw	r17,4(sp)
100055fc:	dc000015 	stw	r16,0(sp)
10005600:	dfc00315 	stw	ra,12(sp)
10005604:	3023883a 	mov	r17,r6
10005608:	2021883a 	mov	r16,r4
1000560c:	2825883a 	mov	r18,r5
10005610:	10000f26 	beq	r2,zero,10005650 <_signal_r+0x6c>
10005614:	948b883a 	add	r5,r18,r18
10005618:	294b883a 	add	r5,r5,r5
1000561c:	114b883a 	add	r5,r2,r5
10005620:	28800017 	ldw	r2,0(r5)
10005624:	2c400015 	stw	r17,0(r5)
10005628:	dfc00317 	ldw	ra,12(sp)
1000562c:	dc800217 	ldw	r18,8(sp)
10005630:	dc400117 	ldw	r17,4(sp)
10005634:	dc000017 	ldw	r16,0(sp)
10005638:	dec00404 	addi	sp,sp,16
1000563c:	f800283a 	ret
10005640:	00c00584 	movi	r3,22
10005644:	20c00015 	stw	r3,0(r4)
10005648:	00bfffc4 	movi	r2,-1
1000564c:	f800283a 	ret
10005650:	00055780 	call	10005578 <_init_signal_r>
10005654:	1000021e 	bne	r2,zero,10005660 <_signal_r+0x7c>
10005658:	8080b717 	ldw	r2,732(r16)
1000565c:	003fed06 	br	10005614 <__alt_data_end+0xf8005614>
10005660:	00bfffc4 	movi	r2,-1
10005664:	003ff006 	br	10005628 <__alt_data_end+0xf8005628>

10005668 <_raise_r>:
10005668:	008007c4 	movi	r2,31
1000566c:	11402936 	bltu	r2,r5,10005714 <_raise_r+0xac>
10005670:	20c0b717 	ldw	r3,732(r4)
10005674:	defffd04 	addi	sp,sp,-12
10005678:	dc400115 	stw	r17,4(sp)
1000567c:	dc000015 	stw	r16,0(sp)
10005680:	dfc00215 	stw	ra,8(sp)
10005684:	2021883a 	mov	r16,r4
10005688:	2823883a 	mov	r17,r5
1000568c:	18001726 	beq	r3,zero,100056ec <_raise_r+0x84>
10005690:	2945883a 	add	r2,r5,r5
10005694:	1085883a 	add	r2,r2,r2
10005698:	1887883a 	add	r3,r3,r2
1000569c:	19800017 	ldw	r6,0(r3)
100056a0:	30001226 	beq	r6,zero,100056ec <_raise_r+0x84>
100056a4:	00800044 	movi	r2,1
100056a8:	30800e26 	beq	r6,r2,100056e4 <_raise_r+0x7c>
100056ac:	013fffc4 	movi	r4,-1
100056b0:	31000926 	beq	r6,r4,100056d8 <_raise_r+0x70>
100056b4:	18000015 	stw	zero,0(r3)
100056b8:	2809883a 	mov	r4,r5
100056bc:	303ee83a 	callr	r6
100056c0:	0005883a 	mov	r2,zero
100056c4:	dfc00217 	ldw	ra,8(sp)
100056c8:	dc400117 	ldw	r17,4(sp)
100056cc:	dc000017 	ldw	r16,0(sp)
100056d0:	dec00304 	addi	sp,sp,12
100056d4:	f800283a 	ret
100056d8:	00c00584 	movi	r3,22
100056dc:	80c00015 	stw	r3,0(r16)
100056e0:	003ff806 	br	100056c4 <__alt_data_end+0xf80056c4>
100056e4:	0005883a 	mov	r2,zero
100056e8:	003ff606 	br	100056c4 <__alt_data_end+0xf80056c4>
100056ec:	8009883a 	mov	r4,r16
100056f0:	00058780 	call	10005878 <_getpid_r>
100056f4:	880d883a 	mov	r6,r17
100056f8:	100b883a 	mov	r5,r2
100056fc:	8009883a 	mov	r4,r16
10005700:	dfc00217 	ldw	ra,8(sp)
10005704:	dc400117 	ldw	r17,4(sp)
10005708:	dc000017 	ldw	r16,0(sp)
1000570c:	dec00304 	addi	sp,sp,12
10005710:	000581c1 	jmpi	1000581c <_kill_r>
10005714:	00800584 	movi	r2,22
10005718:	20800015 	stw	r2,0(r4)
1000571c:	00bfffc4 	movi	r2,-1
10005720:	f800283a 	ret

10005724 <__sigtramp_r>:
10005724:	008007c4 	movi	r2,31
10005728:	11402436 	bltu	r2,r5,100057bc <__sigtramp_r+0x98>
1000572c:	20c0b717 	ldw	r3,732(r4)
10005730:	defffd04 	addi	sp,sp,-12
10005734:	dc400115 	stw	r17,4(sp)
10005738:	dc000015 	stw	r16,0(sp)
1000573c:	dfc00215 	stw	ra,8(sp)
10005740:	2021883a 	mov	r16,r4
10005744:	2823883a 	mov	r17,r5
10005748:	18001826 	beq	r3,zero,100057ac <__sigtramp_r+0x88>
1000574c:	8c45883a 	add	r2,r17,r17
10005750:	1085883a 	add	r2,r2,r2
10005754:	1885883a 	add	r2,r3,r2
10005758:	10c00017 	ldw	r3,0(r2)
1000575c:	18001126 	beq	r3,zero,100057a4 <__sigtramp_r+0x80>
10005760:	013fffc4 	movi	r4,-1
10005764:	19000d26 	beq	r3,r4,1000579c <__sigtramp_r+0x78>
10005768:	01000044 	movi	r4,1
1000576c:	19000926 	beq	r3,r4,10005794 <__sigtramp_r+0x70>
10005770:	10000015 	stw	zero,0(r2)
10005774:	8809883a 	mov	r4,r17
10005778:	183ee83a 	callr	r3
1000577c:	0005883a 	mov	r2,zero
10005780:	dfc00217 	ldw	ra,8(sp)
10005784:	dc400117 	ldw	r17,4(sp)
10005788:	dc000017 	ldw	r16,0(sp)
1000578c:	dec00304 	addi	sp,sp,12
10005790:	f800283a 	ret
10005794:	008000c4 	movi	r2,3
10005798:	003ff906 	br	10005780 <__alt_data_end+0xf8005780>
1000579c:	00800084 	movi	r2,2
100057a0:	003ff706 	br	10005780 <__alt_data_end+0xf8005780>
100057a4:	00800044 	movi	r2,1
100057a8:	003ff506 	br	10005780 <__alt_data_end+0xf8005780>
100057ac:	00055780 	call	10005578 <_init_signal_r>
100057b0:	1000041e 	bne	r2,zero,100057c4 <__sigtramp_r+0xa0>
100057b4:	80c0b717 	ldw	r3,732(r16)
100057b8:	003fe406 	br	1000574c <__alt_data_end+0xf800574c>
100057bc:	00bfffc4 	movi	r2,-1
100057c0:	f800283a 	ret
100057c4:	00bfffc4 	movi	r2,-1
100057c8:	003fed06 	br	10005780 <__alt_data_end+0xf8005780>

100057cc <raise>:
100057cc:	00840074 	movhi	r2,4097
100057d0:	109ba704 	addi	r2,r2,28316
100057d4:	200b883a 	mov	r5,r4
100057d8:	11000017 	ldw	r4,0(r2)
100057dc:	00056681 	jmpi	10005668 <_raise_r>

100057e0 <signal>:
100057e0:	00840074 	movhi	r2,4097
100057e4:	109ba704 	addi	r2,r2,28316
100057e8:	280d883a 	mov	r6,r5
100057ec:	200b883a 	mov	r5,r4
100057f0:	11000017 	ldw	r4,0(r2)
100057f4:	00055e41 	jmpi	100055e4 <_signal_r>

100057f8 <_init_signal>:
100057f8:	00840074 	movhi	r2,4097
100057fc:	109ba704 	addi	r2,r2,28316
10005800:	11000017 	ldw	r4,0(r2)
10005804:	00055781 	jmpi	10005578 <_init_signal_r>

10005808 <__sigtramp>:
10005808:	00840074 	movhi	r2,4097
1000580c:	109ba704 	addi	r2,r2,28316
10005810:	200b883a 	mov	r5,r4
10005814:	11000017 	ldw	r4,0(r2)
10005818:	00057241 	jmpi	10005724 <__sigtramp_r>

1000581c <_kill_r>:
1000581c:	defffd04 	addi	sp,sp,-12
10005820:	2805883a 	mov	r2,r5
10005824:	dc000015 	stw	r16,0(sp)
10005828:	040400b4 	movhi	r16,4098
1000582c:	dc400115 	stw	r17,4(sp)
10005830:	84228304 	addi	r16,r16,-30196
10005834:	2023883a 	mov	r17,r4
10005838:	300b883a 	mov	r5,r6
1000583c:	1009883a 	mov	r4,r2
10005840:	dfc00215 	stw	ra,8(sp)
10005844:	80000015 	stw	zero,0(r16)
10005848:	00120780 	call	10012078 <kill>
1000584c:	00ffffc4 	movi	r3,-1
10005850:	10c00526 	beq	r2,r3,10005868 <_kill_r+0x4c>
10005854:	dfc00217 	ldw	ra,8(sp)
10005858:	dc400117 	ldw	r17,4(sp)
1000585c:	dc000017 	ldw	r16,0(sp)
10005860:	dec00304 	addi	sp,sp,12
10005864:	f800283a 	ret
10005868:	80c00017 	ldw	r3,0(r16)
1000586c:	183ff926 	beq	r3,zero,10005854 <__alt_data_end+0xf8005854>
10005870:	88c00015 	stw	r3,0(r17)
10005874:	003ff706 	br	10005854 <__alt_data_end+0xf8005854>

10005878 <_getpid_r>:
10005878:	0011f341 	jmpi	10011f34 <getpid>

1000587c <strcmp>:
1000587c:	2144b03a 	or	r2,r4,r5
10005880:	108000cc 	andi	r2,r2,3
10005884:	1000171e 	bne	r2,zero,100058e4 <strcmp+0x68>
10005888:	20800017 	ldw	r2,0(r4)
1000588c:	28c00017 	ldw	r3,0(r5)
10005890:	10c0141e 	bne	r2,r3,100058e4 <strcmp+0x68>
10005894:	027fbff4 	movhi	r9,65279
10005898:	4a7fbfc4 	addi	r9,r9,-257
1000589c:	0086303a 	nor	r3,zero,r2
100058a0:	02202074 	movhi	r8,32897
100058a4:	1245883a 	add	r2,r2,r9
100058a8:	42202004 	addi	r8,r8,-32640
100058ac:	10c4703a 	and	r2,r2,r3
100058b0:	1204703a 	and	r2,r2,r8
100058b4:	10000226 	beq	r2,zero,100058c0 <strcmp+0x44>
100058b8:	00002306 	br	10005948 <strcmp+0xcc>
100058bc:	1000221e 	bne	r2,zero,10005948 <strcmp+0xcc>
100058c0:	21000104 	addi	r4,r4,4
100058c4:	20c00017 	ldw	r3,0(r4)
100058c8:	29400104 	addi	r5,r5,4
100058cc:	29800017 	ldw	r6,0(r5)
100058d0:	1a4f883a 	add	r7,r3,r9
100058d4:	00c4303a 	nor	r2,zero,r3
100058d8:	3884703a 	and	r2,r7,r2
100058dc:	1204703a 	and	r2,r2,r8
100058e0:	19bff626 	beq	r3,r6,100058bc <__alt_data_end+0xf80058bc>
100058e4:	20800003 	ldbu	r2,0(r4)
100058e8:	10c03fcc 	andi	r3,r2,255
100058ec:	18c0201c 	xori	r3,r3,128
100058f0:	18ffe004 	addi	r3,r3,-128
100058f4:	18000c26 	beq	r3,zero,10005928 <strcmp+0xac>
100058f8:	29800007 	ldb	r6,0(r5)
100058fc:	19800326 	beq	r3,r6,1000590c <strcmp+0x90>
10005900:	00001306 	br	10005950 <strcmp+0xd4>
10005904:	29800007 	ldb	r6,0(r5)
10005908:	11800b1e 	bne	r2,r6,10005938 <strcmp+0xbc>
1000590c:	21000044 	addi	r4,r4,1
10005910:	20c00003 	ldbu	r3,0(r4)
10005914:	29400044 	addi	r5,r5,1
10005918:	18803fcc 	andi	r2,r3,255
1000591c:	1080201c 	xori	r2,r2,128
10005920:	10bfe004 	addi	r2,r2,-128
10005924:	103ff71e 	bne	r2,zero,10005904 <__alt_data_end+0xf8005904>
10005928:	0007883a 	mov	r3,zero
1000592c:	28800003 	ldbu	r2,0(r5)
10005930:	1885c83a 	sub	r2,r3,r2
10005934:	f800283a 	ret
10005938:	28800003 	ldbu	r2,0(r5)
1000593c:	18c03fcc 	andi	r3,r3,255
10005940:	1885c83a 	sub	r2,r3,r2
10005944:	f800283a 	ret
10005948:	0005883a 	mov	r2,zero
1000594c:	f800283a 	ret
10005950:	10c03fcc 	andi	r3,r2,255
10005954:	003ff506 	br	1000592c <__alt_data_end+0xf800592c>

10005958 <strlen>:
10005958:	208000cc 	andi	r2,r4,3
1000595c:	10002026 	beq	r2,zero,100059e0 <strlen+0x88>
10005960:	20800007 	ldb	r2,0(r4)
10005964:	10002026 	beq	r2,zero,100059e8 <strlen+0x90>
10005968:	2005883a 	mov	r2,r4
1000596c:	00000206 	br	10005978 <strlen+0x20>
10005970:	10c00007 	ldb	r3,0(r2)
10005974:	18001826 	beq	r3,zero,100059d8 <strlen+0x80>
10005978:	10800044 	addi	r2,r2,1
1000597c:	10c000cc 	andi	r3,r2,3
10005980:	183ffb1e 	bne	r3,zero,10005970 <__alt_data_end+0xf8005970>
10005984:	10c00017 	ldw	r3,0(r2)
10005988:	01ffbff4 	movhi	r7,65279
1000598c:	39ffbfc4 	addi	r7,r7,-257
10005990:	00ca303a 	nor	r5,zero,r3
10005994:	01a02074 	movhi	r6,32897
10005998:	19c7883a 	add	r3,r3,r7
1000599c:	31a02004 	addi	r6,r6,-32640
100059a0:	1946703a 	and	r3,r3,r5
100059a4:	1986703a 	and	r3,r3,r6
100059a8:	1800091e 	bne	r3,zero,100059d0 <strlen+0x78>
100059ac:	10800104 	addi	r2,r2,4
100059b0:	10c00017 	ldw	r3,0(r2)
100059b4:	19cb883a 	add	r5,r3,r7
100059b8:	00c6303a 	nor	r3,zero,r3
100059bc:	28c6703a 	and	r3,r5,r3
100059c0:	1986703a 	and	r3,r3,r6
100059c4:	183ff926 	beq	r3,zero,100059ac <__alt_data_end+0xf80059ac>
100059c8:	00000106 	br	100059d0 <strlen+0x78>
100059cc:	10800044 	addi	r2,r2,1
100059d0:	10c00007 	ldb	r3,0(r2)
100059d4:	183ffd1e 	bne	r3,zero,100059cc <__alt_data_end+0xf80059cc>
100059d8:	1105c83a 	sub	r2,r2,r4
100059dc:	f800283a 	ret
100059e0:	2005883a 	mov	r2,r4
100059e4:	003fe706 	br	10005984 <__alt_data_end+0xf8005984>
100059e8:	0005883a 	mov	r2,zero
100059ec:	f800283a 	ret

100059f0 <___vfprintf_internal_r>:
100059f0:	deffb804 	addi	sp,sp,-288
100059f4:	dfc04715 	stw	ra,284(sp)
100059f8:	ddc04515 	stw	r23,276(sp)
100059fc:	dd404315 	stw	r21,268(sp)
10005a00:	d9002d15 	stw	r4,180(sp)
10005a04:	282f883a 	mov	r23,r5
10005a08:	302b883a 	mov	r21,r6
10005a0c:	d9c02e15 	stw	r7,184(sp)
10005a10:	df004615 	stw	fp,280(sp)
10005a14:	dd804415 	stw	r22,272(sp)
10005a18:	dd004215 	stw	r20,264(sp)
10005a1c:	dcc04115 	stw	r19,260(sp)
10005a20:	dc804015 	stw	r18,256(sp)
10005a24:	dc403f15 	stw	r17,252(sp)
10005a28:	dc003e15 	stw	r16,248(sp)
10005a2c:	000a9300 	call	1000a930 <_localeconv_r>
10005a30:	10800017 	ldw	r2,0(r2)
10005a34:	1009883a 	mov	r4,r2
10005a38:	d8803415 	stw	r2,208(sp)
10005a3c:	00059580 	call	10005958 <strlen>
10005a40:	d8803715 	stw	r2,220(sp)
10005a44:	d8802d17 	ldw	r2,180(sp)
10005a48:	10000226 	beq	r2,zero,10005a54 <___vfprintf_internal_r+0x64>
10005a4c:	10800e17 	ldw	r2,56(r2)
10005a50:	1000fb26 	beq	r2,zero,10005e40 <___vfprintf_internal_r+0x450>
10005a54:	b880030b 	ldhu	r2,12(r23)
10005a58:	10c8000c 	andi	r3,r2,8192
10005a5c:	1800061e 	bne	r3,zero,10005a78 <___vfprintf_internal_r+0x88>
10005a60:	b9001917 	ldw	r4,100(r23)
10005a64:	00f7ffc4 	movi	r3,-8193
10005a68:	10880014 	ori	r2,r2,8192
10005a6c:	20c6703a 	and	r3,r4,r3
10005a70:	b880030d 	sth	r2,12(r23)
10005a74:	b8c01915 	stw	r3,100(r23)
10005a78:	10c0020c 	andi	r3,r2,8
10005a7c:	1800c326 	beq	r3,zero,10005d8c <___vfprintf_internal_r+0x39c>
10005a80:	b8c00417 	ldw	r3,16(r23)
10005a84:	1800c126 	beq	r3,zero,10005d8c <___vfprintf_internal_r+0x39c>
10005a88:	1080068c 	andi	r2,r2,26
10005a8c:	00c00284 	movi	r3,10
10005a90:	10c0c626 	beq	r2,r3,10005dac <___vfprintf_internal_r+0x3bc>
10005a94:	d8c00404 	addi	r3,sp,16
10005a98:	05040074 	movhi	r20,4097
10005a9c:	d9001e04 	addi	r4,sp,120
10005aa0:	a5143e84 	addi	r20,r20,20730
10005aa4:	d8c01e15 	stw	r3,120(sp)
10005aa8:	d8002015 	stw	zero,128(sp)
10005aac:	d8001f15 	stw	zero,124(sp)
10005ab0:	d8003315 	stw	zero,204(sp)
10005ab4:	d8003615 	stw	zero,216(sp)
10005ab8:	d8003815 	stw	zero,224(sp)
10005abc:	1811883a 	mov	r8,r3
10005ac0:	d8003915 	stw	zero,228(sp)
10005ac4:	d8003a15 	stw	zero,232(sp)
10005ac8:	d8002f15 	stw	zero,188(sp)
10005acc:	d9002815 	stw	r4,160(sp)
10005ad0:	a8800007 	ldb	r2,0(r21)
10005ad4:	10028b26 	beq	r2,zero,10006504 <___vfprintf_internal_r+0xb14>
10005ad8:	00c00944 	movi	r3,37
10005adc:	a823883a 	mov	r17,r21
10005ae0:	10c0021e 	bne	r2,r3,10005aec <___vfprintf_internal_r+0xfc>
10005ae4:	00001406 	br	10005b38 <___vfprintf_internal_r+0x148>
10005ae8:	10c00326 	beq	r2,r3,10005af8 <___vfprintf_internal_r+0x108>
10005aec:	8c400044 	addi	r17,r17,1
10005af0:	88800007 	ldb	r2,0(r17)
10005af4:	103ffc1e 	bne	r2,zero,10005ae8 <__alt_data_end+0xf8005ae8>
10005af8:	8d61c83a 	sub	r16,r17,r21
10005afc:	80000e26 	beq	r16,zero,10005b38 <___vfprintf_internal_r+0x148>
10005b00:	d8c02017 	ldw	r3,128(sp)
10005b04:	d8801f17 	ldw	r2,124(sp)
10005b08:	45400015 	stw	r21,0(r8)
10005b0c:	1c07883a 	add	r3,r3,r16
10005b10:	10800044 	addi	r2,r2,1
10005b14:	d8c02015 	stw	r3,128(sp)
10005b18:	44000115 	stw	r16,4(r8)
10005b1c:	d8801f15 	stw	r2,124(sp)
10005b20:	00c001c4 	movi	r3,7
10005b24:	1880a916 	blt	r3,r2,10005dcc <___vfprintf_internal_r+0x3dc>
10005b28:	42000204 	addi	r8,r8,8
10005b2c:	d9402f17 	ldw	r5,188(sp)
10005b30:	2c0b883a 	add	r5,r5,r16
10005b34:	d9402f15 	stw	r5,188(sp)
10005b38:	88800007 	ldb	r2,0(r17)
10005b3c:	1000aa26 	beq	r2,zero,10005de8 <___vfprintf_internal_r+0x3f8>
10005b40:	8d400044 	addi	r21,r17,1
10005b44:	8c400047 	ldb	r17,1(r17)
10005b48:	0021883a 	mov	r16,zero
10005b4c:	00bfffc4 	movi	r2,-1
10005b50:	0025883a 	mov	r18,zero
10005b54:	dc002905 	stb	r16,164(sp)
10005b58:	d8002785 	stb	zero,158(sp)
10005b5c:	d8002b05 	stb	zero,172(sp)
10005b60:	d8802a15 	stw	r2,168(sp)
10005b64:	d8003115 	stw	zero,196(sp)
10005b68:	04c01604 	movi	r19,88
10005b6c:	05800244 	movi	r22,9
10005b70:	9021883a 	mov	r16,r18
10005b74:	4039883a 	mov	fp,r8
10005b78:	ad400044 	addi	r21,r21,1
10005b7c:	88bff804 	addi	r2,r17,-32
10005b80:	98833236 	bltu	r19,r2,1000684c <___vfprintf_internal_r+0xe5c>
10005b84:	100490ba 	slli	r2,r2,2
10005b88:	00c40034 	movhi	r3,4096
10005b8c:	18d6e704 	addi	r3,r3,23452
10005b90:	10c5883a 	add	r2,r2,r3
10005b94:	10800017 	ldw	r2,0(r2)
10005b98:	1000683a 	jmp	r2
10005b9c:	10006744 	addi	zero,r2,413
10005ba0:	1000684c 	andi	zero,r2,417
10005ba4:	1000684c 	andi	zero,r2,417
10005ba8:	10006764 	muli	zero,r2,413
10005bac:	1000684c 	andi	zero,r2,417
10005bb0:	1000684c 	andi	zero,r2,417
10005bb4:	1000684c 	andi	zero,r2,417
10005bb8:	1000684c 	andi	zero,r2,417
10005bbc:	1000684c 	andi	zero,r2,417
10005bc0:	1000684c 	andi	zero,r2,417
10005bc4:	10005e4c 	andi	zero,r2,377
10005bc8:	10006654 	ori	zero,r2,409
10005bcc:	1000684c 	andi	zero,r2,417
10005bd0:	10005d10 	cmplti	zero,r2,372
10005bd4:	10005e70 	cmpltui	zero,r2,377
10005bd8:	1000684c 	andi	zero,r2,417
10005bdc:	10005ec0 	call	110005ec <_gp+0xfe178c>
10005be0:	10005ecc 	andi	zero,r2,379
10005be4:	10005ecc 	andi	zero,r2,379
10005be8:	10005ecc 	andi	zero,r2,379
10005bec:	10005ecc 	andi	zero,r2,379
10005bf0:	10005ecc 	andi	zero,r2,379
10005bf4:	10005ecc 	andi	zero,r2,379
10005bf8:	10005ecc 	andi	zero,r2,379
10005bfc:	10005ecc 	andi	zero,r2,379
10005c00:	10005ecc 	andi	zero,r2,379
10005c04:	1000684c 	andi	zero,r2,417
10005c08:	1000684c 	andi	zero,r2,417
10005c0c:	1000684c 	andi	zero,r2,417
10005c10:	1000684c 	andi	zero,r2,417
10005c14:	1000684c 	andi	zero,r2,417
10005c18:	1000684c 	andi	zero,r2,417
10005c1c:	1000684c 	andi	zero,r2,417
10005c20:	1000684c 	andi	zero,r2,417
10005c24:	1000684c 	andi	zero,r2,417
10005c28:	1000684c 	andi	zero,r2,417
10005c2c:	10005f08 	cmpgei	zero,r2,380
10005c30:	10005fd0 	cmplti	zero,r2,383
10005c34:	1000684c 	andi	zero,r2,417
10005c38:	10005fd0 	cmplti	zero,r2,383
10005c3c:	1000684c 	andi	zero,r2,417
10005c40:	1000684c 	andi	zero,r2,417
10005c44:	1000684c 	andi	zero,r2,417
10005c48:	1000684c 	andi	zero,r2,417
10005c4c:	1000607c 	xorhi	zero,r2,385
10005c50:	1000684c 	andi	zero,r2,417
10005c54:	1000684c 	andi	zero,r2,417
10005c58:	10006088 	cmpgei	zero,r2,386
10005c5c:	1000684c 	andi	zero,r2,417
10005c60:	1000684c 	andi	zero,r2,417
10005c64:	1000684c 	andi	zero,r2,417
10005c68:	1000684c 	andi	zero,r2,417
10005c6c:	1000684c 	andi	zero,r2,417
10005c70:	1000650c 	andi	zero,r2,404
10005c74:	1000684c 	andi	zero,r2,417
10005c78:	1000684c 	andi	zero,r2,417
10005c7c:	10006578 	rdprs	zero,r2,405
10005c80:	1000684c 	andi	zero,r2,417
10005c84:	1000684c 	andi	zero,r2,417
10005c88:	1000684c 	andi	zero,r2,417
10005c8c:	1000684c 	andi	zero,r2,417
10005c90:	1000684c 	andi	zero,r2,417
10005c94:	1000684c 	andi	zero,r2,417
10005c98:	1000684c 	andi	zero,r2,417
10005c9c:	1000684c 	andi	zero,r2,417
10005ca0:	1000684c 	andi	zero,r2,417
10005ca4:	1000684c 	andi	zero,r2,417
10005ca8:	100067f0 	cmpltui	zero,r2,415
10005cac:	10006770 	cmpltui	zero,r2,413
10005cb0:	10005fd0 	cmplti	zero,r2,383
10005cb4:	10005fd0 	cmplti	zero,r2,383
10005cb8:	10005fd0 	cmplti	zero,r2,383
10005cbc:	10006790 	cmplti	zero,r2,414
10005cc0:	10006770 	cmpltui	zero,r2,413
10005cc4:	1000684c 	andi	zero,r2,417
10005cc8:	1000684c 	andi	zero,r2,417
10005ccc:	1000679c 	xori	zero,r2,414
10005cd0:	1000684c 	andi	zero,r2,417
10005cd4:	100067b0 	cmpltui	zero,r2,414
10005cd8:	10006634 	orhi	zero,r2,408
10005cdc:	10005d1c 	xori	zero,r2,372
10005ce0:	1000666c 	andhi	zero,r2,409
10005ce4:	1000684c 	andi	zero,r2,417
10005ce8:	10006678 	rdprs	zero,r2,409
10005cec:	1000684c 	andi	zero,r2,417
10005cf0:	100066dc 	xori	zero,r2,411
10005cf4:	1000684c 	andi	zero,r2,417
10005cf8:	1000684c 	andi	zero,r2,417
10005cfc:	100066fc 	xorhi	zero,r2,411
10005d00:	d8c03117 	ldw	r3,196(sp)
10005d04:	d8802e15 	stw	r2,184(sp)
10005d08:	00c7c83a 	sub	r3,zero,r3
10005d0c:	d8c03115 	stw	r3,196(sp)
10005d10:	84000114 	ori	r16,r16,4
10005d14:	ac400007 	ldb	r17,0(r21)
10005d18:	003f9706 	br	10005b78 <__alt_data_end+0xf8005b78>
10005d1c:	00800c04 	movi	r2,48
10005d20:	d8802705 	stb	r2,156(sp)
10005d24:	00801e04 	movi	r2,120
10005d28:	d8802745 	stb	r2,157(sp)
10005d2c:	d9002a17 	ldw	r4,168(sp)
10005d30:	d8802e17 	ldw	r2,184(sp)
10005d34:	d8002785 	stb	zero,158(sp)
10005d38:	e011883a 	mov	r8,fp
10005d3c:	10c00104 	addi	r3,r2,4
10005d40:	14c00017 	ldw	r19,0(r2)
10005d44:	002d883a 	mov	r22,zero
10005d48:	80800094 	ori	r2,r16,2
10005d4c:	2002ca16 	blt	r4,zero,10006878 <___vfprintf_internal_r+0xe88>
10005d50:	00bfdfc4 	movi	r2,-129
10005d54:	80a4703a 	and	r18,r16,r2
10005d58:	d8c02e15 	stw	r3,184(sp)
10005d5c:	94800094 	ori	r18,r18,2
10005d60:	9802b41e 	bne	r19,zero,10006834 <___vfprintf_internal_r+0xe44>
10005d64:	01440074 	movhi	r5,4097
10005d68:	29543704 	addi	r5,r5,20700
10005d6c:	d9403915 	stw	r5,228(sp)
10005d70:	04401e04 	movi	r17,120
10005d74:	d8802a17 	ldw	r2,168(sp)
10005d78:	0039883a 	mov	fp,zero
10005d7c:	1001fa26 	beq	r2,zero,10006568 <___vfprintf_internal_r+0xb78>
10005d80:	0027883a 	mov	r19,zero
10005d84:	002d883a 	mov	r22,zero
10005d88:	00021906 	br	100065f0 <___vfprintf_internal_r+0xc00>
10005d8c:	d9002d17 	ldw	r4,180(sp)
10005d90:	b80b883a 	mov	r5,r23
10005d94:	0007da40 	call	10007da4 <__swsetup_r>
10005d98:	1005dc1e 	bne	r2,zero,1000750c <___vfprintf_internal_r+0x1b1c>
10005d9c:	b880030b 	ldhu	r2,12(r23)
10005da0:	00c00284 	movi	r3,10
10005da4:	1080068c 	andi	r2,r2,26
10005da8:	10ff3a1e 	bne	r2,r3,10005a94 <__alt_data_end+0xf8005a94>
10005dac:	b880038f 	ldh	r2,14(r23)
10005db0:	103f3816 	blt	r2,zero,10005a94 <__alt_data_end+0xf8005a94>
10005db4:	d9c02e17 	ldw	r7,184(sp)
10005db8:	d9002d17 	ldw	r4,180(sp)
10005dbc:	a80d883a 	mov	r6,r21
10005dc0:	b80b883a 	mov	r5,r23
10005dc4:	0007ce80 	call	10007ce8 <__sbprintf>
10005dc8:	00001106 	br	10005e10 <___vfprintf_internal_r+0x420>
10005dcc:	d9002d17 	ldw	r4,180(sp)
10005dd0:	d9801e04 	addi	r6,sp,120
10005dd4:	b80b883a 	mov	r5,r23
10005dd8:	000c76c0 	call	1000c76c <__sprint_r>
10005ddc:	1000081e 	bne	r2,zero,10005e00 <___vfprintf_internal_r+0x410>
10005de0:	da000404 	addi	r8,sp,16
10005de4:	003f5106 	br	10005b2c <__alt_data_end+0xf8005b2c>
10005de8:	d8802017 	ldw	r2,128(sp)
10005dec:	10000426 	beq	r2,zero,10005e00 <___vfprintf_internal_r+0x410>
10005df0:	d9002d17 	ldw	r4,180(sp)
10005df4:	d9801e04 	addi	r6,sp,120
10005df8:	b80b883a 	mov	r5,r23
10005dfc:	000c76c0 	call	1000c76c <__sprint_r>
10005e00:	b880030b 	ldhu	r2,12(r23)
10005e04:	1080100c 	andi	r2,r2,64
10005e08:	1005c01e 	bne	r2,zero,1000750c <___vfprintf_internal_r+0x1b1c>
10005e0c:	d8802f17 	ldw	r2,188(sp)
10005e10:	dfc04717 	ldw	ra,284(sp)
10005e14:	df004617 	ldw	fp,280(sp)
10005e18:	ddc04517 	ldw	r23,276(sp)
10005e1c:	dd804417 	ldw	r22,272(sp)
10005e20:	dd404317 	ldw	r21,268(sp)
10005e24:	dd004217 	ldw	r20,264(sp)
10005e28:	dcc04117 	ldw	r19,260(sp)
10005e2c:	dc804017 	ldw	r18,256(sp)
10005e30:	dc403f17 	ldw	r17,252(sp)
10005e34:	dc003e17 	ldw	r16,248(sp)
10005e38:	dec04804 	addi	sp,sp,288
10005e3c:	f800283a 	ret
10005e40:	d9002d17 	ldw	r4,180(sp)
10005e44:	0009db00 	call	10009db0 <__sinit>
10005e48:	003f0206 	br	10005a54 <__alt_data_end+0xf8005a54>
10005e4c:	d9002e17 	ldw	r4,184(sp)
10005e50:	d9402e17 	ldw	r5,184(sp)
10005e54:	21000017 	ldw	r4,0(r4)
10005e58:	28800104 	addi	r2,r5,4
10005e5c:	d9003115 	stw	r4,196(sp)
10005e60:	203fa716 	blt	r4,zero,10005d00 <__alt_data_end+0xf8005d00>
10005e64:	d8802e15 	stw	r2,184(sp)
10005e68:	ac400007 	ldb	r17,0(r21)
10005e6c:	003f4206 	br	10005b78 <__alt_data_end+0xf8005b78>
10005e70:	ac400007 	ldb	r17,0(r21)
10005e74:	01000a84 	movi	r4,42
10005e78:	a8c00044 	addi	r3,r21,1
10005e7c:	89075826 	beq	r17,r4,10007be0 <___vfprintf_internal_r+0x21f0>
10005e80:	8cbff404 	addi	r18,r17,-48
10005e84:	b486ae36 	bltu	r22,r18,10007940 <___vfprintf_internal_r+0x1f50>
10005e88:	0009883a 	mov	r4,zero
10005e8c:	1823883a 	mov	r17,r3
10005e90:	01400284 	movi	r5,10
10005e94:	00045280 	call	10004528 <__mulsi3>
10005e98:	88c00007 	ldb	r3,0(r17)
10005e9c:	1489883a 	add	r4,r2,r18
10005ea0:	8d400044 	addi	r21,r17,1
10005ea4:	1cbff404 	addi	r18,r3,-48
10005ea8:	a823883a 	mov	r17,r21
10005eac:	b4bff82e 	bgeu	r22,r18,10005e90 <__alt_data_end+0xf8005e90>
10005eb0:	1823883a 	mov	r17,r3
10005eb4:	2005f616 	blt	r4,zero,10007690 <___vfprintf_internal_r+0x1ca0>
10005eb8:	d9002a15 	stw	r4,168(sp)
10005ebc:	003f2f06 	br	10005b7c <__alt_data_end+0xf8005b7c>
10005ec0:	84002014 	ori	r16,r16,128
10005ec4:	ac400007 	ldb	r17,0(r21)
10005ec8:	003f2b06 	br	10005b78 <__alt_data_end+0xf8005b78>
10005ecc:	8cbff404 	addi	r18,r17,-48
10005ed0:	d8003115 	stw	zero,196(sp)
10005ed4:	0009883a 	mov	r4,zero
10005ed8:	a823883a 	mov	r17,r21
10005edc:	01400284 	movi	r5,10
10005ee0:	00045280 	call	10004528 <__mulsi3>
10005ee4:	88c00007 	ldb	r3,0(r17)
10005ee8:	9089883a 	add	r4,r18,r2
10005eec:	ad400044 	addi	r21,r21,1
10005ef0:	1cbff404 	addi	r18,r3,-48
10005ef4:	a823883a 	mov	r17,r21
10005ef8:	b4bff82e 	bgeu	r22,r18,10005edc <__alt_data_end+0xf8005edc>
10005efc:	1823883a 	mov	r17,r3
10005f00:	d9003115 	stw	r4,196(sp)
10005f04:	003f1d06 	br	10005b7c <__alt_data_end+0xf8005b7c>
10005f08:	8025883a 	mov	r18,r16
10005f0c:	dc002903 	ldbu	r16,164(sp)
10005f10:	e011883a 	mov	r8,fp
10005f14:	84003fcc 	andi	r16,r16,255
10005f18:	8007531e 	bne	r16,zero,10007c68 <___vfprintf_internal_r+0x2278>
10005f1c:	94800414 	ori	r18,r18,16
10005f20:	9080080c 	andi	r2,r18,32
10005f24:	1003a326 	beq	r2,zero,10006db4 <___vfprintf_internal_r+0x13c4>
10005f28:	d9002e17 	ldw	r4,184(sp)
10005f2c:	20800117 	ldw	r2,4(r4)
10005f30:	24c00017 	ldw	r19,0(r4)
10005f34:	21000204 	addi	r4,r4,8
10005f38:	d9002e15 	stw	r4,184(sp)
10005f3c:	102d883a 	mov	r22,r2
10005f40:	10047316 	blt	r2,zero,10007110 <___vfprintf_internal_r+0x1720>
10005f44:	d9002a17 	ldw	r4,168(sp)
10005f48:	df002783 	ldbu	fp,158(sp)
10005f4c:	2003e416 	blt	r4,zero,10006ee0 <___vfprintf_internal_r+0x14f0>
10005f50:	00ffdfc4 	movi	r3,-129
10005f54:	9d84b03a 	or	r2,r19,r22
10005f58:	90e4703a 	and	r18,r18,r3
10005f5c:	10018026 	beq	r2,zero,10006560 <___vfprintf_internal_r+0xb70>
10005f60:	b003ab26 	beq	r22,zero,10006e10 <___vfprintf_internal_r+0x1420>
10005f64:	dc402915 	stw	r17,164(sp)
10005f68:	dc001e04 	addi	r16,sp,120
10005f6c:	b023883a 	mov	r17,r22
10005f70:	402d883a 	mov	r22,r8
10005f74:	9809883a 	mov	r4,r19
10005f78:	880b883a 	mov	r5,r17
10005f7c:	01800284 	movi	r6,10
10005f80:	000f883a 	mov	r7,zero
10005f84:	000ecb00 	call	1000ecb0 <__umoddi3>
10005f88:	10800c04 	addi	r2,r2,48
10005f8c:	843fffc4 	addi	r16,r16,-1
10005f90:	9809883a 	mov	r4,r19
10005f94:	880b883a 	mov	r5,r17
10005f98:	80800005 	stb	r2,0(r16)
10005f9c:	01800284 	movi	r6,10
10005fa0:	000f883a 	mov	r7,zero
10005fa4:	000e6b40 	call	1000e6b4 <__udivdi3>
10005fa8:	1027883a 	mov	r19,r2
10005fac:	10c4b03a 	or	r2,r2,r3
10005fb0:	1823883a 	mov	r17,r3
10005fb4:	103fef1e 	bne	r2,zero,10005f74 <__alt_data_end+0xf8005f74>
10005fb8:	d8c02817 	ldw	r3,160(sp)
10005fbc:	dc402917 	ldw	r17,164(sp)
10005fc0:	b011883a 	mov	r8,r22
10005fc4:	1c07c83a 	sub	r3,r3,r16
10005fc8:	d8c02b15 	stw	r3,172(sp)
10005fcc:	00005f06 	br	1000614c <___vfprintf_internal_r+0x75c>
10005fd0:	8025883a 	mov	r18,r16
10005fd4:	dc002903 	ldbu	r16,164(sp)
10005fd8:	e011883a 	mov	r8,fp
10005fdc:	84003fcc 	andi	r16,r16,255
10005fe0:	80071e1e 	bne	r16,zero,10007c5c <___vfprintf_internal_r+0x226c>
10005fe4:	9080020c 	andi	r2,r18,8
10005fe8:	1004af26 	beq	r2,zero,100072a8 <___vfprintf_internal_r+0x18b8>
10005fec:	d9002e17 	ldw	r4,184(sp)
10005ff0:	d9402e17 	ldw	r5,184(sp)
10005ff4:	d8802e17 	ldw	r2,184(sp)
10005ff8:	21000017 	ldw	r4,0(r4)
10005ffc:	29400117 	ldw	r5,4(r5)
10006000:	10800204 	addi	r2,r2,8
10006004:	d9003615 	stw	r4,216(sp)
10006008:	d9403815 	stw	r5,224(sp)
1000600c:	d8802e15 	stw	r2,184(sp)
10006010:	d9003617 	ldw	r4,216(sp)
10006014:	d9403817 	ldw	r5,224(sp)
10006018:	da003d15 	stw	r8,244(sp)
1000601c:	04000044 	movi	r16,1
10006020:	000c4c00 	call	1000c4c0 <__fpclassifyd>
10006024:	da003d17 	ldw	r8,244(sp)
10006028:	1404441e 	bne	r2,r16,1000713c <___vfprintf_internal_r+0x174c>
1000602c:	d9003617 	ldw	r4,216(sp)
10006030:	d9403817 	ldw	r5,224(sp)
10006034:	000d883a 	mov	r6,zero
10006038:	000f883a 	mov	r7,zero
1000603c:	00108080 	call	10010808 <__ledf2>
10006040:	da003d17 	ldw	r8,244(sp)
10006044:	1005e316 	blt	r2,zero,100077d4 <___vfprintf_internal_r+0x1de4>
10006048:	df002783 	ldbu	fp,158(sp)
1000604c:	008011c4 	movi	r2,71
10006050:	1445580e 	bge	r2,r17,100075b4 <___vfprintf_internal_r+0x1bc4>
10006054:	04040074 	movhi	r16,4097
10006058:	84142f04 	addi	r16,r16,20668
1000605c:	00c000c4 	movi	r3,3
10006060:	00bfdfc4 	movi	r2,-129
10006064:	d8c02915 	stw	r3,164(sp)
10006068:	90a4703a 	and	r18,r18,r2
1000606c:	d8c02b15 	stw	r3,172(sp)
10006070:	d8002a15 	stw	zero,168(sp)
10006074:	d8003215 	stw	zero,200(sp)
10006078:	00003a06 	br	10006164 <___vfprintf_internal_r+0x774>
1000607c:	84000214 	ori	r16,r16,8
10006080:	ac400007 	ldb	r17,0(r21)
10006084:	003ebc06 	br	10005b78 <__alt_data_end+0xf8005b78>
10006088:	8025883a 	mov	r18,r16
1000608c:	dc002903 	ldbu	r16,164(sp)
10006090:	e011883a 	mov	r8,fp
10006094:	84003fcc 	andi	r16,r16,255
10006098:	8007001e 	bne	r16,zero,10007c9c <___vfprintf_internal_r+0x22ac>
1000609c:	94800414 	ori	r18,r18,16
100060a0:	9080080c 	andi	r2,r18,32
100060a4:	1002fa26 	beq	r2,zero,10006c90 <___vfprintf_internal_r+0x12a0>
100060a8:	d9002e17 	ldw	r4,184(sp)
100060ac:	d9402a17 	ldw	r5,168(sp)
100060b0:	d8002785 	stb	zero,158(sp)
100060b4:	20800204 	addi	r2,r4,8
100060b8:	24c00017 	ldw	r19,0(r4)
100060bc:	25800117 	ldw	r22,4(r4)
100060c0:	2804b116 	blt	r5,zero,10007388 <___vfprintf_internal_r+0x1998>
100060c4:	013fdfc4 	movi	r4,-129
100060c8:	9d86b03a 	or	r3,r19,r22
100060cc:	d8802e15 	stw	r2,184(sp)
100060d0:	9124703a 	and	r18,r18,r4
100060d4:	1802fb1e 	bne	r3,zero,10006cc4 <___vfprintf_internal_r+0x12d4>
100060d8:	d8c02a17 	ldw	r3,168(sp)
100060dc:	0039883a 	mov	fp,zero
100060e0:	1805e526 	beq	r3,zero,10007878 <___vfprintf_internal_r+0x1e88>
100060e4:	0027883a 	mov	r19,zero
100060e8:	002d883a 	mov	r22,zero
100060ec:	dc001e04 	addi	r16,sp,120
100060f0:	9806d0fa 	srli	r3,r19,3
100060f4:	b008977a 	slli	r4,r22,29
100060f8:	b02cd0fa 	srli	r22,r22,3
100060fc:	9cc001cc 	andi	r19,r19,7
10006100:	98800c04 	addi	r2,r19,48
10006104:	843fffc4 	addi	r16,r16,-1
10006108:	20e6b03a 	or	r19,r4,r3
1000610c:	80800005 	stb	r2,0(r16)
10006110:	9d86b03a 	or	r3,r19,r22
10006114:	183ff61e 	bne	r3,zero,100060f0 <__alt_data_end+0xf80060f0>
10006118:	90c0004c 	andi	r3,r18,1
1000611c:	18014126 	beq	r3,zero,10006624 <___vfprintf_internal_r+0xc34>
10006120:	10803fcc 	andi	r2,r2,255
10006124:	1080201c 	xori	r2,r2,128
10006128:	10bfe004 	addi	r2,r2,-128
1000612c:	00c00c04 	movi	r3,48
10006130:	10c13c26 	beq	r2,r3,10006624 <___vfprintf_internal_r+0xc34>
10006134:	80ffffc5 	stb	r3,-1(r16)
10006138:	d8c02817 	ldw	r3,160(sp)
1000613c:	80bfffc4 	addi	r2,r16,-1
10006140:	1021883a 	mov	r16,r2
10006144:	1887c83a 	sub	r3,r3,r2
10006148:	d8c02b15 	stw	r3,172(sp)
1000614c:	d8802b17 	ldw	r2,172(sp)
10006150:	d9002a17 	ldw	r4,168(sp)
10006154:	1100010e 	bge	r2,r4,1000615c <___vfprintf_internal_r+0x76c>
10006158:	2005883a 	mov	r2,r4
1000615c:	d8802915 	stw	r2,164(sp)
10006160:	d8003215 	stw	zero,200(sp)
10006164:	e7003fcc 	andi	fp,fp,255
10006168:	e700201c 	xori	fp,fp,128
1000616c:	e73fe004 	addi	fp,fp,-128
10006170:	e0000326 	beq	fp,zero,10006180 <___vfprintf_internal_r+0x790>
10006174:	d8c02917 	ldw	r3,164(sp)
10006178:	18c00044 	addi	r3,r3,1
1000617c:	d8c02915 	stw	r3,164(sp)
10006180:	90c0008c 	andi	r3,r18,2
10006184:	d8c02c15 	stw	r3,176(sp)
10006188:	18000326 	beq	r3,zero,10006198 <___vfprintf_internal_r+0x7a8>
1000618c:	d8c02917 	ldw	r3,164(sp)
10006190:	18c00084 	addi	r3,r3,2
10006194:	d8c02915 	stw	r3,164(sp)
10006198:	90c0210c 	andi	r3,r18,132
1000619c:	d8c03015 	stw	r3,192(sp)
100061a0:	1801c51e 	bne	r3,zero,100068b8 <___vfprintf_internal_r+0xec8>
100061a4:	d9003117 	ldw	r4,196(sp)
100061a8:	d8c02917 	ldw	r3,164(sp)
100061ac:	20e7c83a 	sub	r19,r4,r3
100061b0:	04c1c10e 	bge	zero,r19,100068b8 <___vfprintf_internal_r+0xec8>
100061b4:	02400404 	movi	r9,16
100061b8:	d8c02017 	ldw	r3,128(sp)
100061bc:	d8801f17 	ldw	r2,124(sp)
100061c0:	4cc52f0e 	bge	r9,r19,10007680 <___vfprintf_internal_r+0x1c90>
100061c4:	01440074 	movhi	r5,4097
100061c8:	29544284 	addi	r5,r5,20746
100061cc:	dc403b15 	stw	r17,236(sp)
100061d0:	d9403515 	stw	r5,212(sp)
100061d4:	9823883a 	mov	r17,r19
100061d8:	482d883a 	mov	r22,r9
100061dc:	9027883a 	mov	r19,r18
100061e0:	070001c4 	movi	fp,7
100061e4:	8025883a 	mov	r18,r16
100061e8:	dc002d17 	ldw	r16,180(sp)
100061ec:	00000306 	br	100061fc <___vfprintf_internal_r+0x80c>
100061f0:	8c7ffc04 	addi	r17,r17,-16
100061f4:	42000204 	addi	r8,r8,8
100061f8:	b440130e 	bge	r22,r17,10006248 <___vfprintf_internal_r+0x858>
100061fc:	01040074 	movhi	r4,4097
10006200:	18c00404 	addi	r3,r3,16
10006204:	10800044 	addi	r2,r2,1
10006208:	21144284 	addi	r4,r4,20746
1000620c:	41000015 	stw	r4,0(r8)
10006210:	45800115 	stw	r22,4(r8)
10006214:	d8c02015 	stw	r3,128(sp)
10006218:	d8801f15 	stw	r2,124(sp)
1000621c:	e0bff40e 	bge	fp,r2,100061f0 <__alt_data_end+0xf80061f0>
10006220:	d9801e04 	addi	r6,sp,120
10006224:	b80b883a 	mov	r5,r23
10006228:	8009883a 	mov	r4,r16
1000622c:	000c76c0 	call	1000c76c <__sprint_r>
10006230:	103ef31e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
10006234:	8c7ffc04 	addi	r17,r17,-16
10006238:	d8c02017 	ldw	r3,128(sp)
1000623c:	d8801f17 	ldw	r2,124(sp)
10006240:	da000404 	addi	r8,sp,16
10006244:	b47fed16 	blt	r22,r17,100061fc <__alt_data_end+0xf80061fc>
10006248:	9021883a 	mov	r16,r18
1000624c:	9825883a 	mov	r18,r19
10006250:	8827883a 	mov	r19,r17
10006254:	dc403b17 	ldw	r17,236(sp)
10006258:	d9403517 	ldw	r5,212(sp)
1000625c:	98c7883a 	add	r3,r19,r3
10006260:	10800044 	addi	r2,r2,1
10006264:	41400015 	stw	r5,0(r8)
10006268:	44c00115 	stw	r19,4(r8)
1000626c:	d8c02015 	stw	r3,128(sp)
10006270:	d8801f15 	stw	r2,124(sp)
10006274:	010001c4 	movi	r4,7
10006278:	2082c516 	blt	r4,r2,10006d90 <___vfprintf_internal_r+0x13a0>
1000627c:	df002787 	ldb	fp,158(sp)
10006280:	42000204 	addi	r8,r8,8
10006284:	e0000c26 	beq	fp,zero,100062b8 <___vfprintf_internal_r+0x8c8>
10006288:	d8801f17 	ldw	r2,124(sp)
1000628c:	d9002784 	addi	r4,sp,158
10006290:	18c00044 	addi	r3,r3,1
10006294:	10800044 	addi	r2,r2,1
10006298:	41000015 	stw	r4,0(r8)
1000629c:	01000044 	movi	r4,1
100062a0:	41000115 	stw	r4,4(r8)
100062a4:	d8c02015 	stw	r3,128(sp)
100062a8:	d8801f15 	stw	r2,124(sp)
100062ac:	010001c4 	movi	r4,7
100062b0:	20825e16 	blt	r4,r2,10006c2c <___vfprintf_internal_r+0x123c>
100062b4:	42000204 	addi	r8,r8,8
100062b8:	d8802c17 	ldw	r2,176(sp)
100062bc:	10000c26 	beq	r2,zero,100062f0 <___vfprintf_internal_r+0x900>
100062c0:	d8801f17 	ldw	r2,124(sp)
100062c4:	d9002704 	addi	r4,sp,156
100062c8:	18c00084 	addi	r3,r3,2
100062cc:	10800044 	addi	r2,r2,1
100062d0:	41000015 	stw	r4,0(r8)
100062d4:	01000084 	movi	r4,2
100062d8:	41000115 	stw	r4,4(r8)
100062dc:	d8c02015 	stw	r3,128(sp)
100062e0:	d8801f15 	stw	r2,124(sp)
100062e4:	010001c4 	movi	r4,7
100062e8:	20825816 	blt	r4,r2,10006c4c <___vfprintf_internal_r+0x125c>
100062ec:	42000204 	addi	r8,r8,8
100062f0:	d9003017 	ldw	r4,192(sp)
100062f4:	00802004 	movi	r2,128
100062f8:	2081bb26 	beq	r4,r2,100069e8 <___vfprintf_internal_r+0xff8>
100062fc:	d9402a17 	ldw	r5,168(sp)
10006300:	d8802b17 	ldw	r2,172(sp)
10006304:	28adc83a 	sub	r22,r5,r2
10006308:	0580310e 	bge	zero,r22,100063d0 <___vfprintf_internal_r+0x9e0>
1000630c:	07000404 	movi	fp,16
10006310:	d8801f17 	ldw	r2,124(sp)
10006314:	e584360e 	bge	fp,r22,100073f0 <___vfprintf_internal_r+0x1a00>
10006318:	01440074 	movhi	r5,4097
1000631c:	29543e84 	addi	r5,r5,20730
10006320:	dc402a15 	stw	r17,168(sp)
10006324:	d9402c15 	stw	r5,176(sp)
10006328:	b023883a 	mov	r17,r22
1000632c:	04c001c4 	movi	r19,7
10006330:	a82d883a 	mov	r22,r21
10006334:	902b883a 	mov	r21,r18
10006338:	8025883a 	mov	r18,r16
1000633c:	dc002d17 	ldw	r16,180(sp)
10006340:	00000306 	br	10006350 <___vfprintf_internal_r+0x960>
10006344:	8c7ffc04 	addi	r17,r17,-16
10006348:	42000204 	addi	r8,r8,8
1000634c:	e440110e 	bge	fp,r17,10006394 <___vfprintf_internal_r+0x9a4>
10006350:	18c00404 	addi	r3,r3,16
10006354:	10800044 	addi	r2,r2,1
10006358:	45000015 	stw	r20,0(r8)
1000635c:	47000115 	stw	fp,4(r8)
10006360:	d8c02015 	stw	r3,128(sp)
10006364:	d8801f15 	stw	r2,124(sp)
10006368:	98bff60e 	bge	r19,r2,10006344 <__alt_data_end+0xf8006344>
1000636c:	d9801e04 	addi	r6,sp,120
10006370:	b80b883a 	mov	r5,r23
10006374:	8009883a 	mov	r4,r16
10006378:	000c76c0 	call	1000c76c <__sprint_r>
1000637c:	103ea01e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
10006380:	8c7ffc04 	addi	r17,r17,-16
10006384:	d8c02017 	ldw	r3,128(sp)
10006388:	d8801f17 	ldw	r2,124(sp)
1000638c:	da000404 	addi	r8,sp,16
10006390:	e47fef16 	blt	fp,r17,10006350 <__alt_data_end+0xf8006350>
10006394:	9021883a 	mov	r16,r18
10006398:	a825883a 	mov	r18,r21
1000639c:	b02b883a 	mov	r21,r22
100063a0:	882d883a 	mov	r22,r17
100063a4:	dc402a17 	ldw	r17,168(sp)
100063a8:	d9002c17 	ldw	r4,176(sp)
100063ac:	1d87883a 	add	r3,r3,r22
100063b0:	10800044 	addi	r2,r2,1
100063b4:	41000015 	stw	r4,0(r8)
100063b8:	45800115 	stw	r22,4(r8)
100063bc:	d8c02015 	stw	r3,128(sp)
100063c0:	d8801f15 	stw	r2,124(sp)
100063c4:	010001c4 	movi	r4,7
100063c8:	20821016 	blt	r4,r2,10006c0c <___vfprintf_internal_r+0x121c>
100063cc:	42000204 	addi	r8,r8,8
100063d0:	9080400c 	andi	r2,r18,256
100063d4:	10013a1e 	bne	r2,zero,100068c0 <___vfprintf_internal_r+0xed0>
100063d8:	d9402b17 	ldw	r5,172(sp)
100063dc:	d8801f17 	ldw	r2,124(sp)
100063e0:	44000015 	stw	r16,0(r8)
100063e4:	1947883a 	add	r3,r3,r5
100063e8:	10800044 	addi	r2,r2,1
100063ec:	41400115 	stw	r5,4(r8)
100063f0:	d8c02015 	stw	r3,128(sp)
100063f4:	d8801f15 	stw	r2,124(sp)
100063f8:	010001c4 	movi	r4,7
100063fc:	2081f516 	blt	r4,r2,10006bd4 <___vfprintf_internal_r+0x11e4>
10006400:	42000204 	addi	r8,r8,8
10006404:	9480010c 	andi	r18,r18,4
10006408:	90003226 	beq	r18,zero,100064d4 <___vfprintf_internal_r+0xae4>
1000640c:	d9403117 	ldw	r5,196(sp)
10006410:	d8802917 	ldw	r2,164(sp)
10006414:	28a1c83a 	sub	r16,r5,r2
10006418:	04002e0e 	bge	zero,r16,100064d4 <___vfprintf_internal_r+0xae4>
1000641c:	04400404 	movi	r17,16
10006420:	d8801f17 	ldw	r2,124(sp)
10006424:	8c04c40e 	bge	r17,r16,10007738 <___vfprintf_internal_r+0x1d48>
10006428:	01440074 	movhi	r5,4097
1000642c:	29544284 	addi	r5,r5,20746
10006430:	d9403515 	stw	r5,212(sp)
10006434:	048001c4 	movi	r18,7
10006438:	dcc02d17 	ldw	r19,180(sp)
1000643c:	00000306 	br	1000644c <___vfprintf_internal_r+0xa5c>
10006440:	843ffc04 	addi	r16,r16,-16
10006444:	42000204 	addi	r8,r8,8
10006448:	8c00130e 	bge	r17,r16,10006498 <___vfprintf_internal_r+0xaa8>
1000644c:	01040074 	movhi	r4,4097
10006450:	18c00404 	addi	r3,r3,16
10006454:	10800044 	addi	r2,r2,1
10006458:	21144284 	addi	r4,r4,20746
1000645c:	41000015 	stw	r4,0(r8)
10006460:	44400115 	stw	r17,4(r8)
10006464:	d8c02015 	stw	r3,128(sp)
10006468:	d8801f15 	stw	r2,124(sp)
1000646c:	90bff40e 	bge	r18,r2,10006440 <__alt_data_end+0xf8006440>
10006470:	d9801e04 	addi	r6,sp,120
10006474:	b80b883a 	mov	r5,r23
10006478:	9809883a 	mov	r4,r19
1000647c:	000c76c0 	call	1000c76c <__sprint_r>
10006480:	103e5f1e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
10006484:	843ffc04 	addi	r16,r16,-16
10006488:	d8c02017 	ldw	r3,128(sp)
1000648c:	d8801f17 	ldw	r2,124(sp)
10006490:	da000404 	addi	r8,sp,16
10006494:	8c3fed16 	blt	r17,r16,1000644c <__alt_data_end+0xf800644c>
10006498:	d9403517 	ldw	r5,212(sp)
1000649c:	1c07883a 	add	r3,r3,r16
100064a0:	10800044 	addi	r2,r2,1
100064a4:	41400015 	stw	r5,0(r8)
100064a8:	44000115 	stw	r16,4(r8)
100064ac:	d8c02015 	stw	r3,128(sp)
100064b0:	d8801f15 	stw	r2,124(sp)
100064b4:	010001c4 	movi	r4,7
100064b8:	2080060e 	bge	r4,r2,100064d4 <___vfprintf_internal_r+0xae4>
100064bc:	d9002d17 	ldw	r4,180(sp)
100064c0:	d9801e04 	addi	r6,sp,120
100064c4:	b80b883a 	mov	r5,r23
100064c8:	000c76c0 	call	1000c76c <__sprint_r>
100064cc:	103e4c1e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
100064d0:	d8c02017 	ldw	r3,128(sp)
100064d4:	d8803117 	ldw	r2,196(sp)
100064d8:	d9002917 	ldw	r4,164(sp)
100064dc:	1100010e 	bge	r2,r4,100064e4 <___vfprintf_internal_r+0xaf4>
100064e0:	2005883a 	mov	r2,r4
100064e4:	d9402f17 	ldw	r5,188(sp)
100064e8:	288b883a 	add	r5,r5,r2
100064ec:	d9402f15 	stw	r5,188(sp)
100064f0:	1801c01e 	bne	r3,zero,10006bf4 <___vfprintf_internal_r+0x1204>
100064f4:	a8800007 	ldb	r2,0(r21)
100064f8:	d8001f15 	stw	zero,124(sp)
100064fc:	da000404 	addi	r8,sp,16
10006500:	103d751e 	bne	r2,zero,10005ad8 <__alt_data_end+0xf8005ad8>
10006504:	a823883a 	mov	r17,r21
10006508:	003d8b06 	br	10005b38 <__alt_data_end+0xf8005b38>
1000650c:	8025883a 	mov	r18,r16
10006510:	dc002903 	ldbu	r16,164(sp)
10006514:	e011883a 	mov	r8,fp
10006518:	84003fcc 	andi	r16,r16,255
1000651c:	8005e51e 	bne	r16,zero,10007cb4 <___vfprintf_internal_r+0x22c4>
10006520:	94800414 	ori	r18,r18,16
10006524:	9080080c 	andi	r2,r18,32
10006528:	10022b26 	beq	r2,zero,10006dd8 <___vfprintf_internal_r+0x13e8>
1000652c:	d9002e17 	ldw	r4,184(sp)
10006530:	d9402a17 	ldw	r5,168(sp)
10006534:	d8002785 	stb	zero,158(sp)
10006538:	20c00204 	addi	r3,r4,8
1000653c:	24c00017 	ldw	r19,0(r4)
10006540:	25800117 	ldw	r22,4(r4)
10006544:	28042e16 	blt	r5,zero,10007600 <___vfprintf_internal_r+0x1c10>
10006548:	013fdfc4 	movi	r4,-129
1000654c:	9d84b03a 	or	r2,r19,r22
10006550:	d8c02e15 	stw	r3,184(sp)
10006554:	9124703a 	and	r18,r18,r4
10006558:	0039883a 	mov	fp,zero
1000655c:	103e801e 	bne	r2,zero,10005f60 <__alt_data_end+0xf8005f60>
10006560:	d9002a17 	ldw	r4,168(sp)
10006564:	2002e01e 	bne	r4,zero,100070e8 <___vfprintf_internal_r+0x16f8>
10006568:	d8002a15 	stw	zero,168(sp)
1000656c:	d8002b15 	stw	zero,172(sp)
10006570:	dc001e04 	addi	r16,sp,120
10006574:	003ef506 	br	1000614c <__alt_data_end+0xf800614c>
10006578:	8025883a 	mov	r18,r16
1000657c:	dc002903 	ldbu	r16,164(sp)
10006580:	e011883a 	mov	r8,fp
10006584:	84003fcc 	andi	r16,r16,255
10006588:	8005ba1e 	bne	r16,zero,10007c74 <___vfprintf_internal_r+0x2284>
1000658c:	01040074 	movhi	r4,4097
10006590:	21143204 	addi	r4,r4,20680
10006594:	d9003915 	stw	r4,228(sp)
10006598:	9080080c 	andi	r2,r18,32
1000659c:	10006126 	beq	r2,zero,10006724 <___vfprintf_internal_r+0xd34>
100065a0:	d9402e17 	ldw	r5,184(sp)
100065a4:	2cc00017 	ldw	r19,0(r5)
100065a8:	2d800117 	ldw	r22,4(r5)
100065ac:	29400204 	addi	r5,r5,8
100065b0:	d9402e15 	stw	r5,184(sp)
100065b4:	9080004c 	andi	r2,r18,1
100065b8:	1001ac26 	beq	r2,zero,10006c6c <___vfprintf_internal_r+0x127c>
100065bc:	9d84b03a 	or	r2,r19,r22
100065c0:	10038526 	beq	r2,zero,100073d8 <___vfprintf_internal_r+0x19e8>
100065c4:	d8c02a17 	ldw	r3,168(sp)
100065c8:	00800c04 	movi	r2,48
100065cc:	d8802705 	stb	r2,156(sp)
100065d0:	dc402745 	stb	r17,157(sp)
100065d4:	d8002785 	stb	zero,158(sp)
100065d8:	90800094 	ori	r2,r18,2
100065dc:	18047916 	blt	r3,zero,100077c4 <___vfprintf_internal_r+0x1dd4>
100065e0:	00bfdfc4 	movi	r2,-129
100065e4:	90a4703a 	and	r18,r18,r2
100065e8:	94800094 	ori	r18,r18,2
100065ec:	0039883a 	mov	fp,zero
100065f0:	d9003917 	ldw	r4,228(sp)
100065f4:	dc001e04 	addi	r16,sp,120
100065f8:	988003cc 	andi	r2,r19,15
100065fc:	b006973a 	slli	r3,r22,28
10006600:	2085883a 	add	r2,r4,r2
10006604:	9826d13a 	srli	r19,r19,4
10006608:	10800003 	ldbu	r2,0(r2)
1000660c:	b02cd13a 	srli	r22,r22,4
10006610:	843fffc4 	addi	r16,r16,-1
10006614:	1ce6b03a 	or	r19,r3,r19
10006618:	80800005 	stb	r2,0(r16)
1000661c:	9d84b03a 	or	r2,r19,r22
10006620:	103ff51e 	bne	r2,zero,100065f8 <__alt_data_end+0xf80065f8>
10006624:	d8c02817 	ldw	r3,160(sp)
10006628:	1c07c83a 	sub	r3,r3,r16
1000662c:	d8c02b15 	stw	r3,172(sp)
10006630:	003ec606 	br	1000614c <__alt_data_end+0xf800614c>
10006634:	8025883a 	mov	r18,r16
10006638:	dc002903 	ldbu	r16,164(sp)
1000663c:	e011883a 	mov	r8,fp
10006640:	84003fcc 	andi	r16,r16,255
10006644:	803e9626 	beq	r16,zero,100060a0 <__alt_data_end+0xf80060a0>
10006648:	d8c02b03 	ldbu	r3,172(sp)
1000664c:	d8c02785 	stb	r3,158(sp)
10006650:	003e9306 	br	100060a0 <__alt_data_end+0xf80060a0>
10006654:	00c00044 	movi	r3,1
10006658:	d8c02905 	stb	r3,164(sp)
1000665c:	00c00ac4 	movi	r3,43
10006660:	d8c02b05 	stb	r3,172(sp)
10006664:	ac400007 	ldb	r17,0(r21)
10006668:	003d4306 	br	10005b78 <__alt_data_end+0xf8005b78>
1000666c:	84000814 	ori	r16,r16,32
10006670:	ac400007 	ldb	r17,0(r21)
10006674:	003d4006 	br	10005b78 <__alt_data_end+0xf8005b78>
10006678:	d8802e17 	ldw	r2,184(sp)
1000667c:	8025883a 	mov	r18,r16
10006680:	d8002785 	stb	zero,158(sp)
10006684:	14000017 	ldw	r16,0(r2)
10006688:	e011883a 	mov	r8,fp
1000668c:	14c00104 	addi	r19,r2,4
10006690:	80042d26 	beq	r16,zero,10007748 <___vfprintf_internal_r+0x1d58>
10006694:	d8c02a17 	ldw	r3,168(sp)
10006698:	1803e416 	blt	r3,zero,1000762c <___vfprintf_internal_r+0x1c3c>
1000669c:	180d883a 	mov	r6,r3
100066a0:	000b883a 	mov	r5,zero
100066a4:	8009883a 	mov	r4,r16
100066a8:	df003d15 	stw	fp,244(sp)
100066ac:	000ab1c0 	call	1000ab1c <memchr>
100066b0:	da003d17 	ldw	r8,244(sp)
100066b4:	10046826 	beq	r2,zero,10007858 <___vfprintf_internal_r+0x1e68>
100066b8:	1405c83a 	sub	r2,r2,r16
100066bc:	d8802b15 	stw	r2,172(sp)
100066c0:	1003e016 	blt	r2,zero,10007644 <___vfprintf_internal_r+0x1c54>
100066c4:	df002783 	ldbu	fp,158(sp)
100066c8:	d8802915 	stw	r2,164(sp)
100066cc:	dcc02e15 	stw	r19,184(sp)
100066d0:	d8002a15 	stw	zero,168(sp)
100066d4:	d8003215 	stw	zero,200(sp)
100066d8:	003ea206 	br	10006164 <__alt_data_end+0xf8006164>
100066dc:	8025883a 	mov	r18,r16
100066e0:	dc002903 	ldbu	r16,164(sp)
100066e4:	e011883a 	mov	r8,fp
100066e8:	84003fcc 	andi	r16,r16,255
100066ec:	803f8d26 	beq	r16,zero,10006524 <__alt_data_end+0xf8006524>
100066f0:	d8c02b03 	ldbu	r3,172(sp)
100066f4:	d8c02785 	stb	r3,158(sp)
100066f8:	003f8a06 	br	10006524 <__alt_data_end+0xf8006524>
100066fc:	8025883a 	mov	r18,r16
10006700:	dc002903 	ldbu	r16,164(sp)
10006704:	e011883a 	mov	r8,fp
10006708:	84003fcc 	andi	r16,r16,255
1000670c:	8005661e 	bne	r16,zero,10007ca8 <___vfprintf_internal_r+0x22b8>
10006710:	01040074 	movhi	r4,4097
10006714:	21143704 	addi	r4,r4,20700
10006718:	d9003915 	stw	r4,228(sp)
1000671c:	9080080c 	andi	r2,r18,32
10006720:	103f9f1e 	bne	r2,zero,100065a0 <__alt_data_end+0xf80065a0>
10006724:	9080040c 	andi	r2,r18,16
10006728:	1002eb26 	beq	r2,zero,100072d8 <___vfprintf_internal_r+0x18e8>
1000672c:	d8802e17 	ldw	r2,184(sp)
10006730:	002d883a 	mov	r22,zero
10006734:	14c00017 	ldw	r19,0(r2)
10006738:	10800104 	addi	r2,r2,4
1000673c:	d8802e15 	stw	r2,184(sp)
10006740:	003f9c06 	br	100065b4 <__alt_data_end+0xf80065b4>
10006744:	d8802b07 	ldb	r2,172(sp)
10006748:	1002e11e 	bne	r2,zero,100072d0 <___vfprintf_internal_r+0x18e0>
1000674c:	00c00044 	movi	r3,1
10006750:	d8c02905 	stb	r3,164(sp)
10006754:	00c00804 	movi	r3,32
10006758:	d8c02b05 	stb	r3,172(sp)
1000675c:	ac400007 	ldb	r17,0(r21)
10006760:	003d0506 	br	10005b78 <__alt_data_end+0xf8005b78>
10006764:	84000054 	ori	r16,r16,1
10006768:	ac400007 	ldb	r17,0(r21)
1000676c:	003d0206 	br	10005b78 <__alt_data_end+0xf8005b78>
10006770:	8025883a 	mov	r18,r16
10006774:	dc002903 	ldbu	r16,164(sp)
10006778:	e011883a 	mov	r8,fp
1000677c:	84003fcc 	andi	r16,r16,255
10006780:	803de726 	beq	r16,zero,10005f20 <__alt_data_end+0xf8005f20>
10006784:	d8c02b03 	ldbu	r3,172(sp)
10006788:	d8c02785 	stb	r3,158(sp)
1000678c:	003de406 	br	10005f20 <__alt_data_end+0xf8005f20>
10006790:	84001014 	ori	r16,r16,64
10006794:	ac400007 	ldb	r17,0(r21)
10006798:	003cf706 	br	10005b78 <__alt_data_end+0xf8005b78>
1000679c:	ac400007 	ldb	r17,0(r21)
100067a0:	00801b04 	movi	r2,108
100067a4:	88838f26 	beq	r17,r2,100075e4 <___vfprintf_internal_r+0x1bf4>
100067a8:	84000414 	ori	r16,r16,16
100067ac:	003cf206 	br	10005b78 <__alt_data_end+0xf8005b78>
100067b0:	8025883a 	mov	r18,r16
100067b4:	dc002903 	ldbu	r16,164(sp)
100067b8:	e011883a 	mov	r8,fp
100067bc:	84003fcc 	andi	r16,r16,255
100067c0:	80053f1e 	bne	r16,zero,10007cc0 <___vfprintf_internal_r+0x22d0>
100067c4:	9080080c 	andi	r2,r18,32
100067c8:	1002d226 	beq	r2,zero,10007314 <___vfprintf_internal_r+0x1924>
100067cc:	d9002e17 	ldw	r4,184(sp)
100067d0:	d9402f17 	ldw	r5,188(sp)
100067d4:	20800017 	ldw	r2,0(r4)
100067d8:	2807d7fa 	srai	r3,r5,31
100067dc:	21000104 	addi	r4,r4,4
100067e0:	d9002e15 	stw	r4,184(sp)
100067e4:	11400015 	stw	r5,0(r2)
100067e8:	10c00115 	stw	r3,4(r2)
100067ec:	003cb806 	br	10005ad0 <__alt_data_end+0xf8005ad0>
100067f0:	d8c02e17 	ldw	r3,184(sp)
100067f4:	d9002e17 	ldw	r4,184(sp)
100067f8:	8025883a 	mov	r18,r16
100067fc:	18800017 	ldw	r2,0(r3)
10006800:	21000104 	addi	r4,r4,4
10006804:	00c00044 	movi	r3,1
10006808:	e011883a 	mov	r8,fp
1000680c:	d8c02915 	stw	r3,164(sp)
10006810:	d8002785 	stb	zero,158(sp)
10006814:	d8801405 	stb	r2,80(sp)
10006818:	d9002e15 	stw	r4,184(sp)
1000681c:	d8c02b15 	stw	r3,172(sp)
10006820:	d8002a15 	stw	zero,168(sp)
10006824:	d8003215 	stw	zero,200(sp)
10006828:	dc001404 	addi	r16,sp,80
1000682c:	0039883a 	mov	fp,zero
10006830:	003e5306 	br	10006180 <__alt_data_end+0xf8006180>
10006834:	01040074 	movhi	r4,4097
10006838:	21143704 	addi	r4,r4,20700
1000683c:	0039883a 	mov	fp,zero
10006840:	d9003915 	stw	r4,228(sp)
10006844:	04401e04 	movi	r17,120
10006848:	003f6906 	br	100065f0 <__alt_data_end+0xf80065f0>
1000684c:	8025883a 	mov	r18,r16
10006850:	dc002903 	ldbu	r16,164(sp)
10006854:	e011883a 	mov	r8,fp
10006858:	84003fcc 	andi	r16,r16,255
1000685c:	8005081e 	bne	r16,zero,10007c80 <___vfprintf_internal_r+0x2290>
10006860:	883d6126 	beq	r17,zero,10005de8 <__alt_data_end+0xf8005de8>
10006864:	00c00044 	movi	r3,1
10006868:	d8c02915 	stw	r3,164(sp)
1000686c:	dc401405 	stb	r17,80(sp)
10006870:	d8002785 	stb	zero,158(sp)
10006874:	003fe906 	br	1000681c <__alt_data_end+0xf800681c>
10006878:	01440074 	movhi	r5,4097
1000687c:	29543704 	addi	r5,r5,20700
10006880:	d9403915 	stw	r5,228(sp)
10006884:	d8c02e15 	stw	r3,184(sp)
10006888:	1025883a 	mov	r18,r2
1000688c:	04401e04 	movi	r17,120
10006890:	9d84b03a 	or	r2,r19,r22
10006894:	1000fc1e 	bne	r2,zero,10006c88 <___vfprintf_internal_r+0x1298>
10006898:	0039883a 	mov	fp,zero
1000689c:	00800084 	movi	r2,2
100068a0:	10803fcc 	andi	r2,r2,255
100068a4:	00c00044 	movi	r3,1
100068a8:	10c20f26 	beq	r2,r3,100070e8 <___vfprintf_internal_r+0x16f8>
100068ac:	00c00084 	movi	r3,2
100068b0:	10fd3326 	beq	r2,r3,10005d80 <__alt_data_end+0xf8005d80>
100068b4:	003e0b06 	br	100060e4 <__alt_data_end+0xf80060e4>
100068b8:	d8c02017 	ldw	r3,128(sp)
100068bc:	003e7106 	br	10006284 <__alt_data_end+0xf8006284>
100068c0:	00801944 	movi	r2,101
100068c4:	14407e0e 	bge	r2,r17,10006ac0 <___vfprintf_internal_r+0x10d0>
100068c8:	d9003617 	ldw	r4,216(sp)
100068cc:	d9403817 	ldw	r5,224(sp)
100068d0:	000d883a 	mov	r6,zero
100068d4:	000f883a 	mov	r7,zero
100068d8:	d8c03c15 	stw	r3,240(sp)
100068dc:	da003d15 	stw	r8,244(sp)
100068e0:	00106a40 	call	100106a4 <__eqdf2>
100068e4:	d8c03c17 	ldw	r3,240(sp)
100068e8:	da003d17 	ldw	r8,244(sp)
100068ec:	1000f71e 	bne	r2,zero,10006ccc <___vfprintf_internal_r+0x12dc>
100068f0:	d8801f17 	ldw	r2,124(sp)
100068f4:	01040074 	movhi	r4,4097
100068f8:	21143e04 	addi	r4,r4,20728
100068fc:	18c00044 	addi	r3,r3,1
10006900:	10800044 	addi	r2,r2,1
10006904:	41000015 	stw	r4,0(r8)
10006908:	01000044 	movi	r4,1
1000690c:	41000115 	stw	r4,4(r8)
10006910:	d8c02015 	stw	r3,128(sp)
10006914:	d8801f15 	stw	r2,124(sp)
10006918:	010001c4 	movi	r4,7
1000691c:	2082b816 	blt	r4,r2,10007400 <___vfprintf_internal_r+0x1a10>
10006920:	42000204 	addi	r8,r8,8
10006924:	d8802617 	ldw	r2,152(sp)
10006928:	d9403317 	ldw	r5,204(sp)
1000692c:	11400216 	blt	r2,r5,10006938 <___vfprintf_internal_r+0xf48>
10006930:	9080004c 	andi	r2,r18,1
10006934:	103eb326 	beq	r2,zero,10006404 <__alt_data_end+0xf8006404>
10006938:	d8803717 	ldw	r2,220(sp)
1000693c:	d9003417 	ldw	r4,208(sp)
10006940:	d9403717 	ldw	r5,220(sp)
10006944:	1887883a 	add	r3,r3,r2
10006948:	d8801f17 	ldw	r2,124(sp)
1000694c:	41000015 	stw	r4,0(r8)
10006950:	41400115 	stw	r5,4(r8)
10006954:	10800044 	addi	r2,r2,1
10006958:	d8c02015 	stw	r3,128(sp)
1000695c:	d8801f15 	stw	r2,124(sp)
10006960:	010001c4 	movi	r4,7
10006964:	20832916 	blt	r4,r2,1000760c <___vfprintf_internal_r+0x1c1c>
10006968:	42000204 	addi	r8,r8,8
1000696c:	d8803317 	ldw	r2,204(sp)
10006970:	143fffc4 	addi	r16,r2,-1
10006974:	043ea30e 	bge	zero,r16,10006404 <__alt_data_end+0xf8006404>
10006978:	04400404 	movi	r17,16
1000697c:	d8801f17 	ldw	r2,124(sp)
10006980:	8c00880e 	bge	r17,r16,10006ba4 <___vfprintf_internal_r+0x11b4>
10006984:	01440074 	movhi	r5,4097
10006988:	29543e84 	addi	r5,r5,20730
1000698c:	d9402c15 	stw	r5,176(sp)
10006990:	058001c4 	movi	r22,7
10006994:	dcc02d17 	ldw	r19,180(sp)
10006998:	00000306 	br	100069a8 <___vfprintf_internal_r+0xfb8>
1000699c:	42000204 	addi	r8,r8,8
100069a0:	843ffc04 	addi	r16,r16,-16
100069a4:	8c00820e 	bge	r17,r16,10006bb0 <___vfprintf_internal_r+0x11c0>
100069a8:	18c00404 	addi	r3,r3,16
100069ac:	10800044 	addi	r2,r2,1
100069b0:	45000015 	stw	r20,0(r8)
100069b4:	44400115 	stw	r17,4(r8)
100069b8:	d8c02015 	stw	r3,128(sp)
100069bc:	d8801f15 	stw	r2,124(sp)
100069c0:	b0bff60e 	bge	r22,r2,1000699c <__alt_data_end+0xf800699c>
100069c4:	d9801e04 	addi	r6,sp,120
100069c8:	b80b883a 	mov	r5,r23
100069cc:	9809883a 	mov	r4,r19
100069d0:	000c76c0 	call	1000c76c <__sprint_r>
100069d4:	103d0a1e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
100069d8:	d8c02017 	ldw	r3,128(sp)
100069dc:	d8801f17 	ldw	r2,124(sp)
100069e0:	da000404 	addi	r8,sp,16
100069e4:	003fee06 	br	100069a0 <__alt_data_end+0xf80069a0>
100069e8:	d9403117 	ldw	r5,196(sp)
100069ec:	d8802917 	ldw	r2,164(sp)
100069f0:	28adc83a 	sub	r22,r5,r2
100069f4:	05be410e 	bge	zero,r22,100062fc <__alt_data_end+0xf80062fc>
100069f8:	07000404 	movi	fp,16
100069fc:	d8801f17 	ldw	r2,124(sp)
10006a00:	e5838f0e 	bge	fp,r22,10007840 <___vfprintf_internal_r+0x1e50>
10006a04:	01440074 	movhi	r5,4097
10006a08:	29543e84 	addi	r5,r5,20730
10006a0c:	dc403015 	stw	r17,192(sp)
10006a10:	d9402c15 	stw	r5,176(sp)
10006a14:	b023883a 	mov	r17,r22
10006a18:	04c001c4 	movi	r19,7
10006a1c:	a82d883a 	mov	r22,r21
10006a20:	902b883a 	mov	r21,r18
10006a24:	8025883a 	mov	r18,r16
10006a28:	dc002d17 	ldw	r16,180(sp)
10006a2c:	00000306 	br	10006a3c <___vfprintf_internal_r+0x104c>
10006a30:	8c7ffc04 	addi	r17,r17,-16
10006a34:	42000204 	addi	r8,r8,8
10006a38:	e440110e 	bge	fp,r17,10006a80 <___vfprintf_internal_r+0x1090>
10006a3c:	18c00404 	addi	r3,r3,16
10006a40:	10800044 	addi	r2,r2,1
10006a44:	45000015 	stw	r20,0(r8)
10006a48:	47000115 	stw	fp,4(r8)
10006a4c:	d8c02015 	stw	r3,128(sp)
10006a50:	d8801f15 	stw	r2,124(sp)
10006a54:	98bff60e 	bge	r19,r2,10006a30 <__alt_data_end+0xf8006a30>
10006a58:	d9801e04 	addi	r6,sp,120
10006a5c:	b80b883a 	mov	r5,r23
10006a60:	8009883a 	mov	r4,r16
10006a64:	000c76c0 	call	1000c76c <__sprint_r>
10006a68:	103ce51e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
10006a6c:	8c7ffc04 	addi	r17,r17,-16
10006a70:	d8c02017 	ldw	r3,128(sp)
10006a74:	d8801f17 	ldw	r2,124(sp)
10006a78:	da000404 	addi	r8,sp,16
10006a7c:	e47fef16 	blt	fp,r17,10006a3c <__alt_data_end+0xf8006a3c>
10006a80:	9021883a 	mov	r16,r18
10006a84:	a825883a 	mov	r18,r21
10006a88:	b02b883a 	mov	r21,r22
10006a8c:	882d883a 	mov	r22,r17
10006a90:	dc403017 	ldw	r17,192(sp)
10006a94:	d9002c17 	ldw	r4,176(sp)
10006a98:	1d87883a 	add	r3,r3,r22
10006a9c:	10800044 	addi	r2,r2,1
10006aa0:	41000015 	stw	r4,0(r8)
10006aa4:	45800115 	stw	r22,4(r8)
10006aa8:	d8c02015 	stw	r3,128(sp)
10006aac:	d8801f15 	stw	r2,124(sp)
10006ab0:	010001c4 	movi	r4,7
10006ab4:	20818e16 	blt	r4,r2,100070f0 <___vfprintf_internal_r+0x1700>
10006ab8:	42000204 	addi	r8,r8,8
10006abc:	003e0f06 	br	100062fc <__alt_data_end+0xf80062fc>
10006ac0:	d9403317 	ldw	r5,204(sp)
10006ac4:	00800044 	movi	r2,1
10006ac8:	18c00044 	addi	r3,r3,1
10006acc:	1141530e 	bge	r2,r5,1000701c <___vfprintf_internal_r+0x162c>
10006ad0:	dc401f17 	ldw	r17,124(sp)
10006ad4:	00800044 	movi	r2,1
10006ad8:	40800115 	stw	r2,4(r8)
10006adc:	8c400044 	addi	r17,r17,1
10006ae0:	44000015 	stw	r16,0(r8)
10006ae4:	d8c02015 	stw	r3,128(sp)
10006ae8:	dc401f15 	stw	r17,124(sp)
10006aec:	008001c4 	movi	r2,7
10006af0:	14416b16 	blt	r2,r17,100070a0 <___vfprintf_internal_r+0x16b0>
10006af4:	42000204 	addi	r8,r8,8
10006af8:	d8803717 	ldw	r2,220(sp)
10006afc:	d9003417 	ldw	r4,208(sp)
10006b00:	8c400044 	addi	r17,r17,1
10006b04:	10c7883a 	add	r3,r2,r3
10006b08:	40800115 	stw	r2,4(r8)
10006b0c:	41000015 	stw	r4,0(r8)
10006b10:	d8c02015 	stw	r3,128(sp)
10006b14:	dc401f15 	stw	r17,124(sp)
10006b18:	008001c4 	movi	r2,7
10006b1c:	14416916 	blt	r2,r17,100070c4 <___vfprintf_internal_r+0x16d4>
10006b20:	45800204 	addi	r22,r8,8
10006b24:	d9003617 	ldw	r4,216(sp)
10006b28:	d9403817 	ldw	r5,224(sp)
10006b2c:	000d883a 	mov	r6,zero
10006b30:	000f883a 	mov	r7,zero
10006b34:	d8c03c15 	stw	r3,240(sp)
10006b38:	00106a40 	call	100106a4 <__eqdf2>
10006b3c:	d8c03c17 	ldw	r3,240(sp)
10006b40:	1000bc26 	beq	r2,zero,10006e34 <___vfprintf_internal_r+0x1444>
10006b44:	d9403317 	ldw	r5,204(sp)
10006b48:	84000044 	addi	r16,r16,1
10006b4c:	8c400044 	addi	r17,r17,1
10006b50:	28bfffc4 	addi	r2,r5,-1
10006b54:	1887883a 	add	r3,r3,r2
10006b58:	b0800115 	stw	r2,4(r22)
10006b5c:	b4000015 	stw	r16,0(r22)
10006b60:	d8c02015 	stw	r3,128(sp)
10006b64:	dc401f15 	stw	r17,124(sp)
10006b68:	008001c4 	movi	r2,7
10006b6c:	14414316 	blt	r2,r17,1000707c <___vfprintf_internal_r+0x168c>
10006b70:	b5800204 	addi	r22,r22,8
10006b74:	d9003a17 	ldw	r4,232(sp)
10006b78:	df0022c4 	addi	fp,sp,139
10006b7c:	8c400044 	addi	r17,r17,1
10006b80:	20c7883a 	add	r3,r4,r3
10006b84:	b7000015 	stw	fp,0(r22)
10006b88:	b1000115 	stw	r4,4(r22)
10006b8c:	d8c02015 	stw	r3,128(sp)
10006b90:	dc401f15 	stw	r17,124(sp)
10006b94:	008001c4 	movi	r2,7
10006b98:	14400e16 	blt	r2,r17,10006bd4 <___vfprintf_internal_r+0x11e4>
10006b9c:	b2000204 	addi	r8,r22,8
10006ba0:	003e1806 	br	10006404 <__alt_data_end+0xf8006404>
10006ba4:	01040074 	movhi	r4,4097
10006ba8:	21143e84 	addi	r4,r4,20730
10006bac:	d9002c15 	stw	r4,176(sp)
10006bb0:	d9002c17 	ldw	r4,176(sp)
10006bb4:	1c07883a 	add	r3,r3,r16
10006bb8:	44000115 	stw	r16,4(r8)
10006bbc:	41000015 	stw	r4,0(r8)
10006bc0:	10800044 	addi	r2,r2,1
10006bc4:	d8c02015 	stw	r3,128(sp)
10006bc8:	d8801f15 	stw	r2,124(sp)
10006bcc:	010001c4 	movi	r4,7
10006bd0:	20be0b0e 	bge	r4,r2,10006400 <__alt_data_end+0xf8006400>
10006bd4:	d9002d17 	ldw	r4,180(sp)
10006bd8:	d9801e04 	addi	r6,sp,120
10006bdc:	b80b883a 	mov	r5,r23
10006be0:	000c76c0 	call	1000c76c <__sprint_r>
10006be4:	103c861e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
10006be8:	d8c02017 	ldw	r3,128(sp)
10006bec:	da000404 	addi	r8,sp,16
10006bf0:	003e0406 	br	10006404 <__alt_data_end+0xf8006404>
10006bf4:	d9002d17 	ldw	r4,180(sp)
10006bf8:	d9801e04 	addi	r6,sp,120
10006bfc:	b80b883a 	mov	r5,r23
10006c00:	000c76c0 	call	1000c76c <__sprint_r>
10006c04:	103e3b26 	beq	r2,zero,100064f4 <__alt_data_end+0xf80064f4>
10006c08:	003c7d06 	br	10005e00 <__alt_data_end+0xf8005e00>
10006c0c:	d9002d17 	ldw	r4,180(sp)
10006c10:	d9801e04 	addi	r6,sp,120
10006c14:	b80b883a 	mov	r5,r23
10006c18:	000c76c0 	call	1000c76c <__sprint_r>
10006c1c:	103c781e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
10006c20:	d8c02017 	ldw	r3,128(sp)
10006c24:	da000404 	addi	r8,sp,16
10006c28:	003de906 	br	100063d0 <__alt_data_end+0xf80063d0>
10006c2c:	d9002d17 	ldw	r4,180(sp)
10006c30:	d9801e04 	addi	r6,sp,120
10006c34:	b80b883a 	mov	r5,r23
10006c38:	000c76c0 	call	1000c76c <__sprint_r>
10006c3c:	103c701e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
10006c40:	d8c02017 	ldw	r3,128(sp)
10006c44:	da000404 	addi	r8,sp,16
10006c48:	003d9b06 	br	100062b8 <__alt_data_end+0xf80062b8>
10006c4c:	d9002d17 	ldw	r4,180(sp)
10006c50:	d9801e04 	addi	r6,sp,120
10006c54:	b80b883a 	mov	r5,r23
10006c58:	000c76c0 	call	1000c76c <__sprint_r>
10006c5c:	103c681e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
10006c60:	d8c02017 	ldw	r3,128(sp)
10006c64:	da000404 	addi	r8,sp,16
10006c68:	003da106 	br	100062f0 <__alt_data_end+0xf80062f0>
10006c6c:	d9402a17 	ldw	r5,168(sp)
10006c70:	d8002785 	stb	zero,158(sp)
10006c74:	283f0616 	blt	r5,zero,10006890 <__alt_data_end+0xf8006890>
10006c78:	00ffdfc4 	movi	r3,-129
10006c7c:	9d84b03a 	or	r2,r19,r22
10006c80:	90e4703a 	and	r18,r18,r3
10006c84:	103c3b26 	beq	r2,zero,10005d74 <__alt_data_end+0xf8005d74>
10006c88:	0039883a 	mov	fp,zero
10006c8c:	003e5806 	br	100065f0 <__alt_data_end+0xf80065f0>
10006c90:	9080040c 	andi	r2,r18,16
10006c94:	1001b326 	beq	r2,zero,10007364 <___vfprintf_internal_r+0x1974>
10006c98:	d8c02e17 	ldw	r3,184(sp)
10006c9c:	d9002a17 	ldw	r4,168(sp)
10006ca0:	d8002785 	stb	zero,158(sp)
10006ca4:	18800104 	addi	r2,r3,4
10006ca8:	1cc00017 	ldw	r19,0(r3)
10006cac:	002d883a 	mov	r22,zero
10006cb0:	2001b516 	blt	r4,zero,10007388 <___vfprintf_internal_r+0x1998>
10006cb4:	00ffdfc4 	movi	r3,-129
10006cb8:	d8802e15 	stw	r2,184(sp)
10006cbc:	90e4703a 	and	r18,r18,r3
10006cc0:	983d0526 	beq	r19,zero,100060d8 <__alt_data_end+0xf80060d8>
10006cc4:	0039883a 	mov	fp,zero
10006cc8:	003d0806 	br	100060ec <__alt_data_end+0xf80060ec>
10006ccc:	dc402617 	ldw	r17,152(sp)
10006cd0:	0441d30e 	bge	zero,r17,10007420 <___vfprintf_internal_r+0x1a30>
10006cd4:	dc403217 	ldw	r17,200(sp)
10006cd8:	d8803317 	ldw	r2,204(sp)
10006cdc:	1440010e 	bge	r2,r17,10006ce4 <___vfprintf_internal_r+0x12f4>
10006ce0:	1023883a 	mov	r17,r2
10006ce4:	04400a0e 	bge	zero,r17,10006d10 <___vfprintf_internal_r+0x1320>
10006ce8:	d8801f17 	ldw	r2,124(sp)
10006cec:	1c47883a 	add	r3,r3,r17
10006cf0:	44000015 	stw	r16,0(r8)
10006cf4:	10800044 	addi	r2,r2,1
10006cf8:	44400115 	stw	r17,4(r8)
10006cfc:	d8c02015 	stw	r3,128(sp)
10006d00:	d8801f15 	stw	r2,124(sp)
10006d04:	010001c4 	movi	r4,7
10006d08:	20826516 	blt	r4,r2,100076a0 <___vfprintf_internal_r+0x1cb0>
10006d0c:	42000204 	addi	r8,r8,8
10006d10:	88026116 	blt	r17,zero,10007698 <___vfprintf_internal_r+0x1ca8>
10006d14:	d9003217 	ldw	r4,200(sp)
10006d18:	2463c83a 	sub	r17,r4,r17
10006d1c:	04407b0e 	bge	zero,r17,10006f0c <___vfprintf_internal_r+0x151c>
10006d20:	05800404 	movi	r22,16
10006d24:	d8801f17 	ldw	r2,124(sp)
10006d28:	b4419d0e 	bge	r22,r17,100073a0 <___vfprintf_internal_r+0x19b0>
10006d2c:	01040074 	movhi	r4,4097
10006d30:	21143e84 	addi	r4,r4,20730
10006d34:	d9002c15 	stw	r4,176(sp)
10006d38:	070001c4 	movi	fp,7
10006d3c:	dcc02d17 	ldw	r19,180(sp)
10006d40:	00000306 	br	10006d50 <___vfprintf_internal_r+0x1360>
10006d44:	42000204 	addi	r8,r8,8
10006d48:	8c7ffc04 	addi	r17,r17,-16
10006d4c:	b441970e 	bge	r22,r17,100073ac <___vfprintf_internal_r+0x19bc>
10006d50:	18c00404 	addi	r3,r3,16
10006d54:	10800044 	addi	r2,r2,1
10006d58:	45000015 	stw	r20,0(r8)
10006d5c:	45800115 	stw	r22,4(r8)
10006d60:	d8c02015 	stw	r3,128(sp)
10006d64:	d8801f15 	stw	r2,124(sp)
10006d68:	e0bff60e 	bge	fp,r2,10006d44 <__alt_data_end+0xf8006d44>
10006d6c:	d9801e04 	addi	r6,sp,120
10006d70:	b80b883a 	mov	r5,r23
10006d74:	9809883a 	mov	r4,r19
10006d78:	000c76c0 	call	1000c76c <__sprint_r>
10006d7c:	103c201e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
10006d80:	d8c02017 	ldw	r3,128(sp)
10006d84:	d8801f17 	ldw	r2,124(sp)
10006d88:	da000404 	addi	r8,sp,16
10006d8c:	003fee06 	br	10006d48 <__alt_data_end+0xf8006d48>
10006d90:	d9002d17 	ldw	r4,180(sp)
10006d94:	d9801e04 	addi	r6,sp,120
10006d98:	b80b883a 	mov	r5,r23
10006d9c:	000c76c0 	call	1000c76c <__sprint_r>
10006da0:	103c171e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
10006da4:	d8c02017 	ldw	r3,128(sp)
10006da8:	df002787 	ldb	fp,158(sp)
10006dac:	da000404 	addi	r8,sp,16
10006db0:	003d3406 	br	10006284 <__alt_data_end+0xf8006284>
10006db4:	9080040c 	andi	r2,r18,16
10006db8:	10016126 	beq	r2,zero,10007340 <___vfprintf_internal_r+0x1950>
10006dbc:	d9402e17 	ldw	r5,184(sp)
10006dc0:	2cc00017 	ldw	r19,0(r5)
10006dc4:	29400104 	addi	r5,r5,4
10006dc8:	d9402e15 	stw	r5,184(sp)
10006dcc:	982dd7fa 	srai	r22,r19,31
10006dd0:	b005883a 	mov	r2,r22
10006dd4:	003c5a06 	br	10005f40 <__alt_data_end+0xf8005f40>
10006dd8:	9080040c 	andi	r2,r18,16
10006ddc:	10003526 	beq	r2,zero,10006eb4 <___vfprintf_internal_r+0x14c4>
10006de0:	d8c02e17 	ldw	r3,184(sp)
10006de4:	d9002a17 	ldw	r4,168(sp)
10006de8:	d8002785 	stb	zero,158(sp)
10006dec:	18800104 	addi	r2,r3,4
10006df0:	1cc00017 	ldw	r19,0(r3)
10006df4:	002d883a 	mov	r22,zero
10006df8:	20003716 	blt	r4,zero,10006ed8 <___vfprintf_internal_r+0x14e8>
10006dfc:	00ffdfc4 	movi	r3,-129
10006e00:	d8802e15 	stw	r2,184(sp)
10006e04:	90e4703a 	and	r18,r18,r3
10006e08:	0039883a 	mov	fp,zero
10006e0c:	983dd426 	beq	r19,zero,10006560 <__alt_data_end+0xf8006560>
10006e10:	00800244 	movi	r2,9
10006e14:	14fc5336 	bltu	r2,r19,10005f64 <__alt_data_end+0xf8005f64>
10006e18:	d8c02817 	ldw	r3,160(sp)
10006e1c:	dc001dc4 	addi	r16,sp,119
10006e20:	9cc00c04 	addi	r19,r19,48
10006e24:	1c07c83a 	sub	r3,r3,r16
10006e28:	dcc01dc5 	stb	r19,119(sp)
10006e2c:	d8c02b15 	stw	r3,172(sp)
10006e30:	003cc606 	br	1000614c <__alt_data_end+0xf800614c>
10006e34:	d8803317 	ldw	r2,204(sp)
10006e38:	143fffc4 	addi	r16,r2,-1
10006e3c:	043f4d0e 	bge	zero,r16,10006b74 <__alt_data_end+0xf8006b74>
10006e40:	07000404 	movi	fp,16
10006e44:	e400810e 	bge	fp,r16,1000704c <___vfprintf_internal_r+0x165c>
10006e48:	01440074 	movhi	r5,4097
10006e4c:	29543e84 	addi	r5,r5,20730
10006e50:	d9402c15 	stw	r5,176(sp)
10006e54:	01c001c4 	movi	r7,7
10006e58:	dcc02d17 	ldw	r19,180(sp)
10006e5c:	00000306 	br	10006e6c <___vfprintf_internal_r+0x147c>
10006e60:	b5800204 	addi	r22,r22,8
10006e64:	843ffc04 	addi	r16,r16,-16
10006e68:	e4007b0e 	bge	fp,r16,10007058 <___vfprintf_internal_r+0x1668>
10006e6c:	18c00404 	addi	r3,r3,16
10006e70:	8c400044 	addi	r17,r17,1
10006e74:	b5000015 	stw	r20,0(r22)
10006e78:	b7000115 	stw	fp,4(r22)
10006e7c:	d8c02015 	stw	r3,128(sp)
10006e80:	dc401f15 	stw	r17,124(sp)
10006e84:	3c7ff60e 	bge	r7,r17,10006e60 <__alt_data_end+0xf8006e60>
10006e88:	d9801e04 	addi	r6,sp,120
10006e8c:	b80b883a 	mov	r5,r23
10006e90:	9809883a 	mov	r4,r19
10006e94:	d9c03c15 	stw	r7,240(sp)
10006e98:	000c76c0 	call	1000c76c <__sprint_r>
10006e9c:	d9c03c17 	ldw	r7,240(sp)
10006ea0:	103bd71e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
10006ea4:	d8c02017 	ldw	r3,128(sp)
10006ea8:	dc401f17 	ldw	r17,124(sp)
10006eac:	dd800404 	addi	r22,sp,16
10006eb0:	003fec06 	br	10006e64 <__alt_data_end+0xf8006e64>
10006eb4:	9080100c 	andi	r2,r18,64
10006eb8:	d8002785 	stb	zero,158(sp)
10006ebc:	10010e26 	beq	r2,zero,100072f8 <___vfprintf_internal_r+0x1908>
10006ec0:	d9402e17 	ldw	r5,184(sp)
10006ec4:	d8c02a17 	ldw	r3,168(sp)
10006ec8:	002d883a 	mov	r22,zero
10006ecc:	28800104 	addi	r2,r5,4
10006ed0:	2cc0000b 	ldhu	r19,0(r5)
10006ed4:	183fc90e 	bge	r3,zero,10006dfc <__alt_data_end+0xf8006dfc>
10006ed8:	d8802e15 	stw	r2,184(sp)
10006edc:	0039883a 	mov	fp,zero
10006ee0:	9d84b03a 	or	r2,r19,r22
10006ee4:	103c1e1e 	bne	r2,zero,10005f60 <__alt_data_end+0xf8005f60>
10006ee8:	00800044 	movi	r2,1
10006eec:	003e6c06 	br	100068a0 <__alt_data_end+0xf80068a0>
10006ef0:	d9002d17 	ldw	r4,180(sp)
10006ef4:	d9801e04 	addi	r6,sp,120
10006ef8:	b80b883a 	mov	r5,r23
10006efc:	000c76c0 	call	1000c76c <__sprint_r>
10006f00:	103bbf1e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
10006f04:	d8c02017 	ldw	r3,128(sp)
10006f08:	da000404 	addi	r8,sp,16
10006f0c:	d9003217 	ldw	r4,200(sp)
10006f10:	d8802617 	ldw	r2,152(sp)
10006f14:	d9403317 	ldw	r5,204(sp)
10006f18:	8123883a 	add	r17,r16,r4
10006f1c:	11400216 	blt	r2,r5,10006f28 <___vfprintf_internal_r+0x1538>
10006f20:	9100004c 	andi	r4,r18,1
10006f24:	20000d26 	beq	r4,zero,10006f5c <___vfprintf_internal_r+0x156c>
10006f28:	d9003717 	ldw	r4,220(sp)
10006f2c:	d9403417 	ldw	r5,208(sp)
10006f30:	1907883a 	add	r3,r3,r4
10006f34:	d9001f17 	ldw	r4,124(sp)
10006f38:	41400015 	stw	r5,0(r8)
10006f3c:	d9403717 	ldw	r5,220(sp)
10006f40:	21000044 	addi	r4,r4,1
10006f44:	d8c02015 	stw	r3,128(sp)
10006f48:	41400115 	stw	r5,4(r8)
10006f4c:	d9001f15 	stw	r4,124(sp)
10006f50:	014001c4 	movi	r5,7
10006f54:	2901e816 	blt	r5,r4,100076f8 <___vfprintf_internal_r+0x1d08>
10006f58:	42000204 	addi	r8,r8,8
10006f5c:	d9003317 	ldw	r4,204(sp)
10006f60:	8121883a 	add	r16,r16,r4
10006f64:	2085c83a 	sub	r2,r4,r2
10006f68:	8461c83a 	sub	r16,r16,r17
10006f6c:	1400010e 	bge	r2,r16,10006f74 <___vfprintf_internal_r+0x1584>
10006f70:	1021883a 	mov	r16,r2
10006f74:	04000a0e 	bge	zero,r16,10006fa0 <___vfprintf_internal_r+0x15b0>
10006f78:	d9001f17 	ldw	r4,124(sp)
10006f7c:	1c07883a 	add	r3,r3,r16
10006f80:	44400015 	stw	r17,0(r8)
10006f84:	21000044 	addi	r4,r4,1
10006f88:	44000115 	stw	r16,4(r8)
10006f8c:	d8c02015 	stw	r3,128(sp)
10006f90:	d9001f15 	stw	r4,124(sp)
10006f94:	014001c4 	movi	r5,7
10006f98:	2901fb16 	blt	r5,r4,10007788 <___vfprintf_internal_r+0x1d98>
10006f9c:	42000204 	addi	r8,r8,8
10006fa0:	8001f716 	blt	r16,zero,10007780 <___vfprintf_internal_r+0x1d90>
10006fa4:	1421c83a 	sub	r16,r2,r16
10006fa8:	043d160e 	bge	zero,r16,10006404 <__alt_data_end+0xf8006404>
10006fac:	04400404 	movi	r17,16
10006fb0:	d8801f17 	ldw	r2,124(sp)
10006fb4:	8c3efb0e 	bge	r17,r16,10006ba4 <__alt_data_end+0xf8006ba4>
10006fb8:	01440074 	movhi	r5,4097
10006fbc:	29543e84 	addi	r5,r5,20730
10006fc0:	d9402c15 	stw	r5,176(sp)
10006fc4:	058001c4 	movi	r22,7
10006fc8:	dcc02d17 	ldw	r19,180(sp)
10006fcc:	00000306 	br	10006fdc <___vfprintf_internal_r+0x15ec>
10006fd0:	42000204 	addi	r8,r8,8
10006fd4:	843ffc04 	addi	r16,r16,-16
10006fd8:	8c3ef50e 	bge	r17,r16,10006bb0 <__alt_data_end+0xf8006bb0>
10006fdc:	18c00404 	addi	r3,r3,16
10006fe0:	10800044 	addi	r2,r2,1
10006fe4:	45000015 	stw	r20,0(r8)
10006fe8:	44400115 	stw	r17,4(r8)
10006fec:	d8c02015 	stw	r3,128(sp)
10006ff0:	d8801f15 	stw	r2,124(sp)
10006ff4:	b0bff60e 	bge	r22,r2,10006fd0 <__alt_data_end+0xf8006fd0>
10006ff8:	d9801e04 	addi	r6,sp,120
10006ffc:	b80b883a 	mov	r5,r23
10007000:	9809883a 	mov	r4,r19
10007004:	000c76c0 	call	1000c76c <__sprint_r>
10007008:	103b7d1e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
1000700c:	d8c02017 	ldw	r3,128(sp)
10007010:	d8801f17 	ldw	r2,124(sp)
10007014:	da000404 	addi	r8,sp,16
10007018:	003fee06 	br	10006fd4 <__alt_data_end+0xf8006fd4>
1000701c:	9088703a 	and	r4,r18,r2
10007020:	203eab1e 	bne	r4,zero,10006ad0 <__alt_data_end+0xf8006ad0>
10007024:	dc401f17 	ldw	r17,124(sp)
10007028:	40800115 	stw	r2,4(r8)
1000702c:	44000015 	stw	r16,0(r8)
10007030:	8c400044 	addi	r17,r17,1
10007034:	d8c02015 	stw	r3,128(sp)
10007038:	dc401f15 	stw	r17,124(sp)
1000703c:	008001c4 	movi	r2,7
10007040:	14400e16 	blt	r2,r17,1000707c <___vfprintf_internal_r+0x168c>
10007044:	45800204 	addi	r22,r8,8
10007048:	003eca06 	br	10006b74 <__alt_data_end+0xf8006b74>
1000704c:	01040074 	movhi	r4,4097
10007050:	21143e84 	addi	r4,r4,20730
10007054:	d9002c15 	stw	r4,176(sp)
10007058:	d8802c17 	ldw	r2,176(sp)
1000705c:	1c07883a 	add	r3,r3,r16
10007060:	8c400044 	addi	r17,r17,1
10007064:	b0800015 	stw	r2,0(r22)
10007068:	b4000115 	stw	r16,4(r22)
1000706c:	d8c02015 	stw	r3,128(sp)
10007070:	dc401f15 	stw	r17,124(sp)
10007074:	008001c4 	movi	r2,7
10007078:	147ebd0e 	bge	r2,r17,10006b70 <__alt_data_end+0xf8006b70>
1000707c:	d9002d17 	ldw	r4,180(sp)
10007080:	d9801e04 	addi	r6,sp,120
10007084:	b80b883a 	mov	r5,r23
10007088:	000c76c0 	call	1000c76c <__sprint_r>
1000708c:	103b5c1e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
10007090:	d8c02017 	ldw	r3,128(sp)
10007094:	dc401f17 	ldw	r17,124(sp)
10007098:	dd800404 	addi	r22,sp,16
1000709c:	003eb506 	br	10006b74 <__alt_data_end+0xf8006b74>
100070a0:	d9002d17 	ldw	r4,180(sp)
100070a4:	d9801e04 	addi	r6,sp,120
100070a8:	b80b883a 	mov	r5,r23
100070ac:	000c76c0 	call	1000c76c <__sprint_r>
100070b0:	103b531e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
100070b4:	d8c02017 	ldw	r3,128(sp)
100070b8:	dc401f17 	ldw	r17,124(sp)
100070bc:	da000404 	addi	r8,sp,16
100070c0:	003e8d06 	br	10006af8 <__alt_data_end+0xf8006af8>
100070c4:	d9002d17 	ldw	r4,180(sp)
100070c8:	d9801e04 	addi	r6,sp,120
100070cc:	b80b883a 	mov	r5,r23
100070d0:	000c76c0 	call	1000c76c <__sprint_r>
100070d4:	103b4a1e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
100070d8:	d8c02017 	ldw	r3,128(sp)
100070dc:	dc401f17 	ldw	r17,124(sp)
100070e0:	dd800404 	addi	r22,sp,16
100070e4:	003e8f06 	br	10006b24 <__alt_data_end+0xf8006b24>
100070e8:	0027883a 	mov	r19,zero
100070ec:	003f4a06 	br	10006e18 <__alt_data_end+0xf8006e18>
100070f0:	d9002d17 	ldw	r4,180(sp)
100070f4:	d9801e04 	addi	r6,sp,120
100070f8:	b80b883a 	mov	r5,r23
100070fc:	000c76c0 	call	1000c76c <__sprint_r>
10007100:	103b3f1e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
10007104:	d8c02017 	ldw	r3,128(sp)
10007108:	da000404 	addi	r8,sp,16
1000710c:	003c7b06 	br	100062fc <__alt_data_end+0xf80062fc>
10007110:	d9402a17 	ldw	r5,168(sp)
10007114:	04e7c83a 	sub	r19,zero,r19
10007118:	07000b44 	movi	fp,45
1000711c:	9804c03a 	cmpne	r2,r19,zero
10007120:	05adc83a 	sub	r22,zero,r22
10007124:	df002785 	stb	fp,158(sp)
10007128:	b0adc83a 	sub	r22,r22,r2
1000712c:	28017b16 	blt	r5,zero,1000771c <___vfprintf_internal_r+0x1d2c>
10007130:	00bfdfc4 	movi	r2,-129
10007134:	90a4703a 	and	r18,r18,r2
10007138:	003b8906 	br	10005f60 <__alt_data_end+0xf8005f60>
1000713c:	d9003617 	ldw	r4,216(sp)
10007140:	d9403817 	ldw	r5,224(sp)
10007144:	da003d15 	stw	r8,244(sp)
10007148:	000c4c00 	call	1000c4c0 <__fpclassifyd>
1000714c:	da003d17 	ldw	r8,244(sp)
10007150:	1000f026 	beq	r2,zero,10007514 <___vfprintf_internal_r+0x1b24>
10007154:	d9002a17 	ldw	r4,168(sp)
10007158:	05bff7c4 	movi	r22,-33
1000715c:	00bfffc4 	movi	r2,-1
10007160:	8dac703a 	and	r22,r17,r22
10007164:	20820026 	beq	r4,r2,10007968 <___vfprintf_internal_r+0x1f78>
10007168:	008011c4 	movi	r2,71
1000716c:	b081f726 	beq	r22,r2,1000794c <___vfprintf_internal_r+0x1f5c>
10007170:	d9003817 	ldw	r4,224(sp)
10007174:	90c04014 	ori	r3,r18,256
10007178:	d8c02c15 	stw	r3,176(sp)
1000717c:	20021516 	blt	r4,zero,100079d4 <___vfprintf_internal_r+0x1fe4>
10007180:	dcc03817 	ldw	r19,224(sp)
10007184:	d8002905 	stb	zero,164(sp)
10007188:	00801984 	movi	r2,102
1000718c:	8881f926 	beq	r17,r2,10007974 <___vfprintf_internal_r+0x1f84>
10007190:	00801184 	movi	r2,70
10007194:	88821c26 	beq	r17,r2,10007a08 <___vfprintf_internal_r+0x2018>
10007198:	00801144 	movi	r2,69
1000719c:	b081ef26 	beq	r22,r2,1000795c <___vfprintf_internal_r+0x1f6c>
100071a0:	d8c02a17 	ldw	r3,168(sp)
100071a4:	d8802104 	addi	r2,sp,132
100071a8:	d8800315 	stw	r2,12(sp)
100071ac:	d9403617 	ldw	r5,216(sp)
100071b0:	d8802504 	addi	r2,sp,148
100071b4:	d9002d17 	ldw	r4,180(sp)
100071b8:	d8800215 	stw	r2,8(sp)
100071bc:	d8802604 	addi	r2,sp,152
100071c0:	d8c00015 	stw	r3,0(sp)
100071c4:	d8800115 	stw	r2,4(sp)
100071c8:	01c00084 	movi	r7,2
100071cc:	980d883a 	mov	r6,r19
100071d0:	d8c03c15 	stw	r3,240(sp)
100071d4:	da003d15 	stw	r8,244(sp)
100071d8:	00081200 	call	10008120 <_dtoa_r>
100071dc:	1021883a 	mov	r16,r2
100071e0:	008019c4 	movi	r2,103
100071e4:	d8c03c17 	ldw	r3,240(sp)
100071e8:	da003d17 	ldw	r8,244(sp)
100071ec:	88817126 	beq	r17,r2,100077b4 <___vfprintf_internal_r+0x1dc4>
100071f0:	008011c4 	movi	r2,71
100071f4:	88829126 	beq	r17,r2,10007c3c <___vfprintf_internal_r+0x224c>
100071f8:	80f9883a 	add	fp,r16,r3
100071fc:	d9003617 	ldw	r4,216(sp)
10007200:	000d883a 	mov	r6,zero
10007204:	000f883a 	mov	r7,zero
10007208:	980b883a 	mov	r5,r19
1000720c:	da003d15 	stw	r8,244(sp)
10007210:	00106a40 	call	100106a4 <__eqdf2>
10007214:	da003d17 	ldw	r8,244(sp)
10007218:	10018d26 	beq	r2,zero,10007850 <___vfprintf_internal_r+0x1e60>
1000721c:	d8802117 	ldw	r2,132(sp)
10007220:	1700062e 	bgeu	r2,fp,1000723c <___vfprintf_internal_r+0x184c>
10007224:	01000c04 	movi	r4,48
10007228:	10c00044 	addi	r3,r2,1
1000722c:	d8c02115 	stw	r3,132(sp)
10007230:	11000005 	stb	r4,0(r2)
10007234:	d8802117 	ldw	r2,132(sp)
10007238:	173ffb36 	bltu	r2,fp,10007228 <__alt_data_end+0xf8007228>
1000723c:	1405c83a 	sub	r2,r2,r16
10007240:	d8803315 	stw	r2,204(sp)
10007244:	008011c4 	movi	r2,71
10007248:	b0817626 	beq	r22,r2,10007824 <___vfprintf_internal_r+0x1e34>
1000724c:	00801944 	movi	r2,101
10007250:	1442800e 	bge	r2,r17,10007c54 <___vfprintf_internal_r+0x2264>
10007254:	d8c02617 	ldw	r3,152(sp)
10007258:	00801984 	movi	r2,102
1000725c:	d8c03215 	stw	r3,200(sp)
10007260:	8881fe26 	beq	r17,r2,10007a5c <___vfprintf_internal_r+0x206c>
10007264:	d8c03217 	ldw	r3,200(sp)
10007268:	d9003317 	ldw	r4,204(sp)
1000726c:	1901dd16 	blt	r3,r4,100079e4 <___vfprintf_internal_r+0x1ff4>
10007270:	9480004c 	andi	r18,r18,1
10007274:	90022b1e 	bne	r18,zero,10007b24 <___vfprintf_internal_r+0x2134>
10007278:	1805883a 	mov	r2,r3
1000727c:	18028316 	blt	r3,zero,10007c8c <___vfprintf_internal_r+0x229c>
10007280:	d8c03217 	ldw	r3,200(sp)
10007284:	044019c4 	movi	r17,103
10007288:	d8c02b15 	stw	r3,172(sp)
1000728c:	df002907 	ldb	fp,164(sp)
10007290:	e001531e 	bne	fp,zero,100077e0 <___vfprintf_internal_r+0x1df0>
10007294:	df002783 	ldbu	fp,158(sp)
10007298:	d8802915 	stw	r2,164(sp)
1000729c:	dc802c17 	ldw	r18,176(sp)
100072a0:	d8002a15 	stw	zero,168(sp)
100072a4:	003baf06 	br	10006164 <__alt_data_end+0xf8006164>
100072a8:	d8c02e17 	ldw	r3,184(sp)
100072ac:	d9002e17 	ldw	r4,184(sp)
100072b0:	d9402e17 	ldw	r5,184(sp)
100072b4:	18c00017 	ldw	r3,0(r3)
100072b8:	21000117 	ldw	r4,4(r4)
100072bc:	29400204 	addi	r5,r5,8
100072c0:	d8c03615 	stw	r3,216(sp)
100072c4:	d9003815 	stw	r4,224(sp)
100072c8:	d9402e15 	stw	r5,184(sp)
100072cc:	003b5006 	br	10006010 <__alt_data_end+0xf8006010>
100072d0:	ac400007 	ldb	r17,0(r21)
100072d4:	003a2806 	br	10005b78 <__alt_data_end+0xf8005b78>
100072d8:	9080100c 	andi	r2,r18,64
100072dc:	1000a826 	beq	r2,zero,10007580 <___vfprintf_internal_r+0x1b90>
100072e0:	d8c02e17 	ldw	r3,184(sp)
100072e4:	002d883a 	mov	r22,zero
100072e8:	1cc0000b 	ldhu	r19,0(r3)
100072ec:	18c00104 	addi	r3,r3,4
100072f0:	d8c02e15 	stw	r3,184(sp)
100072f4:	003caf06 	br	100065b4 <__alt_data_end+0xf80065b4>
100072f8:	d9002e17 	ldw	r4,184(sp)
100072fc:	d9402a17 	ldw	r5,168(sp)
10007300:	002d883a 	mov	r22,zero
10007304:	20800104 	addi	r2,r4,4
10007308:	24c00017 	ldw	r19,0(r4)
1000730c:	283ebb0e 	bge	r5,zero,10006dfc <__alt_data_end+0xf8006dfc>
10007310:	003ef106 	br	10006ed8 <__alt_data_end+0xf8006ed8>
10007314:	9080040c 	andi	r2,r18,16
10007318:	1000921e 	bne	r2,zero,10007564 <___vfprintf_internal_r+0x1b74>
1000731c:	9480100c 	andi	r18,r18,64
10007320:	90013926 	beq	r18,zero,10007808 <___vfprintf_internal_r+0x1e18>
10007324:	d9402e17 	ldw	r5,184(sp)
10007328:	d8c02f17 	ldw	r3,188(sp)
1000732c:	28800017 	ldw	r2,0(r5)
10007330:	29400104 	addi	r5,r5,4
10007334:	d9402e15 	stw	r5,184(sp)
10007338:	10c0000d 	sth	r3,0(r2)
1000733c:	0039e406 	br	10005ad0 <__alt_data_end+0xf8005ad0>
10007340:	9080100c 	andi	r2,r18,64
10007344:	10008026 	beq	r2,zero,10007548 <___vfprintf_internal_r+0x1b58>
10007348:	d8802e17 	ldw	r2,184(sp)
1000734c:	14c0000f 	ldh	r19,0(r2)
10007350:	10800104 	addi	r2,r2,4
10007354:	d8802e15 	stw	r2,184(sp)
10007358:	982dd7fa 	srai	r22,r19,31
1000735c:	b005883a 	mov	r2,r22
10007360:	003af706 	br	10005f40 <__alt_data_end+0xf8005f40>
10007364:	9080100c 	andi	r2,r18,64
10007368:	d8002785 	stb	zero,158(sp)
1000736c:	10008a1e 	bne	r2,zero,10007598 <___vfprintf_internal_r+0x1ba8>
10007370:	d9002e17 	ldw	r4,184(sp)
10007374:	d9402a17 	ldw	r5,168(sp)
10007378:	002d883a 	mov	r22,zero
1000737c:	20800104 	addi	r2,r4,4
10007380:	24c00017 	ldw	r19,0(r4)
10007384:	283e4b0e 	bge	r5,zero,10006cb4 <__alt_data_end+0xf8006cb4>
10007388:	9d86b03a 	or	r3,r19,r22
1000738c:	d8802e15 	stw	r2,184(sp)
10007390:	183e4c1e 	bne	r3,zero,10006cc4 <__alt_data_end+0xf8006cc4>
10007394:	0039883a 	mov	fp,zero
10007398:	0005883a 	mov	r2,zero
1000739c:	003d4006 	br	100068a0 <__alt_data_end+0xf80068a0>
100073a0:	01440074 	movhi	r5,4097
100073a4:	29543e84 	addi	r5,r5,20730
100073a8:	d9402c15 	stw	r5,176(sp)
100073ac:	d9402c17 	ldw	r5,176(sp)
100073b0:	1c47883a 	add	r3,r3,r17
100073b4:	10800044 	addi	r2,r2,1
100073b8:	41400015 	stw	r5,0(r8)
100073bc:	44400115 	stw	r17,4(r8)
100073c0:	d8c02015 	stw	r3,128(sp)
100073c4:	d8801f15 	stw	r2,124(sp)
100073c8:	010001c4 	movi	r4,7
100073cc:	20bec816 	blt	r4,r2,10006ef0 <__alt_data_end+0xf8006ef0>
100073d0:	42000204 	addi	r8,r8,8
100073d4:	003ecd06 	br	10006f0c <__alt_data_end+0xf8006f0c>
100073d8:	d9002a17 	ldw	r4,168(sp)
100073dc:	d8002785 	stb	zero,158(sp)
100073e0:	203d2d16 	blt	r4,zero,10006898 <__alt_data_end+0xf8006898>
100073e4:	00bfdfc4 	movi	r2,-129
100073e8:	90a4703a 	and	r18,r18,r2
100073ec:	003a6106 	br	10005d74 <__alt_data_end+0xf8005d74>
100073f0:	01040074 	movhi	r4,4097
100073f4:	21143e84 	addi	r4,r4,20730
100073f8:	d9002c15 	stw	r4,176(sp)
100073fc:	003bea06 	br	100063a8 <__alt_data_end+0xf80063a8>
10007400:	d9002d17 	ldw	r4,180(sp)
10007404:	d9801e04 	addi	r6,sp,120
10007408:	b80b883a 	mov	r5,r23
1000740c:	000c76c0 	call	1000c76c <__sprint_r>
10007410:	103a7b1e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
10007414:	d8c02017 	ldw	r3,128(sp)
10007418:	da000404 	addi	r8,sp,16
1000741c:	003d4106 	br	10006924 <__alt_data_end+0xf8006924>
10007420:	d8801f17 	ldw	r2,124(sp)
10007424:	01440074 	movhi	r5,4097
10007428:	01000044 	movi	r4,1
1000742c:	18c00044 	addi	r3,r3,1
10007430:	10800044 	addi	r2,r2,1
10007434:	29543e04 	addi	r5,r5,20728
10007438:	41000115 	stw	r4,4(r8)
1000743c:	41400015 	stw	r5,0(r8)
10007440:	d8c02015 	stw	r3,128(sp)
10007444:	d8801f15 	stw	r2,124(sp)
10007448:	010001c4 	movi	r4,7
1000744c:	20805c16 	blt	r4,r2,100075c0 <___vfprintf_internal_r+0x1bd0>
10007450:	42000204 	addi	r8,r8,8
10007454:	8800041e 	bne	r17,zero,10007468 <___vfprintf_internal_r+0x1a78>
10007458:	d8803317 	ldw	r2,204(sp)
1000745c:	1000021e 	bne	r2,zero,10007468 <___vfprintf_internal_r+0x1a78>
10007460:	9080004c 	andi	r2,r18,1
10007464:	103be726 	beq	r2,zero,10006404 <__alt_data_end+0xf8006404>
10007468:	d9003717 	ldw	r4,220(sp)
1000746c:	d8801f17 	ldw	r2,124(sp)
10007470:	d9403417 	ldw	r5,208(sp)
10007474:	20c7883a 	add	r3,r4,r3
10007478:	10800044 	addi	r2,r2,1
1000747c:	41000115 	stw	r4,4(r8)
10007480:	41400015 	stw	r5,0(r8)
10007484:	d8c02015 	stw	r3,128(sp)
10007488:	d8801f15 	stw	r2,124(sp)
1000748c:	010001c4 	movi	r4,7
10007490:	20812116 	blt	r4,r2,10007918 <___vfprintf_internal_r+0x1f28>
10007494:	42000204 	addi	r8,r8,8
10007498:	0463c83a 	sub	r17,zero,r17
1000749c:	0440730e 	bge	zero,r17,1000766c <___vfprintf_internal_r+0x1c7c>
100074a0:	05800404 	movi	r22,16
100074a4:	b440860e 	bge	r22,r17,100076c0 <___vfprintf_internal_r+0x1cd0>
100074a8:	01440074 	movhi	r5,4097
100074ac:	29543e84 	addi	r5,r5,20730
100074b0:	d9402c15 	stw	r5,176(sp)
100074b4:	070001c4 	movi	fp,7
100074b8:	dcc02d17 	ldw	r19,180(sp)
100074bc:	00000306 	br	100074cc <___vfprintf_internal_r+0x1adc>
100074c0:	42000204 	addi	r8,r8,8
100074c4:	8c7ffc04 	addi	r17,r17,-16
100074c8:	b440800e 	bge	r22,r17,100076cc <___vfprintf_internal_r+0x1cdc>
100074cc:	18c00404 	addi	r3,r3,16
100074d0:	10800044 	addi	r2,r2,1
100074d4:	45000015 	stw	r20,0(r8)
100074d8:	45800115 	stw	r22,4(r8)
100074dc:	d8c02015 	stw	r3,128(sp)
100074e0:	d8801f15 	stw	r2,124(sp)
100074e4:	e0bff60e 	bge	fp,r2,100074c0 <__alt_data_end+0xf80074c0>
100074e8:	d9801e04 	addi	r6,sp,120
100074ec:	b80b883a 	mov	r5,r23
100074f0:	9809883a 	mov	r4,r19
100074f4:	000c76c0 	call	1000c76c <__sprint_r>
100074f8:	103a411e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
100074fc:	d8c02017 	ldw	r3,128(sp)
10007500:	d8801f17 	ldw	r2,124(sp)
10007504:	da000404 	addi	r8,sp,16
10007508:	003fee06 	br	100074c4 <__alt_data_end+0xf80074c4>
1000750c:	00bfffc4 	movi	r2,-1
10007510:	003a3f06 	br	10005e10 <__alt_data_end+0xf8005e10>
10007514:	008011c4 	movi	r2,71
10007518:	1440b816 	blt	r2,r17,100077fc <___vfprintf_internal_r+0x1e0c>
1000751c:	04040074 	movhi	r16,4097
10007520:	84143004 	addi	r16,r16,20672
10007524:	00c000c4 	movi	r3,3
10007528:	00bfdfc4 	movi	r2,-129
1000752c:	d8c02915 	stw	r3,164(sp)
10007530:	90a4703a 	and	r18,r18,r2
10007534:	df002783 	ldbu	fp,158(sp)
10007538:	d8c02b15 	stw	r3,172(sp)
1000753c:	d8002a15 	stw	zero,168(sp)
10007540:	d8003215 	stw	zero,200(sp)
10007544:	003b0706 	br	10006164 <__alt_data_end+0xf8006164>
10007548:	d8c02e17 	ldw	r3,184(sp)
1000754c:	1cc00017 	ldw	r19,0(r3)
10007550:	18c00104 	addi	r3,r3,4
10007554:	d8c02e15 	stw	r3,184(sp)
10007558:	982dd7fa 	srai	r22,r19,31
1000755c:	b005883a 	mov	r2,r22
10007560:	003a7706 	br	10005f40 <__alt_data_end+0xf8005f40>
10007564:	d8c02e17 	ldw	r3,184(sp)
10007568:	d9002f17 	ldw	r4,188(sp)
1000756c:	18800017 	ldw	r2,0(r3)
10007570:	18c00104 	addi	r3,r3,4
10007574:	d8c02e15 	stw	r3,184(sp)
10007578:	11000015 	stw	r4,0(r2)
1000757c:	00395406 	br	10005ad0 <__alt_data_end+0xf8005ad0>
10007580:	d9002e17 	ldw	r4,184(sp)
10007584:	002d883a 	mov	r22,zero
10007588:	24c00017 	ldw	r19,0(r4)
1000758c:	21000104 	addi	r4,r4,4
10007590:	d9002e15 	stw	r4,184(sp)
10007594:	003c0706 	br	100065b4 <__alt_data_end+0xf80065b4>
10007598:	d9402e17 	ldw	r5,184(sp)
1000759c:	d8c02a17 	ldw	r3,168(sp)
100075a0:	002d883a 	mov	r22,zero
100075a4:	28800104 	addi	r2,r5,4
100075a8:	2cc0000b 	ldhu	r19,0(r5)
100075ac:	183dc10e 	bge	r3,zero,10006cb4 <__alt_data_end+0xf8006cb4>
100075b0:	003f7506 	br	10007388 <__alt_data_end+0xf8007388>
100075b4:	04040074 	movhi	r16,4097
100075b8:	84142e04 	addi	r16,r16,20664
100075bc:	003aa706 	br	1000605c <__alt_data_end+0xf800605c>
100075c0:	d9002d17 	ldw	r4,180(sp)
100075c4:	d9801e04 	addi	r6,sp,120
100075c8:	b80b883a 	mov	r5,r23
100075cc:	000c76c0 	call	1000c76c <__sprint_r>
100075d0:	103a0b1e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
100075d4:	dc402617 	ldw	r17,152(sp)
100075d8:	d8c02017 	ldw	r3,128(sp)
100075dc:	da000404 	addi	r8,sp,16
100075e0:	003f9c06 	br	10007454 <__alt_data_end+0xf8007454>
100075e4:	ac400043 	ldbu	r17,1(r21)
100075e8:	84000814 	ori	r16,r16,32
100075ec:	ad400044 	addi	r21,r21,1
100075f0:	8c403fcc 	andi	r17,r17,255
100075f4:	8c40201c 	xori	r17,r17,128
100075f8:	8c7fe004 	addi	r17,r17,-128
100075fc:	00395e06 	br	10005b78 <__alt_data_end+0xf8005b78>
10007600:	d8c02e15 	stw	r3,184(sp)
10007604:	0039883a 	mov	fp,zero
10007608:	003e3506 	br	10006ee0 <__alt_data_end+0xf8006ee0>
1000760c:	d9002d17 	ldw	r4,180(sp)
10007610:	d9801e04 	addi	r6,sp,120
10007614:	b80b883a 	mov	r5,r23
10007618:	000c76c0 	call	1000c76c <__sprint_r>
1000761c:	1039f81e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
10007620:	d8c02017 	ldw	r3,128(sp)
10007624:	da000404 	addi	r8,sp,16
10007628:	003cd006 	br	1000696c <__alt_data_end+0xf800696c>
1000762c:	8009883a 	mov	r4,r16
10007630:	df003d15 	stw	fp,244(sp)
10007634:	00059580 	call	10005958 <strlen>
10007638:	d8802b15 	stw	r2,172(sp)
1000763c:	da003d17 	ldw	r8,244(sp)
10007640:	103c200e 	bge	r2,zero,100066c4 <__alt_data_end+0xf80066c4>
10007644:	0005883a 	mov	r2,zero
10007648:	003c1e06 	br	100066c4 <__alt_data_end+0xf80066c4>
1000764c:	d9002d17 	ldw	r4,180(sp)
10007650:	d9801e04 	addi	r6,sp,120
10007654:	b80b883a 	mov	r5,r23
10007658:	000c76c0 	call	1000c76c <__sprint_r>
1000765c:	1039e81e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
10007660:	d8c02017 	ldw	r3,128(sp)
10007664:	d8801f17 	ldw	r2,124(sp)
10007668:	da000404 	addi	r8,sp,16
1000766c:	d9403317 	ldw	r5,204(sp)
10007670:	10800044 	addi	r2,r2,1
10007674:	44000015 	stw	r16,0(r8)
10007678:	28c7883a 	add	r3,r5,r3
1000767c:	003b5b06 	br	100063ec <__alt_data_end+0xf80063ec>
10007680:	01040074 	movhi	r4,4097
10007684:	21144284 	addi	r4,r4,20746
10007688:	d9003515 	stw	r4,212(sp)
1000768c:	003af206 	br	10006258 <__alt_data_end+0xf8006258>
10007690:	013fffc4 	movi	r4,-1
10007694:	003a0806 	br	10005eb8 <__alt_data_end+0xf8005eb8>
10007698:	0023883a 	mov	r17,zero
1000769c:	003d9d06 	br	10006d14 <__alt_data_end+0xf8006d14>
100076a0:	d9002d17 	ldw	r4,180(sp)
100076a4:	d9801e04 	addi	r6,sp,120
100076a8:	b80b883a 	mov	r5,r23
100076ac:	000c76c0 	call	1000c76c <__sprint_r>
100076b0:	1039d31e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
100076b4:	d8c02017 	ldw	r3,128(sp)
100076b8:	da000404 	addi	r8,sp,16
100076bc:	003d9406 	br	10006d10 <__alt_data_end+0xf8006d10>
100076c0:	01040074 	movhi	r4,4097
100076c4:	21143e84 	addi	r4,r4,20730
100076c8:	d9002c15 	stw	r4,176(sp)
100076cc:	d9002c17 	ldw	r4,176(sp)
100076d0:	1c47883a 	add	r3,r3,r17
100076d4:	10800044 	addi	r2,r2,1
100076d8:	41000015 	stw	r4,0(r8)
100076dc:	44400115 	stw	r17,4(r8)
100076e0:	d8c02015 	stw	r3,128(sp)
100076e4:	d8801f15 	stw	r2,124(sp)
100076e8:	010001c4 	movi	r4,7
100076ec:	20bfd716 	blt	r4,r2,1000764c <__alt_data_end+0xf800764c>
100076f0:	42000204 	addi	r8,r8,8
100076f4:	003fdd06 	br	1000766c <__alt_data_end+0xf800766c>
100076f8:	d9002d17 	ldw	r4,180(sp)
100076fc:	d9801e04 	addi	r6,sp,120
10007700:	b80b883a 	mov	r5,r23
10007704:	000c76c0 	call	1000c76c <__sprint_r>
10007708:	1039bd1e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
1000770c:	d8802617 	ldw	r2,152(sp)
10007710:	d8c02017 	ldw	r3,128(sp)
10007714:	da000404 	addi	r8,sp,16
10007718:	003e1006 	br	10006f5c <__alt_data_end+0xf8006f5c>
1000771c:	00800044 	movi	r2,1
10007720:	10803fcc 	andi	r2,r2,255
10007724:	00c00044 	movi	r3,1
10007728:	10fa0d26 	beq	r2,r3,10005f60 <__alt_data_end+0xf8005f60>
1000772c:	00c00084 	movi	r3,2
10007730:	10fbaf26 	beq	r2,r3,100065f0 <__alt_data_end+0xf80065f0>
10007734:	003a6d06 	br	100060ec <__alt_data_end+0xf80060ec>
10007738:	01040074 	movhi	r4,4097
1000773c:	21144284 	addi	r4,r4,20746
10007740:	d9003515 	stw	r4,212(sp)
10007744:	003b5406 	br	10006498 <__alt_data_end+0xf8006498>
10007748:	d8802a17 	ldw	r2,168(sp)
1000774c:	00c00184 	movi	r3,6
10007750:	1880012e 	bgeu	r3,r2,10007758 <___vfprintf_internal_r+0x1d68>
10007754:	1805883a 	mov	r2,r3
10007758:	d8802b15 	stw	r2,172(sp)
1000775c:	1000ef16 	blt	r2,zero,10007b1c <___vfprintf_internal_r+0x212c>
10007760:	04040074 	movhi	r16,4097
10007764:	d8802915 	stw	r2,164(sp)
10007768:	dcc02e15 	stw	r19,184(sp)
1000776c:	d8002a15 	stw	zero,168(sp)
10007770:	d8003215 	stw	zero,200(sp)
10007774:	84143c04 	addi	r16,r16,20720
10007778:	0039883a 	mov	fp,zero
1000777c:	003a8006 	br	10006180 <__alt_data_end+0xf8006180>
10007780:	0021883a 	mov	r16,zero
10007784:	003e0706 	br	10006fa4 <__alt_data_end+0xf8006fa4>
10007788:	d9002d17 	ldw	r4,180(sp)
1000778c:	d9801e04 	addi	r6,sp,120
10007790:	b80b883a 	mov	r5,r23
10007794:	000c76c0 	call	1000c76c <__sprint_r>
10007798:	1039991e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
1000779c:	d8802617 	ldw	r2,152(sp)
100077a0:	d9403317 	ldw	r5,204(sp)
100077a4:	d8c02017 	ldw	r3,128(sp)
100077a8:	da000404 	addi	r8,sp,16
100077ac:	2885c83a 	sub	r2,r5,r2
100077b0:	003dfb06 	br	10006fa0 <__alt_data_end+0xf8006fa0>
100077b4:	9080004c 	andi	r2,r18,1
100077b8:	103e8f1e 	bne	r2,zero,100071f8 <__alt_data_end+0xf80071f8>
100077bc:	d8802117 	ldw	r2,132(sp)
100077c0:	003e9e06 	br	1000723c <__alt_data_end+0xf800723c>
100077c4:	1025883a 	mov	r18,r2
100077c8:	0039883a 	mov	fp,zero
100077cc:	00800084 	movi	r2,2
100077d0:	003fd306 	br	10007720 <__alt_data_end+0xf8007720>
100077d4:	07000b44 	movi	fp,45
100077d8:	df002785 	stb	fp,158(sp)
100077dc:	003a1b06 	br	1000604c <__alt_data_end+0xf800604c>
100077e0:	00c00b44 	movi	r3,45
100077e4:	d8c02785 	stb	r3,158(sp)
100077e8:	d8802915 	stw	r2,164(sp)
100077ec:	dc802c17 	ldw	r18,176(sp)
100077f0:	d8002a15 	stw	zero,168(sp)
100077f4:	07000b44 	movi	fp,45
100077f8:	003a5e06 	br	10006174 <__alt_data_end+0xf8006174>
100077fc:	04040074 	movhi	r16,4097
10007800:	84143104 	addi	r16,r16,20676
10007804:	003f4706 	br	10007524 <__alt_data_end+0xf8007524>
10007808:	d9002e17 	ldw	r4,184(sp)
1000780c:	d9402f17 	ldw	r5,188(sp)
10007810:	20800017 	ldw	r2,0(r4)
10007814:	21000104 	addi	r4,r4,4
10007818:	d9002e15 	stw	r4,184(sp)
1000781c:	11400015 	stw	r5,0(r2)
10007820:	0038ab06 	br	10005ad0 <__alt_data_end+0xf8005ad0>
10007824:	dd802617 	ldw	r22,152(sp)
10007828:	00bfff44 	movi	r2,-3
1000782c:	b0801c16 	blt	r22,r2,100078a0 <___vfprintf_internal_r+0x1eb0>
10007830:	d9402a17 	ldw	r5,168(sp)
10007834:	2d801a16 	blt	r5,r22,100078a0 <___vfprintf_internal_r+0x1eb0>
10007838:	dd803215 	stw	r22,200(sp)
1000783c:	003e8906 	br	10007264 <__alt_data_end+0xf8007264>
10007840:	01040074 	movhi	r4,4097
10007844:	21143e84 	addi	r4,r4,20730
10007848:	d9002c15 	stw	r4,176(sp)
1000784c:	003c9106 	br	10006a94 <__alt_data_end+0xf8006a94>
10007850:	e005883a 	mov	r2,fp
10007854:	003e7906 	br	1000723c <__alt_data_end+0xf800723c>
10007858:	d9002a17 	ldw	r4,168(sp)
1000785c:	df002783 	ldbu	fp,158(sp)
10007860:	dcc02e15 	stw	r19,184(sp)
10007864:	d9002915 	stw	r4,164(sp)
10007868:	d9002b15 	stw	r4,172(sp)
1000786c:	d8002a15 	stw	zero,168(sp)
10007870:	d8003215 	stw	zero,200(sp)
10007874:	003a3b06 	br	10006164 <__alt_data_end+0xf8006164>
10007878:	9080004c 	andi	r2,r18,1
1000787c:	0039883a 	mov	fp,zero
10007880:	10000426 	beq	r2,zero,10007894 <___vfprintf_internal_r+0x1ea4>
10007884:	00800c04 	movi	r2,48
10007888:	dc001dc4 	addi	r16,sp,119
1000788c:	d8801dc5 	stb	r2,119(sp)
10007890:	003b6406 	br	10006624 <__alt_data_end+0xf8006624>
10007894:	d8002b15 	stw	zero,172(sp)
10007898:	dc001e04 	addi	r16,sp,120
1000789c:	003a2b06 	br	1000614c <__alt_data_end+0xf800614c>
100078a0:	8c7fff84 	addi	r17,r17,-2
100078a4:	b5bfffc4 	addi	r22,r22,-1
100078a8:	dd802615 	stw	r22,152(sp)
100078ac:	dc4022c5 	stb	r17,139(sp)
100078b0:	b000bf16 	blt	r22,zero,10007bb0 <___vfprintf_internal_r+0x21c0>
100078b4:	00800ac4 	movi	r2,43
100078b8:	d8802305 	stb	r2,140(sp)
100078bc:	00800244 	movi	r2,9
100078c0:	15807016 	blt	r2,r22,10007a84 <___vfprintf_internal_r+0x2094>
100078c4:	00800c04 	movi	r2,48
100078c8:	b5800c04 	addi	r22,r22,48
100078cc:	d8802345 	stb	r2,141(sp)
100078d0:	dd802385 	stb	r22,142(sp)
100078d4:	d88023c4 	addi	r2,sp,143
100078d8:	df0022c4 	addi	fp,sp,139
100078dc:	d8c03317 	ldw	r3,204(sp)
100078e0:	1739c83a 	sub	fp,r2,fp
100078e4:	d9003317 	ldw	r4,204(sp)
100078e8:	e0c7883a 	add	r3,fp,r3
100078ec:	df003a15 	stw	fp,232(sp)
100078f0:	d8c02b15 	stw	r3,172(sp)
100078f4:	00800044 	movi	r2,1
100078f8:	1100b30e 	bge	r2,r4,10007bc8 <___vfprintf_internal_r+0x21d8>
100078fc:	d8c02b17 	ldw	r3,172(sp)
10007900:	18c00044 	addi	r3,r3,1
10007904:	d8c02b15 	stw	r3,172(sp)
10007908:	1805883a 	mov	r2,r3
1000790c:	1800ac16 	blt	r3,zero,10007bc0 <___vfprintf_internal_r+0x21d0>
10007910:	d8003215 	stw	zero,200(sp)
10007914:	003e5d06 	br	1000728c <__alt_data_end+0xf800728c>
10007918:	d9002d17 	ldw	r4,180(sp)
1000791c:	d9801e04 	addi	r6,sp,120
10007920:	b80b883a 	mov	r5,r23
10007924:	000c76c0 	call	1000c76c <__sprint_r>
10007928:	1039351e 	bne	r2,zero,10005e00 <__alt_data_end+0xf8005e00>
1000792c:	dc402617 	ldw	r17,152(sp)
10007930:	d8c02017 	ldw	r3,128(sp)
10007934:	d8801f17 	ldw	r2,124(sp)
10007938:	da000404 	addi	r8,sp,16
1000793c:	003ed606 	br	10007498 <__alt_data_end+0xf8007498>
10007940:	182b883a 	mov	r21,r3
10007944:	d8002a15 	stw	zero,168(sp)
10007948:	00388c06 	br	10005b7c <__alt_data_end+0xf8005b7c>
1000794c:	d8802a17 	ldw	r2,168(sp)
10007950:	103e071e 	bne	r2,zero,10007170 <__alt_data_end+0xf8007170>
10007954:	dc002a15 	stw	r16,168(sp)
10007958:	003e0506 	br	10007170 <__alt_data_end+0xf8007170>
1000795c:	d9002a17 	ldw	r4,168(sp)
10007960:	20c00044 	addi	r3,r4,1
10007964:	003e0f06 	br	100071a4 <__alt_data_end+0xf80071a4>
10007968:	01400184 	movi	r5,6
1000796c:	d9402a15 	stw	r5,168(sp)
10007970:	003dff06 	br	10007170 <__alt_data_end+0xf8007170>
10007974:	d8802104 	addi	r2,sp,132
10007978:	d8800315 	stw	r2,12(sp)
1000797c:	d8802504 	addi	r2,sp,148
10007980:	d8800215 	stw	r2,8(sp)
10007984:	d8802604 	addi	r2,sp,152
10007988:	d8800115 	stw	r2,4(sp)
1000798c:	d8802a17 	ldw	r2,168(sp)
10007990:	d9403617 	ldw	r5,216(sp)
10007994:	d9002d17 	ldw	r4,180(sp)
10007998:	d8800015 	stw	r2,0(sp)
1000799c:	01c000c4 	movi	r7,3
100079a0:	980d883a 	mov	r6,r19
100079a4:	da003d15 	stw	r8,244(sp)
100079a8:	00081200 	call	10008120 <_dtoa_r>
100079ac:	d8c02a17 	ldw	r3,168(sp)
100079b0:	da003d17 	ldw	r8,244(sp)
100079b4:	1021883a 	mov	r16,r2
100079b8:	10f9883a 	add	fp,r2,r3
100079bc:	81000007 	ldb	r4,0(r16)
100079c0:	00800c04 	movi	r2,48
100079c4:	20805e26 	beq	r4,r2,10007b40 <___vfprintf_internal_r+0x2150>
100079c8:	d8c02617 	ldw	r3,152(sp)
100079cc:	e0f9883a 	add	fp,fp,r3
100079d0:	003e0a06 	br	100071fc <__alt_data_end+0xf80071fc>
100079d4:	00c00b44 	movi	r3,45
100079d8:	24e0003c 	xorhi	r19,r4,32768
100079dc:	d8c02905 	stb	r3,164(sp)
100079e0:	003de906 	br	10007188 <__alt_data_end+0xf8007188>
100079e4:	d8c03217 	ldw	r3,200(sp)
100079e8:	00c07a0e 	bge	zero,r3,10007bd4 <___vfprintf_internal_r+0x21e4>
100079ec:	00800044 	movi	r2,1
100079f0:	d9003317 	ldw	r4,204(sp)
100079f4:	1105883a 	add	r2,r2,r4
100079f8:	d8802b15 	stw	r2,172(sp)
100079fc:	10004e16 	blt	r2,zero,10007b38 <___vfprintf_internal_r+0x2148>
10007a00:	044019c4 	movi	r17,103
10007a04:	003e2106 	br	1000728c <__alt_data_end+0xf800728c>
10007a08:	d9002a17 	ldw	r4,168(sp)
10007a0c:	d8802104 	addi	r2,sp,132
10007a10:	d8800315 	stw	r2,12(sp)
10007a14:	d9000015 	stw	r4,0(sp)
10007a18:	d8802504 	addi	r2,sp,148
10007a1c:	d9403617 	ldw	r5,216(sp)
10007a20:	d9002d17 	ldw	r4,180(sp)
10007a24:	d8800215 	stw	r2,8(sp)
10007a28:	d8802604 	addi	r2,sp,152
10007a2c:	d8800115 	stw	r2,4(sp)
10007a30:	01c000c4 	movi	r7,3
10007a34:	980d883a 	mov	r6,r19
10007a38:	da003d15 	stw	r8,244(sp)
10007a3c:	00081200 	call	10008120 <_dtoa_r>
10007a40:	d8c02a17 	ldw	r3,168(sp)
10007a44:	da003d17 	ldw	r8,244(sp)
10007a48:	1021883a 	mov	r16,r2
10007a4c:	00801184 	movi	r2,70
10007a50:	80f9883a 	add	fp,r16,r3
10007a54:	88bfd926 	beq	r17,r2,100079bc <__alt_data_end+0xf80079bc>
10007a58:	003de806 	br	100071fc <__alt_data_end+0xf80071fc>
10007a5c:	d9002a17 	ldw	r4,168(sp)
10007a60:	00c04d0e 	bge	zero,r3,10007b98 <___vfprintf_internal_r+0x21a8>
10007a64:	2000441e 	bne	r4,zero,10007b78 <___vfprintf_internal_r+0x2188>
10007a68:	9480004c 	andi	r18,r18,1
10007a6c:	9000421e 	bne	r18,zero,10007b78 <___vfprintf_internal_r+0x2188>
10007a70:	1805883a 	mov	r2,r3
10007a74:	18006f16 	blt	r3,zero,10007c34 <___vfprintf_internal_r+0x2244>
10007a78:	d8c03217 	ldw	r3,200(sp)
10007a7c:	d8c02b15 	stw	r3,172(sp)
10007a80:	003e0206 	br	1000728c <__alt_data_end+0xf800728c>
10007a84:	df0022c4 	addi	fp,sp,139
10007a88:	dc002a15 	stw	r16,168(sp)
10007a8c:	4027883a 	mov	r19,r8
10007a90:	e021883a 	mov	r16,fp
10007a94:	b009883a 	mov	r4,r22
10007a98:	01400284 	movi	r5,10
10007a9c:	000f2f80 	call	1000f2f8 <__modsi3>
10007aa0:	10800c04 	addi	r2,r2,48
10007aa4:	843fffc4 	addi	r16,r16,-1
10007aa8:	b009883a 	mov	r4,r22
10007aac:	01400284 	movi	r5,10
10007ab0:	80800005 	stb	r2,0(r16)
10007ab4:	000f2740 	call	1000f274 <__divsi3>
10007ab8:	102d883a 	mov	r22,r2
10007abc:	00800244 	movi	r2,9
10007ac0:	15bff416 	blt	r2,r22,10007a94 <__alt_data_end+0xf8007a94>
10007ac4:	9811883a 	mov	r8,r19
10007ac8:	b0800c04 	addi	r2,r22,48
10007acc:	8027883a 	mov	r19,r16
10007ad0:	997fffc4 	addi	r5,r19,-1
10007ad4:	98bfffc5 	stb	r2,-1(r19)
10007ad8:	dc002a17 	ldw	r16,168(sp)
10007adc:	2f006d2e 	bgeu	r5,fp,10007c94 <___vfprintf_internal_r+0x22a4>
10007ae0:	d9c02384 	addi	r7,sp,142
10007ae4:	3ccfc83a 	sub	r7,r7,r19
10007ae8:	d9002344 	addi	r4,sp,141
10007aec:	e1cf883a 	add	r7,fp,r7
10007af0:	00000106 	br	10007af8 <___vfprintf_internal_r+0x2108>
10007af4:	28800003 	ldbu	r2,0(r5)
10007af8:	20800005 	stb	r2,0(r4)
10007afc:	21000044 	addi	r4,r4,1
10007b00:	29400044 	addi	r5,r5,1
10007b04:	393ffb1e 	bne	r7,r4,10007af4 <__alt_data_end+0xf8007af4>
10007b08:	d8802304 	addi	r2,sp,140
10007b0c:	14c5c83a 	sub	r2,r2,r19
10007b10:	d8c02344 	addi	r3,sp,141
10007b14:	1885883a 	add	r2,r3,r2
10007b18:	003f7006 	br	100078dc <__alt_data_end+0xf80078dc>
10007b1c:	0005883a 	mov	r2,zero
10007b20:	003f0f06 	br	10007760 <__alt_data_end+0xf8007760>
10007b24:	d8c03217 	ldw	r3,200(sp)
10007b28:	18c00044 	addi	r3,r3,1
10007b2c:	d8c02b15 	stw	r3,172(sp)
10007b30:	1805883a 	mov	r2,r3
10007b34:	183fb20e 	bge	r3,zero,10007a00 <__alt_data_end+0xf8007a00>
10007b38:	0005883a 	mov	r2,zero
10007b3c:	003fb006 	br	10007a00 <__alt_data_end+0xf8007a00>
10007b40:	d9003617 	ldw	r4,216(sp)
10007b44:	000d883a 	mov	r6,zero
10007b48:	000f883a 	mov	r7,zero
10007b4c:	980b883a 	mov	r5,r19
10007b50:	d8c03c15 	stw	r3,240(sp)
10007b54:	da003d15 	stw	r8,244(sp)
10007b58:	00106a40 	call	100106a4 <__eqdf2>
10007b5c:	d8c03c17 	ldw	r3,240(sp)
10007b60:	da003d17 	ldw	r8,244(sp)
10007b64:	103f9826 	beq	r2,zero,100079c8 <__alt_data_end+0xf80079c8>
10007b68:	00800044 	movi	r2,1
10007b6c:	10c7c83a 	sub	r3,r2,r3
10007b70:	d8c02615 	stw	r3,152(sp)
10007b74:	003f9506 	br	100079cc <__alt_data_end+0xf80079cc>
10007b78:	d9002a17 	ldw	r4,168(sp)
10007b7c:	d8c03217 	ldw	r3,200(sp)
10007b80:	20800044 	addi	r2,r4,1
10007b84:	1885883a 	add	r2,r3,r2
10007b88:	d8802b15 	stw	r2,172(sp)
10007b8c:	103dbf0e 	bge	r2,zero,1000728c <__alt_data_end+0xf800728c>
10007b90:	0005883a 	mov	r2,zero
10007b94:	003dbd06 	br	1000728c <__alt_data_end+0xf800728c>
10007b98:	2000201e 	bne	r4,zero,10007c1c <___vfprintf_internal_r+0x222c>
10007b9c:	9480004c 	andi	r18,r18,1
10007ba0:	90001e1e 	bne	r18,zero,10007c1c <___vfprintf_internal_r+0x222c>
10007ba4:	00800044 	movi	r2,1
10007ba8:	d8802b15 	stw	r2,172(sp)
10007bac:	003db706 	br	1000728c <__alt_data_end+0xf800728c>
10007bb0:	00800b44 	movi	r2,45
10007bb4:	05adc83a 	sub	r22,zero,r22
10007bb8:	d8802305 	stb	r2,140(sp)
10007bbc:	003f3f06 	br	100078bc <__alt_data_end+0xf80078bc>
10007bc0:	0005883a 	mov	r2,zero
10007bc4:	003f5206 	br	10007910 <__alt_data_end+0xf8007910>
10007bc8:	90a4703a 	and	r18,r18,r2
10007bcc:	903f4e26 	beq	r18,zero,10007908 <__alt_data_end+0xf8007908>
10007bd0:	003f4a06 	br	100078fc <__alt_data_end+0xf80078fc>
10007bd4:	00800084 	movi	r2,2
10007bd8:	10c5c83a 	sub	r2,r2,r3
10007bdc:	003f8406 	br	100079f0 <__alt_data_end+0xf80079f0>
10007be0:	d9402e17 	ldw	r5,184(sp)
10007be4:	d9002e17 	ldw	r4,184(sp)
10007be8:	ac400043 	ldbu	r17,1(r21)
10007bec:	29400017 	ldw	r5,0(r5)
10007bf0:	20800104 	addi	r2,r4,4
10007bf4:	d8802e15 	stw	r2,184(sp)
10007bf8:	d9402a15 	stw	r5,168(sp)
10007bfc:	182b883a 	mov	r21,r3
10007c00:	283e7b0e 	bge	r5,zero,100075f0 <__alt_data_end+0xf80075f0>
10007c04:	8c403fcc 	andi	r17,r17,255
10007c08:	017fffc4 	movi	r5,-1
10007c0c:	8c40201c 	xori	r17,r17,128
10007c10:	d9402a15 	stw	r5,168(sp)
10007c14:	8c7fe004 	addi	r17,r17,-128
10007c18:	0037d706 	br	10005b78 <__alt_data_end+0xf8005b78>
10007c1c:	d8c02a17 	ldw	r3,168(sp)
10007c20:	18c00084 	addi	r3,r3,2
10007c24:	d8c02b15 	stw	r3,172(sp)
10007c28:	1805883a 	mov	r2,r3
10007c2c:	183d970e 	bge	r3,zero,1000728c <__alt_data_end+0xf800728c>
10007c30:	003fd706 	br	10007b90 <__alt_data_end+0xf8007b90>
10007c34:	0005883a 	mov	r2,zero
10007c38:	003f8f06 	br	10007a78 <__alt_data_end+0xf8007a78>
10007c3c:	9080004c 	andi	r2,r18,1
10007c40:	103f821e 	bne	r2,zero,10007a4c <__alt_data_end+0xf8007a4c>
10007c44:	d8802117 	ldw	r2,132(sp)
10007c48:	1405c83a 	sub	r2,r2,r16
10007c4c:	d8803315 	stw	r2,204(sp)
10007c50:	b47ef426 	beq	r22,r17,10007824 <__alt_data_end+0xf8007824>
10007c54:	dd802617 	ldw	r22,152(sp)
10007c58:	003f1206 	br	100078a4 <__alt_data_end+0xf80078a4>
10007c5c:	d8c02b03 	ldbu	r3,172(sp)
10007c60:	d8c02785 	stb	r3,158(sp)
10007c64:	0038df06 	br	10005fe4 <__alt_data_end+0xf8005fe4>
10007c68:	d8c02b03 	ldbu	r3,172(sp)
10007c6c:	d8c02785 	stb	r3,158(sp)
10007c70:	0038aa06 	br	10005f1c <__alt_data_end+0xf8005f1c>
10007c74:	d8c02b03 	ldbu	r3,172(sp)
10007c78:	d8c02785 	stb	r3,158(sp)
10007c7c:	003a4306 	br	1000658c <__alt_data_end+0xf800658c>
10007c80:	d8c02b03 	ldbu	r3,172(sp)
10007c84:	d8c02785 	stb	r3,158(sp)
10007c88:	003af506 	br	10006860 <__alt_data_end+0xf8006860>
10007c8c:	0005883a 	mov	r2,zero
10007c90:	003d7b06 	br	10007280 <__alt_data_end+0xf8007280>
10007c94:	d8802344 	addi	r2,sp,141
10007c98:	003f1006 	br	100078dc <__alt_data_end+0xf80078dc>
10007c9c:	d8c02b03 	ldbu	r3,172(sp)
10007ca0:	d8c02785 	stb	r3,158(sp)
10007ca4:	0038fd06 	br	1000609c <__alt_data_end+0xf800609c>
10007ca8:	d8c02b03 	ldbu	r3,172(sp)
10007cac:	d8c02785 	stb	r3,158(sp)
10007cb0:	003a9706 	br	10006710 <__alt_data_end+0xf8006710>
10007cb4:	d8c02b03 	ldbu	r3,172(sp)
10007cb8:	d8c02785 	stb	r3,158(sp)
10007cbc:	003a1806 	br	10006520 <__alt_data_end+0xf8006520>
10007cc0:	d8c02b03 	ldbu	r3,172(sp)
10007cc4:	d8c02785 	stb	r3,158(sp)
10007cc8:	003abe06 	br	100067c4 <__alt_data_end+0xf80067c4>

10007ccc <__vfprintf_internal>:
10007ccc:	00840074 	movhi	r2,4097
10007cd0:	109ba704 	addi	r2,r2,28316
10007cd4:	300f883a 	mov	r7,r6
10007cd8:	280d883a 	mov	r6,r5
10007cdc:	200b883a 	mov	r5,r4
10007ce0:	11000017 	ldw	r4,0(r2)
10007ce4:	00059f01 	jmpi	100059f0 <___vfprintf_internal_r>

10007ce8 <__sbprintf>:
10007ce8:	2880030b 	ldhu	r2,12(r5)
10007cec:	2ac01917 	ldw	r11,100(r5)
10007cf0:	2a80038b 	ldhu	r10,14(r5)
10007cf4:	2a400717 	ldw	r9,28(r5)
10007cf8:	2a000917 	ldw	r8,36(r5)
10007cfc:	defee204 	addi	sp,sp,-1144
10007d00:	00c10004 	movi	r3,1024
10007d04:	dc011a15 	stw	r16,1128(sp)
10007d08:	10bfff4c 	andi	r2,r2,65533
10007d0c:	2821883a 	mov	r16,r5
10007d10:	d8cb883a 	add	r5,sp,r3
10007d14:	dc811c15 	stw	r18,1136(sp)
10007d18:	dc411b15 	stw	r17,1132(sp)
10007d1c:	dfc11d15 	stw	ra,1140(sp)
10007d20:	2025883a 	mov	r18,r4
10007d24:	d881030d 	sth	r2,1036(sp)
10007d28:	dac11915 	stw	r11,1124(sp)
10007d2c:	da81038d 	sth	r10,1038(sp)
10007d30:	da410715 	stw	r9,1052(sp)
10007d34:	da010915 	stw	r8,1060(sp)
10007d38:	dec10015 	stw	sp,1024(sp)
10007d3c:	dec10415 	stw	sp,1040(sp)
10007d40:	d8c10215 	stw	r3,1032(sp)
10007d44:	d8c10515 	stw	r3,1044(sp)
10007d48:	d8010615 	stw	zero,1048(sp)
10007d4c:	00059f00 	call	100059f0 <___vfprintf_internal_r>
10007d50:	1023883a 	mov	r17,r2
10007d54:	10000416 	blt	r2,zero,10007d68 <__sbprintf+0x80>
10007d58:	d9410004 	addi	r5,sp,1024
10007d5c:	9009883a 	mov	r4,r18
10007d60:	00099c40 	call	100099c4 <_fflush_r>
10007d64:	10000d1e 	bne	r2,zero,10007d9c <__sbprintf+0xb4>
10007d68:	d881030b 	ldhu	r2,1036(sp)
10007d6c:	1080100c 	andi	r2,r2,64
10007d70:	10000326 	beq	r2,zero,10007d80 <__sbprintf+0x98>
10007d74:	8080030b 	ldhu	r2,12(r16)
10007d78:	10801014 	ori	r2,r2,64
10007d7c:	8080030d 	sth	r2,12(r16)
10007d80:	8805883a 	mov	r2,r17
10007d84:	dfc11d17 	ldw	ra,1140(sp)
10007d88:	dc811c17 	ldw	r18,1136(sp)
10007d8c:	dc411b17 	ldw	r17,1132(sp)
10007d90:	dc011a17 	ldw	r16,1128(sp)
10007d94:	dec11e04 	addi	sp,sp,1144
10007d98:	f800283a 	ret
10007d9c:	047fffc4 	movi	r17,-1
10007da0:	003ff106 	br	10007d68 <__alt_data_end+0xf8007d68>

10007da4 <__swsetup_r>:
10007da4:	00840074 	movhi	r2,4097
10007da8:	defffd04 	addi	sp,sp,-12
10007dac:	109ba704 	addi	r2,r2,28316
10007db0:	dc400115 	stw	r17,4(sp)
10007db4:	2023883a 	mov	r17,r4
10007db8:	11000017 	ldw	r4,0(r2)
10007dbc:	dc000015 	stw	r16,0(sp)
10007dc0:	dfc00215 	stw	ra,8(sp)
10007dc4:	2821883a 	mov	r16,r5
10007dc8:	20000226 	beq	r4,zero,10007dd4 <__swsetup_r+0x30>
10007dcc:	20800e17 	ldw	r2,56(r4)
10007dd0:	10003126 	beq	r2,zero,10007e98 <__swsetup_r+0xf4>
10007dd4:	8080030b 	ldhu	r2,12(r16)
10007dd8:	10c0020c 	andi	r3,r2,8
10007ddc:	1009883a 	mov	r4,r2
10007de0:	18000f26 	beq	r3,zero,10007e20 <__swsetup_r+0x7c>
10007de4:	80c00417 	ldw	r3,16(r16)
10007de8:	18001526 	beq	r3,zero,10007e40 <__swsetup_r+0x9c>
10007dec:	1100004c 	andi	r4,r2,1
10007df0:	20001c1e 	bne	r4,zero,10007e64 <__swsetup_r+0xc0>
10007df4:	1080008c 	andi	r2,r2,2
10007df8:	1000291e 	bne	r2,zero,10007ea0 <__swsetup_r+0xfc>
10007dfc:	80800517 	ldw	r2,20(r16)
10007e00:	80800215 	stw	r2,8(r16)
10007e04:	18001c26 	beq	r3,zero,10007e78 <__swsetup_r+0xd4>
10007e08:	0005883a 	mov	r2,zero
10007e0c:	dfc00217 	ldw	ra,8(sp)
10007e10:	dc400117 	ldw	r17,4(sp)
10007e14:	dc000017 	ldw	r16,0(sp)
10007e18:	dec00304 	addi	sp,sp,12
10007e1c:	f800283a 	ret
10007e20:	2080040c 	andi	r2,r4,16
10007e24:	10002e26 	beq	r2,zero,10007ee0 <__swsetup_r+0x13c>
10007e28:	2080010c 	andi	r2,r4,4
10007e2c:	10001e1e 	bne	r2,zero,10007ea8 <__swsetup_r+0x104>
10007e30:	80c00417 	ldw	r3,16(r16)
10007e34:	20800214 	ori	r2,r4,8
10007e38:	8080030d 	sth	r2,12(r16)
10007e3c:	183feb1e 	bne	r3,zero,10007dec <__alt_data_end+0xf8007dec>
10007e40:	1100a00c 	andi	r4,r2,640
10007e44:	01408004 	movi	r5,512
10007e48:	217fe826 	beq	r4,r5,10007dec <__alt_data_end+0xf8007dec>
10007e4c:	800b883a 	mov	r5,r16
10007e50:	8809883a 	mov	r4,r17
10007e54:	000a9600 	call	1000a960 <__smakebuf_r>
10007e58:	8080030b 	ldhu	r2,12(r16)
10007e5c:	80c00417 	ldw	r3,16(r16)
10007e60:	003fe206 	br	10007dec <__alt_data_end+0xf8007dec>
10007e64:	80800517 	ldw	r2,20(r16)
10007e68:	80000215 	stw	zero,8(r16)
10007e6c:	0085c83a 	sub	r2,zero,r2
10007e70:	80800615 	stw	r2,24(r16)
10007e74:	183fe41e 	bne	r3,zero,10007e08 <__alt_data_end+0xf8007e08>
10007e78:	80c0030b 	ldhu	r3,12(r16)
10007e7c:	0005883a 	mov	r2,zero
10007e80:	1900200c 	andi	r4,r3,128
10007e84:	203fe126 	beq	r4,zero,10007e0c <__alt_data_end+0xf8007e0c>
10007e88:	18c01014 	ori	r3,r3,64
10007e8c:	80c0030d 	sth	r3,12(r16)
10007e90:	00bfffc4 	movi	r2,-1
10007e94:	003fdd06 	br	10007e0c <__alt_data_end+0xf8007e0c>
10007e98:	0009db00 	call	10009db0 <__sinit>
10007e9c:	003fcd06 	br	10007dd4 <__alt_data_end+0xf8007dd4>
10007ea0:	0005883a 	mov	r2,zero
10007ea4:	003fd606 	br	10007e00 <__alt_data_end+0xf8007e00>
10007ea8:	81400c17 	ldw	r5,48(r16)
10007eac:	28000626 	beq	r5,zero,10007ec8 <__swsetup_r+0x124>
10007eb0:	80801004 	addi	r2,r16,64
10007eb4:	28800326 	beq	r5,r2,10007ec4 <__swsetup_r+0x120>
10007eb8:	8809883a 	mov	r4,r17
10007ebc:	0009f240 	call	10009f24 <_free_r>
10007ec0:	8100030b 	ldhu	r4,12(r16)
10007ec4:	80000c15 	stw	zero,48(r16)
10007ec8:	80c00417 	ldw	r3,16(r16)
10007ecc:	00bff6c4 	movi	r2,-37
10007ed0:	1108703a 	and	r4,r2,r4
10007ed4:	80000115 	stw	zero,4(r16)
10007ed8:	80c00015 	stw	r3,0(r16)
10007edc:	003fd506 	br	10007e34 <__alt_data_end+0xf8007e34>
10007ee0:	00800244 	movi	r2,9
10007ee4:	88800015 	stw	r2,0(r17)
10007ee8:	20801014 	ori	r2,r4,64
10007eec:	8080030d 	sth	r2,12(r16)
10007ef0:	00bfffc4 	movi	r2,-1
10007ef4:	003fc506 	br	10007e0c <__alt_data_end+0xf8007e0c>

10007ef8 <quorem>:
10007ef8:	defff204 	addi	sp,sp,-56
10007efc:	ddc00b15 	stw	r23,44(sp)
10007f00:	20800417 	ldw	r2,16(r4)
10007f04:	2dc00417 	ldw	r23,16(r5)
10007f08:	dfc00d15 	stw	ra,52(sp)
10007f0c:	df000c15 	stw	fp,48(sp)
10007f10:	dd800a15 	stw	r22,40(sp)
10007f14:	dd400915 	stw	r21,36(sp)
10007f18:	dd000815 	stw	r20,32(sp)
10007f1c:	dcc00715 	stw	r19,28(sp)
10007f20:	dc800615 	stw	r18,24(sp)
10007f24:	dc400515 	stw	r17,20(sp)
10007f28:	dc000415 	stw	r16,16(sp)
10007f2c:	15c07a16 	blt	r2,r23,10008118 <quorem+0x220>
10007f30:	bdffffc4 	addi	r23,r23,-1
10007f34:	bde9883a 	add	r20,r23,r23
10007f38:	28c00504 	addi	r3,r5,20
10007f3c:	a529883a 	add	r20,r20,r20
10007f40:	1d39883a 	add	fp,r3,r20
10007f44:	24c00504 	addi	r19,r4,20
10007f48:	d9400215 	stw	r5,8(sp)
10007f4c:	9d29883a 	add	r20,r19,r20
10007f50:	e1400017 	ldw	r5,0(fp)
10007f54:	d9000015 	stw	r4,0(sp)
10007f58:	a1000017 	ldw	r4,0(r20)
10007f5c:	29400044 	addi	r5,r5,1
10007f60:	d8c00115 	stw	r3,4(sp)
10007f64:	dd000315 	stw	r20,12(sp)
10007f68:	000f36c0 	call	1000f36c <__udivsi3>
10007f6c:	1025883a 	mov	r18,r2
10007f70:	10003026 	beq	r2,zero,10008034 <quorem+0x13c>
10007f74:	dc400117 	ldw	r17,4(sp)
10007f78:	9829883a 	mov	r20,r19
10007f7c:	002d883a 	mov	r22,zero
10007f80:	0021883a 	mov	r16,zero
10007f84:	8d400017 	ldw	r21,0(r17)
10007f88:	900b883a 	mov	r5,r18
10007f8c:	8c400104 	addi	r17,r17,4
10007f90:	a93fffcc 	andi	r4,r21,65535
10007f94:	00045280 	call	10004528 <__mulsi3>
10007f98:	a808d43a 	srli	r4,r21,16
10007f9c:	900b883a 	mov	r5,r18
10007fa0:	15ad883a 	add	r22,r2,r22
10007fa4:	00045280 	call	10004528 <__mulsi3>
10007fa8:	a1000017 	ldw	r4,0(r20)
10007fac:	b00cd43a 	srli	r6,r22,16
10007fb0:	b0ffffcc 	andi	r3,r22,65535
10007fb4:	217fffcc 	andi	r5,r4,65535
10007fb8:	2c21883a 	add	r16,r5,r16
10007fbc:	80c7c83a 	sub	r3,r16,r3
10007fc0:	2008d43a 	srli	r4,r4,16
10007fc4:	1185883a 	add	r2,r2,r6
10007fc8:	1821d43a 	srai	r16,r3,16
10007fcc:	117fffcc 	andi	r5,r2,65535
10007fd0:	2149c83a 	sub	r4,r4,r5
10007fd4:	2421883a 	add	r16,r4,r16
10007fd8:	8008943a 	slli	r4,r16,16
10007fdc:	18ffffcc 	andi	r3,r3,65535
10007fe0:	102cd43a 	srli	r22,r2,16
10007fe4:	20c8b03a 	or	r4,r4,r3
10007fe8:	a1000015 	stw	r4,0(r20)
10007fec:	8021d43a 	srai	r16,r16,16
10007ff0:	a5000104 	addi	r20,r20,4
10007ff4:	e47fe32e 	bgeu	fp,r17,10007f84 <__alt_data_end+0xf8007f84>
10007ff8:	d8c00317 	ldw	r3,12(sp)
10007ffc:	18800017 	ldw	r2,0(r3)
10008000:	10000c1e 	bne	r2,zero,10008034 <quorem+0x13c>
10008004:	18bfff04 	addi	r2,r3,-4
10008008:	9880082e 	bgeu	r19,r2,1000802c <quorem+0x134>
1000800c:	18ffff17 	ldw	r3,-4(r3)
10008010:	18000326 	beq	r3,zero,10008020 <quorem+0x128>
10008014:	00000506 	br	1000802c <quorem+0x134>
10008018:	10c00017 	ldw	r3,0(r2)
1000801c:	1800031e 	bne	r3,zero,1000802c <quorem+0x134>
10008020:	10bfff04 	addi	r2,r2,-4
10008024:	bdffffc4 	addi	r23,r23,-1
10008028:	98bffb36 	bltu	r19,r2,10008018 <__alt_data_end+0xf8008018>
1000802c:	d8c00017 	ldw	r3,0(sp)
10008030:	1dc00415 	stw	r23,16(r3)
10008034:	d9400217 	ldw	r5,8(sp)
10008038:	d9000017 	ldw	r4,0(sp)
1000803c:	000b8280 	call	1000b828 <__mcmp>
10008040:	10002816 	blt	r2,zero,100080e4 <quorem+0x1ec>
10008044:	dc400117 	ldw	r17,4(sp)
10008048:	94800044 	addi	r18,r18,1
1000804c:	980d883a 	mov	r6,r19
10008050:	0007883a 	mov	r3,zero
10008054:	31000017 	ldw	r4,0(r6)
10008058:	89400017 	ldw	r5,0(r17)
1000805c:	31800104 	addi	r6,r6,4
10008060:	20bfffcc 	andi	r2,r4,65535
10008064:	10c7883a 	add	r3,r2,r3
10008068:	28bfffcc 	andi	r2,r5,65535
1000806c:	1885c83a 	sub	r2,r3,r2
10008070:	280ad43a 	srli	r5,r5,16
10008074:	2008d43a 	srli	r4,r4,16
10008078:	1007d43a 	srai	r3,r2,16
1000807c:	10bfffcc 	andi	r2,r2,65535
10008080:	2149c83a 	sub	r4,r4,r5
10008084:	20c9883a 	add	r4,r4,r3
10008088:	200a943a 	slli	r5,r4,16
1000808c:	8c400104 	addi	r17,r17,4
10008090:	2007d43a 	srai	r3,r4,16
10008094:	2884b03a 	or	r2,r5,r2
10008098:	30bfff15 	stw	r2,-4(r6)
1000809c:	e47fed2e 	bgeu	fp,r17,10008054 <__alt_data_end+0xf8008054>
100080a0:	bdc5883a 	add	r2,r23,r23
100080a4:	1085883a 	add	r2,r2,r2
100080a8:	9887883a 	add	r3,r19,r2
100080ac:	18800017 	ldw	r2,0(r3)
100080b0:	10000c1e 	bne	r2,zero,100080e4 <quorem+0x1ec>
100080b4:	18bfff04 	addi	r2,r3,-4
100080b8:	9880082e 	bgeu	r19,r2,100080dc <quorem+0x1e4>
100080bc:	18ffff17 	ldw	r3,-4(r3)
100080c0:	18000326 	beq	r3,zero,100080d0 <quorem+0x1d8>
100080c4:	00000506 	br	100080dc <quorem+0x1e4>
100080c8:	10c00017 	ldw	r3,0(r2)
100080cc:	1800031e 	bne	r3,zero,100080dc <quorem+0x1e4>
100080d0:	10bfff04 	addi	r2,r2,-4
100080d4:	bdffffc4 	addi	r23,r23,-1
100080d8:	98bffb36 	bltu	r19,r2,100080c8 <__alt_data_end+0xf80080c8>
100080dc:	d8c00017 	ldw	r3,0(sp)
100080e0:	1dc00415 	stw	r23,16(r3)
100080e4:	9005883a 	mov	r2,r18
100080e8:	dfc00d17 	ldw	ra,52(sp)
100080ec:	df000c17 	ldw	fp,48(sp)
100080f0:	ddc00b17 	ldw	r23,44(sp)
100080f4:	dd800a17 	ldw	r22,40(sp)
100080f8:	dd400917 	ldw	r21,36(sp)
100080fc:	dd000817 	ldw	r20,32(sp)
10008100:	dcc00717 	ldw	r19,28(sp)
10008104:	dc800617 	ldw	r18,24(sp)
10008108:	dc400517 	ldw	r17,20(sp)
1000810c:	dc000417 	ldw	r16,16(sp)
10008110:	dec00e04 	addi	sp,sp,56
10008114:	f800283a 	ret
10008118:	0005883a 	mov	r2,zero
1000811c:	003ff206 	br	100080e8 <__alt_data_end+0xf80080e8>

10008120 <_dtoa_r>:
10008120:	20801017 	ldw	r2,64(r4)
10008124:	deffde04 	addi	sp,sp,-136
10008128:	df002015 	stw	fp,128(sp)
1000812c:	dcc01b15 	stw	r19,108(sp)
10008130:	dc801a15 	stw	r18,104(sp)
10008134:	dc401915 	stw	r17,100(sp)
10008138:	dc001815 	stw	r16,96(sp)
1000813c:	dfc02115 	stw	ra,132(sp)
10008140:	ddc01f15 	stw	r23,124(sp)
10008144:	dd801e15 	stw	r22,120(sp)
10008148:	dd401d15 	stw	r21,116(sp)
1000814c:	dd001c15 	stw	r20,112(sp)
10008150:	d9c00315 	stw	r7,12(sp)
10008154:	2039883a 	mov	fp,r4
10008158:	3023883a 	mov	r17,r6
1000815c:	2825883a 	mov	r18,r5
10008160:	dc002417 	ldw	r16,144(sp)
10008164:	3027883a 	mov	r19,r6
10008168:	10000826 	beq	r2,zero,1000818c <_dtoa_r+0x6c>
1000816c:	21801117 	ldw	r6,68(r4)
10008170:	00c00044 	movi	r3,1
10008174:	100b883a 	mov	r5,r2
10008178:	1986983a 	sll	r3,r3,r6
1000817c:	11800115 	stw	r6,4(r2)
10008180:	10c00215 	stw	r3,8(r2)
10008184:	000af4c0 	call	1000af4c <_Bfree>
10008188:	e0001015 	stw	zero,64(fp)
1000818c:	88002e16 	blt	r17,zero,10008248 <_dtoa_r+0x128>
10008190:	80000015 	stw	zero,0(r16)
10008194:	889ffc2c 	andhi	r2,r17,32752
10008198:	00dffc34 	movhi	r3,32752
1000819c:	10c01c26 	beq	r2,r3,10008210 <_dtoa_r+0xf0>
100081a0:	000d883a 	mov	r6,zero
100081a4:	000f883a 	mov	r7,zero
100081a8:	9009883a 	mov	r4,r18
100081ac:	980b883a 	mov	r5,r19
100081b0:	00106a40 	call	100106a4 <__eqdf2>
100081b4:	10002b1e 	bne	r2,zero,10008264 <_dtoa_r+0x144>
100081b8:	d9c02317 	ldw	r7,140(sp)
100081bc:	00800044 	movi	r2,1
100081c0:	38800015 	stw	r2,0(r7)
100081c4:	d8802517 	ldw	r2,148(sp)
100081c8:	10019e26 	beq	r2,zero,10008844 <_dtoa_r+0x724>
100081cc:	d8c02517 	ldw	r3,148(sp)
100081d0:	00840074 	movhi	r2,4097
100081d4:	10943e44 	addi	r2,r2,20729
100081d8:	18800015 	stw	r2,0(r3)
100081dc:	10bfffc4 	addi	r2,r2,-1
100081e0:	dfc02117 	ldw	ra,132(sp)
100081e4:	df002017 	ldw	fp,128(sp)
100081e8:	ddc01f17 	ldw	r23,124(sp)
100081ec:	dd801e17 	ldw	r22,120(sp)
100081f0:	dd401d17 	ldw	r21,116(sp)
100081f4:	dd001c17 	ldw	r20,112(sp)
100081f8:	dcc01b17 	ldw	r19,108(sp)
100081fc:	dc801a17 	ldw	r18,104(sp)
10008200:	dc401917 	ldw	r17,100(sp)
10008204:	dc001817 	ldw	r16,96(sp)
10008208:	dec02204 	addi	sp,sp,136
1000820c:	f800283a 	ret
10008210:	d8c02317 	ldw	r3,140(sp)
10008214:	0089c3c4 	movi	r2,9999
10008218:	18800015 	stw	r2,0(r3)
1000821c:	90017726 	beq	r18,zero,100087fc <_dtoa_r+0x6dc>
10008220:	00840074 	movhi	r2,4097
10008224:	10944a04 	addi	r2,r2,20776
10008228:	d9002517 	ldw	r4,148(sp)
1000822c:	203fec26 	beq	r4,zero,100081e0 <__alt_data_end+0xf80081e0>
10008230:	10c000c7 	ldb	r3,3(r2)
10008234:	1801781e 	bne	r3,zero,10008818 <_dtoa_r+0x6f8>
10008238:	10c000c4 	addi	r3,r2,3
1000823c:	d9802517 	ldw	r6,148(sp)
10008240:	30c00015 	stw	r3,0(r6)
10008244:	003fe606 	br	100081e0 <__alt_data_end+0xf80081e0>
10008248:	04e00034 	movhi	r19,32768
1000824c:	9cffffc4 	addi	r19,r19,-1
10008250:	00800044 	movi	r2,1
10008254:	8ce6703a 	and	r19,r17,r19
10008258:	80800015 	stw	r2,0(r16)
1000825c:	9823883a 	mov	r17,r19
10008260:	003fcc06 	br	10008194 <__alt_data_end+0xf8008194>
10008264:	d8800204 	addi	r2,sp,8
10008268:	d8800015 	stw	r2,0(sp)
1000826c:	d9c00104 	addi	r7,sp,4
10008270:	900b883a 	mov	r5,r18
10008274:	980d883a 	mov	r6,r19
10008278:	e009883a 	mov	r4,fp
1000827c:	8820d53a 	srli	r16,r17,20
10008280:	000bbf40 	call	1000bbf4 <__d2b>
10008284:	d8800915 	stw	r2,36(sp)
10008288:	8001651e 	bne	r16,zero,10008820 <_dtoa_r+0x700>
1000828c:	dd800217 	ldw	r22,8(sp)
10008290:	dc000117 	ldw	r16,4(sp)
10008294:	00800804 	movi	r2,32
10008298:	b421883a 	add	r16,r22,r16
1000829c:	80c10c84 	addi	r3,r16,1074
100082a0:	10c2d10e 	bge	r2,r3,10008de8 <_dtoa_r+0xcc8>
100082a4:	00801004 	movi	r2,64
100082a8:	81010484 	addi	r4,r16,1042
100082ac:	10c7c83a 	sub	r3,r2,r3
100082b0:	9108d83a 	srl	r4,r18,r4
100082b4:	88e2983a 	sll	r17,r17,r3
100082b8:	2448b03a 	or	r4,r4,r17
100082bc:	0011bc00 	call	10011bc0 <__floatunsidf>
100082c0:	017f8434 	movhi	r5,65040
100082c4:	01800044 	movi	r6,1
100082c8:	1009883a 	mov	r4,r2
100082cc:	194b883a 	add	r5,r3,r5
100082d0:	843fffc4 	addi	r16,r16,-1
100082d4:	d9801115 	stw	r6,68(sp)
100082d8:	000d883a 	mov	r6,zero
100082dc:	01cffe34 	movhi	r7,16376
100082e0:	00111680 	call	10011168 <__subdf3>
100082e4:	0198dbf4 	movhi	r6,25455
100082e8:	01cff4f4 	movhi	r7,16339
100082ec:	3190d844 	addi	r6,r6,17249
100082f0:	39e1e9c4 	addi	r7,r7,-30809
100082f4:	1009883a 	mov	r4,r2
100082f8:	180b883a 	mov	r5,r3
100082fc:	00108fc0 	call	100108fc <__muldf3>
10008300:	01a2d874 	movhi	r6,35681
10008304:	01cff1f4 	movhi	r7,16327
10008308:	31b22cc4 	addi	r6,r6,-14157
1000830c:	39e28a04 	addi	r7,r7,-30168
10008310:	180b883a 	mov	r5,r3
10008314:	1009883a 	mov	r4,r2
10008318:	000f4280 	call	1000f428 <__adddf3>
1000831c:	8009883a 	mov	r4,r16
10008320:	1029883a 	mov	r20,r2
10008324:	1823883a 	mov	r17,r3
10008328:	0011ae40 	call	10011ae4 <__floatsidf>
1000832c:	019427f4 	movhi	r6,20639
10008330:	01cff4f4 	movhi	r7,16339
10008334:	319e7ec4 	addi	r6,r6,31227
10008338:	39d104c4 	addi	r7,r7,17427
1000833c:	1009883a 	mov	r4,r2
10008340:	180b883a 	mov	r5,r3
10008344:	00108fc0 	call	100108fc <__muldf3>
10008348:	100d883a 	mov	r6,r2
1000834c:	180f883a 	mov	r7,r3
10008350:	a009883a 	mov	r4,r20
10008354:	880b883a 	mov	r5,r17
10008358:	000f4280 	call	1000f428 <__adddf3>
1000835c:	1009883a 	mov	r4,r2
10008360:	180b883a 	mov	r5,r3
10008364:	1029883a 	mov	r20,r2
10008368:	1823883a 	mov	r17,r3
1000836c:	0011a640 	call	10011a64 <__fixdfsi>
10008370:	000d883a 	mov	r6,zero
10008374:	000f883a 	mov	r7,zero
10008378:	a009883a 	mov	r4,r20
1000837c:	880b883a 	mov	r5,r17
10008380:	d8800515 	stw	r2,20(sp)
10008384:	00108080 	call	10010808 <__ledf2>
10008388:	10028716 	blt	r2,zero,10008da8 <_dtoa_r+0xc88>
1000838c:	d8c00517 	ldw	r3,20(sp)
10008390:	00800584 	movi	r2,22
10008394:	10c27536 	bltu	r2,r3,10008d6c <_dtoa_r+0xc4c>
10008398:	180490fa 	slli	r2,r3,3
1000839c:	00c40074 	movhi	r3,4097
100083a0:	18d46604 	addi	r3,r3,20888
100083a4:	1885883a 	add	r2,r3,r2
100083a8:	11000017 	ldw	r4,0(r2)
100083ac:	11400117 	ldw	r5,4(r2)
100083b0:	900d883a 	mov	r6,r18
100083b4:	980f883a 	mov	r7,r19
100083b8:	001072c0 	call	1001072c <__gedf2>
100083bc:	00828d0e 	bge	zero,r2,10008df4 <_dtoa_r+0xcd4>
100083c0:	d9000517 	ldw	r4,20(sp)
100083c4:	d8000e15 	stw	zero,56(sp)
100083c8:	213fffc4 	addi	r4,r4,-1
100083cc:	d9000515 	stw	r4,20(sp)
100083d0:	b42dc83a 	sub	r22,r22,r16
100083d4:	b5bfffc4 	addi	r22,r22,-1
100083d8:	b0026f16 	blt	r22,zero,10008d98 <_dtoa_r+0xc78>
100083dc:	d8000815 	stw	zero,32(sp)
100083e0:	d9c00517 	ldw	r7,20(sp)
100083e4:	38026416 	blt	r7,zero,10008d78 <_dtoa_r+0xc58>
100083e8:	b1ed883a 	add	r22,r22,r7
100083ec:	d9c00d15 	stw	r7,52(sp)
100083f0:	d8000a15 	stw	zero,40(sp)
100083f4:	d9800317 	ldw	r6,12(sp)
100083f8:	00800244 	movi	r2,9
100083fc:	11811436 	bltu	r2,r6,10008850 <_dtoa_r+0x730>
10008400:	00800144 	movi	r2,5
10008404:	1184e10e 	bge	r2,r6,1000978c <_dtoa_r+0x166c>
10008408:	31bfff04 	addi	r6,r6,-4
1000840c:	d9800315 	stw	r6,12(sp)
10008410:	0023883a 	mov	r17,zero
10008414:	d9800317 	ldw	r6,12(sp)
10008418:	008000c4 	movi	r2,3
1000841c:	30836726 	beq	r6,r2,100091bc <_dtoa_r+0x109c>
10008420:	1183410e 	bge	r2,r6,10009128 <_dtoa_r+0x1008>
10008424:	d9c00317 	ldw	r7,12(sp)
10008428:	00800104 	movi	r2,4
1000842c:	38827c26 	beq	r7,r2,10008e20 <_dtoa_r+0xd00>
10008430:	00800144 	movi	r2,5
10008434:	3884c41e 	bne	r7,r2,10009748 <_dtoa_r+0x1628>
10008438:	00800044 	movi	r2,1
1000843c:	d8800b15 	stw	r2,44(sp)
10008440:	d8c00517 	ldw	r3,20(sp)
10008444:	d9002217 	ldw	r4,136(sp)
10008448:	1907883a 	add	r3,r3,r4
1000844c:	19800044 	addi	r6,r3,1
10008450:	d8c00c15 	stw	r3,48(sp)
10008454:	d9800615 	stw	r6,24(sp)
10008458:	0183a40e 	bge	zero,r6,100092ec <_dtoa_r+0x11cc>
1000845c:	d9800617 	ldw	r6,24(sp)
10008460:	3021883a 	mov	r16,r6
10008464:	e0001115 	stw	zero,68(fp)
10008468:	008005c4 	movi	r2,23
1000846c:	1184c92e 	bgeu	r2,r6,10009794 <_dtoa_r+0x1674>
10008470:	00c00044 	movi	r3,1
10008474:	00800104 	movi	r2,4
10008478:	1085883a 	add	r2,r2,r2
1000847c:	11000504 	addi	r4,r2,20
10008480:	180b883a 	mov	r5,r3
10008484:	18c00044 	addi	r3,r3,1
10008488:	313ffb2e 	bgeu	r6,r4,10008478 <__alt_data_end+0xf8008478>
1000848c:	e1401115 	stw	r5,68(fp)
10008490:	e009883a 	mov	r4,fp
10008494:	000aea40 	call	1000aea4 <_Balloc>
10008498:	d8800715 	stw	r2,28(sp)
1000849c:	e0801015 	stw	r2,64(fp)
100084a0:	00800384 	movi	r2,14
100084a4:	1400f736 	bltu	r2,r16,10008884 <_dtoa_r+0x764>
100084a8:	8800f626 	beq	r17,zero,10008884 <_dtoa_r+0x764>
100084ac:	d9c00517 	ldw	r7,20(sp)
100084b0:	01c39a0e 	bge	zero,r7,1000931c <_dtoa_r+0x11fc>
100084b4:	388003cc 	andi	r2,r7,15
100084b8:	100490fa 	slli	r2,r2,3
100084bc:	382bd13a 	srai	r21,r7,4
100084c0:	00c40074 	movhi	r3,4097
100084c4:	18d46604 	addi	r3,r3,20888
100084c8:	1885883a 	add	r2,r3,r2
100084cc:	a8c0040c 	andi	r3,r21,16
100084d0:	12400017 	ldw	r9,0(r2)
100084d4:	12000117 	ldw	r8,4(r2)
100084d8:	18037926 	beq	r3,zero,100092c0 <_dtoa_r+0x11a0>
100084dc:	00840074 	movhi	r2,4097
100084e0:	10945c04 	addi	r2,r2,20848
100084e4:	11800817 	ldw	r6,32(r2)
100084e8:	11c00917 	ldw	r7,36(r2)
100084ec:	9009883a 	mov	r4,r18
100084f0:	980b883a 	mov	r5,r19
100084f4:	da001715 	stw	r8,92(sp)
100084f8:	da401615 	stw	r9,88(sp)
100084fc:	000fcd40 	call	1000fcd4 <__divdf3>
10008500:	da001717 	ldw	r8,92(sp)
10008504:	da401617 	ldw	r9,88(sp)
10008508:	ad4003cc 	andi	r21,r21,15
1000850c:	040000c4 	movi	r16,3
10008510:	1023883a 	mov	r17,r2
10008514:	1829883a 	mov	r20,r3
10008518:	a8001126 	beq	r21,zero,10008560 <_dtoa_r+0x440>
1000851c:	05c40074 	movhi	r23,4097
10008520:	bdd45c04 	addi	r23,r23,20848
10008524:	4805883a 	mov	r2,r9
10008528:	4007883a 	mov	r3,r8
1000852c:	a980004c 	andi	r6,r21,1
10008530:	1009883a 	mov	r4,r2
10008534:	a82bd07a 	srai	r21,r21,1
10008538:	180b883a 	mov	r5,r3
1000853c:	30000426 	beq	r6,zero,10008550 <_dtoa_r+0x430>
10008540:	b9800017 	ldw	r6,0(r23)
10008544:	b9c00117 	ldw	r7,4(r23)
10008548:	84000044 	addi	r16,r16,1
1000854c:	00108fc0 	call	100108fc <__muldf3>
10008550:	bdc00204 	addi	r23,r23,8
10008554:	a83ff51e 	bne	r21,zero,1000852c <__alt_data_end+0xf800852c>
10008558:	1013883a 	mov	r9,r2
1000855c:	1811883a 	mov	r8,r3
10008560:	480d883a 	mov	r6,r9
10008564:	400f883a 	mov	r7,r8
10008568:	8809883a 	mov	r4,r17
1000856c:	a00b883a 	mov	r5,r20
10008570:	000fcd40 	call	1000fcd4 <__divdf3>
10008574:	d8800f15 	stw	r2,60(sp)
10008578:	d8c01015 	stw	r3,64(sp)
1000857c:	d8c00e17 	ldw	r3,56(sp)
10008580:	18000626 	beq	r3,zero,1000859c <_dtoa_r+0x47c>
10008584:	d9000f17 	ldw	r4,60(sp)
10008588:	d9401017 	ldw	r5,64(sp)
1000858c:	000d883a 	mov	r6,zero
10008590:	01cffc34 	movhi	r7,16368
10008594:	00108080 	call	10010808 <__ledf2>
10008598:	10040b16 	blt	r2,zero,100095c8 <_dtoa_r+0x14a8>
1000859c:	8009883a 	mov	r4,r16
100085a0:	0011ae40 	call	10011ae4 <__floatsidf>
100085a4:	d9800f17 	ldw	r6,60(sp)
100085a8:	d9c01017 	ldw	r7,64(sp)
100085ac:	1009883a 	mov	r4,r2
100085b0:	180b883a 	mov	r5,r3
100085b4:	00108fc0 	call	100108fc <__muldf3>
100085b8:	000d883a 	mov	r6,zero
100085bc:	01d00734 	movhi	r7,16412
100085c0:	1009883a 	mov	r4,r2
100085c4:	180b883a 	mov	r5,r3
100085c8:	000f4280 	call	1000f428 <__adddf3>
100085cc:	1021883a 	mov	r16,r2
100085d0:	d8800617 	ldw	r2,24(sp)
100085d4:	047f3034 	movhi	r17,64704
100085d8:	1c63883a 	add	r17,r3,r17
100085dc:	10031826 	beq	r2,zero,10009240 <_dtoa_r+0x1120>
100085e0:	d8c00517 	ldw	r3,20(sp)
100085e4:	db000617 	ldw	r12,24(sp)
100085e8:	d8c01315 	stw	r3,76(sp)
100085ec:	d9000b17 	ldw	r4,44(sp)
100085f0:	20038f26 	beq	r4,zero,10009430 <_dtoa_r+0x1310>
100085f4:	60bfffc4 	addi	r2,r12,-1
100085f8:	100490fa 	slli	r2,r2,3
100085fc:	00c40074 	movhi	r3,4097
10008600:	18d46604 	addi	r3,r3,20888
10008604:	1885883a 	add	r2,r3,r2
10008608:	11800017 	ldw	r6,0(r2)
1000860c:	11c00117 	ldw	r7,4(r2)
10008610:	d8800717 	ldw	r2,28(sp)
10008614:	0009883a 	mov	r4,zero
10008618:	014ff834 	movhi	r5,16352
1000861c:	db001615 	stw	r12,88(sp)
10008620:	15c00044 	addi	r23,r2,1
10008624:	000fcd40 	call	1000fcd4 <__divdf3>
10008628:	800d883a 	mov	r6,r16
1000862c:	880f883a 	mov	r7,r17
10008630:	1009883a 	mov	r4,r2
10008634:	180b883a 	mov	r5,r3
10008638:	00111680 	call	10011168 <__subdf3>
1000863c:	d9401017 	ldw	r5,64(sp)
10008640:	d9000f17 	ldw	r4,60(sp)
10008644:	102b883a 	mov	r21,r2
10008648:	d8c01215 	stw	r3,72(sp)
1000864c:	0011a640 	call	10011a64 <__fixdfsi>
10008650:	1009883a 	mov	r4,r2
10008654:	1029883a 	mov	r20,r2
10008658:	0011ae40 	call	10011ae4 <__floatsidf>
1000865c:	d9000f17 	ldw	r4,60(sp)
10008660:	d9401017 	ldw	r5,64(sp)
10008664:	100d883a 	mov	r6,r2
10008668:	180f883a 	mov	r7,r3
1000866c:	00111680 	call	10011168 <__subdf3>
10008670:	1823883a 	mov	r17,r3
10008674:	d8c00717 	ldw	r3,28(sp)
10008678:	d9401217 	ldw	r5,72(sp)
1000867c:	a2000c04 	addi	r8,r20,48
10008680:	1021883a 	mov	r16,r2
10008684:	1a000005 	stb	r8,0(r3)
10008688:	800d883a 	mov	r6,r16
1000868c:	880f883a 	mov	r7,r17
10008690:	a809883a 	mov	r4,r21
10008694:	4029883a 	mov	r20,r8
10008698:	001072c0 	call	1001072c <__gedf2>
1000869c:	00841d16 	blt	zero,r2,10009714 <_dtoa_r+0x15f4>
100086a0:	800d883a 	mov	r6,r16
100086a4:	880f883a 	mov	r7,r17
100086a8:	0009883a 	mov	r4,zero
100086ac:	014ffc34 	movhi	r5,16368
100086b0:	00111680 	call	10011168 <__subdf3>
100086b4:	d9401217 	ldw	r5,72(sp)
100086b8:	100d883a 	mov	r6,r2
100086bc:	180f883a 	mov	r7,r3
100086c0:	a809883a 	mov	r4,r21
100086c4:	001072c0 	call	1001072c <__gedf2>
100086c8:	db001617 	ldw	r12,88(sp)
100086cc:	00840e16 	blt	zero,r2,10009708 <_dtoa_r+0x15e8>
100086d0:	00800044 	movi	r2,1
100086d4:	13006b0e 	bge	r2,r12,10008884 <_dtoa_r+0x764>
100086d8:	d9000717 	ldw	r4,28(sp)
100086dc:	dd800f15 	stw	r22,60(sp)
100086e0:	dcc01015 	stw	r19,64(sp)
100086e4:	2319883a 	add	r12,r4,r12
100086e8:	dcc01217 	ldw	r19,72(sp)
100086ec:	602d883a 	mov	r22,r12
100086f0:	dc801215 	stw	r18,72(sp)
100086f4:	b825883a 	mov	r18,r23
100086f8:	00000906 	br	10008720 <_dtoa_r+0x600>
100086fc:	00111680 	call	10011168 <__subdf3>
10008700:	a80d883a 	mov	r6,r21
10008704:	980f883a 	mov	r7,r19
10008708:	1009883a 	mov	r4,r2
1000870c:	180b883a 	mov	r5,r3
10008710:	00108080 	call	10010808 <__ledf2>
10008714:	1003e816 	blt	r2,zero,100096b8 <_dtoa_r+0x1598>
10008718:	b825883a 	mov	r18,r23
1000871c:	bd83e926 	beq	r23,r22,100096c4 <_dtoa_r+0x15a4>
10008720:	a809883a 	mov	r4,r21
10008724:	980b883a 	mov	r5,r19
10008728:	000d883a 	mov	r6,zero
1000872c:	01d00934 	movhi	r7,16420
10008730:	00108fc0 	call	100108fc <__muldf3>
10008734:	000d883a 	mov	r6,zero
10008738:	01d00934 	movhi	r7,16420
1000873c:	8009883a 	mov	r4,r16
10008740:	880b883a 	mov	r5,r17
10008744:	102b883a 	mov	r21,r2
10008748:	1827883a 	mov	r19,r3
1000874c:	00108fc0 	call	100108fc <__muldf3>
10008750:	180b883a 	mov	r5,r3
10008754:	1009883a 	mov	r4,r2
10008758:	1821883a 	mov	r16,r3
1000875c:	1023883a 	mov	r17,r2
10008760:	0011a640 	call	10011a64 <__fixdfsi>
10008764:	1009883a 	mov	r4,r2
10008768:	1029883a 	mov	r20,r2
1000876c:	0011ae40 	call	10011ae4 <__floatsidf>
10008770:	8809883a 	mov	r4,r17
10008774:	800b883a 	mov	r5,r16
10008778:	100d883a 	mov	r6,r2
1000877c:	180f883a 	mov	r7,r3
10008780:	00111680 	call	10011168 <__subdf3>
10008784:	a5000c04 	addi	r20,r20,48
10008788:	a80d883a 	mov	r6,r21
1000878c:	980f883a 	mov	r7,r19
10008790:	1009883a 	mov	r4,r2
10008794:	180b883a 	mov	r5,r3
10008798:	95000005 	stb	r20,0(r18)
1000879c:	1021883a 	mov	r16,r2
100087a0:	1823883a 	mov	r17,r3
100087a4:	00108080 	call	10010808 <__ledf2>
100087a8:	bdc00044 	addi	r23,r23,1
100087ac:	800d883a 	mov	r6,r16
100087b0:	880f883a 	mov	r7,r17
100087b4:	0009883a 	mov	r4,zero
100087b8:	014ffc34 	movhi	r5,16368
100087bc:	103fcf0e 	bge	r2,zero,100086fc <__alt_data_end+0xf80086fc>
100087c0:	d8c01317 	ldw	r3,76(sp)
100087c4:	d8c00515 	stw	r3,20(sp)
100087c8:	d9400917 	ldw	r5,36(sp)
100087cc:	e009883a 	mov	r4,fp
100087d0:	000af4c0 	call	1000af4c <_Bfree>
100087d4:	d9000517 	ldw	r4,20(sp)
100087d8:	d9802317 	ldw	r6,140(sp)
100087dc:	d9c02517 	ldw	r7,148(sp)
100087e0:	b8000005 	stb	zero,0(r23)
100087e4:	20800044 	addi	r2,r4,1
100087e8:	30800015 	stw	r2,0(r6)
100087ec:	3802aa26 	beq	r7,zero,10009298 <_dtoa_r+0x1178>
100087f0:	3dc00015 	stw	r23,0(r7)
100087f4:	d8800717 	ldw	r2,28(sp)
100087f8:	003e7906 	br	100081e0 <__alt_data_end+0xf80081e0>
100087fc:	00800434 	movhi	r2,16
10008800:	10bfffc4 	addi	r2,r2,-1
10008804:	88a2703a 	and	r17,r17,r2
10008808:	883e851e 	bne	r17,zero,10008220 <__alt_data_end+0xf8008220>
1000880c:	00840074 	movhi	r2,4097
10008810:	10944704 	addi	r2,r2,20764
10008814:	003e8406 	br	10008228 <__alt_data_end+0xf8008228>
10008818:	10c00204 	addi	r3,r2,8
1000881c:	003e8706 	br	1000823c <__alt_data_end+0xf800823c>
10008820:	01400434 	movhi	r5,16
10008824:	297fffc4 	addi	r5,r5,-1
10008828:	994a703a 	and	r5,r19,r5
1000882c:	9009883a 	mov	r4,r18
10008830:	843f0044 	addi	r16,r16,-1023
10008834:	294ffc34 	orhi	r5,r5,16368
10008838:	dd800217 	ldw	r22,8(sp)
1000883c:	d8001115 	stw	zero,68(sp)
10008840:	003ea506 	br	100082d8 <__alt_data_end+0xf80082d8>
10008844:	00840074 	movhi	r2,4097
10008848:	10943e04 	addi	r2,r2,20728
1000884c:	003e6406 	br	100081e0 <__alt_data_end+0xf80081e0>
10008850:	e0001115 	stw	zero,68(fp)
10008854:	000b883a 	mov	r5,zero
10008858:	e009883a 	mov	r4,fp
1000885c:	000aea40 	call	1000aea4 <_Balloc>
10008860:	01bfffc4 	movi	r6,-1
10008864:	01c00044 	movi	r7,1
10008868:	d8800715 	stw	r2,28(sp)
1000886c:	d9800c15 	stw	r6,48(sp)
10008870:	e0801015 	stw	r2,64(fp)
10008874:	d8000315 	stw	zero,12(sp)
10008878:	d9c00b15 	stw	r7,44(sp)
1000887c:	d9800615 	stw	r6,24(sp)
10008880:	d8002215 	stw	zero,136(sp)
10008884:	d8800117 	ldw	r2,4(sp)
10008888:	10008916 	blt	r2,zero,10008ab0 <_dtoa_r+0x990>
1000888c:	d9000517 	ldw	r4,20(sp)
10008890:	00c00384 	movi	r3,14
10008894:	19008616 	blt	r3,r4,10008ab0 <_dtoa_r+0x990>
10008898:	200490fa 	slli	r2,r4,3
1000889c:	00c40074 	movhi	r3,4097
100088a0:	d9802217 	ldw	r6,136(sp)
100088a4:	18d46604 	addi	r3,r3,20888
100088a8:	1885883a 	add	r2,r3,r2
100088ac:	14000017 	ldw	r16,0(r2)
100088b0:	14400117 	ldw	r17,4(r2)
100088b4:	30016316 	blt	r6,zero,10008e44 <_dtoa_r+0xd24>
100088b8:	800d883a 	mov	r6,r16
100088bc:	880f883a 	mov	r7,r17
100088c0:	9009883a 	mov	r4,r18
100088c4:	980b883a 	mov	r5,r19
100088c8:	000fcd40 	call	1000fcd4 <__divdf3>
100088cc:	180b883a 	mov	r5,r3
100088d0:	1009883a 	mov	r4,r2
100088d4:	0011a640 	call	10011a64 <__fixdfsi>
100088d8:	1009883a 	mov	r4,r2
100088dc:	102b883a 	mov	r21,r2
100088e0:	0011ae40 	call	10011ae4 <__floatsidf>
100088e4:	800d883a 	mov	r6,r16
100088e8:	880f883a 	mov	r7,r17
100088ec:	1009883a 	mov	r4,r2
100088f0:	180b883a 	mov	r5,r3
100088f4:	00108fc0 	call	100108fc <__muldf3>
100088f8:	100d883a 	mov	r6,r2
100088fc:	180f883a 	mov	r7,r3
10008900:	9009883a 	mov	r4,r18
10008904:	980b883a 	mov	r5,r19
10008908:	00111680 	call	10011168 <__subdf3>
1000890c:	d9c00717 	ldw	r7,28(sp)
10008910:	1009883a 	mov	r4,r2
10008914:	a8800c04 	addi	r2,r21,48
10008918:	38800005 	stb	r2,0(r7)
1000891c:	3dc00044 	addi	r23,r7,1
10008920:	d9c00617 	ldw	r7,24(sp)
10008924:	01800044 	movi	r6,1
10008928:	180b883a 	mov	r5,r3
1000892c:	2005883a 	mov	r2,r4
10008930:	39803826 	beq	r7,r6,10008a14 <_dtoa_r+0x8f4>
10008934:	000d883a 	mov	r6,zero
10008938:	01d00934 	movhi	r7,16420
1000893c:	00108fc0 	call	100108fc <__muldf3>
10008940:	000d883a 	mov	r6,zero
10008944:	000f883a 	mov	r7,zero
10008948:	1009883a 	mov	r4,r2
1000894c:	180b883a 	mov	r5,r3
10008950:	1025883a 	mov	r18,r2
10008954:	1827883a 	mov	r19,r3
10008958:	00106a40 	call	100106a4 <__eqdf2>
1000895c:	103f9a26 	beq	r2,zero,100087c8 <__alt_data_end+0xf80087c8>
10008960:	d9c00617 	ldw	r7,24(sp)
10008964:	d8c00717 	ldw	r3,28(sp)
10008968:	b829883a 	mov	r20,r23
1000896c:	38bfffc4 	addi	r2,r7,-1
10008970:	18ad883a 	add	r22,r3,r2
10008974:	00000a06 	br	100089a0 <_dtoa_r+0x880>
10008978:	00108fc0 	call	100108fc <__muldf3>
1000897c:	000d883a 	mov	r6,zero
10008980:	000f883a 	mov	r7,zero
10008984:	1009883a 	mov	r4,r2
10008988:	180b883a 	mov	r5,r3
1000898c:	1025883a 	mov	r18,r2
10008990:	1827883a 	mov	r19,r3
10008994:	b829883a 	mov	r20,r23
10008998:	00106a40 	call	100106a4 <__eqdf2>
1000899c:	103f8a26 	beq	r2,zero,100087c8 <__alt_data_end+0xf80087c8>
100089a0:	800d883a 	mov	r6,r16
100089a4:	880f883a 	mov	r7,r17
100089a8:	9009883a 	mov	r4,r18
100089ac:	980b883a 	mov	r5,r19
100089b0:	000fcd40 	call	1000fcd4 <__divdf3>
100089b4:	180b883a 	mov	r5,r3
100089b8:	1009883a 	mov	r4,r2
100089bc:	0011a640 	call	10011a64 <__fixdfsi>
100089c0:	1009883a 	mov	r4,r2
100089c4:	102b883a 	mov	r21,r2
100089c8:	0011ae40 	call	10011ae4 <__floatsidf>
100089cc:	800d883a 	mov	r6,r16
100089d0:	880f883a 	mov	r7,r17
100089d4:	1009883a 	mov	r4,r2
100089d8:	180b883a 	mov	r5,r3
100089dc:	00108fc0 	call	100108fc <__muldf3>
100089e0:	100d883a 	mov	r6,r2
100089e4:	180f883a 	mov	r7,r3
100089e8:	9009883a 	mov	r4,r18
100089ec:	980b883a 	mov	r5,r19
100089f0:	00111680 	call	10011168 <__subdf3>
100089f4:	aa000c04 	addi	r8,r21,48
100089f8:	a2000005 	stb	r8,0(r20)
100089fc:	000d883a 	mov	r6,zero
10008a00:	01d00934 	movhi	r7,16420
10008a04:	1009883a 	mov	r4,r2
10008a08:	180b883a 	mov	r5,r3
10008a0c:	a5c00044 	addi	r23,r20,1
10008a10:	b53fd91e 	bne	r22,r20,10008978 <__alt_data_end+0xf8008978>
10008a14:	100d883a 	mov	r6,r2
10008a18:	180f883a 	mov	r7,r3
10008a1c:	1009883a 	mov	r4,r2
10008a20:	180b883a 	mov	r5,r3
10008a24:	000f4280 	call	1000f428 <__adddf3>
10008a28:	100d883a 	mov	r6,r2
10008a2c:	180f883a 	mov	r7,r3
10008a30:	8009883a 	mov	r4,r16
10008a34:	880b883a 	mov	r5,r17
10008a38:	1027883a 	mov	r19,r2
10008a3c:	1825883a 	mov	r18,r3
10008a40:	00108080 	call	10010808 <__ledf2>
10008a44:	10000816 	blt	r2,zero,10008a68 <_dtoa_r+0x948>
10008a48:	980d883a 	mov	r6,r19
10008a4c:	900f883a 	mov	r7,r18
10008a50:	8009883a 	mov	r4,r16
10008a54:	880b883a 	mov	r5,r17
10008a58:	00106a40 	call	100106a4 <__eqdf2>
10008a5c:	103f5a1e 	bne	r2,zero,100087c8 <__alt_data_end+0xf80087c8>
10008a60:	ad40004c 	andi	r21,r21,1
10008a64:	a83f5826 	beq	r21,zero,100087c8 <__alt_data_end+0xf80087c8>
10008a68:	bd3fffc3 	ldbu	r20,-1(r23)
10008a6c:	b8bfffc4 	addi	r2,r23,-1
10008a70:	1007883a 	mov	r3,r2
10008a74:	01400e44 	movi	r5,57
10008a78:	d9800717 	ldw	r6,28(sp)
10008a7c:	00000506 	br	10008a94 <_dtoa_r+0x974>
10008a80:	18ffffc4 	addi	r3,r3,-1
10008a84:	11824726 	beq	r2,r6,100093a4 <_dtoa_r+0x1284>
10008a88:	1d000003 	ldbu	r20,0(r3)
10008a8c:	102f883a 	mov	r23,r2
10008a90:	10bfffc4 	addi	r2,r2,-1
10008a94:	a1003fcc 	andi	r4,r20,255
10008a98:	2100201c 	xori	r4,r4,128
10008a9c:	213fe004 	addi	r4,r4,-128
10008aa0:	217ff726 	beq	r4,r5,10008a80 <__alt_data_end+0xf8008a80>
10008aa4:	a2000044 	addi	r8,r20,1
10008aa8:	12000005 	stb	r8,0(r2)
10008aac:	003f4606 	br	100087c8 <__alt_data_end+0xf80087c8>
10008ab0:	d9000b17 	ldw	r4,44(sp)
10008ab4:	2000c826 	beq	r4,zero,10008dd8 <_dtoa_r+0xcb8>
10008ab8:	d9800317 	ldw	r6,12(sp)
10008abc:	00c00044 	movi	r3,1
10008ac0:	1980f90e 	bge	r3,r6,10008ea8 <_dtoa_r+0xd88>
10008ac4:	d8800617 	ldw	r2,24(sp)
10008ac8:	d8c00a17 	ldw	r3,40(sp)
10008acc:	157fffc4 	addi	r21,r2,-1
10008ad0:	1d41f316 	blt	r3,r21,100092a0 <_dtoa_r+0x1180>
10008ad4:	1d6bc83a 	sub	r21,r3,r21
10008ad8:	d9c00617 	ldw	r7,24(sp)
10008adc:	3802aa16 	blt	r7,zero,10009588 <_dtoa_r+0x1468>
10008ae0:	dd000817 	ldw	r20,32(sp)
10008ae4:	d8800617 	ldw	r2,24(sp)
10008ae8:	d8c00817 	ldw	r3,32(sp)
10008aec:	01400044 	movi	r5,1
10008af0:	e009883a 	mov	r4,fp
10008af4:	1887883a 	add	r3,r3,r2
10008af8:	d8c00815 	stw	r3,32(sp)
10008afc:	b0ad883a 	add	r22,r22,r2
10008b00:	000b2d80 	call	1000b2d8 <__i2b>
10008b04:	1023883a 	mov	r17,r2
10008b08:	a0000826 	beq	r20,zero,10008b2c <_dtoa_r+0xa0c>
10008b0c:	0580070e 	bge	zero,r22,10008b2c <_dtoa_r+0xa0c>
10008b10:	a005883a 	mov	r2,r20
10008b14:	b500b916 	blt	r22,r20,10008dfc <_dtoa_r+0xcdc>
10008b18:	d9000817 	ldw	r4,32(sp)
10008b1c:	a0a9c83a 	sub	r20,r20,r2
10008b20:	b0adc83a 	sub	r22,r22,r2
10008b24:	2089c83a 	sub	r4,r4,r2
10008b28:	d9000815 	stw	r4,32(sp)
10008b2c:	d9800a17 	ldw	r6,40(sp)
10008b30:	0181810e 	bge	zero,r6,10009138 <_dtoa_r+0x1018>
10008b34:	d9c00b17 	ldw	r7,44(sp)
10008b38:	3800b326 	beq	r7,zero,10008e08 <_dtoa_r+0xce8>
10008b3c:	a800b226 	beq	r21,zero,10008e08 <_dtoa_r+0xce8>
10008b40:	880b883a 	mov	r5,r17
10008b44:	a80d883a 	mov	r6,r21
10008b48:	e009883a 	mov	r4,fp
10008b4c:	000b5a00 	call	1000b5a0 <__pow5mult>
10008b50:	d9800917 	ldw	r6,36(sp)
10008b54:	100b883a 	mov	r5,r2
10008b58:	e009883a 	mov	r4,fp
10008b5c:	1023883a 	mov	r17,r2
10008b60:	000b3140 	call	1000b314 <__multiply>
10008b64:	1021883a 	mov	r16,r2
10008b68:	d8800a17 	ldw	r2,40(sp)
10008b6c:	d9400917 	ldw	r5,36(sp)
10008b70:	e009883a 	mov	r4,fp
10008b74:	1545c83a 	sub	r2,r2,r21
10008b78:	d8800a15 	stw	r2,40(sp)
10008b7c:	000af4c0 	call	1000af4c <_Bfree>
10008b80:	d8c00a17 	ldw	r3,40(sp)
10008b84:	18009f1e 	bne	r3,zero,10008e04 <_dtoa_r+0xce4>
10008b88:	05c00044 	movi	r23,1
10008b8c:	e009883a 	mov	r4,fp
10008b90:	b80b883a 	mov	r5,r23
10008b94:	000b2d80 	call	1000b2d8 <__i2b>
10008b98:	d9000d17 	ldw	r4,52(sp)
10008b9c:	102b883a 	mov	r21,r2
10008ba0:	2000ce26 	beq	r4,zero,10008edc <_dtoa_r+0xdbc>
10008ba4:	200d883a 	mov	r6,r4
10008ba8:	100b883a 	mov	r5,r2
10008bac:	e009883a 	mov	r4,fp
10008bb0:	000b5a00 	call	1000b5a0 <__pow5mult>
10008bb4:	d9800317 	ldw	r6,12(sp)
10008bb8:	102b883a 	mov	r21,r2
10008bbc:	b981810e 	bge	r23,r6,100091c4 <_dtoa_r+0x10a4>
10008bc0:	0027883a 	mov	r19,zero
10008bc4:	a8800417 	ldw	r2,16(r21)
10008bc8:	05c00804 	movi	r23,32
10008bcc:	10800104 	addi	r2,r2,4
10008bd0:	1085883a 	add	r2,r2,r2
10008bd4:	1085883a 	add	r2,r2,r2
10008bd8:	a885883a 	add	r2,r21,r2
10008bdc:	11000017 	ldw	r4,0(r2)
10008be0:	000b1c00 	call	1000b1c0 <__hi0bits>
10008be4:	b885c83a 	sub	r2,r23,r2
10008be8:	1585883a 	add	r2,r2,r22
10008bec:	108007cc 	andi	r2,r2,31
10008bf0:	1000b326 	beq	r2,zero,10008ec0 <_dtoa_r+0xda0>
10008bf4:	00c00804 	movi	r3,32
10008bf8:	1887c83a 	sub	r3,r3,r2
10008bfc:	01000104 	movi	r4,4
10008c00:	20c2cd0e 	bge	r4,r3,10009738 <_dtoa_r+0x1618>
10008c04:	00c00704 	movi	r3,28
10008c08:	1885c83a 	sub	r2,r3,r2
10008c0c:	d8c00817 	ldw	r3,32(sp)
10008c10:	a0a9883a 	add	r20,r20,r2
10008c14:	b0ad883a 	add	r22,r22,r2
10008c18:	1887883a 	add	r3,r3,r2
10008c1c:	d8c00815 	stw	r3,32(sp)
10008c20:	d9800817 	ldw	r6,32(sp)
10008c24:	0180040e 	bge	zero,r6,10008c38 <_dtoa_r+0xb18>
10008c28:	800b883a 	mov	r5,r16
10008c2c:	e009883a 	mov	r4,fp
10008c30:	000b6e00 	call	1000b6e0 <__lshift>
10008c34:	1021883a 	mov	r16,r2
10008c38:	0580050e 	bge	zero,r22,10008c50 <_dtoa_r+0xb30>
10008c3c:	a80b883a 	mov	r5,r21
10008c40:	b00d883a 	mov	r6,r22
10008c44:	e009883a 	mov	r4,fp
10008c48:	000b6e00 	call	1000b6e0 <__lshift>
10008c4c:	102b883a 	mov	r21,r2
10008c50:	d9c00e17 	ldw	r7,56(sp)
10008c54:	3801211e 	bne	r7,zero,100090dc <_dtoa_r+0xfbc>
10008c58:	d9800617 	ldw	r6,24(sp)
10008c5c:	0181380e 	bge	zero,r6,10009140 <_dtoa_r+0x1020>
10008c60:	d8c00b17 	ldw	r3,44(sp)
10008c64:	1800ab1e 	bne	r3,zero,10008f14 <_dtoa_r+0xdf4>
10008c68:	dc800717 	ldw	r18,28(sp)
10008c6c:	dcc00617 	ldw	r19,24(sp)
10008c70:	9029883a 	mov	r20,r18
10008c74:	00000206 	br	10008c80 <_dtoa_r+0xb60>
10008c78:	000af740 	call	1000af74 <__multadd>
10008c7c:	1021883a 	mov	r16,r2
10008c80:	a80b883a 	mov	r5,r21
10008c84:	8009883a 	mov	r4,r16
10008c88:	0007ef80 	call	10007ef8 <quorem>
10008c8c:	10800c04 	addi	r2,r2,48
10008c90:	90800005 	stb	r2,0(r18)
10008c94:	94800044 	addi	r18,r18,1
10008c98:	9507c83a 	sub	r3,r18,r20
10008c9c:	000f883a 	mov	r7,zero
10008ca0:	01800284 	movi	r6,10
10008ca4:	800b883a 	mov	r5,r16
10008ca8:	e009883a 	mov	r4,fp
10008cac:	1cfff216 	blt	r3,r19,10008c78 <__alt_data_end+0xf8008c78>
10008cb0:	1011883a 	mov	r8,r2
10008cb4:	d8800617 	ldw	r2,24(sp)
10008cb8:	0082370e 	bge	zero,r2,10009598 <_dtoa_r+0x1478>
10008cbc:	d9000717 	ldw	r4,28(sp)
10008cc0:	0025883a 	mov	r18,zero
10008cc4:	20af883a 	add	r23,r4,r2
10008cc8:	01800044 	movi	r6,1
10008ccc:	800b883a 	mov	r5,r16
10008cd0:	e009883a 	mov	r4,fp
10008cd4:	da001715 	stw	r8,92(sp)
10008cd8:	000b6e00 	call	1000b6e0 <__lshift>
10008cdc:	a80b883a 	mov	r5,r21
10008ce0:	1009883a 	mov	r4,r2
10008ce4:	d8800915 	stw	r2,36(sp)
10008ce8:	000b8280 	call	1000b828 <__mcmp>
10008cec:	da001717 	ldw	r8,92(sp)
10008cf0:	0081800e 	bge	zero,r2,100092f4 <_dtoa_r+0x11d4>
10008cf4:	b93fffc3 	ldbu	r4,-1(r23)
10008cf8:	b8bfffc4 	addi	r2,r23,-1
10008cfc:	1007883a 	mov	r3,r2
10008d00:	01800e44 	movi	r6,57
10008d04:	d9c00717 	ldw	r7,28(sp)
10008d08:	00000506 	br	10008d20 <_dtoa_r+0xc00>
10008d0c:	18ffffc4 	addi	r3,r3,-1
10008d10:	11c12326 	beq	r2,r7,100091a0 <_dtoa_r+0x1080>
10008d14:	19000003 	ldbu	r4,0(r3)
10008d18:	102f883a 	mov	r23,r2
10008d1c:	10bfffc4 	addi	r2,r2,-1
10008d20:	21403fcc 	andi	r5,r4,255
10008d24:	2940201c 	xori	r5,r5,128
10008d28:	297fe004 	addi	r5,r5,-128
10008d2c:	29bff726 	beq	r5,r6,10008d0c <__alt_data_end+0xf8008d0c>
10008d30:	21000044 	addi	r4,r4,1
10008d34:	11000005 	stb	r4,0(r2)
10008d38:	a80b883a 	mov	r5,r21
10008d3c:	e009883a 	mov	r4,fp
10008d40:	000af4c0 	call	1000af4c <_Bfree>
10008d44:	883ea026 	beq	r17,zero,100087c8 <__alt_data_end+0xf80087c8>
10008d48:	90000426 	beq	r18,zero,10008d5c <_dtoa_r+0xc3c>
10008d4c:	94400326 	beq	r18,r17,10008d5c <_dtoa_r+0xc3c>
10008d50:	900b883a 	mov	r5,r18
10008d54:	e009883a 	mov	r4,fp
10008d58:	000af4c0 	call	1000af4c <_Bfree>
10008d5c:	880b883a 	mov	r5,r17
10008d60:	e009883a 	mov	r4,fp
10008d64:	000af4c0 	call	1000af4c <_Bfree>
10008d68:	003e9706 	br	100087c8 <__alt_data_end+0xf80087c8>
10008d6c:	01800044 	movi	r6,1
10008d70:	d9800e15 	stw	r6,56(sp)
10008d74:	003d9606 	br	100083d0 <__alt_data_end+0xf80083d0>
10008d78:	d8800817 	ldw	r2,32(sp)
10008d7c:	d8c00517 	ldw	r3,20(sp)
10008d80:	d8000d15 	stw	zero,52(sp)
10008d84:	10c5c83a 	sub	r2,r2,r3
10008d88:	00c9c83a 	sub	r4,zero,r3
10008d8c:	d8800815 	stw	r2,32(sp)
10008d90:	d9000a15 	stw	r4,40(sp)
10008d94:	003d9706 	br	100083f4 <__alt_data_end+0xf80083f4>
10008d98:	05adc83a 	sub	r22,zero,r22
10008d9c:	dd800815 	stw	r22,32(sp)
10008da0:	002d883a 	mov	r22,zero
10008da4:	003d8e06 	br	100083e0 <__alt_data_end+0xf80083e0>
10008da8:	d9000517 	ldw	r4,20(sp)
10008dac:	0011ae40 	call	10011ae4 <__floatsidf>
10008db0:	100d883a 	mov	r6,r2
10008db4:	180f883a 	mov	r7,r3
10008db8:	a009883a 	mov	r4,r20
10008dbc:	880b883a 	mov	r5,r17
10008dc0:	00106a40 	call	100106a4 <__eqdf2>
10008dc4:	103d7126 	beq	r2,zero,1000838c <__alt_data_end+0xf800838c>
10008dc8:	d9c00517 	ldw	r7,20(sp)
10008dcc:	39ffffc4 	addi	r7,r7,-1
10008dd0:	d9c00515 	stw	r7,20(sp)
10008dd4:	003d6d06 	br	1000838c <__alt_data_end+0xf800838c>
10008dd8:	dd400a17 	ldw	r21,40(sp)
10008ddc:	dd000817 	ldw	r20,32(sp)
10008de0:	0023883a 	mov	r17,zero
10008de4:	003f4806 	br	10008b08 <__alt_data_end+0xf8008b08>
10008de8:	10e3c83a 	sub	r17,r2,r3
10008dec:	9448983a 	sll	r4,r18,r17
10008df0:	003d3206 	br	100082bc <__alt_data_end+0xf80082bc>
10008df4:	d8000e15 	stw	zero,56(sp)
10008df8:	003d7506 	br	100083d0 <__alt_data_end+0xf80083d0>
10008dfc:	b005883a 	mov	r2,r22
10008e00:	003f4506 	br	10008b18 <__alt_data_end+0xf8008b18>
10008e04:	dc000915 	stw	r16,36(sp)
10008e08:	d9800a17 	ldw	r6,40(sp)
10008e0c:	d9400917 	ldw	r5,36(sp)
10008e10:	e009883a 	mov	r4,fp
10008e14:	000b5a00 	call	1000b5a0 <__pow5mult>
10008e18:	1021883a 	mov	r16,r2
10008e1c:	003f5a06 	br	10008b88 <__alt_data_end+0xf8008b88>
10008e20:	01c00044 	movi	r7,1
10008e24:	d9c00b15 	stw	r7,44(sp)
10008e28:	d8802217 	ldw	r2,136(sp)
10008e2c:	0081280e 	bge	zero,r2,100092d0 <_dtoa_r+0x11b0>
10008e30:	100d883a 	mov	r6,r2
10008e34:	1021883a 	mov	r16,r2
10008e38:	d8800c15 	stw	r2,48(sp)
10008e3c:	d8800615 	stw	r2,24(sp)
10008e40:	003d8806 	br	10008464 <__alt_data_end+0xf8008464>
10008e44:	d8800617 	ldw	r2,24(sp)
10008e48:	00be9b16 	blt	zero,r2,100088b8 <__alt_data_end+0xf80088b8>
10008e4c:	10010f1e 	bne	r2,zero,1000928c <_dtoa_r+0x116c>
10008e50:	880b883a 	mov	r5,r17
10008e54:	000d883a 	mov	r6,zero
10008e58:	01d00534 	movhi	r7,16404
10008e5c:	8009883a 	mov	r4,r16
10008e60:	00108fc0 	call	100108fc <__muldf3>
10008e64:	900d883a 	mov	r6,r18
10008e68:	980f883a 	mov	r7,r19
10008e6c:	1009883a 	mov	r4,r2
10008e70:	180b883a 	mov	r5,r3
10008e74:	001072c0 	call	1001072c <__gedf2>
10008e78:	002b883a 	mov	r21,zero
10008e7c:	0023883a 	mov	r17,zero
10008e80:	1000bf16 	blt	r2,zero,10009180 <_dtoa_r+0x1060>
10008e84:	d9802217 	ldw	r6,136(sp)
10008e88:	ddc00717 	ldw	r23,28(sp)
10008e8c:	018c303a 	nor	r6,zero,r6
10008e90:	d9800515 	stw	r6,20(sp)
10008e94:	a80b883a 	mov	r5,r21
10008e98:	e009883a 	mov	r4,fp
10008e9c:	000af4c0 	call	1000af4c <_Bfree>
10008ea0:	883e4926 	beq	r17,zero,100087c8 <__alt_data_end+0xf80087c8>
10008ea4:	003fad06 	br	10008d5c <__alt_data_end+0xf8008d5c>
10008ea8:	d9c01117 	ldw	r7,68(sp)
10008eac:	3801bc26 	beq	r7,zero,100095a0 <_dtoa_r+0x1480>
10008eb0:	10810cc4 	addi	r2,r2,1075
10008eb4:	dd400a17 	ldw	r21,40(sp)
10008eb8:	dd000817 	ldw	r20,32(sp)
10008ebc:	003f0a06 	br	10008ae8 <__alt_data_end+0xf8008ae8>
10008ec0:	00800704 	movi	r2,28
10008ec4:	d9000817 	ldw	r4,32(sp)
10008ec8:	a0a9883a 	add	r20,r20,r2
10008ecc:	b0ad883a 	add	r22,r22,r2
10008ed0:	2089883a 	add	r4,r4,r2
10008ed4:	d9000815 	stw	r4,32(sp)
10008ed8:	003f5106 	br	10008c20 <__alt_data_end+0xf8008c20>
10008edc:	d8c00317 	ldw	r3,12(sp)
10008ee0:	b8c1fc0e 	bge	r23,r3,100096d4 <_dtoa_r+0x15b4>
10008ee4:	0027883a 	mov	r19,zero
10008ee8:	b805883a 	mov	r2,r23
10008eec:	003f3e06 	br	10008be8 <__alt_data_end+0xf8008be8>
10008ef0:	880b883a 	mov	r5,r17
10008ef4:	e009883a 	mov	r4,fp
10008ef8:	000f883a 	mov	r7,zero
10008efc:	01800284 	movi	r6,10
10008f00:	000af740 	call	1000af74 <__multadd>
10008f04:	d9000c17 	ldw	r4,48(sp)
10008f08:	1023883a 	mov	r17,r2
10008f0c:	0102040e 	bge	zero,r4,10009720 <_dtoa_r+0x1600>
10008f10:	d9000615 	stw	r4,24(sp)
10008f14:	0500050e 	bge	zero,r20,10008f2c <_dtoa_r+0xe0c>
10008f18:	880b883a 	mov	r5,r17
10008f1c:	a00d883a 	mov	r6,r20
10008f20:	e009883a 	mov	r4,fp
10008f24:	000b6e00 	call	1000b6e0 <__lshift>
10008f28:	1023883a 	mov	r17,r2
10008f2c:	9801241e 	bne	r19,zero,100093c0 <_dtoa_r+0x12a0>
10008f30:	8829883a 	mov	r20,r17
10008f34:	d9000617 	ldw	r4,24(sp)
10008f38:	dcc00717 	ldw	r19,28(sp)
10008f3c:	9480004c 	andi	r18,r18,1
10008f40:	20bfffc4 	addi	r2,r4,-1
10008f44:	9885883a 	add	r2,r19,r2
10008f48:	d8800415 	stw	r2,16(sp)
10008f4c:	dc800615 	stw	r18,24(sp)
10008f50:	a80b883a 	mov	r5,r21
10008f54:	8009883a 	mov	r4,r16
10008f58:	0007ef80 	call	10007ef8 <quorem>
10008f5c:	880b883a 	mov	r5,r17
10008f60:	8009883a 	mov	r4,r16
10008f64:	102f883a 	mov	r23,r2
10008f68:	000b8280 	call	1000b828 <__mcmp>
10008f6c:	a80b883a 	mov	r5,r21
10008f70:	a00d883a 	mov	r6,r20
10008f74:	e009883a 	mov	r4,fp
10008f78:	102d883a 	mov	r22,r2
10008f7c:	000b8880 	call	1000b888 <__mdiff>
10008f80:	1007883a 	mov	r3,r2
10008f84:	10800317 	ldw	r2,12(r2)
10008f88:	bc800c04 	addi	r18,r23,48
10008f8c:	180b883a 	mov	r5,r3
10008f90:	10004e1e 	bne	r2,zero,100090cc <_dtoa_r+0xfac>
10008f94:	8009883a 	mov	r4,r16
10008f98:	d8c01615 	stw	r3,88(sp)
10008f9c:	000b8280 	call	1000b828 <__mcmp>
10008fa0:	d8c01617 	ldw	r3,88(sp)
10008fa4:	e009883a 	mov	r4,fp
10008fa8:	d8801615 	stw	r2,88(sp)
10008fac:	180b883a 	mov	r5,r3
10008fb0:	000af4c0 	call	1000af4c <_Bfree>
10008fb4:	d8801617 	ldw	r2,88(sp)
10008fb8:	1000041e 	bne	r2,zero,10008fcc <_dtoa_r+0xeac>
10008fbc:	d9800317 	ldw	r6,12(sp)
10008fc0:	3000021e 	bne	r6,zero,10008fcc <_dtoa_r+0xeac>
10008fc4:	d8c00617 	ldw	r3,24(sp)
10008fc8:	18003726 	beq	r3,zero,100090a8 <_dtoa_r+0xf88>
10008fcc:	b0002016 	blt	r22,zero,10009050 <_dtoa_r+0xf30>
10008fd0:	b000041e 	bne	r22,zero,10008fe4 <_dtoa_r+0xec4>
10008fd4:	d9000317 	ldw	r4,12(sp)
10008fd8:	2000021e 	bne	r4,zero,10008fe4 <_dtoa_r+0xec4>
10008fdc:	d8c00617 	ldw	r3,24(sp)
10008fe0:	18001b26 	beq	r3,zero,10009050 <_dtoa_r+0xf30>
10008fe4:	00810716 	blt	zero,r2,10009404 <_dtoa_r+0x12e4>
10008fe8:	d8c00417 	ldw	r3,16(sp)
10008fec:	9d800044 	addi	r22,r19,1
10008ff0:	9c800005 	stb	r18,0(r19)
10008ff4:	b02f883a 	mov	r23,r22
10008ff8:	98c10626 	beq	r19,r3,10009414 <_dtoa_r+0x12f4>
10008ffc:	800b883a 	mov	r5,r16
10009000:	000f883a 	mov	r7,zero
10009004:	01800284 	movi	r6,10
10009008:	e009883a 	mov	r4,fp
1000900c:	000af740 	call	1000af74 <__multadd>
10009010:	1021883a 	mov	r16,r2
10009014:	000f883a 	mov	r7,zero
10009018:	01800284 	movi	r6,10
1000901c:	880b883a 	mov	r5,r17
10009020:	e009883a 	mov	r4,fp
10009024:	8d002526 	beq	r17,r20,100090bc <_dtoa_r+0xf9c>
10009028:	000af740 	call	1000af74 <__multadd>
1000902c:	a00b883a 	mov	r5,r20
10009030:	000f883a 	mov	r7,zero
10009034:	01800284 	movi	r6,10
10009038:	e009883a 	mov	r4,fp
1000903c:	1023883a 	mov	r17,r2
10009040:	000af740 	call	1000af74 <__multadd>
10009044:	1029883a 	mov	r20,r2
10009048:	b027883a 	mov	r19,r22
1000904c:	003fc006 	br	10008f50 <__alt_data_end+0xf8008f50>
10009050:	9011883a 	mov	r8,r18
10009054:	00800e0e 	bge	zero,r2,10009090 <_dtoa_r+0xf70>
10009058:	800b883a 	mov	r5,r16
1000905c:	01800044 	movi	r6,1
10009060:	e009883a 	mov	r4,fp
10009064:	da001715 	stw	r8,92(sp)
10009068:	000b6e00 	call	1000b6e0 <__lshift>
1000906c:	a80b883a 	mov	r5,r21
10009070:	1009883a 	mov	r4,r2
10009074:	1021883a 	mov	r16,r2
10009078:	000b8280 	call	1000b828 <__mcmp>
1000907c:	da001717 	ldw	r8,92(sp)
10009080:	0081960e 	bge	zero,r2,100096dc <_dtoa_r+0x15bc>
10009084:	00800e44 	movi	r2,57
10009088:	40817026 	beq	r8,r2,1000964c <_dtoa_r+0x152c>
1000908c:	ba000c44 	addi	r8,r23,49
10009090:	8825883a 	mov	r18,r17
10009094:	9dc00044 	addi	r23,r19,1
10009098:	9a000005 	stb	r8,0(r19)
1000909c:	a023883a 	mov	r17,r20
100090a0:	dc000915 	stw	r16,36(sp)
100090a4:	003f2406 	br	10008d38 <__alt_data_end+0xf8008d38>
100090a8:	00800e44 	movi	r2,57
100090ac:	9011883a 	mov	r8,r18
100090b0:	90816626 	beq	r18,r2,1000964c <_dtoa_r+0x152c>
100090b4:	05bff516 	blt	zero,r22,1000908c <__alt_data_end+0xf800908c>
100090b8:	003ff506 	br	10009090 <__alt_data_end+0xf8009090>
100090bc:	000af740 	call	1000af74 <__multadd>
100090c0:	1023883a 	mov	r17,r2
100090c4:	1029883a 	mov	r20,r2
100090c8:	003fdf06 	br	10009048 <__alt_data_end+0xf8009048>
100090cc:	e009883a 	mov	r4,fp
100090d0:	000af4c0 	call	1000af4c <_Bfree>
100090d4:	00800044 	movi	r2,1
100090d8:	003fbc06 	br	10008fcc <__alt_data_end+0xf8008fcc>
100090dc:	a80b883a 	mov	r5,r21
100090e0:	8009883a 	mov	r4,r16
100090e4:	000b8280 	call	1000b828 <__mcmp>
100090e8:	103edb0e 	bge	r2,zero,10008c58 <__alt_data_end+0xf8008c58>
100090ec:	800b883a 	mov	r5,r16
100090f0:	000f883a 	mov	r7,zero
100090f4:	01800284 	movi	r6,10
100090f8:	e009883a 	mov	r4,fp
100090fc:	000af740 	call	1000af74 <__multadd>
10009100:	1021883a 	mov	r16,r2
10009104:	d8800517 	ldw	r2,20(sp)
10009108:	d8c00b17 	ldw	r3,44(sp)
1000910c:	10bfffc4 	addi	r2,r2,-1
10009110:	d8800515 	stw	r2,20(sp)
10009114:	183f761e 	bne	r3,zero,10008ef0 <__alt_data_end+0xf8008ef0>
10009118:	d9000c17 	ldw	r4,48(sp)
1000911c:	0101730e 	bge	zero,r4,100096ec <_dtoa_r+0x15cc>
10009120:	d9000615 	stw	r4,24(sp)
10009124:	003ed006 	br	10008c68 <__alt_data_end+0xf8008c68>
10009128:	00800084 	movi	r2,2
1000912c:	3081861e 	bne	r6,r2,10009748 <_dtoa_r+0x1628>
10009130:	d8000b15 	stw	zero,44(sp)
10009134:	003f3c06 	br	10008e28 <__alt_data_end+0xf8008e28>
10009138:	dc000917 	ldw	r16,36(sp)
1000913c:	003e9206 	br	10008b88 <__alt_data_end+0xf8008b88>
10009140:	d9c00317 	ldw	r7,12(sp)
10009144:	00800084 	movi	r2,2
10009148:	11fec50e 	bge	r2,r7,10008c60 <__alt_data_end+0xf8008c60>
1000914c:	d9000617 	ldw	r4,24(sp)
10009150:	20013c1e 	bne	r4,zero,10009644 <_dtoa_r+0x1524>
10009154:	a80b883a 	mov	r5,r21
10009158:	000f883a 	mov	r7,zero
1000915c:	01800144 	movi	r6,5
10009160:	e009883a 	mov	r4,fp
10009164:	000af740 	call	1000af74 <__multadd>
10009168:	100b883a 	mov	r5,r2
1000916c:	8009883a 	mov	r4,r16
10009170:	102b883a 	mov	r21,r2
10009174:	000b8280 	call	1000b828 <__mcmp>
10009178:	dc000915 	stw	r16,36(sp)
1000917c:	00bf410e 	bge	zero,r2,10008e84 <__alt_data_end+0xf8008e84>
10009180:	d9c00717 	ldw	r7,28(sp)
10009184:	00800c44 	movi	r2,49
10009188:	38800005 	stb	r2,0(r7)
1000918c:	d8800517 	ldw	r2,20(sp)
10009190:	3dc00044 	addi	r23,r7,1
10009194:	10800044 	addi	r2,r2,1
10009198:	d8800515 	stw	r2,20(sp)
1000919c:	003f3d06 	br	10008e94 <__alt_data_end+0xf8008e94>
100091a0:	d9800517 	ldw	r6,20(sp)
100091a4:	d9c00717 	ldw	r7,28(sp)
100091a8:	00800c44 	movi	r2,49
100091ac:	31800044 	addi	r6,r6,1
100091b0:	d9800515 	stw	r6,20(sp)
100091b4:	38800005 	stb	r2,0(r7)
100091b8:	003edf06 	br	10008d38 <__alt_data_end+0xf8008d38>
100091bc:	d8000b15 	stw	zero,44(sp)
100091c0:	003c9f06 	br	10008440 <__alt_data_end+0xf8008440>
100091c4:	903e7e1e 	bne	r18,zero,10008bc0 <__alt_data_end+0xf8008bc0>
100091c8:	00800434 	movhi	r2,16
100091cc:	10bfffc4 	addi	r2,r2,-1
100091d0:	9884703a 	and	r2,r19,r2
100091d4:	1000ea1e 	bne	r2,zero,10009580 <_dtoa_r+0x1460>
100091d8:	9cdffc2c 	andhi	r19,r19,32752
100091dc:	9800e826 	beq	r19,zero,10009580 <_dtoa_r+0x1460>
100091e0:	d9c00817 	ldw	r7,32(sp)
100091e4:	b5800044 	addi	r22,r22,1
100091e8:	04c00044 	movi	r19,1
100091ec:	39c00044 	addi	r7,r7,1
100091f0:	d9c00815 	stw	r7,32(sp)
100091f4:	d8800d17 	ldw	r2,52(sp)
100091f8:	103e721e 	bne	r2,zero,10008bc4 <__alt_data_end+0xf8008bc4>
100091fc:	00800044 	movi	r2,1
10009200:	003e7906 	br	10008be8 <__alt_data_end+0xf8008be8>
10009204:	8009883a 	mov	r4,r16
10009208:	0011ae40 	call	10011ae4 <__floatsidf>
1000920c:	d9800f17 	ldw	r6,60(sp)
10009210:	d9c01017 	ldw	r7,64(sp)
10009214:	1009883a 	mov	r4,r2
10009218:	180b883a 	mov	r5,r3
1000921c:	00108fc0 	call	100108fc <__muldf3>
10009220:	000d883a 	mov	r6,zero
10009224:	01d00734 	movhi	r7,16412
10009228:	1009883a 	mov	r4,r2
1000922c:	180b883a 	mov	r5,r3
10009230:	000f4280 	call	1000f428 <__adddf3>
10009234:	047f3034 	movhi	r17,64704
10009238:	1021883a 	mov	r16,r2
1000923c:	1c63883a 	add	r17,r3,r17
10009240:	d9000f17 	ldw	r4,60(sp)
10009244:	d9401017 	ldw	r5,64(sp)
10009248:	000d883a 	mov	r6,zero
1000924c:	01d00534 	movhi	r7,16404
10009250:	00111680 	call	10011168 <__subdf3>
10009254:	800d883a 	mov	r6,r16
10009258:	880f883a 	mov	r7,r17
1000925c:	1009883a 	mov	r4,r2
10009260:	180b883a 	mov	r5,r3
10009264:	102b883a 	mov	r21,r2
10009268:	1829883a 	mov	r20,r3
1000926c:	001072c0 	call	1001072c <__gedf2>
10009270:	00806c16 	blt	zero,r2,10009424 <_dtoa_r+0x1304>
10009274:	89e0003c 	xorhi	r7,r17,32768
10009278:	800d883a 	mov	r6,r16
1000927c:	a809883a 	mov	r4,r21
10009280:	a00b883a 	mov	r5,r20
10009284:	00108080 	call	10010808 <__ledf2>
10009288:	103d7e0e 	bge	r2,zero,10008884 <__alt_data_end+0xf8008884>
1000928c:	002b883a 	mov	r21,zero
10009290:	0023883a 	mov	r17,zero
10009294:	003efb06 	br	10008e84 <__alt_data_end+0xf8008e84>
10009298:	d8800717 	ldw	r2,28(sp)
1000929c:	003bd006 	br	100081e0 <__alt_data_end+0xf80081e0>
100092a0:	d9000a17 	ldw	r4,40(sp)
100092a4:	d9800d17 	ldw	r6,52(sp)
100092a8:	dd400a15 	stw	r21,40(sp)
100092ac:	a905c83a 	sub	r2,r21,r4
100092b0:	308d883a 	add	r6,r6,r2
100092b4:	d9800d15 	stw	r6,52(sp)
100092b8:	002b883a 	mov	r21,zero
100092bc:	003e0606 	br	10008ad8 <__alt_data_end+0xf8008ad8>
100092c0:	9023883a 	mov	r17,r18
100092c4:	9829883a 	mov	r20,r19
100092c8:	04000084 	movi	r16,2
100092cc:	003c9206 	br	10008518 <__alt_data_end+0xf8008518>
100092d0:	04000044 	movi	r16,1
100092d4:	dc000c15 	stw	r16,48(sp)
100092d8:	dc000615 	stw	r16,24(sp)
100092dc:	dc002215 	stw	r16,136(sp)
100092e0:	e0001115 	stw	zero,68(fp)
100092e4:	000b883a 	mov	r5,zero
100092e8:	003c6906 	br	10008490 <__alt_data_end+0xf8008490>
100092ec:	3021883a 	mov	r16,r6
100092f0:	003ffb06 	br	100092e0 <__alt_data_end+0xf80092e0>
100092f4:	1000021e 	bne	r2,zero,10009300 <_dtoa_r+0x11e0>
100092f8:	4200004c 	andi	r8,r8,1
100092fc:	403e7d1e 	bne	r8,zero,10008cf4 <__alt_data_end+0xf8008cf4>
10009300:	01000c04 	movi	r4,48
10009304:	00000106 	br	1000930c <_dtoa_r+0x11ec>
10009308:	102f883a 	mov	r23,r2
1000930c:	b8bfffc4 	addi	r2,r23,-1
10009310:	10c00007 	ldb	r3,0(r2)
10009314:	193ffc26 	beq	r3,r4,10009308 <__alt_data_end+0xf8009308>
10009318:	003e8706 	br	10008d38 <__alt_data_end+0xf8008d38>
1000931c:	d8800517 	ldw	r2,20(sp)
10009320:	00a3c83a 	sub	r17,zero,r2
10009324:	8800a426 	beq	r17,zero,100095b8 <_dtoa_r+0x1498>
10009328:	888003cc 	andi	r2,r17,15
1000932c:	100490fa 	slli	r2,r2,3
10009330:	00c40074 	movhi	r3,4097
10009334:	18d46604 	addi	r3,r3,20888
10009338:	1885883a 	add	r2,r3,r2
1000933c:	11800017 	ldw	r6,0(r2)
10009340:	11c00117 	ldw	r7,4(r2)
10009344:	9009883a 	mov	r4,r18
10009348:	980b883a 	mov	r5,r19
1000934c:	8823d13a 	srai	r17,r17,4
10009350:	00108fc0 	call	100108fc <__muldf3>
10009354:	d8800f15 	stw	r2,60(sp)
10009358:	d8c01015 	stw	r3,64(sp)
1000935c:	8800e826 	beq	r17,zero,10009700 <_dtoa_r+0x15e0>
10009360:	05040074 	movhi	r20,4097
10009364:	a5145c04 	addi	r20,r20,20848
10009368:	04000084 	movi	r16,2
1000936c:	8980004c 	andi	r6,r17,1
10009370:	1009883a 	mov	r4,r2
10009374:	8823d07a 	srai	r17,r17,1
10009378:	180b883a 	mov	r5,r3
1000937c:	30000426 	beq	r6,zero,10009390 <_dtoa_r+0x1270>
10009380:	a1800017 	ldw	r6,0(r20)
10009384:	a1c00117 	ldw	r7,4(r20)
10009388:	84000044 	addi	r16,r16,1
1000938c:	00108fc0 	call	100108fc <__muldf3>
10009390:	a5000204 	addi	r20,r20,8
10009394:	883ff51e 	bne	r17,zero,1000936c <__alt_data_end+0xf800936c>
10009398:	d8800f15 	stw	r2,60(sp)
1000939c:	d8c01015 	stw	r3,64(sp)
100093a0:	003c7606 	br	1000857c <__alt_data_end+0xf800857c>
100093a4:	00c00c04 	movi	r3,48
100093a8:	10c00005 	stb	r3,0(r2)
100093ac:	d8c00517 	ldw	r3,20(sp)
100093b0:	bd3fffc3 	ldbu	r20,-1(r23)
100093b4:	18c00044 	addi	r3,r3,1
100093b8:	d8c00515 	stw	r3,20(sp)
100093bc:	003db906 	br	10008aa4 <__alt_data_end+0xf8008aa4>
100093c0:	89400117 	ldw	r5,4(r17)
100093c4:	e009883a 	mov	r4,fp
100093c8:	000aea40 	call	1000aea4 <_Balloc>
100093cc:	89800417 	ldw	r6,16(r17)
100093d0:	89400304 	addi	r5,r17,12
100093d4:	11000304 	addi	r4,r2,12
100093d8:	31800084 	addi	r6,r6,2
100093dc:	318d883a 	add	r6,r6,r6
100093e0:	318d883a 	add	r6,r6,r6
100093e4:	1027883a 	mov	r19,r2
100093e8:	000ac000 	call	1000ac00 <memcpy>
100093ec:	01800044 	movi	r6,1
100093f0:	980b883a 	mov	r5,r19
100093f4:	e009883a 	mov	r4,fp
100093f8:	000b6e00 	call	1000b6e0 <__lshift>
100093fc:	1029883a 	mov	r20,r2
10009400:	003ecc06 	br	10008f34 <__alt_data_end+0xf8008f34>
10009404:	00800e44 	movi	r2,57
10009408:	90809026 	beq	r18,r2,1000964c <_dtoa_r+0x152c>
1000940c:	92000044 	addi	r8,r18,1
10009410:	003f1f06 	br	10009090 <__alt_data_end+0xf8009090>
10009414:	9011883a 	mov	r8,r18
10009418:	8825883a 	mov	r18,r17
1000941c:	a023883a 	mov	r17,r20
10009420:	003e2906 	br	10008cc8 <__alt_data_end+0xf8008cc8>
10009424:	002b883a 	mov	r21,zero
10009428:	0023883a 	mov	r17,zero
1000942c:	003f5406 	br	10009180 <__alt_data_end+0xf8009180>
10009430:	61bfffc4 	addi	r6,r12,-1
10009434:	300490fa 	slli	r2,r6,3
10009438:	00c40074 	movhi	r3,4097
1000943c:	18d46604 	addi	r3,r3,20888
10009440:	1885883a 	add	r2,r3,r2
10009444:	11000017 	ldw	r4,0(r2)
10009448:	11400117 	ldw	r5,4(r2)
1000944c:	d8800717 	ldw	r2,28(sp)
10009450:	880f883a 	mov	r7,r17
10009454:	d9801215 	stw	r6,72(sp)
10009458:	800d883a 	mov	r6,r16
1000945c:	db001615 	stw	r12,88(sp)
10009460:	15c00044 	addi	r23,r2,1
10009464:	00108fc0 	call	100108fc <__muldf3>
10009468:	d9401017 	ldw	r5,64(sp)
1000946c:	d9000f17 	ldw	r4,60(sp)
10009470:	d8c01515 	stw	r3,84(sp)
10009474:	d8801415 	stw	r2,80(sp)
10009478:	0011a640 	call	10011a64 <__fixdfsi>
1000947c:	1009883a 	mov	r4,r2
10009480:	1021883a 	mov	r16,r2
10009484:	0011ae40 	call	10011ae4 <__floatsidf>
10009488:	d9000f17 	ldw	r4,60(sp)
1000948c:	d9401017 	ldw	r5,64(sp)
10009490:	100d883a 	mov	r6,r2
10009494:	180f883a 	mov	r7,r3
10009498:	00111680 	call	10011168 <__subdf3>
1000949c:	1829883a 	mov	r20,r3
100094a0:	d8c00717 	ldw	r3,28(sp)
100094a4:	84000c04 	addi	r16,r16,48
100094a8:	1023883a 	mov	r17,r2
100094ac:	1c000005 	stb	r16,0(r3)
100094b0:	db001617 	ldw	r12,88(sp)
100094b4:	00800044 	movi	r2,1
100094b8:	60802226 	beq	r12,r2,10009544 <_dtoa_r+0x1424>
100094bc:	d9c00717 	ldw	r7,28(sp)
100094c0:	8805883a 	mov	r2,r17
100094c4:	b82b883a 	mov	r21,r23
100094c8:	3b19883a 	add	r12,r7,r12
100094cc:	6023883a 	mov	r17,r12
100094d0:	a007883a 	mov	r3,r20
100094d4:	dc800f15 	stw	r18,60(sp)
100094d8:	000d883a 	mov	r6,zero
100094dc:	01d00934 	movhi	r7,16420
100094e0:	1009883a 	mov	r4,r2
100094e4:	180b883a 	mov	r5,r3
100094e8:	00108fc0 	call	100108fc <__muldf3>
100094ec:	180b883a 	mov	r5,r3
100094f0:	1009883a 	mov	r4,r2
100094f4:	1829883a 	mov	r20,r3
100094f8:	1025883a 	mov	r18,r2
100094fc:	0011a640 	call	10011a64 <__fixdfsi>
10009500:	1009883a 	mov	r4,r2
10009504:	1021883a 	mov	r16,r2
10009508:	0011ae40 	call	10011ae4 <__floatsidf>
1000950c:	100d883a 	mov	r6,r2
10009510:	180f883a 	mov	r7,r3
10009514:	9009883a 	mov	r4,r18
10009518:	a00b883a 	mov	r5,r20
1000951c:	84000c04 	addi	r16,r16,48
10009520:	00111680 	call	10011168 <__subdf3>
10009524:	ad400044 	addi	r21,r21,1
10009528:	ac3fffc5 	stb	r16,-1(r21)
1000952c:	ac7fea1e 	bne	r21,r17,100094d8 <__alt_data_end+0xf80094d8>
10009530:	1023883a 	mov	r17,r2
10009534:	d8801217 	ldw	r2,72(sp)
10009538:	dc800f17 	ldw	r18,60(sp)
1000953c:	1829883a 	mov	r20,r3
10009540:	b8af883a 	add	r23,r23,r2
10009544:	d9001417 	ldw	r4,80(sp)
10009548:	d9401517 	ldw	r5,84(sp)
1000954c:	000d883a 	mov	r6,zero
10009550:	01cff834 	movhi	r7,16352
10009554:	000f4280 	call	1000f428 <__adddf3>
10009558:	880d883a 	mov	r6,r17
1000955c:	a00f883a 	mov	r7,r20
10009560:	1009883a 	mov	r4,r2
10009564:	180b883a 	mov	r5,r3
10009568:	00108080 	call	10010808 <__ledf2>
1000956c:	10003e0e 	bge	r2,zero,10009668 <_dtoa_r+0x1548>
10009570:	d9001317 	ldw	r4,76(sp)
10009574:	bd3fffc3 	ldbu	r20,-1(r23)
10009578:	d9000515 	stw	r4,20(sp)
1000957c:	003d3b06 	br	10008a6c <__alt_data_end+0xf8008a6c>
10009580:	0027883a 	mov	r19,zero
10009584:	003f1b06 	br	100091f4 <__alt_data_end+0xf80091f4>
10009588:	d8800817 	ldw	r2,32(sp)
1000958c:	11e9c83a 	sub	r20,r2,r7
10009590:	0005883a 	mov	r2,zero
10009594:	003d5406 	br	10008ae8 <__alt_data_end+0xf8008ae8>
10009598:	00800044 	movi	r2,1
1000959c:	003dc706 	br	10008cbc <__alt_data_end+0xf8008cbc>
100095a0:	d8c00217 	ldw	r3,8(sp)
100095a4:	00800d84 	movi	r2,54
100095a8:	dd400a17 	ldw	r21,40(sp)
100095ac:	10c5c83a 	sub	r2,r2,r3
100095b0:	dd000817 	ldw	r20,32(sp)
100095b4:	003d4c06 	br	10008ae8 <__alt_data_end+0xf8008ae8>
100095b8:	dc800f15 	stw	r18,60(sp)
100095bc:	dcc01015 	stw	r19,64(sp)
100095c0:	04000084 	movi	r16,2
100095c4:	003bed06 	br	1000857c <__alt_data_end+0xf800857c>
100095c8:	d9000617 	ldw	r4,24(sp)
100095cc:	203f0d26 	beq	r4,zero,10009204 <__alt_data_end+0xf8009204>
100095d0:	d9800c17 	ldw	r6,48(sp)
100095d4:	01bcab0e 	bge	zero,r6,10008884 <__alt_data_end+0xf8008884>
100095d8:	d9401017 	ldw	r5,64(sp)
100095dc:	d9000f17 	ldw	r4,60(sp)
100095e0:	000d883a 	mov	r6,zero
100095e4:	01d00934 	movhi	r7,16420
100095e8:	00108fc0 	call	100108fc <__muldf3>
100095ec:	81000044 	addi	r4,r16,1
100095f0:	d8800f15 	stw	r2,60(sp)
100095f4:	d8c01015 	stw	r3,64(sp)
100095f8:	0011ae40 	call	10011ae4 <__floatsidf>
100095fc:	d9800f17 	ldw	r6,60(sp)
10009600:	d9c01017 	ldw	r7,64(sp)
10009604:	1009883a 	mov	r4,r2
10009608:	180b883a 	mov	r5,r3
1000960c:	00108fc0 	call	100108fc <__muldf3>
10009610:	01d00734 	movhi	r7,16412
10009614:	000d883a 	mov	r6,zero
10009618:	1009883a 	mov	r4,r2
1000961c:	180b883a 	mov	r5,r3
10009620:	000f4280 	call	1000f428 <__adddf3>
10009624:	d9c00517 	ldw	r7,20(sp)
10009628:	047f3034 	movhi	r17,64704
1000962c:	1021883a 	mov	r16,r2
10009630:	39ffffc4 	addi	r7,r7,-1
10009634:	d9c01315 	stw	r7,76(sp)
10009638:	1c63883a 	add	r17,r3,r17
1000963c:	db000c17 	ldw	r12,48(sp)
10009640:	003bea06 	br	100085ec <__alt_data_end+0xf80085ec>
10009644:	dc000915 	stw	r16,36(sp)
10009648:	003e0e06 	br	10008e84 <__alt_data_end+0xf8008e84>
1000964c:	01000e44 	movi	r4,57
10009650:	8825883a 	mov	r18,r17
10009654:	9dc00044 	addi	r23,r19,1
10009658:	99000005 	stb	r4,0(r19)
1000965c:	a023883a 	mov	r17,r20
10009660:	dc000915 	stw	r16,36(sp)
10009664:	003da406 	br	10008cf8 <__alt_data_end+0xf8008cf8>
10009668:	d9801417 	ldw	r6,80(sp)
1000966c:	d9c01517 	ldw	r7,84(sp)
10009670:	0009883a 	mov	r4,zero
10009674:	014ff834 	movhi	r5,16352
10009678:	00111680 	call	10011168 <__subdf3>
1000967c:	880d883a 	mov	r6,r17
10009680:	a00f883a 	mov	r7,r20
10009684:	1009883a 	mov	r4,r2
10009688:	180b883a 	mov	r5,r3
1000968c:	001072c0 	call	1001072c <__gedf2>
10009690:	00bc7c0e 	bge	zero,r2,10008884 <__alt_data_end+0xf8008884>
10009694:	01000c04 	movi	r4,48
10009698:	00000106 	br	100096a0 <_dtoa_r+0x1580>
1000969c:	102f883a 	mov	r23,r2
100096a0:	b8bfffc4 	addi	r2,r23,-1
100096a4:	10c00007 	ldb	r3,0(r2)
100096a8:	193ffc26 	beq	r3,r4,1000969c <__alt_data_end+0xf800969c>
100096ac:	d9801317 	ldw	r6,76(sp)
100096b0:	d9800515 	stw	r6,20(sp)
100096b4:	003c4406 	br	100087c8 <__alt_data_end+0xf80087c8>
100096b8:	d9801317 	ldw	r6,76(sp)
100096bc:	d9800515 	stw	r6,20(sp)
100096c0:	003cea06 	br	10008a6c <__alt_data_end+0xf8008a6c>
100096c4:	dd800f17 	ldw	r22,60(sp)
100096c8:	dcc01017 	ldw	r19,64(sp)
100096cc:	dc801217 	ldw	r18,72(sp)
100096d0:	003c6c06 	br	10008884 <__alt_data_end+0xf8008884>
100096d4:	903e031e 	bne	r18,zero,10008ee4 <__alt_data_end+0xf8008ee4>
100096d8:	003ebb06 	br	100091c8 <__alt_data_end+0xf80091c8>
100096dc:	103e6c1e 	bne	r2,zero,10009090 <__alt_data_end+0xf8009090>
100096e0:	4080004c 	andi	r2,r8,1
100096e4:	103e6a26 	beq	r2,zero,10009090 <__alt_data_end+0xf8009090>
100096e8:	003e6606 	br	10009084 <__alt_data_end+0xf8009084>
100096ec:	d8c00317 	ldw	r3,12(sp)
100096f0:	00800084 	movi	r2,2
100096f4:	10c02916 	blt	r2,r3,1000979c <_dtoa_r+0x167c>
100096f8:	d9000c17 	ldw	r4,48(sp)
100096fc:	003e8806 	br	10009120 <__alt_data_end+0xf8009120>
10009700:	04000084 	movi	r16,2
10009704:	003b9d06 	br	1000857c <__alt_data_end+0xf800857c>
10009708:	d9001317 	ldw	r4,76(sp)
1000970c:	d9000515 	stw	r4,20(sp)
10009710:	003cd606 	br	10008a6c <__alt_data_end+0xf8008a6c>
10009714:	d8801317 	ldw	r2,76(sp)
10009718:	d8800515 	stw	r2,20(sp)
1000971c:	003c2a06 	br	100087c8 <__alt_data_end+0xf80087c8>
10009720:	d9800317 	ldw	r6,12(sp)
10009724:	00800084 	movi	r2,2
10009728:	11801516 	blt	r2,r6,10009780 <_dtoa_r+0x1660>
1000972c:	d9c00c17 	ldw	r7,48(sp)
10009730:	d9c00615 	stw	r7,24(sp)
10009734:	003df706 	br	10008f14 <__alt_data_end+0xf8008f14>
10009738:	193d3926 	beq	r3,r4,10008c20 <__alt_data_end+0xf8008c20>
1000973c:	00c00f04 	movi	r3,60
10009740:	1885c83a 	sub	r2,r3,r2
10009744:	003ddf06 	br	10008ec4 <__alt_data_end+0xf8008ec4>
10009748:	e009883a 	mov	r4,fp
1000974c:	e0001115 	stw	zero,68(fp)
10009750:	000b883a 	mov	r5,zero
10009754:	000aea40 	call	1000aea4 <_Balloc>
10009758:	d8800715 	stw	r2,28(sp)
1000975c:	d8c00717 	ldw	r3,28(sp)
10009760:	00bfffc4 	movi	r2,-1
10009764:	01000044 	movi	r4,1
10009768:	d8800c15 	stw	r2,48(sp)
1000976c:	e0c01015 	stw	r3,64(fp)
10009770:	d9000b15 	stw	r4,44(sp)
10009774:	d8800615 	stw	r2,24(sp)
10009778:	d8002215 	stw	zero,136(sp)
1000977c:	003c4106 	br	10008884 <__alt_data_end+0xf8008884>
10009780:	d8c00c17 	ldw	r3,48(sp)
10009784:	d8c00615 	stw	r3,24(sp)
10009788:	003e7006 	br	1000914c <__alt_data_end+0xf800914c>
1000978c:	04400044 	movi	r17,1
10009790:	003b2006 	br	10008414 <__alt_data_end+0xf8008414>
10009794:	000b883a 	mov	r5,zero
10009798:	003b3d06 	br	10008490 <__alt_data_end+0xf8008490>
1000979c:	d8800c17 	ldw	r2,48(sp)
100097a0:	d8800615 	stw	r2,24(sp)
100097a4:	003e6906 	br	1000914c <__alt_data_end+0xf800914c>

100097a8 <__sflush_r>:
100097a8:	2880030b 	ldhu	r2,12(r5)
100097ac:	defffb04 	addi	sp,sp,-20
100097b0:	dcc00315 	stw	r19,12(sp)
100097b4:	dc400115 	stw	r17,4(sp)
100097b8:	dfc00415 	stw	ra,16(sp)
100097bc:	dc800215 	stw	r18,8(sp)
100097c0:	dc000015 	stw	r16,0(sp)
100097c4:	10c0020c 	andi	r3,r2,8
100097c8:	2823883a 	mov	r17,r5
100097cc:	2027883a 	mov	r19,r4
100097d0:	1800311e 	bne	r3,zero,10009898 <__sflush_r+0xf0>
100097d4:	28c00117 	ldw	r3,4(r5)
100097d8:	10820014 	ori	r2,r2,2048
100097dc:	2880030d 	sth	r2,12(r5)
100097e0:	00c04b0e 	bge	zero,r3,10009910 <__sflush_r+0x168>
100097e4:	8a000a17 	ldw	r8,40(r17)
100097e8:	40002326 	beq	r8,zero,10009878 <__sflush_r+0xd0>
100097ec:	9c000017 	ldw	r16,0(r19)
100097f0:	10c4000c 	andi	r3,r2,4096
100097f4:	98000015 	stw	zero,0(r19)
100097f8:	18004826 	beq	r3,zero,1000991c <__sflush_r+0x174>
100097fc:	89801417 	ldw	r6,80(r17)
10009800:	10c0010c 	andi	r3,r2,4
10009804:	18000626 	beq	r3,zero,10009820 <__sflush_r+0x78>
10009808:	88c00117 	ldw	r3,4(r17)
1000980c:	88800c17 	ldw	r2,48(r17)
10009810:	30cdc83a 	sub	r6,r6,r3
10009814:	10000226 	beq	r2,zero,10009820 <__sflush_r+0x78>
10009818:	88800f17 	ldw	r2,60(r17)
1000981c:	308dc83a 	sub	r6,r6,r2
10009820:	89400717 	ldw	r5,28(r17)
10009824:	000f883a 	mov	r7,zero
10009828:	9809883a 	mov	r4,r19
1000982c:	403ee83a 	callr	r8
10009830:	00ffffc4 	movi	r3,-1
10009834:	10c04426 	beq	r2,r3,10009948 <__sflush_r+0x1a0>
10009838:	88c0030b 	ldhu	r3,12(r17)
1000983c:	89000417 	ldw	r4,16(r17)
10009840:	88000115 	stw	zero,4(r17)
10009844:	197dffcc 	andi	r5,r3,63487
10009848:	8940030d 	sth	r5,12(r17)
1000984c:	89000015 	stw	r4,0(r17)
10009850:	18c4000c 	andi	r3,r3,4096
10009854:	18002c1e 	bne	r3,zero,10009908 <__sflush_r+0x160>
10009858:	89400c17 	ldw	r5,48(r17)
1000985c:	9c000015 	stw	r16,0(r19)
10009860:	28000526 	beq	r5,zero,10009878 <__sflush_r+0xd0>
10009864:	88801004 	addi	r2,r17,64
10009868:	28800226 	beq	r5,r2,10009874 <__sflush_r+0xcc>
1000986c:	9809883a 	mov	r4,r19
10009870:	0009f240 	call	10009f24 <_free_r>
10009874:	88000c15 	stw	zero,48(r17)
10009878:	0005883a 	mov	r2,zero
1000987c:	dfc00417 	ldw	ra,16(sp)
10009880:	dcc00317 	ldw	r19,12(sp)
10009884:	dc800217 	ldw	r18,8(sp)
10009888:	dc400117 	ldw	r17,4(sp)
1000988c:	dc000017 	ldw	r16,0(sp)
10009890:	dec00504 	addi	sp,sp,20
10009894:	f800283a 	ret
10009898:	2c800417 	ldw	r18,16(r5)
1000989c:	903ff626 	beq	r18,zero,10009878 <__alt_data_end+0xf8009878>
100098a0:	2c000017 	ldw	r16,0(r5)
100098a4:	108000cc 	andi	r2,r2,3
100098a8:	2c800015 	stw	r18,0(r5)
100098ac:	84a1c83a 	sub	r16,r16,r18
100098b0:	1000131e 	bne	r2,zero,10009900 <__sflush_r+0x158>
100098b4:	28800517 	ldw	r2,20(r5)
100098b8:	88800215 	stw	r2,8(r17)
100098bc:	04000316 	blt	zero,r16,100098cc <__sflush_r+0x124>
100098c0:	003fed06 	br	10009878 <__alt_data_end+0xf8009878>
100098c4:	90a5883a 	add	r18,r18,r2
100098c8:	043feb0e 	bge	zero,r16,10009878 <__alt_data_end+0xf8009878>
100098cc:	88800917 	ldw	r2,36(r17)
100098d0:	89400717 	ldw	r5,28(r17)
100098d4:	800f883a 	mov	r7,r16
100098d8:	900d883a 	mov	r6,r18
100098dc:	9809883a 	mov	r4,r19
100098e0:	103ee83a 	callr	r2
100098e4:	80a1c83a 	sub	r16,r16,r2
100098e8:	00bff616 	blt	zero,r2,100098c4 <__alt_data_end+0xf80098c4>
100098ec:	88c0030b 	ldhu	r3,12(r17)
100098f0:	00bfffc4 	movi	r2,-1
100098f4:	18c01014 	ori	r3,r3,64
100098f8:	88c0030d 	sth	r3,12(r17)
100098fc:	003fdf06 	br	1000987c <__alt_data_end+0xf800987c>
10009900:	0005883a 	mov	r2,zero
10009904:	003fec06 	br	100098b8 <__alt_data_end+0xf80098b8>
10009908:	88801415 	stw	r2,80(r17)
1000990c:	003fd206 	br	10009858 <__alt_data_end+0xf8009858>
10009910:	28c00f17 	ldw	r3,60(r5)
10009914:	00ffb316 	blt	zero,r3,100097e4 <__alt_data_end+0xf80097e4>
10009918:	003fd706 	br	10009878 <__alt_data_end+0xf8009878>
1000991c:	89400717 	ldw	r5,28(r17)
10009920:	000d883a 	mov	r6,zero
10009924:	01c00044 	movi	r7,1
10009928:	9809883a 	mov	r4,r19
1000992c:	403ee83a 	callr	r8
10009930:	100d883a 	mov	r6,r2
10009934:	00bfffc4 	movi	r2,-1
10009938:	30801426 	beq	r6,r2,1000998c <__sflush_r+0x1e4>
1000993c:	8880030b 	ldhu	r2,12(r17)
10009940:	8a000a17 	ldw	r8,40(r17)
10009944:	003fae06 	br	10009800 <__alt_data_end+0xf8009800>
10009948:	98c00017 	ldw	r3,0(r19)
1000994c:	183fba26 	beq	r3,zero,10009838 <__alt_data_end+0xf8009838>
10009950:	01000744 	movi	r4,29
10009954:	19000626 	beq	r3,r4,10009970 <__sflush_r+0x1c8>
10009958:	01000584 	movi	r4,22
1000995c:	19000426 	beq	r3,r4,10009970 <__sflush_r+0x1c8>
10009960:	88c0030b 	ldhu	r3,12(r17)
10009964:	18c01014 	ori	r3,r3,64
10009968:	88c0030d 	sth	r3,12(r17)
1000996c:	003fc306 	br	1000987c <__alt_data_end+0xf800987c>
10009970:	8880030b 	ldhu	r2,12(r17)
10009974:	88c00417 	ldw	r3,16(r17)
10009978:	88000115 	stw	zero,4(r17)
1000997c:	10bdffcc 	andi	r2,r2,63487
10009980:	8880030d 	sth	r2,12(r17)
10009984:	88c00015 	stw	r3,0(r17)
10009988:	003fb306 	br	10009858 <__alt_data_end+0xf8009858>
1000998c:	98800017 	ldw	r2,0(r19)
10009990:	103fea26 	beq	r2,zero,1000993c <__alt_data_end+0xf800993c>
10009994:	00c00744 	movi	r3,29
10009998:	10c00226 	beq	r2,r3,100099a4 <__sflush_r+0x1fc>
1000999c:	00c00584 	movi	r3,22
100099a0:	10c0031e 	bne	r2,r3,100099b0 <__sflush_r+0x208>
100099a4:	9c000015 	stw	r16,0(r19)
100099a8:	0005883a 	mov	r2,zero
100099ac:	003fb306 	br	1000987c <__alt_data_end+0xf800987c>
100099b0:	88c0030b 	ldhu	r3,12(r17)
100099b4:	3005883a 	mov	r2,r6
100099b8:	18c01014 	ori	r3,r3,64
100099bc:	88c0030d 	sth	r3,12(r17)
100099c0:	003fae06 	br	1000987c <__alt_data_end+0xf800987c>

100099c4 <_fflush_r>:
100099c4:	defffd04 	addi	sp,sp,-12
100099c8:	dc000115 	stw	r16,4(sp)
100099cc:	dfc00215 	stw	ra,8(sp)
100099d0:	2021883a 	mov	r16,r4
100099d4:	20000226 	beq	r4,zero,100099e0 <_fflush_r+0x1c>
100099d8:	20800e17 	ldw	r2,56(r4)
100099dc:	10000c26 	beq	r2,zero,10009a10 <_fflush_r+0x4c>
100099e0:	2880030f 	ldh	r2,12(r5)
100099e4:	1000051e 	bne	r2,zero,100099fc <_fflush_r+0x38>
100099e8:	0005883a 	mov	r2,zero
100099ec:	dfc00217 	ldw	ra,8(sp)
100099f0:	dc000117 	ldw	r16,4(sp)
100099f4:	dec00304 	addi	sp,sp,12
100099f8:	f800283a 	ret
100099fc:	8009883a 	mov	r4,r16
10009a00:	dfc00217 	ldw	ra,8(sp)
10009a04:	dc000117 	ldw	r16,4(sp)
10009a08:	dec00304 	addi	sp,sp,12
10009a0c:	00097a81 	jmpi	100097a8 <__sflush_r>
10009a10:	d9400015 	stw	r5,0(sp)
10009a14:	0009db00 	call	10009db0 <__sinit>
10009a18:	d9400017 	ldw	r5,0(sp)
10009a1c:	003ff006 	br	100099e0 <__alt_data_end+0xf80099e0>

10009a20 <fflush>:
10009a20:	20000526 	beq	r4,zero,10009a38 <fflush+0x18>
10009a24:	00840074 	movhi	r2,4097
10009a28:	109ba704 	addi	r2,r2,28316
10009a2c:	200b883a 	mov	r5,r4
10009a30:	11000017 	ldw	r4,0(r2)
10009a34:	00099c41 	jmpi	100099c4 <_fflush_r>
10009a38:	00840074 	movhi	r2,4097
10009a3c:	109ba604 	addi	r2,r2,28312
10009a40:	11000017 	ldw	r4,0(r2)
10009a44:	01440074 	movhi	r5,4097
10009a48:	29667104 	addi	r5,r5,-26172
10009a4c:	000a7c01 	jmpi	1000a7c0 <_fwalk_reent>

10009a50 <__fp_unlock>:
10009a50:	0005883a 	mov	r2,zero
10009a54:	f800283a 	ret

10009a58 <_cleanup_r>:
10009a58:	01440074 	movhi	r5,4097
10009a5c:	2977be04 	addi	r5,r5,-8456
10009a60:	000a7c01 	jmpi	1000a7c0 <_fwalk_reent>

10009a64 <__sinit.part.1>:
10009a64:	defff704 	addi	sp,sp,-36
10009a68:	00c40074 	movhi	r3,4097
10009a6c:	dfc00815 	stw	ra,32(sp)
10009a70:	ddc00715 	stw	r23,28(sp)
10009a74:	dd800615 	stw	r22,24(sp)
10009a78:	dd400515 	stw	r21,20(sp)
10009a7c:	dd000415 	stw	r20,16(sp)
10009a80:	dcc00315 	stw	r19,12(sp)
10009a84:	dc800215 	stw	r18,8(sp)
10009a88:	dc400115 	stw	r17,4(sp)
10009a8c:	dc000015 	stw	r16,0(sp)
10009a90:	18e69604 	addi	r3,r3,-26024
10009a94:	24000117 	ldw	r16,4(r4)
10009a98:	20c00f15 	stw	r3,60(r4)
10009a9c:	2080bb04 	addi	r2,r4,748
10009aa0:	00c000c4 	movi	r3,3
10009aa4:	20c0b915 	stw	r3,740(r4)
10009aa8:	2080ba15 	stw	r2,744(r4)
10009aac:	2000b815 	stw	zero,736(r4)
10009ab0:	05c00204 	movi	r23,8
10009ab4:	00800104 	movi	r2,4
10009ab8:	2025883a 	mov	r18,r4
10009abc:	b80d883a 	mov	r6,r23
10009ac0:	81001704 	addi	r4,r16,92
10009ac4:	000b883a 	mov	r5,zero
10009ac8:	80000015 	stw	zero,0(r16)
10009acc:	80000115 	stw	zero,4(r16)
10009ad0:	80000215 	stw	zero,8(r16)
10009ad4:	8080030d 	sth	r2,12(r16)
10009ad8:	80001915 	stw	zero,100(r16)
10009adc:	8000038d 	sth	zero,14(r16)
10009ae0:	80000415 	stw	zero,16(r16)
10009ae4:	80000515 	stw	zero,20(r16)
10009ae8:	80000615 	stw	zero,24(r16)
10009aec:	00052bc0 	call	100052bc <memset>
10009af0:	05840074 	movhi	r22,4097
10009af4:	94400217 	ldw	r17,8(r18)
10009af8:	05440074 	movhi	r21,4097
10009afc:	05040074 	movhi	r20,4097
10009b00:	04c40074 	movhi	r19,4097
10009b04:	b5b14d04 	addi	r22,r22,-15052
10009b08:	ad716404 	addi	r21,r21,-14960
10009b0c:	a5318304 	addi	r20,r20,-14836
10009b10:	9cf19a04 	addi	r19,r19,-14744
10009b14:	85800815 	stw	r22,32(r16)
10009b18:	85400915 	stw	r21,36(r16)
10009b1c:	85000a15 	stw	r20,40(r16)
10009b20:	84c00b15 	stw	r19,44(r16)
10009b24:	84000715 	stw	r16,28(r16)
10009b28:	00800284 	movi	r2,10
10009b2c:	8880030d 	sth	r2,12(r17)
10009b30:	00800044 	movi	r2,1
10009b34:	b80d883a 	mov	r6,r23
10009b38:	89001704 	addi	r4,r17,92
10009b3c:	000b883a 	mov	r5,zero
10009b40:	88000015 	stw	zero,0(r17)
10009b44:	88000115 	stw	zero,4(r17)
10009b48:	88000215 	stw	zero,8(r17)
10009b4c:	88001915 	stw	zero,100(r17)
10009b50:	8880038d 	sth	r2,14(r17)
10009b54:	88000415 	stw	zero,16(r17)
10009b58:	88000515 	stw	zero,20(r17)
10009b5c:	88000615 	stw	zero,24(r17)
10009b60:	00052bc0 	call	100052bc <memset>
10009b64:	94000317 	ldw	r16,12(r18)
10009b68:	00800484 	movi	r2,18
10009b6c:	8c400715 	stw	r17,28(r17)
10009b70:	8d800815 	stw	r22,32(r17)
10009b74:	8d400915 	stw	r21,36(r17)
10009b78:	8d000a15 	stw	r20,40(r17)
10009b7c:	8cc00b15 	stw	r19,44(r17)
10009b80:	8080030d 	sth	r2,12(r16)
10009b84:	00800084 	movi	r2,2
10009b88:	80000015 	stw	zero,0(r16)
10009b8c:	80000115 	stw	zero,4(r16)
10009b90:	80000215 	stw	zero,8(r16)
10009b94:	80001915 	stw	zero,100(r16)
10009b98:	8080038d 	sth	r2,14(r16)
10009b9c:	80000415 	stw	zero,16(r16)
10009ba0:	80000515 	stw	zero,20(r16)
10009ba4:	80000615 	stw	zero,24(r16)
10009ba8:	b80d883a 	mov	r6,r23
10009bac:	000b883a 	mov	r5,zero
10009bb0:	81001704 	addi	r4,r16,92
10009bb4:	00052bc0 	call	100052bc <memset>
10009bb8:	00800044 	movi	r2,1
10009bbc:	84000715 	stw	r16,28(r16)
10009bc0:	85800815 	stw	r22,32(r16)
10009bc4:	85400915 	stw	r21,36(r16)
10009bc8:	85000a15 	stw	r20,40(r16)
10009bcc:	84c00b15 	stw	r19,44(r16)
10009bd0:	90800e15 	stw	r2,56(r18)
10009bd4:	dfc00817 	ldw	ra,32(sp)
10009bd8:	ddc00717 	ldw	r23,28(sp)
10009bdc:	dd800617 	ldw	r22,24(sp)
10009be0:	dd400517 	ldw	r21,20(sp)
10009be4:	dd000417 	ldw	r20,16(sp)
10009be8:	dcc00317 	ldw	r19,12(sp)
10009bec:	dc800217 	ldw	r18,8(sp)
10009bf0:	dc400117 	ldw	r17,4(sp)
10009bf4:	dc000017 	ldw	r16,0(sp)
10009bf8:	dec00904 	addi	sp,sp,36
10009bfc:	f800283a 	ret

10009c00 <__fp_lock>:
10009c00:	0005883a 	mov	r2,zero
10009c04:	f800283a 	ret

10009c08 <__sfmoreglue>:
10009c08:	defffc04 	addi	sp,sp,-16
10009c0c:	dc800215 	stw	r18,8(sp)
10009c10:	2825883a 	mov	r18,r5
10009c14:	dc000015 	stw	r16,0(sp)
10009c18:	01401a04 	movi	r5,104
10009c1c:	2021883a 	mov	r16,r4
10009c20:	913fffc4 	addi	r4,r18,-1
10009c24:	dfc00315 	stw	ra,12(sp)
10009c28:	dc400115 	stw	r17,4(sp)
10009c2c:	00045280 	call	10004528 <__mulsi3>
10009c30:	8009883a 	mov	r4,r16
10009c34:	11401d04 	addi	r5,r2,116
10009c38:	1023883a 	mov	r17,r2
10009c3c:	0004ab00 	call	10004ab0 <_malloc_r>
10009c40:	1021883a 	mov	r16,r2
10009c44:	10000726 	beq	r2,zero,10009c64 <__sfmoreglue+0x5c>
10009c48:	11000304 	addi	r4,r2,12
10009c4c:	10000015 	stw	zero,0(r2)
10009c50:	14800115 	stw	r18,4(r2)
10009c54:	11000215 	stw	r4,8(r2)
10009c58:	89801a04 	addi	r6,r17,104
10009c5c:	000b883a 	mov	r5,zero
10009c60:	00052bc0 	call	100052bc <memset>
10009c64:	8005883a 	mov	r2,r16
10009c68:	dfc00317 	ldw	ra,12(sp)
10009c6c:	dc800217 	ldw	r18,8(sp)
10009c70:	dc400117 	ldw	r17,4(sp)
10009c74:	dc000017 	ldw	r16,0(sp)
10009c78:	dec00404 	addi	sp,sp,16
10009c7c:	f800283a 	ret

10009c80 <__sfp>:
10009c80:	defffb04 	addi	sp,sp,-20
10009c84:	dc000015 	stw	r16,0(sp)
10009c88:	04040074 	movhi	r16,4097
10009c8c:	841ba604 	addi	r16,r16,28312
10009c90:	dcc00315 	stw	r19,12(sp)
10009c94:	2027883a 	mov	r19,r4
10009c98:	81000017 	ldw	r4,0(r16)
10009c9c:	dfc00415 	stw	ra,16(sp)
10009ca0:	dc800215 	stw	r18,8(sp)
10009ca4:	20800e17 	ldw	r2,56(r4)
10009ca8:	dc400115 	stw	r17,4(sp)
10009cac:	1000021e 	bne	r2,zero,10009cb8 <__sfp+0x38>
10009cb0:	0009a640 	call	10009a64 <__sinit.part.1>
10009cb4:	81000017 	ldw	r4,0(r16)
10009cb8:	2480b804 	addi	r18,r4,736
10009cbc:	047fffc4 	movi	r17,-1
10009cc0:	91000117 	ldw	r4,4(r18)
10009cc4:	94000217 	ldw	r16,8(r18)
10009cc8:	213fffc4 	addi	r4,r4,-1
10009ccc:	20000a16 	blt	r4,zero,10009cf8 <__sfp+0x78>
10009cd0:	8080030f 	ldh	r2,12(r16)
10009cd4:	10000c26 	beq	r2,zero,10009d08 <__sfp+0x88>
10009cd8:	80c01d04 	addi	r3,r16,116
10009cdc:	00000206 	br	10009ce8 <__sfp+0x68>
10009ce0:	18bfe60f 	ldh	r2,-104(r3)
10009ce4:	10000826 	beq	r2,zero,10009d08 <__sfp+0x88>
10009ce8:	213fffc4 	addi	r4,r4,-1
10009cec:	1c3ffd04 	addi	r16,r3,-12
10009cf0:	18c01a04 	addi	r3,r3,104
10009cf4:	247ffa1e 	bne	r4,r17,10009ce0 <__alt_data_end+0xf8009ce0>
10009cf8:	90800017 	ldw	r2,0(r18)
10009cfc:	10001d26 	beq	r2,zero,10009d74 <__sfp+0xf4>
10009d00:	1025883a 	mov	r18,r2
10009d04:	003fee06 	br	10009cc0 <__alt_data_end+0xf8009cc0>
10009d08:	00bfffc4 	movi	r2,-1
10009d0c:	8080038d 	sth	r2,14(r16)
10009d10:	00800044 	movi	r2,1
10009d14:	8080030d 	sth	r2,12(r16)
10009d18:	80001915 	stw	zero,100(r16)
10009d1c:	80000015 	stw	zero,0(r16)
10009d20:	80000215 	stw	zero,8(r16)
10009d24:	80000115 	stw	zero,4(r16)
10009d28:	80000415 	stw	zero,16(r16)
10009d2c:	80000515 	stw	zero,20(r16)
10009d30:	80000615 	stw	zero,24(r16)
10009d34:	01800204 	movi	r6,8
10009d38:	000b883a 	mov	r5,zero
10009d3c:	81001704 	addi	r4,r16,92
10009d40:	00052bc0 	call	100052bc <memset>
10009d44:	8005883a 	mov	r2,r16
10009d48:	80000c15 	stw	zero,48(r16)
10009d4c:	80000d15 	stw	zero,52(r16)
10009d50:	80001115 	stw	zero,68(r16)
10009d54:	80001215 	stw	zero,72(r16)
10009d58:	dfc00417 	ldw	ra,16(sp)
10009d5c:	dcc00317 	ldw	r19,12(sp)
10009d60:	dc800217 	ldw	r18,8(sp)
10009d64:	dc400117 	ldw	r17,4(sp)
10009d68:	dc000017 	ldw	r16,0(sp)
10009d6c:	dec00504 	addi	sp,sp,20
10009d70:	f800283a 	ret
10009d74:	01400104 	movi	r5,4
10009d78:	9809883a 	mov	r4,r19
10009d7c:	0009c080 	call	10009c08 <__sfmoreglue>
10009d80:	90800015 	stw	r2,0(r18)
10009d84:	103fde1e 	bne	r2,zero,10009d00 <__alt_data_end+0xf8009d00>
10009d88:	00800304 	movi	r2,12
10009d8c:	98800015 	stw	r2,0(r19)
10009d90:	0005883a 	mov	r2,zero
10009d94:	003ff006 	br	10009d58 <__alt_data_end+0xf8009d58>

10009d98 <_cleanup>:
10009d98:	00840074 	movhi	r2,4097
10009d9c:	109ba604 	addi	r2,r2,28312
10009da0:	11000017 	ldw	r4,0(r2)
10009da4:	01440074 	movhi	r5,4097
10009da8:	2977be04 	addi	r5,r5,-8456
10009dac:	000a7c01 	jmpi	1000a7c0 <_fwalk_reent>

10009db0 <__sinit>:
10009db0:	20800e17 	ldw	r2,56(r4)
10009db4:	10000126 	beq	r2,zero,10009dbc <__sinit+0xc>
10009db8:	f800283a 	ret
10009dbc:	0009a641 	jmpi	10009a64 <__sinit.part.1>

10009dc0 <__sfp_lock_acquire>:
10009dc0:	f800283a 	ret

10009dc4 <__sfp_lock_release>:
10009dc4:	f800283a 	ret

10009dc8 <__sinit_lock_acquire>:
10009dc8:	f800283a 	ret

10009dcc <__sinit_lock_release>:
10009dcc:	f800283a 	ret

10009dd0 <__fp_lock_all>:
10009dd0:	00840074 	movhi	r2,4097
10009dd4:	109ba704 	addi	r2,r2,28316
10009dd8:	11000017 	ldw	r4,0(r2)
10009ddc:	01440074 	movhi	r5,4097
10009de0:	29670004 	addi	r5,r5,-25600
10009de4:	000a6fc1 	jmpi	1000a6fc <_fwalk>

10009de8 <__fp_unlock_all>:
10009de8:	00840074 	movhi	r2,4097
10009dec:	109ba704 	addi	r2,r2,28316
10009df0:	11000017 	ldw	r4,0(r2)
10009df4:	01440074 	movhi	r5,4097
10009df8:	29669404 	addi	r5,r5,-26032
10009dfc:	000a6fc1 	jmpi	1000a6fc <_fwalk>

10009e00 <_malloc_trim_r>:
10009e00:	defffb04 	addi	sp,sp,-20
10009e04:	dcc00315 	stw	r19,12(sp)
10009e08:	04c40074 	movhi	r19,4097
10009e0c:	dc800215 	stw	r18,8(sp)
10009e10:	dc400115 	stw	r17,4(sp)
10009e14:	dc000015 	stw	r16,0(sp)
10009e18:	dfc00415 	stw	ra,16(sp)
10009e1c:	2821883a 	mov	r16,r5
10009e20:	9cd4ed04 	addi	r19,r19,21428
10009e24:	2025883a 	mov	r18,r4
10009e28:	00124280 	call	10012428 <__malloc_lock>
10009e2c:	98800217 	ldw	r2,8(r19)
10009e30:	14400117 	ldw	r17,4(r2)
10009e34:	00bfff04 	movi	r2,-4
10009e38:	88a2703a 	and	r17,r17,r2
10009e3c:	8c21c83a 	sub	r16,r17,r16
10009e40:	8403fbc4 	addi	r16,r16,4079
10009e44:	8020d33a 	srli	r16,r16,12
10009e48:	0083ffc4 	movi	r2,4095
10009e4c:	843fffc4 	addi	r16,r16,-1
10009e50:	8020933a 	slli	r16,r16,12
10009e54:	1400060e 	bge	r2,r16,10009e70 <_malloc_trim_r+0x70>
10009e58:	000b883a 	mov	r5,zero
10009e5c:	9009883a 	mov	r4,r18
10009e60:	00055240 	call	10005524 <_sbrk_r>
10009e64:	98c00217 	ldw	r3,8(r19)
10009e68:	1c47883a 	add	r3,r3,r17
10009e6c:	10c00a26 	beq	r2,r3,10009e98 <_malloc_trim_r+0x98>
10009e70:	9009883a 	mov	r4,r18
10009e74:	001244c0 	call	1001244c <__malloc_unlock>
10009e78:	0005883a 	mov	r2,zero
10009e7c:	dfc00417 	ldw	ra,16(sp)
10009e80:	dcc00317 	ldw	r19,12(sp)
10009e84:	dc800217 	ldw	r18,8(sp)
10009e88:	dc400117 	ldw	r17,4(sp)
10009e8c:	dc000017 	ldw	r16,0(sp)
10009e90:	dec00504 	addi	sp,sp,20
10009e94:	f800283a 	ret
10009e98:	040bc83a 	sub	r5,zero,r16
10009e9c:	9009883a 	mov	r4,r18
10009ea0:	00055240 	call	10005524 <_sbrk_r>
10009ea4:	00ffffc4 	movi	r3,-1
10009ea8:	10c00d26 	beq	r2,r3,10009ee0 <_malloc_trim_r+0xe0>
10009eac:	00c400b4 	movhi	r3,4098
10009eb0:	18e29204 	addi	r3,r3,-30136
10009eb4:	18800017 	ldw	r2,0(r3)
10009eb8:	99000217 	ldw	r4,8(r19)
10009ebc:	8c23c83a 	sub	r17,r17,r16
10009ec0:	8c400054 	ori	r17,r17,1
10009ec4:	1421c83a 	sub	r16,r2,r16
10009ec8:	24400115 	stw	r17,4(r4)
10009ecc:	9009883a 	mov	r4,r18
10009ed0:	1c000015 	stw	r16,0(r3)
10009ed4:	001244c0 	call	1001244c <__malloc_unlock>
10009ed8:	00800044 	movi	r2,1
10009edc:	003fe706 	br	10009e7c <__alt_data_end+0xf8009e7c>
10009ee0:	000b883a 	mov	r5,zero
10009ee4:	9009883a 	mov	r4,r18
10009ee8:	00055240 	call	10005524 <_sbrk_r>
10009eec:	99000217 	ldw	r4,8(r19)
10009ef0:	014003c4 	movi	r5,15
10009ef4:	1107c83a 	sub	r3,r2,r4
10009ef8:	28ffdd0e 	bge	r5,r3,10009e70 <__alt_data_end+0xf8009e70>
10009efc:	01440074 	movhi	r5,4097
10009f00:	295ba404 	addi	r5,r5,28304
10009f04:	29400017 	ldw	r5,0(r5)
10009f08:	18c00054 	ori	r3,r3,1
10009f0c:	20c00115 	stw	r3,4(r4)
10009f10:	00c400b4 	movhi	r3,4098
10009f14:	1145c83a 	sub	r2,r2,r5
10009f18:	18e29204 	addi	r3,r3,-30136
10009f1c:	18800015 	stw	r2,0(r3)
10009f20:	003fd306 	br	10009e70 <__alt_data_end+0xf8009e70>

10009f24 <_free_r>:
10009f24:	28004126 	beq	r5,zero,1000a02c <_free_r+0x108>
10009f28:	defffd04 	addi	sp,sp,-12
10009f2c:	dc400115 	stw	r17,4(sp)
10009f30:	dc000015 	stw	r16,0(sp)
10009f34:	2023883a 	mov	r17,r4
10009f38:	2821883a 	mov	r16,r5
10009f3c:	dfc00215 	stw	ra,8(sp)
10009f40:	00124280 	call	10012428 <__malloc_lock>
10009f44:	81ffff17 	ldw	r7,-4(r16)
10009f48:	00bfff84 	movi	r2,-2
10009f4c:	01040074 	movhi	r4,4097
10009f50:	81bffe04 	addi	r6,r16,-8
10009f54:	3884703a 	and	r2,r7,r2
10009f58:	2114ed04 	addi	r4,r4,21428
10009f5c:	308b883a 	add	r5,r6,r2
10009f60:	2a400117 	ldw	r9,4(r5)
10009f64:	22000217 	ldw	r8,8(r4)
10009f68:	00ffff04 	movi	r3,-4
10009f6c:	48c6703a 	and	r3,r9,r3
10009f70:	2a005726 	beq	r5,r8,1000a0d0 <_free_r+0x1ac>
10009f74:	28c00115 	stw	r3,4(r5)
10009f78:	39c0004c 	andi	r7,r7,1
10009f7c:	3800091e 	bne	r7,zero,10009fa4 <_free_r+0x80>
10009f80:	823ffe17 	ldw	r8,-8(r16)
10009f84:	22400204 	addi	r9,r4,8
10009f88:	320dc83a 	sub	r6,r6,r8
10009f8c:	31c00217 	ldw	r7,8(r6)
10009f90:	1205883a 	add	r2,r2,r8
10009f94:	3a406526 	beq	r7,r9,1000a12c <_free_r+0x208>
10009f98:	32000317 	ldw	r8,12(r6)
10009f9c:	3a000315 	stw	r8,12(r7)
10009fa0:	41c00215 	stw	r7,8(r8)
10009fa4:	28cf883a 	add	r7,r5,r3
10009fa8:	39c00117 	ldw	r7,4(r7)
10009fac:	39c0004c 	andi	r7,r7,1
10009fb0:	38003a26 	beq	r7,zero,1000a09c <_free_r+0x178>
10009fb4:	10c00054 	ori	r3,r2,1
10009fb8:	30c00115 	stw	r3,4(r6)
10009fbc:	3087883a 	add	r3,r6,r2
10009fc0:	18800015 	stw	r2,0(r3)
10009fc4:	00c07fc4 	movi	r3,511
10009fc8:	18801936 	bltu	r3,r2,1000a030 <_free_r+0x10c>
10009fcc:	1004d0fa 	srli	r2,r2,3
10009fd0:	01c00044 	movi	r7,1
10009fd4:	21400117 	ldw	r5,4(r4)
10009fd8:	10c00044 	addi	r3,r2,1
10009fdc:	18c7883a 	add	r3,r3,r3
10009fe0:	1005d0ba 	srai	r2,r2,2
10009fe4:	18c7883a 	add	r3,r3,r3
10009fe8:	18c7883a 	add	r3,r3,r3
10009fec:	1907883a 	add	r3,r3,r4
10009ff0:	3884983a 	sll	r2,r7,r2
10009ff4:	19c00017 	ldw	r7,0(r3)
10009ff8:	1a3ffe04 	addi	r8,r3,-8
10009ffc:	1144b03a 	or	r2,r2,r5
1000a000:	32000315 	stw	r8,12(r6)
1000a004:	31c00215 	stw	r7,8(r6)
1000a008:	20800115 	stw	r2,4(r4)
1000a00c:	19800015 	stw	r6,0(r3)
1000a010:	39800315 	stw	r6,12(r7)
1000a014:	8809883a 	mov	r4,r17
1000a018:	dfc00217 	ldw	ra,8(sp)
1000a01c:	dc400117 	ldw	r17,4(sp)
1000a020:	dc000017 	ldw	r16,0(sp)
1000a024:	dec00304 	addi	sp,sp,12
1000a028:	001244c1 	jmpi	1001244c <__malloc_unlock>
1000a02c:	f800283a 	ret
1000a030:	100ad27a 	srli	r5,r2,9
1000a034:	00c00104 	movi	r3,4
1000a038:	19404a36 	bltu	r3,r5,1000a164 <_free_r+0x240>
1000a03c:	100ad1ba 	srli	r5,r2,6
1000a040:	28c00e44 	addi	r3,r5,57
1000a044:	18c7883a 	add	r3,r3,r3
1000a048:	29400e04 	addi	r5,r5,56
1000a04c:	18c7883a 	add	r3,r3,r3
1000a050:	18c7883a 	add	r3,r3,r3
1000a054:	1909883a 	add	r4,r3,r4
1000a058:	20c00017 	ldw	r3,0(r4)
1000a05c:	01c40074 	movhi	r7,4097
1000a060:	213ffe04 	addi	r4,r4,-8
1000a064:	39d4ed04 	addi	r7,r7,21428
1000a068:	20c04426 	beq	r4,r3,1000a17c <_free_r+0x258>
1000a06c:	01ffff04 	movi	r7,-4
1000a070:	19400117 	ldw	r5,4(r3)
1000a074:	29ca703a 	and	r5,r5,r7
1000a078:	1140022e 	bgeu	r2,r5,1000a084 <_free_r+0x160>
1000a07c:	18c00217 	ldw	r3,8(r3)
1000a080:	20fffb1e 	bne	r4,r3,1000a070 <__alt_data_end+0xf800a070>
1000a084:	19000317 	ldw	r4,12(r3)
1000a088:	31000315 	stw	r4,12(r6)
1000a08c:	30c00215 	stw	r3,8(r6)
1000a090:	21800215 	stw	r6,8(r4)
1000a094:	19800315 	stw	r6,12(r3)
1000a098:	003fde06 	br	1000a014 <__alt_data_end+0xf800a014>
1000a09c:	29c00217 	ldw	r7,8(r5)
1000a0a0:	10c5883a 	add	r2,r2,r3
1000a0a4:	00c40074 	movhi	r3,4097
1000a0a8:	18d4ef04 	addi	r3,r3,21436
1000a0ac:	38c03b26 	beq	r7,r3,1000a19c <_free_r+0x278>
1000a0b0:	2a000317 	ldw	r8,12(r5)
1000a0b4:	11400054 	ori	r5,r2,1
1000a0b8:	3087883a 	add	r3,r6,r2
1000a0bc:	3a000315 	stw	r8,12(r7)
1000a0c0:	41c00215 	stw	r7,8(r8)
1000a0c4:	31400115 	stw	r5,4(r6)
1000a0c8:	18800015 	stw	r2,0(r3)
1000a0cc:	003fbd06 	br	10009fc4 <__alt_data_end+0xf8009fc4>
1000a0d0:	39c0004c 	andi	r7,r7,1
1000a0d4:	10c5883a 	add	r2,r2,r3
1000a0d8:	3800071e 	bne	r7,zero,1000a0f8 <_free_r+0x1d4>
1000a0dc:	81fffe17 	ldw	r7,-8(r16)
1000a0e0:	31cdc83a 	sub	r6,r6,r7
1000a0e4:	30c00317 	ldw	r3,12(r6)
1000a0e8:	31400217 	ldw	r5,8(r6)
1000a0ec:	11c5883a 	add	r2,r2,r7
1000a0f0:	28c00315 	stw	r3,12(r5)
1000a0f4:	19400215 	stw	r5,8(r3)
1000a0f8:	10c00054 	ori	r3,r2,1
1000a0fc:	30c00115 	stw	r3,4(r6)
1000a100:	00c40074 	movhi	r3,4097
1000a104:	18dba504 	addi	r3,r3,28308
1000a108:	18c00017 	ldw	r3,0(r3)
1000a10c:	21800215 	stw	r6,8(r4)
1000a110:	10ffc036 	bltu	r2,r3,1000a014 <__alt_data_end+0xf800a014>
1000a114:	008400b4 	movhi	r2,4098
1000a118:	10a28204 	addi	r2,r2,-30200
1000a11c:	11400017 	ldw	r5,0(r2)
1000a120:	8809883a 	mov	r4,r17
1000a124:	0009e000 	call	10009e00 <_malloc_trim_r>
1000a128:	003fba06 	br	1000a014 <__alt_data_end+0xf800a014>
1000a12c:	28c9883a 	add	r4,r5,r3
1000a130:	21000117 	ldw	r4,4(r4)
1000a134:	2100004c 	andi	r4,r4,1
1000a138:	2000391e 	bne	r4,zero,1000a220 <_free_r+0x2fc>
1000a13c:	29c00217 	ldw	r7,8(r5)
1000a140:	29000317 	ldw	r4,12(r5)
1000a144:	1885883a 	add	r2,r3,r2
1000a148:	10c00054 	ori	r3,r2,1
1000a14c:	39000315 	stw	r4,12(r7)
1000a150:	21c00215 	stw	r7,8(r4)
1000a154:	30c00115 	stw	r3,4(r6)
1000a158:	308d883a 	add	r6,r6,r2
1000a15c:	30800015 	stw	r2,0(r6)
1000a160:	003fac06 	br	1000a014 <__alt_data_end+0xf800a014>
1000a164:	00c00504 	movi	r3,20
1000a168:	19401536 	bltu	r3,r5,1000a1c0 <_free_r+0x29c>
1000a16c:	28c01704 	addi	r3,r5,92
1000a170:	18c7883a 	add	r3,r3,r3
1000a174:	294016c4 	addi	r5,r5,91
1000a178:	003fb406 	br	1000a04c <__alt_data_end+0xf800a04c>
1000a17c:	280bd0ba 	srai	r5,r5,2
1000a180:	00c00044 	movi	r3,1
1000a184:	38800117 	ldw	r2,4(r7)
1000a188:	194a983a 	sll	r5,r3,r5
1000a18c:	2007883a 	mov	r3,r4
1000a190:	2884b03a 	or	r2,r5,r2
1000a194:	38800115 	stw	r2,4(r7)
1000a198:	003fbb06 	br	1000a088 <__alt_data_end+0xf800a088>
1000a19c:	21800515 	stw	r6,20(r4)
1000a1a0:	21800415 	stw	r6,16(r4)
1000a1a4:	10c00054 	ori	r3,r2,1
1000a1a8:	31c00315 	stw	r7,12(r6)
1000a1ac:	31c00215 	stw	r7,8(r6)
1000a1b0:	30c00115 	stw	r3,4(r6)
1000a1b4:	308d883a 	add	r6,r6,r2
1000a1b8:	30800015 	stw	r2,0(r6)
1000a1bc:	003f9506 	br	1000a014 <__alt_data_end+0xf800a014>
1000a1c0:	00c01504 	movi	r3,84
1000a1c4:	19400536 	bltu	r3,r5,1000a1dc <_free_r+0x2b8>
1000a1c8:	100ad33a 	srli	r5,r2,12
1000a1cc:	28c01bc4 	addi	r3,r5,111
1000a1d0:	18c7883a 	add	r3,r3,r3
1000a1d4:	29401b84 	addi	r5,r5,110
1000a1d8:	003f9c06 	br	1000a04c <__alt_data_end+0xf800a04c>
1000a1dc:	00c05504 	movi	r3,340
1000a1e0:	19400536 	bltu	r3,r5,1000a1f8 <_free_r+0x2d4>
1000a1e4:	100ad3fa 	srli	r5,r2,15
1000a1e8:	28c01e04 	addi	r3,r5,120
1000a1ec:	18c7883a 	add	r3,r3,r3
1000a1f0:	29401dc4 	addi	r5,r5,119
1000a1f4:	003f9506 	br	1000a04c <__alt_data_end+0xf800a04c>
1000a1f8:	00c15504 	movi	r3,1364
1000a1fc:	19400536 	bltu	r3,r5,1000a214 <_free_r+0x2f0>
1000a200:	100ad4ba 	srli	r5,r2,18
1000a204:	28c01f44 	addi	r3,r5,125
1000a208:	18c7883a 	add	r3,r3,r3
1000a20c:	29401f04 	addi	r5,r5,124
1000a210:	003f8e06 	br	1000a04c <__alt_data_end+0xf800a04c>
1000a214:	00c03f84 	movi	r3,254
1000a218:	01401f84 	movi	r5,126
1000a21c:	003f8b06 	br	1000a04c <__alt_data_end+0xf800a04c>
1000a220:	10c00054 	ori	r3,r2,1
1000a224:	30c00115 	stw	r3,4(r6)
1000a228:	308d883a 	add	r6,r6,r2
1000a22c:	30800015 	stw	r2,0(r6)
1000a230:	003f7806 	br	1000a014 <__alt_data_end+0xf800a014>

1000a234 <__sfvwrite_r>:
1000a234:	30800217 	ldw	r2,8(r6)
1000a238:	10006726 	beq	r2,zero,1000a3d8 <__sfvwrite_r+0x1a4>
1000a23c:	28c0030b 	ldhu	r3,12(r5)
1000a240:	defff404 	addi	sp,sp,-48
1000a244:	dd400715 	stw	r21,28(sp)
1000a248:	dd000615 	stw	r20,24(sp)
1000a24c:	dc000215 	stw	r16,8(sp)
1000a250:	dfc00b15 	stw	ra,44(sp)
1000a254:	df000a15 	stw	fp,40(sp)
1000a258:	ddc00915 	stw	r23,36(sp)
1000a25c:	dd800815 	stw	r22,32(sp)
1000a260:	dcc00515 	stw	r19,20(sp)
1000a264:	dc800415 	stw	r18,16(sp)
1000a268:	dc400315 	stw	r17,12(sp)
1000a26c:	1880020c 	andi	r2,r3,8
1000a270:	2821883a 	mov	r16,r5
1000a274:	202b883a 	mov	r21,r4
1000a278:	3029883a 	mov	r20,r6
1000a27c:	10002726 	beq	r2,zero,1000a31c <__sfvwrite_r+0xe8>
1000a280:	28800417 	ldw	r2,16(r5)
1000a284:	10002526 	beq	r2,zero,1000a31c <__sfvwrite_r+0xe8>
1000a288:	1880008c 	andi	r2,r3,2
1000a28c:	a4400017 	ldw	r17,0(r20)
1000a290:	10002a26 	beq	r2,zero,1000a33c <__sfvwrite_r+0x108>
1000a294:	05a00034 	movhi	r22,32768
1000a298:	0027883a 	mov	r19,zero
1000a29c:	0025883a 	mov	r18,zero
1000a2a0:	b5bf0004 	addi	r22,r22,-1024
1000a2a4:	980d883a 	mov	r6,r19
1000a2a8:	a809883a 	mov	r4,r21
1000a2ac:	90004626 	beq	r18,zero,1000a3c8 <__sfvwrite_r+0x194>
1000a2b0:	900f883a 	mov	r7,r18
1000a2b4:	b480022e 	bgeu	r22,r18,1000a2c0 <__sfvwrite_r+0x8c>
1000a2b8:	01e00034 	movhi	r7,32768
1000a2bc:	39ff0004 	addi	r7,r7,-1024
1000a2c0:	80800917 	ldw	r2,36(r16)
1000a2c4:	81400717 	ldw	r5,28(r16)
1000a2c8:	103ee83a 	callr	r2
1000a2cc:	00805a0e 	bge	zero,r2,1000a438 <__sfvwrite_r+0x204>
1000a2d0:	a0c00217 	ldw	r3,8(r20)
1000a2d4:	98a7883a 	add	r19,r19,r2
1000a2d8:	90a5c83a 	sub	r18,r18,r2
1000a2dc:	1885c83a 	sub	r2,r3,r2
1000a2e0:	a0800215 	stw	r2,8(r20)
1000a2e4:	103fef1e 	bne	r2,zero,1000a2a4 <__alt_data_end+0xf800a2a4>
1000a2e8:	0005883a 	mov	r2,zero
1000a2ec:	dfc00b17 	ldw	ra,44(sp)
1000a2f0:	df000a17 	ldw	fp,40(sp)
1000a2f4:	ddc00917 	ldw	r23,36(sp)
1000a2f8:	dd800817 	ldw	r22,32(sp)
1000a2fc:	dd400717 	ldw	r21,28(sp)
1000a300:	dd000617 	ldw	r20,24(sp)
1000a304:	dcc00517 	ldw	r19,20(sp)
1000a308:	dc800417 	ldw	r18,16(sp)
1000a30c:	dc400317 	ldw	r17,12(sp)
1000a310:	dc000217 	ldw	r16,8(sp)
1000a314:	dec00c04 	addi	sp,sp,48
1000a318:	f800283a 	ret
1000a31c:	800b883a 	mov	r5,r16
1000a320:	a809883a 	mov	r4,r21
1000a324:	0007da40 	call	10007da4 <__swsetup_r>
1000a328:	1000ee1e 	bne	r2,zero,1000a6e4 <__sfvwrite_r+0x4b0>
1000a32c:	80c0030b 	ldhu	r3,12(r16)
1000a330:	a4400017 	ldw	r17,0(r20)
1000a334:	1880008c 	andi	r2,r3,2
1000a338:	103fd61e 	bne	r2,zero,1000a294 <__alt_data_end+0xf800a294>
1000a33c:	1880004c 	andi	r2,r3,1
1000a340:	1000421e 	bne	r2,zero,1000a44c <__sfvwrite_r+0x218>
1000a344:	0039883a 	mov	fp,zero
1000a348:	0025883a 	mov	r18,zero
1000a34c:	90001a26 	beq	r18,zero,1000a3b8 <__sfvwrite_r+0x184>
1000a350:	1880800c 	andi	r2,r3,512
1000a354:	84c00217 	ldw	r19,8(r16)
1000a358:	10002126 	beq	r2,zero,1000a3e0 <__sfvwrite_r+0x1ac>
1000a35c:	982f883a 	mov	r23,r19
1000a360:	94c09636 	bltu	r18,r19,1000a5bc <__sfvwrite_r+0x388>
1000a364:	1881200c 	andi	r2,r3,1152
1000a368:	1000a11e 	bne	r2,zero,1000a5f0 <__sfvwrite_r+0x3bc>
1000a36c:	81000017 	ldw	r4,0(r16)
1000a370:	b80d883a 	mov	r6,r23
1000a374:	e00b883a 	mov	r5,fp
1000a378:	000ad480 	call	1000ad48 <memmove>
1000a37c:	80c00217 	ldw	r3,8(r16)
1000a380:	81000017 	ldw	r4,0(r16)
1000a384:	9005883a 	mov	r2,r18
1000a388:	1ce7c83a 	sub	r19,r3,r19
1000a38c:	25cf883a 	add	r7,r4,r23
1000a390:	84c00215 	stw	r19,8(r16)
1000a394:	81c00015 	stw	r7,0(r16)
1000a398:	a0c00217 	ldw	r3,8(r20)
1000a39c:	e0b9883a 	add	fp,fp,r2
1000a3a0:	90a5c83a 	sub	r18,r18,r2
1000a3a4:	18a7c83a 	sub	r19,r3,r2
1000a3a8:	a4c00215 	stw	r19,8(r20)
1000a3ac:	983fce26 	beq	r19,zero,1000a2e8 <__alt_data_end+0xf800a2e8>
1000a3b0:	80c0030b 	ldhu	r3,12(r16)
1000a3b4:	903fe61e 	bne	r18,zero,1000a350 <__alt_data_end+0xf800a350>
1000a3b8:	8f000017 	ldw	fp,0(r17)
1000a3bc:	8c800117 	ldw	r18,4(r17)
1000a3c0:	8c400204 	addi	r17,r17,8
1000a3c4:	003fe106 	br	1000a34c <__alt_data_end+0xf800a34c>
1000a3c8:	8cc00017 	ldw	r19,0(r17)
1000a3cc:	8c800117 	ldw	r18,4(r17)
1000a3d0:	8c400204 	addi	r17,r17,8
1000a3d4:	003fb306 	br	1000a2a4 <__alt_data_end+0xf800a2a4>
1000a3d8:	0005883a 	mov	r2,zero
1000a3dc:	f800283a 	ret
1000a3e0:	81000017 	ldw	r4,0(r16)
1000a3e4:	80800417 	ldw	r2,16(r16)
1000a3e8:	11005a36 	bltu	r2,r4,1000a554 <__sfvwrite_r+0x320>
1000a3ec:	85c00517 	ldw	r23,20(r16)
1000a3f0:	95c05836 	bltu	r18,r23,1000a554 <__sfvwrite_r+0x320>
1000a3f4:	00a00034 	movhi	r2,32768
1000a3f8:	10bfffc4 	addi	r2,r2,-1
1000a3fc:	9009883a 	mov	r4,r18
1000a400:	1480012e 	bgeu	r2,r18,1000a408 <__sfvwrite_r+0x1d4>
1000a404:	1009883a 	mov	r4,r2
1000a408:	b80b883a 	mov	r5,r23
1000a40c:	000f2740 	call	1000f274 <__divsi3>
1000a410:	b80b883a 	mov	r5,r23
1000a414:	1009883a 	mov	r4,r2
1000a418:	00045280 	call	10004528 <__mulsi3>
1000a41c:	81400717 	ldw	r5,28(r16)
1000a420:	80c00917 	ldw	r3,36(r16)
1000a424:	100f883a 	mov	r7,r2
1000a428:	e00d883a 	mov	r6,fp
1000a42c:	a809883a 	mov	r4,r21
1000a430:	183ee83a 	callr	r3
1000a434:	00bfd816 	blt	zero,r2,1000a398 <__alt_data_end+0xf800a398>
1000a438:	8080030b 	ldhu	r2,12(r16)
1000a43c:	10801014 	ori	r2,r2,64
1000a440:	8080030d 	sth	r2,12(r16)
1000a444:	00bfffc4 	movi	r2,-1
1000a448:	003fa806 	br	1000a2ec <__alt_data_end+0xf800a2ec>
1000a44c:	0027883a 	mov	r19,zero
1000a450:	0011883a 	mov	r8,zero
1000a454:	0039883a 	mov	fp,zero
1000a458:	0025883a 	mov	r18,zero
1000a45c:	90001f26 	beq	r18,zero,1000a4dc <__sfvwrite_r+0x2a8>
1000a460:	40005a26 	beq	r8,zero,1000a5cc <__sfvwrite_r+0x398>
1000a464:	982d883a 	mov	r22,r19
1000a468:	94c0012e 	bgeu	r18,r19,1000a470 <__sfvwrite_r+0x23c>
1000a46c:	902d883a 	mov	r22,r18
1000a470:	81000017 	ldw	r4,0(r16)
1000a474:	80800417 	ldw	r2,16(r16)
1000a478:	b02f883a 	mov	r23,r22
1000a47c:	81c00517 	ldw	r7,20(r16)
1000a480:	1100032e 	bgeu	r2,r4,1000a490 <__sfvwrite_r+0x25c>
1000a484:	80c00217 	ldw	r3,8(r16)
1000a488:	38c7883a 	add	r3,r7,r3
1000a48c:	1d801816 	blt	r3,r22,1000a4f0 <__sfvwrite_r+0x2bc>
1000a490:	b1c03e16 	blt	r22,r7,1000a58c <__sfvwrite_r+0x358>
1000a494:	80800917 	ldw	r2,36(r16)
1000a498:	81400717 	ldw	r5,28(r16)
1000a49c:	e00d883a 	mov	r6,fp
1000a4a0:	da000115 	stw	r8,4(sp)
1000a4a4:	a809883a 	mov	r4,r21
1000a4a8:	103ee83a 	callr	r2
1000a4ac:	102f883a 	mov	r23,r2
1000a4b0:	da000117 	ldw	r8,4(sp)
1000a4b4:	00bfe00e 	bge	zero,r2,1000a438 <__alt_data_end+0xf800a438>
1000a4b8:	9de7c83a 	sub	r19,r19,r23
1000a4bc:	98001f26 	beq	r19,zero,1000a53c <__sfvwrite_r+0x308>
1000a4c0:	a0800217 	ldw	r2,8(r20)
1000a4c4:	e5f9883a 	add	fp,fp,r23
1000a4c8:	95e5c83a 	sub	r18,r18,r23
1000a4cc:	15efc83a 	sub	r23,r2,r23
1000a4d0:	a5c00215 	stw	r23,8(r20)
1000a4d4:	b83f8426 	beq	r23,zero,1000a2e8 <__alt_data_end+0xf800a2e8>
1000a4d8:	903fe11e 	bne	r18,zero,1000a460 <__alt_data_end+0xf800a460>
1000a4dc:	8f000017 	ldw	fp,0(r17)
1000a4e0:	8c800117 	ldw	r18,4(r17)
1000a4e4:	0011883a 	mov	r8,zero
1000a4e8:	8c400204 	addi	r17,r17,8
1000a4ec:	003fdb06 	br	1000a45c <__alt_data_end+0xf800a45c>
1000a4f0:	180d883a 	mov	r6,r3
1000a4f4:	e00b883a 	mov	r5,fp
1000a4f8:	da000115 	stw	r8,4(sp)
1000a4fc:	d8c00015 	stw	r3,0(sp)
1000a500:	000ad480 	call	1000ad48 <memmove>
1000a504:	d8c00017 	ldw	r3,0(sp)
1000a508:	80800017 	ldw	r2,0(r16)
1000a50c:	800b883a 	mov	r5,r16
1000a510:	a809883a 	mov	r4,r21
1000a514:	10c5883a 	add	r2,r2,r3
1000a518:	80800015 	stw	r2,0(r16)
1000a51c:	d8c00015 	stw	r3,0(sp)
1000a520:	00099c40 	call	100099c4 <_fflush_r>
1000a524:	d8c00017 	ldw	r3,0(sp)
1000a528:	da000117 	ldw	r8,4(sp)
1000a52c:	103fc21e 	bne	r2,zero,1000a438 <__alt_data_end+0xf800a438>
1000a530:	182f883a 	mov	r23,r3
1000a534:	9de7c83a 	sub	r19,r19,r23
1000a538:	983fe11e 	bne	r19,zero,1000a4c0 <__alt_data_end+0xf800a4c0>
1000a53c:	800b883a 	mov	r5,r16
1000a540:	a809883a 	mov	r4,r21
1000a544:	00099c40 	call	100099c4 <_fflush_r>
1000a548:	103fbb1e 	bne	r2,zero,1000a438 <__alt_data_end+0xf800a438>
1000a54c:	0011883a 	mov	r8,zero
1000a550:	003fdb06 	br	1000a4c0 <__alt_data_end+0xf800a4c0>
1000a554:	94c0012e 	bgeu	r18,r19,1000a55c <__sfvwrite_r+0x328>
1000a558:	9027883a 	mov	r19,r18
1000a55c:	980d883a 	mov	r6,r19
1000a560:	e00b883a 	mov	r5,fp
1000a564:	000ad480 	call	1000ad48 <memmove>
1000a568:	80800217 	ldw	r2,8(r16)
1000a56c:	80c00017 	ldw	r3,0(r16)
1000a570:	14c5c83a 	sub	r2,r2,r19
1000a574:	1cc7883a 	add	r3,r3,r19
1000a578:	80800215 	stw	r2,8(r16)
1000a57c:	80c00015 	stw	r3,0(r16)
1000a580:	10004326 	beq	r2,zero,1000a690 <__sfvwrite_r+0x45c>
1000a584:	9805883a 	mov	r2,r19
1000a588:	003f8306 	br	1000a398 <__alt_data_end+0xf800a398>
1000a58c:	b00d883a 	mov	r6,r22
1000a590:	e00b883a 	mov	r5,fp
1000a594:	da000115 	stw	r8,4(sp)
1000a598:	000ad480 	call	1000ad48 <memmove>
1000a59c:	80800217 	ldw	r2,8(r16)
1000a5a0:	80c00017 	ldw	r3,0(r16)
1000a5a4:	da000117 	ldw	r8,4(sp)
1000a5a8:	1585c83a 	sub	r2,r2,r22
1000a5ac:	1dad883a 	add	r22,r3,r22
1000a5b0:	80800215 	stw	r2,8(r16)
1000a5b4:	85800015 	stw	r22,0(r16)
1000a5b8:	003fbf06 	br	1000a4b8 <__alt_data_end+0xf800a4b8>
1000a5bc:	81000017 	ldw	r4,0(r16)
1000a5c0:	9027883a 	mov	r19,r18
1000a5c4:	902f883a 	mov	r23,r18
1000a5c8:	003f6906 	br	1000a370 <__alt_data_end+0xf800a370>
1000a5cc:	900d883a 	mov	r6,r18
1000a5d0:	01400284 	movi	r5,10
1000a5d4:	e009883a 	mov	r4,fp
1000a5d8:	000ab1c0 	call	1000ab1c <memchr>
1000a5dc:	10003e26 	beq	r2,zero,1000a6d8 <__sfvwrite_r+0x4a4>
1000a5e0:	10800044 	addi	r2,r2,1
1000a5e4:	1727c83a 	sub	r19,r2,fp
1000a5e8:	02000044 	movi	r8,1
1000a5ec:	003f9d06 	br	1000a464 <__alt_data_end+0xf800a464>
1000a5f0:	80800517 	ldw	r2,20(r16)
1000a5f4:	81400417 	ldw	r5,16(r16)
1000a5f8:	81c00017 	ldw	r7,0(r16)
1000a5fc:	10a7883a 	add	r19,r2,r2
1000a600:	9885883a 	add	r2,r19,r2
1000a604:	1026d7fa 	srli	r19,r2,31
1000a608:	396dc83a 	sub	r22,r7,r5
1000a60c:	b1000044 	addi	r4,r22,1
1000a610:	9885883a 	add	r2,r19,r2
1000a614:	1027d07a 	srai	r19,r2,1
1000a618:	2485883a 	add	r2,r4,r18
1000a61c:	980d883a 	mov	r6,r19
1000a620:	9880022e 	bgeu	r19,r2,1000a62c <__sfvwrite_r+0x3f8>
1000a624:	1027883a 	mov	r19,r2
1000a628:	100d883a 	mov	r6,r2
1000a62c:	18c1000c 	andi	r3,r3,1024
1000a630:	18001c26 	beq	r3,zero,1000a6a4 <__sfvwrite_r+0x470>
1000a634:	300b883a 	mov	r5,r6
1000a638:	a809883a 	mov	r4,r21
1000a63c:	0004ab00 	call	10004ab0 <_malloc_r>
1000a640:	102f883a 	mov	r23,r2
1000a644:	10002926 	beq	r2,zero,1000a6ec <__sfvwrite_r+0x4b8>
1000a648:	81400417 	ldw	r5,16(r16)
1000a64c:	b00d883a 	mov	r6,r22
1000a650:	1009883a 	mov	r4,r2
1000a654:	000ac000 	call	1000ac00 <memcpy>
1000a658:	8080030b 	ldhu	r2,12(r16)
1000a65c:	00fedfc4 	movi	r3,-1153
1000a660:	10c4703a 	and	r2,r2,r3
1000a664:	10802014 	ori	r2,r2,128
1000a668:	8080030d 	sth	r2,12(r16)
1000a66c:	bd89883a 	add	r4,r23,r22
1000a670:	9d8fc83a 	sub	r7,r19,r22
1000a674:	85c00415 	stw	r23,16(r16)
1000a678:	84c00515 	stw	r19,20(r16)
1000a67c:	81000015 	stw	r4,0(r16)
1000a680:	9027883a 	mov	r19,r18
1000a684:	81c00215 	stw	r7,8(r16)
1000a688:	902f883a 	mov	r23,r18
1000a68c:	003f3806 	br	1000a370 <__alt_data_end+0xf800a370>
1000a690:	800b883a 	mov	r5,r16
1000a694:	a809883a 	mov	r4,r21
1000a698:	00099c40 	call	100099c4 <_fflush_r>
1000a69c:	103fb926 	beq	r2,zero,1000a584 <__alt_data_end+0xf800a584>
1000a6a0:	003f6506 	br	1000a438 <__alt_data_end+0xf800a438>
1000a6a4:	a809883a 	mov	r4,r21
1000a6a8:	000bf5c0 	call	1000bf5c <_realloc_r>
1000a6ac:	102f883a 	mov	r23,r2
1000a6b0:	103fee1e 	bne	r2,zero,1000a66c <__alt_data_end+0xf800a66c>
1000a6b4:	81400417 	ldw	r5,16(r16)
1000a6b8:	a809883a 	mov	r4,r21
1000a6bc:	0009f240 	call	10009f24 <_free_r>
1000a6c0:	8080030b 	ldhu	r2,12(r16)
1000a6c4:	00ffdfc4 	movi	r3,-129
1000a6c8:	1884703a 	and	r2,r3,r2
1000a6cc:	00c00304 	movi	r3,12
1000a6d0:	a8c00015 	stw	r3,0(r21)
1000a6d4:	003f5906 	br	1000a43c <__alt_data_end+0xf800a43c>
1000a6d8:	94c00044 	addi	r19,r18,1
1000a6dc:	02000044 	movi	r8,1
1000a6e0:	003f6006 	br	1000a464 <__alt_data_end+0xf800a464>
1000a6e4:	00bfffc4 	movi	r2,-1
1000a6e8:	003f0006 	br	1000a2ec <__alt_data_end+0xf800a2ec>
1000a6ec:	00800304 	movi	r2,12
1000a6f0:	a8800015 	stw	r2,0(r21)
1000a6f4:	8080030b 	ldhu	r2,12(r16)
1000a6f8:	003f5006 	br	1000a43c <__alt_data_end+0xf800a43c>

1000a6fc <_fwalk>:
1000a6fc:	defff704 	addi	sp,sp,-36
1000a700:	dd000415 	stw	r20,16(sp)
1000a704:	dfc00815 	stw	ra,32(sp)
1000a708:	ddc00715 	stw	r23,28(sp)
1000a70c:	dd800615 	stw	r22,24(sp)
1000a710:	dd400515 	stw	r21,20(sp)
1000a714:	dcc00315 	stw	r19,12(sp)
1000a718:	dc800215 	stw	r18,8(sp)
1000a71c:	dc400115 	stw	r17,4(sp)
1000a720:	dc000015 	stw	r16,0(sp)
1000a724:	2500b804 	addi	r20,r4,736
1000a728:	a0002326 	beq	r20,zero,1000a7b8 <_fwalk+0xbc>
1000a72c:	282b883a 	mov	r21,r5
1000a730:	002f883a 	mov	r23,zero
1000a734:	05800044 	movi	r22,1
1000a738:	04ffffc4 	movi	r19,-1
1000a73c:	a4400117 	ldw	r17,4(r20)
1000a740:	a4800217 	ldw	r18,8(r20)
1000a744:	8c7fffc4 	addi	r17,r17,-1
1000a748:	88000d16 	blt	r17,zero,1000a780 <_fwalk+0x84>
1000a74c:	94000304 	addi	r16,r18,12
1000a750:	94800384 	addi	r18,r18,14
1000a754:	8080000b 	ldhu	r2,0(r16)
1000a758:	8c7fffc4 	addi	r17,r17,-1
1000a75c:	813ffd04 	addi	r4,r16,-12
1000a760:	b080042e 	bgeu	r22,r2,1000a774 <_fwalk+0x78>
1000a764:	9080000f 	ldh	r2,0(r18)
1000a768:	14c00226 	beq	r2,r19,1000a774 <_fwalk+0x78>
1000a76c:	a83ee83a 	callr	r21
1000a770:	b8aeb03a 	or	r23,r23,r2
1000a774:	84001a04 	addi	r16,r16,104
1000a778:	94801a04 	addi	r18,r18,104
1000a77c:	8cfff51e 	bne	r17,r19,1000a754 <__alt_data_end+0xf800a754>
1000a780:	a5000017 	ldw	r20,0(r20)
1000a784:	a03fed1e 	bne	r20,zero,1000a73c <__alt_data_end+0xf800a73c>
1000a788:	b805883a 	mov	r2,r23
1000a78c:	dfc00817 	ldw	ra,32(sp)
1000a790:	ddc00717 	ldw	r23,28(sp)
1000a794:	dd800617 	ldw	r22,24(sp)
1000a798:	dd400517 	ldw	r21,20(sp)
1000a79c:	dd000417 	ldw	r20,16(sp)
1000a7a0:	dcc00317 	ldw	r19,12(sp)
1000a7a4:	dc800217 	ldw	r18,8(sp)
1000a7a8:	dc400117 	ldw	r17,4(sp)
1000a7ac:	dc000017 	ldw	r16,0(sp)
1000a7b0:	dec00904 	addi	sp,sp,36
1000a7b4:	f800283a 	ret
1000a7b8:	002f883a 	mov	r23,zero
1000a7bc:	003ff206 	br	1000a788 <__alt_data_end+0xf800a788>

1000a7c0 <_fwalk_reent>:
1000a7c0:	defff704 	addi	sp,sp,-36
1000a7c4:	dd000415 	stw	r20,16(sp)
1000a7c8:	dfc00815 	stw	ra,32(sp)
1000a7cc:	ddc00715 	stw	r23,28(sp)
1000a7d0:	dd800615 	stw	r22,24(sp)
1000a7d4:	dd400515 	stw	r21,20(sp)
1000a7d8:	dcc00315 	stw	r19,12(sp)
1000a7dc:	dc800215 	stw	r18,8(sp)
1000a7e0:	dc400115 	stw	r17,4(sp)
1000a7e4:	dc000015 	stw	r16,0(sp)
1000a7e8:	2500b804 	addi	r20,r4,736
1000a7ec:	a0002326 	beq	r20,zero,1000a87c <_fwalk_reent+0xbc>
1000a7f0:	282b883a 	mov	r21,r5
1000a7f4:	2027883a 	mov	r19,r4
1000a7f8:	002f883a 	mov	r23,zero
1000a7fc:	05800044 	movi	r22,1
1000a800:	04bfffc4 	movi	r18,-1
1000a804:	a4400117 	ldw	r17,4(r20)
1000a808:	a4000217 	ldw	r16,8(r20)
1000a80c:	8c7fffc4 	addi	r17,r17,-1
1000a810:	88000c16 	blt	r17,zero,1000a844 <_fwalk_reent+0x84>
1000a814:	84000304 	addi	r16,r16,12
1000a818:	8080000b 	ldhu	r2,0(r16)
1000a81c:	8c7fffc4 	addi	r17,r17,-1
1000a820:	817ffd04 	addi	r5,r16,-12
1000a824:	b080052e 	bgeu	r22,r2,1000a83c <_fwalk_reent+0x7c>
1000a828:	8080008f 	ldh	r2,2(r16)
1000a82c:	9809883a 	mov	r4,r19
1000a830:	14800226 	beq	r2,r18,1000a83c <_fwalk_reent+0x7c>
1000a834:	a83ee83a 	callr	r21
1000a838:	b8aeb03a 	or	r23,r23,r2
1000a83c:	84001a04 	addi	r16,r16,104
1000a840:	8cbff51e 	bne	r17,r18,1000a818 <__alt_data_end+0xf800a818>
1000a844:	a5000017 	ldw	r20,0(r20)
1000a848:	a03fee1e 	bne	r20,zero,1000a804 <__alt_data_end+0xf800a804>
1000a84c:	b805883a 	mov	r2,r23
1000a850:	dfc00817 	ldw	ra,32(sp)
1000a854:	ddc00717 	ldw	r23,28(sp)
1000a858:	dd800617 	ldw	r22,24(sp)
1000a85c:	dd400517 	ldw	r21,20(sp)
1000a860:	dd000417 	ldw	r20,16(sp)
1000a864:	dcc00317 	ldw	r19,12(sp)
1000a868:	dc800217 	ldw	r18,8(sp)
1000a86c:	dc400117 	ldw	r17,4(sp)
1000a870:	dc000017 	ldw	r16,0(sp)
1000a874:	dec00904 	addi	sp,sp,36
1000a878:	f800283a 	ret
1000a87c:	002f883a 	mov	r23,zero
1000a880:	003ff206 	br	1000a84c <__alt_data_end+0xf800a84c>

1000a884 <_setlocale_r>:
1000a884:	30001b26 	beq	r6,zero,1000a8f4 <_setlocale_r+0x70>
1000a888:	01440074 	movhi	r5,4097
1000a88c:	defffe04 	addi	sp,sp,-8
1000a890:	29544c04 	addi	r5,r5,20784
1000a894:	3009883a 	mov	r4,r6
1000a898:	dc000015 	stw	r16,0(sp)
1000a89c:	dfc00115 	stw	ra,4(sp)
1000a8a0:	3021883a 	mov	r16,r6
1000a8a4:	000587c0 	call	1000587c <strcmp>
1000a8a8:	1000061e 	bne	r2,zero,1000a8c4 <_setlocale_r+0x40>
1000a8ac:	00840074 	movhi	r2,4097
1000a8b0:	10944b04 	addi	r2,r2,20780
1000a8b4:	dfc00117 	ldw	ra,4(sp)
1000a8b8:	dc000017 	ldw	r16,0(sp)
1000a8bc:	dec00204 	addi	sp,sp,8
1000a8c0:	f800283a 	ret
1000a8c4:	01440074 	movhi	r5,4097
1000a8c8:	29544b04 	addi	r5,r5,20780
1000a8cc:	8009883a 	mov	r4,r16
1000a8d0:	000587c0 	call	1000587c <strcmp>
1000a8d4:	103ff526 	beq	r2,zero,1000a8ac <__alt_data_end+0xf800a8ac>
1000a8d8:	01440074 	movhi	r5,4097
1000a8dc:	29543604 	addi	r5,r5,20696
1000a8e0:	8009883a 	mov	r4,r16
1000a8e4:	000587c0 	call	1000587c <strcmp>
1000a8e8:	103ff026 	beq	r2,zero,1000a8ac <__alt_data_end+0xf800a8ac>
1000a8ec:	0005883a 	mov	r2,zero
1000a8f0:	003ff006 	br	1000a8b4 <__alt_data_end+0xf800a8b4>
1000a8f4:	00840074 	movhi	r2,4097
1000a8f8:	10944b04 	addi	r2,r2,20780
1000a8fc:	f800283a 	ret

1000a900 <__locale_charset>:
1000a900:	00840074 	movhi	r2,4097
1000a904:	10970004 	addi	r2,r2,23552
1000a908:	f800283a 	ret

1000a90c <__locale_mb_cur_max>:
1000a90c:	00840074 	movhi	r2,4097
1000a910:	109ba804 	addi	r2,r2,28320
1000a914:	10800017 	ldw	r2,0(r2)
1000a918:	f800283a 	ret

1000a91c <__locale_msgcharset>:
1000a91c:	00840074 	movhi	r2,4097
1000a920:	1096f804 	addi	r2,r2,23520
1000a924:	f800283a 	ret

1000a928 <__locale_cjk_lang>:
1000a928:	0005883a 	mov	r2,zero
1000a92c:	f800283a 	ret

1000a930 <_localeconv_r>:
1000a930:	00840074 	movhi	r2,4097
1000a934:	10970804 	addi	r2,r2,23584
1000a938:	f800283a 	ret

1000a93c <setlocale>:
1000a93c:	00840074 	movhi	r2,4097
1000a940:	109ba704 	addi	r2,r2,28316
1000a944:	280d883a 	mov	r6,r5
1000a948:	200b883a 	mov	r5,r4
1000a94c:	11000017 	ldw	r4,0(r2)
1000a950:	000a8841 	jmpi	1000a884 <_setlocale_r>

1000a954 <localeconv>:
1000a954:	00840074 	movhi	r2,4097
1000a958:	10970804 	addi	r2,r2,23584
1000a95c:	f800283a 	ret

1000a960 <__smakebuf_r>:
1000a960:	2880030b 	ldhu	r2,12(r5)
1000a964:	10c0008c 	andi	r3,r2,2
1000a968:	1800411e 	bne	r3,zero,1000aa70 <__smakebuf_r+0x110>
1000a96c:	deffec04 	addi	sp,sp,-80
1000a970:	dc000f15 	stw	r16,60(sp)
1000a974:	2821883a 	mov	r16,r5
1000a978:	2940038f 	ldh	r5,14(r5)
1000a97c:	dc401015 	stw	r17,64(sp)
1000a980:	dfc01315 	stw	ra,76(sp)
1000a984:	dcc01215 	stw	r19,72(sp)
1000a988:	dc801115 	stw	r18,68(sp)
1000a98c:	2023883a 	mov	r17,r4
1000a990:	28001c16 	blt	r5,zero,1000aa04 <__smakebuf_r+0xa4>
1000a994:	d80d883a 	mov	r6,sp
1000a998:	000e2040 	call	1000e204 <_fstat_r>
1000a99c:	10001816 	blt	r2,zero,1000aa00 <__smakebuf_r+0xa0>
1000a9a0:	d8800117 	ldw	r2,4(sp)
1000a9a4:	00e00014 	movui	r3,32768
1000a9a8:	10bc000c 	andi	r2,r2,61440
1000a9ac:	14c80020 	cmpeqi	r19,r2,8192
1000a9b0:	10c03726 	beq	r2,r3,1000aa90 <__smakebuf_r+0x130>
1000a9b4:	80c0030b 	ldhu	r3,12(r16)
1000a9b8:	18c20014 	ori	r3,r3,2048
1000a9bc:	80c0030d 	sth	r3,12(r16)
1000a9c0:	00c80004 	movi	r3,8192
1000a9c4:	10c0521e 	bne	r2,r3,1000ab10 <__smakebuf_r+0x1b0>
1000a9c8:	8140038f 	ldh	r5,14(r16)
1000a9cc:	8809883a 	mov	r4,r17
1000a9d0:	000e2600 	call	1000e260 <_isatty_r>
1000a9d4:	10004c26 	beq	r2,zero,1000ab08 <__smakebuf_r+0x1a8>
1000a9d8:	8080030b 	ldhu	r2,12(r16)
1000a9dc:	80c010c4 	addi	r3,r16,67
1000a9e0:	80c00015 	stw	r3,0(r16)
1000a9e4:	10800054 	ori	r2,r2,1
1000a9e8:	8080030d 	sth	r2,12(r16)
1000a9ec:	00800044 	movi	r2,1
1000a9f0:	80c00415 	stw	r3,16(r16)
1000a9f4:	80800515 	stw	r2,20(r16)
1000a9f8:	04810004 	movi	r18,1024
1000a9fc:	00000706 	br	1000aa1c <__smakebuf_r+0xbc>
1000aa00:	8080030b 	ldhu	r2,12(r16)
1000aa04:	10c0200c 	andi	r3,r2,128
1000aa08:	18001f1e 	bne	r3,zero,1000aa88 <__smakebuf_r+0x128>
1000aa0c:	04810004 	movi	r18,1024
1000aa10:	10820014 	ori	r2,r2,2048
1000aa14:	8080030d 	sth	r2,12(r16)
1000aa18:	0027883a 	mov	r19,zero
1000aa1c:	900b883a 	mov	r5,r18
1000aa20:	8809883a 	mov	r4,r17
1000aa24:	0004ab00 	call	10004ab0 <_malloc_r>
1000aa28:	10002c26 	beq	r2,zero,1000aadc <__smakebuf_r+0x17c>
1000aa2c:	80c0030b 	ldhu	r3,12(r16)
1000aa30:	01040074 	movhi	r4,4097
1000aa34:	21269604 	addi	r4,r4,-26024
1000aa38:	89000f15 	stw	r4,60(r17)
1000aa3c:	18c02014 	ori	r3,r3,128
1000aa40:	80c0030d 	sth	r3,12(r16)
1000aa44:	80800015 	stw	r2,0(r16)
1000aa48:	80800415 	stw	r2,16(r16)
1000aa4c:	84800515 	stw	r18,20(r16)
1000aa50:	98001a1e 	bne	r19,zero,1000aabc <__smakebuf_r+0x15c>
1000aa54:	dfc01317 	ldw	ra,76(sp)
1000aa58:	dcc01217 	ldw	r19,72(sp)
1000aa5c:	dc801117 	ldw	r18,68(sp)
1000aa60:	dc401017 	ldw	r17,64(sp)
1000aa64:	dc000f17 	ldw	r16,60(sp)
1000aa68:	dec01404 	addi	sp,sp,80
1000aa6c:	f800283a 	ret
1000aa70:	288010c4 	addi	r2,r5,67
1000aa74:	28800015 	stw	r2,0(r5)
1000aa78:	28800415 	stw	r2,16(r5)
1000aa7c:	00800044 	movi	r2,1
1000aa80:	28800515 	stw	r2,20(r5)
1000aa84:	f800283a 	ret
1000aa88:	04801004 	movi	r18,64
1000aa8c:	003fe006 	br	1000aa10 <__alt_data_end+0xf800aa10>
1000aa90:	81000a17 	ldw	r4,40(r16)
1000aa94:	00c40074 	movhi	r3,4097
1000aa98:	18f18304 	addi	r3,r3,-14836
1000aa9c:	20ffc51e 	bne	r4,r3,1000a9b4 <__alt_data_end+0xf800a9b4>
1000aaa0:	8080030b 	ldhu	r2,12(r16)
1000aaa4:	04810004 	movi	r18,1024
1000aaa8:	84801315 	stw	r18,76(r16)
1000aaac:	1484b03a 	or	r2,r2,r18
1000aab0:	8080030d 	sth	r2,12(r16)
1000aab4:	0027883a 	mov	r19,zero
1000aab8:	003fd806 	br	1000aa1c <__alt_data_end+0xf800aa1c>
1000aabc:	8140038f 	ldh	r5,14(r16)
1000aac0:	8809883a 	mov	r4,r17
1000aac4:	000e2600 	call	1000e260 <_isatty_r>
1000aac8:	103fe226 	beq	r2,zero,1000aa54 <__alt_data_end+0xf800aa54>
1000aacc:	8080030b 	ldhu	r2,12(r16)
1000aad0:	10800054 	ori	r2,r2,1
1000aad4:	8080030d 	sth	r2,12(r16)
1000aad8:	003fde06 	br	1000aa54 <__alt_data_end+0xf800aa54>
1000aadc:	8080030b 	ldhu	r2,12(r16)
1000aae0:	10c0800c 	andi	r3,r2,512
1000aae4:	183fdb1e 	bne	r3,zero,1000aa54 <__alt_data_end+0xf800aa54>
1000aae8:	10800094 	ori	r2,r2,2
1000aaec:	80c010c4 	addi	r3,r16,67
1000aaf0:	8080030d 	sth	r2,12(r16)
1000aaf4:	00800044 	movi	r2,1
1000aaf8:	80c00015 	stw	r3,0(r16)
1000aafc:	80c00415 	stw	r3,16(r16)
1000ab00:	80800515 	stw	r2,20(r16)
1000ab04:	003fd306 	br	1000aa54 <__alt_data_end+0xf800aa54>
1000ab08:	04810004 	movi	r18,1024
1000ab0c:	003fc306 	br	1000aa1c <__alt_data_end+0xf800aa1c>
1000ab10:	0027883a 	mov	r19,zero
1000ab14:	04810004 	movi	r18,1024
1000ab18:	003fc006 	br	1000aa1c <__alt_data_end+0xf800aa1c>

1000ab1c <memchr>:
1000ab1c:	208000cc 	andi	r2,r4,3
1000ab20:	280f883a 	mov	r7,r5
1000ab24:	10003426 	beq	r2,zero,1000abf8 <memchr+0xdc>
1000ab28:	30bfffc4 	addi	r2,r6,-1
1000ab2c:	30001a26 	beq	r6,zero,1000ab98 <memchr+0x7c>
1000ab30:	20c00003 	ldbu	r3,0(r4)
1000ab34:	29803fcc 	andi	r6,r5,255
1000ab38:	30c0051e 	bne	r6,r3,1000ab50 <memchr+0x34>
1000ab3c:	00001806 	br	1000aba0 <memchr+0x84>
1000ab40:	10001526 	beq	r2,zero,1000ab98 <memchr+0x7c>
1000ab44:	20c00003 	ldbu	r3,0(r4)
1000ab48:	10bfffc4 	addi	r2,r2,-1
1000ab4c:	30c01426 	beq	r6,r3,1000aba0 <memchr+0x84>
1000ab50:	21000044 	addi	r4,r4,1
1000ab54:	20c000cc 	andi	r3,r4,3
1000ab58:	183ff91e 	bne	r3,zero,1000ab40 <__alt_data_end+0xf800ab40>
1000ab5c:	020000c4 	movi	r8,3
1000ab60:	40801136 	bltu	r8,r2,1000aba8 <memchr+0x8c>
1000ab64:	10000c26 	beq	r2,zero,1000ab98 <memchr+0x7c>
1000ab68:	20c00003 	ldbu	r3,0(r4)
1000ab6c:	29403fcc 	andi	r5,r5,255
1000ab70:	28c00b26 	beq	r5,r3,1000aba0 <memchr+0x84>
1000ab74:	20c00044 	addi	r3,r4,1
1000ab78:	39803fcc 	andi	r6,r7,255
1000ab7c:	2089883a 	add	r4,r4,r2
1000ab80:	00000306 	br	1000ab90 <memchr+0x74>
1000ab84:	18c00044 	addi	r3,r3,1
1000ab88:	197fffc3 	ldbu	r5,-1(r3)
1000ab8c:	31400526 	beq	r6,r5,1000aba4 <memchr+0x88>
1000ab90:	1805883a 	mov	r2,r3
1000ab94:	20fffb1e 	bne	r4,r3,1000ab84 <__alt_data_end+0xf800ab84>
1000ab98:	0005883a 	mov	r2,zero
1000ab9c:	f800283a 	ret
1000aba0:	2005883a 	mov	r2,r4
1000aba4:	f800283a 	ret
1000aba8:	28c03fcc 	andi	r3,r5,255
1000abac:	1812923a 	slli	r9,r3,8
1000abb0:	02ffbff4 	movhi	r11,65279
1000abb4:	02a02074 	movhi	r10,32897
1000abb8:	48d2b03a 	or	r9,r9,r3
1000abbc:	4806943a 	slli	r3,r9,16
1000abc0:	5affbfc4 	addi	r11,r11,-257
1000abc4:	52a02004 	addi	r10,r10,-32640
1000abc8:	48d2b03a 	or	r9,r9,r3
1000abcc:	20c00017 	ldw	r3,0(r4)
1000abd0:	48c6f03a 	xor	r3,r9,r3
1000abd4:	1acd883a 	add	r6,r3,r11
1000abd8:	00c6303a 	nor	r3,zero,r3
1000abdc:	30c6703a 	and	r3,r6,r3
1000abe0:	1a86703a 	and	r3,r3,r10
1000abe4:	183fe01e 	bne	r3,zero,1000ab68 <__alt_data_end+0xf800ab68>
1000abe8:	10bfff04 	addi	r2,r2,-4
1000abec:	21000104 	addi	r4,r4,4
1000abf0:	40bff636 	bltu	r8,r2,1000abcc <__alt_data_end+0xf800abcc>
1000abf4:	003fdb06 	br	1000ab64 <__alt_data_end+0xf800ab64>
1000abf8:	3005883a 	mov	r2,r6
1000abfc:	003fd706 	br	1000ab5c <__alt_data_end+0xf800ab5c>

1000ac00 <memcpy>:
1000ac00:	defffd04 	addi	sp,sp,-12
1000ac04:	dfc00215 	stw	ra,8(sp)
1000ac08:	dc400115 	stw	r17,4(sp)
1000ac0c:	dc000015 	stw	r16,0(sp)
1000ac10:	00c003c4 	movi	r3,15
1000ac14:	2005883a 	mov	r2,r4
1000ac18:	1980452e 	bgeu	r3,r6,1000ad30 <memcpy+0x130>
1000ac1c:	2906b03a 	or	r3,r5,r4
1000ac20:	18c000cc 	andi	r3,r3,3
1000ac24:	1800441e 	bne	r3,zero,1000ad38 <memcpy+0x138>
1000ac28:	347ffc04 	addi	r17,r6,-16
1000ac2c:	8822d13a 	srli	r17,r17,4
1000ac30:	28c00104 	addi	r3,r5,4
1000ac34:	23400104 	addi	r13,r4,4
1000ac38:	8820913a 	slli	r16,r17,4
1000ac3c:	2b000204 	addi	r12,r5,8
1000ac40:	22c00204 	addi	r11,r4,8
1000ac44:	84000504 	addi	r16,r16,20
1000ac48:	2a800304 	addi	r10,r5,12
1000ac4c:	22400304 	addi	r9,r4,12
1000ac50:	2c21883a 	add	r16,r5,r16
1000ac54:	2811883a 	mov	r8,r5
1000ac58:	200f883a 	mov	r7,r4
1000ac5c:	41000017 	ldw	r4,0(r8)
1000ac60:	1fc00017 	ldw	ra,0(r3)
1000ac64:	63c00017 	ldw	r15,0(r12)
1000ac68:	39000015 	stw	r4,0(r7)
1000ac6c:	53800017 	ldw	r14,0(r10)
1000ac70:	6fc00015 	stw	ra,0(r13)
1000ac74:	5bc00015 	stw	r15,0(r11)
1000ac78:	4b800015 	stw	r14,0(r9)
1000ac7c:	18c00404 	addi	r3,r3,16
1000ac80:	39c00404 	addi	r7,r7,16
1000ac84:	42000404 	addi	r8,r8,16
1000ac88:	6b400404 	addi	r13,r13,16
1000ac8c:	63000404 	addi	r12,r12,16
1000ac90:	5ac00404 	addi	r11,r11,16
1000ac94:	52800404 	addi	r10,r10,16
1000ac98:	4a400404 	addi	r9,r9,16
1000ac9c:	1c3fef1e 	bne	r3,r16,1000ac5c <__alt_data_end+0xf800ac5c>
1000aca0:	89c00044 	addi	r7,r17,1
1000aca4:	380e913a 	slli	r7,r7,4
1000aca8:	310003cc 	andi	r4,r6,15
1000acac:	02c000c4 	movi	r11,3
1000acb0:	11c7883a 	add	r3,r2,r7
1000acb4:	29cb883a 	add	r5,r5,r7
1000acb8:	5900212e 	bgeu	r11,r4,1000ad40 <memcpy+0x140>
1000acbc:	1813883a 	mov	r9,r3
1000acc0:	2811883a 	mov	r8,r5
1000acc4:	200f883a 	mov	r7,r4
1000acc8:	42800017 	ldw	r10,0(r8)
1000accc:	4a400104 	addi	r9,r9,4
1000acd0:	39ffff04 	addi	r7,r7,-4
1000acd4:	4abfff15 	stw	r10,-4(r9)
1000acd8:	42000104 	addi	r8,r8,4
1000acdc:	59fffa36 	bltu	r11,r7,1000acc8 <__alt_data_end+0xf800acc8>
1000ace0:	213fff04 	addi	r4,r4,-4
1000ace4:	2008d0ba 	srli	r4,r4,2
1000ace8:	318000cc 	andi	r6,r6,3
1000acec:	21000044 	addi	r4,r4,1
1000acf0:	2109883a 	add	r4,r4,r4
1000acf4:	2109883a 	add	r4,r4,r4
1000acf8:	1907883a 	add	r3,r3,r4
1000acfc:	290b883a 	add	r5,r5,r4
1000ad00:	30000626 	beq	r6,zero,1000ad1c <memcpy+0x11c>
1000ad04:	198d883a 	add	r6,r3,r6
1000ad08:	29c00003 	ldbu	r7,0(r5)
1000ad0c:	18c00044 	addi	r3,r3,1
1000ad10:	29400044 	addi	r5,r5,1
1000ad14:	19ffffc5 	stb	r7,-1(r3)
1000ad18:	19bffb1e 	bne	r3,r6,1000ad08 <__alt_data_end+0xf800ad08>
1000ad1c:	dfc00217 	ldw	ra,8(sp)
1000ad20:	dc400117 	ldw	r17,4(sp)
1000ad24:	dc000017 	ldw	r16,0(sp)
1000ad28:	dec00304 	addi	sp,sp,12
1000ad2c:	f800283a 	ret
1000ad30:	2007883a 	mov	r3,r4
1000ad34:	003ff206 	br	1000ad00 <__alt_data_end+0xf800ad00>
1000ad38:	2007883a 	mov	r3,r4
1000ad3c:	003ff106 	br	1000ad04 <__alt_data_end+0xf800ad04>
1000ad40:	200d883a 	mov	r6,r4
1000ad44:	003fee06 	br	1000ad00 <__alt_data_end+0xf800ad00>

1000ad48 <memmove>:
1000ad48:	2005883a 	mov	r2,r4
1000ad4c:	29000b2e 	bgeu	r5,r4,1000ad7c <memmove+0x34>
1000ad50:	298f883a 	add	r7,r5,r6
1000ad54:	21c0092e 	bgeu	r4,r7,1000ad7c <memmove+0x34>
1000ad58:	2187883a 	add	r3,r4,r6
1000ad5c:	198bc83a 	sub	r5,r3,r6
1000ad60:	30004826 	beq	r6,zero,1000ae84 <memmove+0x13c>
1000ad64:	39ffffc4 	addi	r7,r7,-1
1000ad68:	39000003 	ldbu	r4,0(r7)
1000ad6c:	18ffffc4 	addi	r3,r3,-1
1000ad70:	19000005 	stb	r4,0(r3)
1000ad74:	28fffb1e 	bne	r5,r3,1000ad64 <__alt_data_end+0xf800ad64>
1000ad78:	f800283a 	ret
1000ad7c:	00c003c4 	movi	r3,15
1000ad80:	1980412e 	bgeu	r3,r6,1000ae88 <memmove+0x140>
1000ad84:	2886b03a 	or	r3,r5,r2
1000ad88:	18c000cc 	andi	r3,r3,3
1000ad8c:	1800401e 	bne	r3,zero,1000ae90 <memmove+0x148>
1000ad90:	33fffc04 	addi	r15,r6,-16
1000ad94:	781ed13a 	srli	r15,r15,4
1000ad98:	28c00104 	addi	r3,r5,4
1000ad9c:	13400104 	addi	r13,r2,4
1000ada0:	781c913a 	slli	r14,r15,4
1000ada4:	2b000204 	addi	r12,r5,8
1000ada8:	12c00204 	addi	r11,r2,8
1000adac:	73800504 	addi	r14,r14,20
1000adb0:	2a800304 	addi	r10,r5,12
1000adb4:	12400304 	addi	r9,r2,12
1000adb8:	2b9d883a 	add	r14,r5,r14
1000adbc:	2811883a 	mov	r8,r5
1000adc0:	100f883a 	mov	r7,r2
1000adc4:	41000017 	ldw	r4,0(r8)
1000adc8:	39c00404 	addi	r7,r7,16
1000adcc:	18c00404 	addi	r3,r3,16
1000add0:	393ffc15 	stw	r4,-16(r7)
1000add4:	193ffc17 	ldw	r4,-16(r3)
1000add8:	6b400404 	addi	r13,r13,16
1000addc:	5ac00404 	addi	r11,r11,16
1000ade0:	693ffc15 	stw	r4,-16(r13)
1000ade4:	61000017 	ldw	r4,0(r12)
1000ade8:	4a400404 	addi	r9,r9,16
1000adec:	42000404 	addi	r8,r8,16
1000adf0:	593ffc15 	stw	r4,-16(r11)
1000adf4:	51000017 	ldw	r4,0(r10)
1000adf8:	63000404 	addi	r12,r12,16
1000adfc:	52800404 	addi	r10,r10,16
1000ae00:	493ffc15 	stw	r4,-16(r9)
1000ae04:	1bbfef1e 	bne	r3,r14,1000adc4 <__alt_data_end+0xf800adc4>
1000ae08:	79000044 	addi	r4,r15,1
1000ae0c:	2008913a 	slli	r4,r4,4
1000ae10:	328003cc 	andi	r10,r6,15
1000ae14:	02c000c4 	movi	r11,3
1000ae18:	1107883a 	add	r3,r2,r4
1000ae1c:	290b883a 	add	r5,r5,r4
1000ae20:	5a801e2e 	bgeu	r11,r10,1000ae9c <memmove+0x154>
1000ae24:	1813883a 	mov	r9,r3
1000ae28:	2811883a 	mov	r8,r5
1000ae2c:	500f883a 	mov	r7,r10
1000ae30:	41000017 	ldw	r4,0(r8)
1000ae34:	4a400104 	addi	r9,r9,4
1000ae38:	39ffff04 	addi	r7,r7,-4
1000ae3c:	493fff15 	stw	r4,-4(r9)
1000ae40:	42000104 	addi	r8,r8,4
1000ae44:	59fffa36 	bltu	r11,r7,1000ae30 <__alt_data_end+0xf800ae30>
1000ae48:	513fff04 	addi	r4,r10,-4
1000ae4c:	2008d0ba 	srli	r4,r4,2
1000ae50:	318000cc 	andi	r6,r6,3
1000ae54:	21000044 	addi	r4,r4,1
1000ae58:	2109883a 	add	r4,r4,r4
1000ae5c:	2109883a 	add	r4,r4,r4
1000ae60:	1907883a 	add	r3,r3,r4
1000ae64:	290b883a 	add	r5,r5,r4
1000ae68:	30000b26 	beq	r6,zero,1000ae98 <memmove+0x150>
1000ae6c:	198d883a 	add	r6,r3,r6
1000ae70:	29c00003 	ldbu	r7,0(r5)
1000ae74:	18c00044 	addi	r3,r3,1
1000ae78:	29400044 	addi	r5,r5,1
1000ae7c:	19ffffc5 	stb	r7,-1(r3)
1000ae80:	19bffb1e 	bne	r3,r6,1000ae70 <__alt_data_end+0xf800ae70>
1000ae84:	f800283a 	ret
1000ae88:	1007883a 	mov	r3,r2
1000ae8c:	003ff606 	br	1000ae68 <__alt_data_end+0xf800ae68>
1000ae90:	1007883a 	mov	r3,r2
1000ae94:	003ff506 	br	1000ae6c <__alt_data_end+0xf800ae6c>
1000ae98:	f800283a 	ret
1000ae9c:	500d883a 	mov	r6,r10
1000aea0:	003ff106 	br	1000ae68 <__alt_data_end+0xf800ae68>

1000aea4 <_Balloc>:
1000aea4:	20801317 	ldw	r2,76(r4)
1000aea8:	defffc04 	addi	sp,sp,-16
1000aeac:	dc400115 	stw	r17,4(sp)
1000aeb0:	dc000015 	stw	r16,0(sp)
1000aeb4:	dfc00315 	stw	ra,12(sp)
1000aeb8:	dc800215 	stw	r18,8(sp)
1000aebc:	2023883a 	mov	r17,r4
1000aec0:	2821883a 	mov	r16,r5
1000aec4:	10000f26 	beq	r2,zero,1000af04 <_Balloc+0x60>
1000aec8:	8407883a 	add	r3,r16,r16
1000aecc:	18c7883a 	add	r3,r3,r3
1000aed0:	10c7883a 	add	r3,r2,r3
1000aed4:	18800017 	ldw	r2,0(r3)
1000aed8:	10001126 	beq	r2,zero,1000af20 <_Balloc+0x7c>
1000aedc:	11000017 	ldw	r4,0(r2)
1000aee0:	19000015 	stw	r4,0(r3)
1000aee4:	10000415 	stw	zero,16(r2)
1000aee8:	10000315 	stw	zero,12(r2)
1000aeec:	dfc00317 	ldw	ra,12(sp)
1000aef0:	dc800217 	ldw	r18,8(sp)
1000aef4:	dc400117 	ldw	r17,4(sp)
1000aef8:	dc000017 	ldw	r16,0(sp)
1000aefc:	dec00404 	addi	sp,sp,16
1000af00:	f800283a 	ret
1000af04:	01800844 	movi	r6,33
1000af08:	01400104 	movi	r5,4
1000af0c:	000de1c0 	call	1000de1c <_calloc_r>
1000af10:	88801315 	stw	r2,76(r17)
1000af14:	103fec1e 	bne	r2,zero,1000aec8 <__alt_data_end+0xf800aec8>
1000af18:	0005883a 	mov	r2,zero
1000af1c:	003ff306 	br	1000aeec <__alt_data_end+0xf800aeec>
1000af20:	01400044 	movi	r5,1
1000af24:	2c24983a 	sll	r18,r5,r16
1000af28:	8809883a 	mov	r4,r17
1000af2c:	91800144 	addi	r6,r18,5
1000af30:	318d883a 	add	r6,r6,r6
1000af34:	318d883a 	add	r6,r6,r6
1000af38:	000de1c0 	call	1000de1c <_calloc_r>
1000af3c:	103ff626 	beq	r2,zero,1000af18 <__alt_data_end+0xf800af18>
1000af40:	14000115 	stw	r16,4(r2)
1000af44:	14800215 	stw	r18,8(r2)
1000af48:	003fe606 	br	1000aee4 <__alt_data_end+0xf800aee4>

1000af4c <_Bfree>:
1000af4c:	28000826 	beq	r5,zero,1000af70 <_Bfree+0x24>
1000af50:	28c00117 	ldw	r3,4(r5)
1000af54:	20801317 	ldw	r2,76(r4)
1000af58:	18c7883a 	add	r3,r3,r3
1000af5c:	18c7883a 	add	r3,r3,r3
1000af60:	10c5883a 	add	r2,r2,r3
1000af64:	10c00017 	ldw	r3,0(r2)
1000af68:	28c00015 	stw	r3,0(r5)
1000af6c:	11400015 	stw	r5,0(r2)
1000af70:	f800283a 	ret

1000af74 <__multadd>:
1000af74:	defff704 	addi	sp,sp,-36
1000af78:	dc800215 	stw	r18,8(sp)
1000af7c:	2c800417 	ldw	r18,16(r5)
1000af80:	dd800615 	stw	r22,24(sp)
1000af84:	dd400515 	stw	r21,20(sp)
1000af88:	dd000415 	stw	r20,16(sp)
1000af8c:	dcc00315 	stw	r19,12(sp)
1000af90:	dc400115 	stw	r17,4(sp)
1000af94:	dc000015 	stw	r16,0(sp)
1000af98:	dfc00815 	stw	ra,32(sp)
1000af9c:	ddc00715 	stw	r23,28(sp)
1000afa0:	2827883a 	mov	r19,r5
1000afa4:	2029883a 	mov	r20,r4
1000afa8:	3023883a 	mov	r17,r6
1000afac:	3821883a 	mov	r16,r7
1000afb0:	2d400504 	addi	r21,r5,20
1000afb4:	002d883a 	mov	r22,zero
1000afb8:	adc00017 	ldw	r23,0(r21)
1000afbc:	880b883a 	mov	r5,r17
1000afc0:	ad400104 	addi	r21,r21,4
1000afc4:	b93fffcc 	andi	r4,r23,65535
1000afc8:	00045280 	call	10004528 <__mulsi3>
1000afcc:	b808d43a 	srli	r4,r23,16
1000afd0:	880b883a 	mov	r5,r17
1000afd4:	1421883a 	add	r16,r2,r16
1000afd8:	00045280 	call	10004528 <__mulsi3>
1000afdc:	800ed43a 	srli	r7,r16,16
1000afe0:	80ffffcc 	andi	r3,r16,65535
1000afe4:	b5800044 	addi	r22,r22,1
1000afe8:	11c5883a 	add	r2,r2,r7
1000afec:	100e943a 	slli	r7,r2,16
1000aff0:	1020d43a 	srli	r16,r2,16
1000aff4:	38c7883a 	add	r3,r7,r3
1000aff8:	a8ffff15 	stw	r3,-4(r21)
1000affc:	b4bfee16 	blt	r22,r18,1000afb8 <__alt_data_end+0xf800afb8>
1000b000:	80000926 	beq	r16,zero,1000b028 <__multadd+0xb4>
1000b004:	98800217 	ldw	r2,8(r19)
1000b008:	9080130e 	bge	r18,r2,1000b058 <__multadd+0xe4>
1000b00c:	90800144 	addi	r2,r18,5
1000b010:	1085883a 	add	r2,r2,r2
1000b014:	1085883a 	add	r2,r2,r2
1000b018:	9885883a 	add	r2,r19,r2
1000b01c:	14000015 	stw	r16,0(r2)
1000b020:	94800044 	addi	r18,r18,1
1000b024:	9c800415 	stw	r18,16(r19)
1000b028:	9805883a 	mov	r2,r19
1000b02c:	dfc00817 	ldw	ra,32(sp)
1000b030:	ddc00717 	ldw	r23,28(sp)
1000b034:	dd800617 	ldw	r22,24(sp)
1000b038:	dd400517 	ldw	r21,20(sp)
1000b03c:	dd000417 	ldw	r20,16(sp)
1000b040:	dcc00317 	ldw	r19,12(sp)
1000b044:	dc800217 	ldw	r18,8(sp)
1000b048:	dc400117 	ldw	r17,4(sp)
1000b04c:	dc000017 	ldw	r16,0(sp)
1000b050:	dec00904 	addi	sp,sp,36
1000b054:	f800283a 	ret
1000b058:	99400117 	ldw	r5,4(r19)
1000b05c:	a009883a 	mov	r4,r20
1000b060:	29400044 	addi	r5,r5,1
1000b064:	000aea40 	call	1000aea4 <_Balloc>
1000b068:	99800417 	ldw	r6,16(r19)
1000b06c:	99400304 	addi	r5,r19,12
1000b070:	11000304 	addi	r4,r2,12
1000b074:	31800084 	addi	r6,r6,2
1000b078:	318d883a 	add	r6,r6,r6
1000b07c:	318d883a 	add	r6,r6,r6
1000b080:	1023883a 	mov	r17,r2
1000b084:	000ac000 	call	1000ac00 <memcpy>
1000b088:	98000a26 	beq	r19,zero,1000b0b4 <__multadd+0x140>
1000b08c:	98c00117 	ldw	r3,4(r19)
1000b090:	a0801317 	ldw	r2,76(r20)
1000b094:	18c7883a 	add	r3,r3,r3
1000b098:	18c7883a 	add	r3,r3,r3
1000b09c:	10c5883a 	add	r2,r2,r3
1000b0a0:	10c00017 	ldw	r3,0(r2)
1000b0a4:	98c00015 	stw	r3,0(r19)
1000b0a8:	14c00015 	stw	r19,0(r2)
1000b0ac:	8827883a 	mov	r19,r17
1000b0b0:	003fd606 	br	1000b00c <__alt_data_end+0xf800b00c>
1000b0b4:	8827883a 	mov	r19,r17
1000b0b8:	003fd406 	br	1000b00c <__alt_data_end+0xf800b00c>

1000b0bc <__s2b>:
1000b0bc:	defff904 	addi	sp,sp,-28
1000b0c0:	dc400115 	stw	r17,4(sp)
1000b0c4:	dc000015 	stw	r16,0(sp)
1000b0c8:	2023883a 	mov	r17,r4
1000b0cc:	2821883a 	mov	r16,r5
1000b0d0:	39000204 	addi	r4,r7,8
1000b0d4:	01400244 	movi	r5,9
1000b0d8:	dcc00315 	stw	r19,12(sp)
1000b0dc:	dc800215 	stw	r18,8(sp)
1000b0e0:	dfc00615 	stw	ra,24(sp)
1000b0e4:	dd400515 	stw	r21,20(sp)
1000b0e8:	dd000415 	stw	r20,16(sp)
1000b0ec:	3825883a 	mov	r18,r7
1000b0f0:	3027883a 	mov	r19,r6
1000b0f4:	000f2740 	call	1000f274 <__divsi3>
1000b0f8:	00c00044 	movi	r3,1
1000b0fc:	000b883a 	mov	r5,zero
1000b100:	1880030e 	bge	r3,r2,1000b110 <__s2b+0x54>
1000b104:	18c7883a 	add	r3,r3,r3
1000b108:	29400044 	addi	r5,r5,1
1000b10c:	18bffd16 	blt	r3,r2,1000b104 <__alt_data_end+0xf800b104>
1000b110:	8809883a 	mov	r4,r17
1000b114:	000aea40 	call	1000aea4 <_Balloc>
1000b118:	d8c00717 	ldw	r3,28(sp)
1000b11c:	10c00515 	stw	r3,20(r2)
1000b120:	00c00044 	movi	r3,1
1000b124:	10c00415 	stw	r3,16(r2)
1000b128:	00c00244 	movi	r3,9
1000b12c:	1cc0210e 	bge	r3,r19,1000b1b4 <__s2b+0xf8>
1000b130:	80eb883a 	add	r21,r16,r3
1000b134:	a829883a 	mov	r20,r21
1000b138:	84e1883a 	add	r16,r16,r19
1000b13c:	a1c00007 	ldb	r7,0(r20)
1000b140:	01800284 	movi	r6,10
1000b144:	a5000044 	addi	r20,r20,1
1000b148:	100b883a 	mov	r5,r2
1000b14c:	39fff404 	addi	r7,r7,-48
1000b150:	8809883a 	mov	r4,r17
1000b154:	000af740 	call	1000af74 <__multadd>
1000b158:	a43ff81e 	bne	r20,r16,1000b13c <__alt_data_end+0xf800b13c>
1000b15c:	ace1883a 	add	r16,r21,r19
1000b160:	843ffe04 	addi	r16,r16,-8
1000b164:	9c800a0e 	bge	r19,r18,1000b190 <__s2b+0xd4>
1000b168:	94e5c83a 	sub	r18,r18,r19
1000b16c:	84a5883a 	add	r18,r16,r18
1000b170:	81c00007 	ldb	r7,0(r16)
1000b174:	01800284 	movi	r6,10
1000b178:	84000044 	addi	r16,r16,1
1000b17c:	100b883a 	mov	r5,r2
1000b180:	39fff404 	addi	r7,r7,-48
1000b184:	8809883a 	mov	r4,r17
1000b188:	000af740 	call	1000af74 <__multadd>
1000b18c:	84bff81e 	bne	r16,r18,1000b170 <__alt_data_end+0xf800b170>
1000b190:	dfc00617 	ldw	ra,24(sp)
1000b194:	dd400517 	ldw	r21,20(sp)
1000b198:	dd000417 	ldw	r20,16(sp)
1000b19c:	dcc00317 	ldw	r19,12(sp)
1000b1a0:	dc800217 	ldw	r18,8(sp)
1000b1a4:	dc400117 	ldw	r17,4(sp)
1000b1a8:	dc000017 	ldw	r16,0(sp)
1000b1ac:	dec00704 	addi	sp,sp,28
1000b1b0:	f800283a 	ret
1000b1b4:	84000284 	addi	r16,r16,10
1000b1b8:	1827883a 	mov	r19,r3
1000b1bc:	003fe906 	br	1000b164 <__alt_data_end+0xf800b164>

1000b1c0 <__hi0bits>:
1000b1c0:	20bfffec 	andhi	r2,r4,65535
1000b1c4:	1000141e 	bne	r2,zero,1000b218 <__hi0bits+0x58>
1000b1c8:	2008943a 	slli	r4,r4,16
1000b1cc:	00800404 	movi	r2,16
1000b1d0:	20ffc02c 	andhi	r3,r4,65280
1000b1d4:	1800021e 	bne	r3,zero,1000b1e0 <__hi0bits+0x20>
1000b1d8:	2008923a 	slli	r4,r4,8
1000b1dc:	10800204 	addi	r2,r2,8
1000b1e0:	20fc002c 	andhi	r3,r4,61440
1000b1e4:	1800021e 	bne	r3,zero,1000b1f0 <__hi0bits+0x30>
1000b1e8:	2008913a 	slli	r4,r4,4
1000b1ec:	10800104 	addi	r2,r2,4
1000b1f0:	20f0002c 	andhi	r3,r4,49152
1000b1f4:	1800031e 	bne	r3,zero,1000b204 <__hi0bits+0x44>
1000b1f8:	2109883a 	add	r4,r4,r4
1000b1fc:	10800084 	addi	r2,r2,2
1000b200:	2109883a 	add	r4,r4,r4
1000b204:	20000316 	blt	r4,zero,1000b214 <__hi0bits+0x54>
1000b208:	2110002c 	andhi	r4,r4,16384
1000b20c:	2000041e 	bne	r4,zero,1000b220 <__hi0bits+0x60>
1000b210:	00800804 	movi	r2,32
1000b214:	f800283a 	ret
1000b218:	0005883a 	mov	r2,zero
1000b21c:	003fec06 	br	1000b1d0 <__alt_data_end+0xf800b1d0>
1000b220:	10800044 	addi	r2,r2,1
1000b224:	f800283a 	ret

1000b228 <__lo0bits>:
1000b228:	20c00017 	ldw	r3,0(r4)
1000b22c:	188001cc 	andi	r2,r3,7
1000b230:	10000826 	beq	r2,zero,1000b254 <__lo0bits+0x2c>
1000b234:	1880004c 	andi	r2,r3,1
1000b238:	1000211e 	bne	r2,zero,1000b2c0 <__lo0bits+0x98>
1000b23c:	1880008c 	andi	r2,r3,2
1000b240:	1000211e 	bne	r2,zero,1000b2c8 <__lo0bits+0xa0>
1000b244:	1806d0ba 	srli	r3,r3,2
1000b248:	00800084 	movi	r2,2
1000b24c:	20c00015 	stw	r3,0(r4)
1000b250:	f800283a 	ret
1000b254:	18bfffcc 	andi	r2,r3,65535
1000b258:	10001326 	beq	r2,zero,1000b2a8 <__lo0bits+0x80>
1000b25c:	0005883a 	mov	r2,zero
1000b260:	19403fcc 	andi	r5,r3,255
1000b264:	2800021e 	bne	r5,zero,1000b270 <__lo0bits+0x48>
1000b268:	1806d23a 	srli	r3,r3,8
1000b26c:	10800204 	addi	r2,r2,8
1000b270:	194003cc 	andi	r5,r3,15
1000b274:	2800021e 	bne	r5,zero,1000b280 <__lo0bits+0x58>
1000b278:	1806d13a 	srli	r3,r3,4
1000b27c:	10800104 	addi	r2,r2,4
1000b280:	194000cc 	andi	r5,r3,3
1000b284:	2800021e 	bne	r5,zero,1000b290 <__lo0bits+0x68>
1000b288:	1806d0ba 	srli	r3,r3,2
1000b28c:	10800084 	addi	r2,r2,2
1000b290:	1940004c 	andi	r5,r3,1
1000b294:	2800081e 	bne	r5,zero,1000b2b8 <__lo0bits+0x90>
1000b298:	1806d07a 	srli	r3,r3,1
1000b29c:	1800051e 	bne	r3,zero,1000b2b4 <__lo0bits+0x8c>
1000b2a0:	00800804 	movi	r2,32
1000b2a4:	f800283a 	ret
1000b2a8:	1806d43a 	srli	r3,r3,16
1000b2ac:	00800404 	movi	r2,16
1000b2b0:	003feb06 	br	1000b260 <__alt_data_end+0xf800b260>
1000b2b4:	10800044 	addi	r2,r2,1
1000b2b8:	20c00015 	stw	r3,0(r4)
1000b2bc:	f800283a 	ret
1000b2c0:	0005883a 	mov	r2,zero
1000b2c4:	f800283a 	ret
1000b2c8:	1806d07a 	srli	r3,r3,1
1000b2cc:	00800044 	movi	r2,1
1000b2d0:	20c00015 	stw	r3,0(r4)
1000b2d4:	f800283a 	ret

1000b2d8 <__i2b>:
1000b2d8:	defffd04 	addi	sp,sp,-12
1000b2dc:	dc000015 	stw	r16,0(sp)
1000b2e0:	04000044 	movi	r16,1
1000b2e4:	dc400115 	stw	r17,4(sp)
1000b2e8:	2823883a 	mov	r17,r5
1000b2ec:	800b883a 	mov	r5,r16
1000b2f0:	dfc00215 	stw	ra,8(sp)
1000b2f4:	000aea40 	call	1000aea4 <_Balloc>
1000b2f8:	14400515 	stw	r17,20(r2)
1000b2fc:	14000415 	stw	r16,16(r2)
1000b300:	dfc00217 	ldw	ra,8(sp)
1000b304:	dc400117 	ldw	r17,4(sp)
1000b308:	dc000017 	ldw	r16,0(sp)
1000b30c:	dec00304 	addi	sp,sp,12
1000b310:	f800283a 	ret

1000b314 <__multiply>:
1000b314:	deffef04 	addi	sp,sp,-68
1000b318:	dc400815 	stw	r17,32(sp)
1000b31c:	dc000715 	stw	r16,28(sp)
1000b320:	34400417 	ldw	r17,16(r6)
1000b324:	2c000417 	ldw	r16,16(r5)
1000b328:	dd800d15 	stw	r22,52(sp)
1000b32c:	dc800915 	stw	r18,36(sp)
1000b330:	dfc01015 	stw	ra,64(sp)
1000b334:	df000f15 	stw	fp,60(sp)
1000b338:	ddc00e15 	stw	r23,56(sp)
1000b33c:	dd400c15 	stw	r21,48(sp)
1000b340:	dd000b15 	stw	r20,44(sp)
1000b344:	dcc00a15 	stw	r19,40(sp)
1000b348:	2825883a 	mov	r18,r5
1000b34c:	302d883a 	mov	r22,r6
1000b350:	8440050e 	bge	r16,r17,1000b368 <__multiply+0x54>
1000b354:	8007883a 	mov	r3,r16
1000b358:	3025883a 	mov	r18,r6
1000b35c:	8821883a 	mov	r16,r17
1000b360:	282d883a 	mov	r22,r5
1000b364:	1823883a 	mov	r17,r3
1000b368:	90800217 	ldw	r2,8(r18)
1000b36c:	8447883a 	add	r3,r16,r17
1000b370:	d8c00215 	stw	r3,8(sp)
1000b374:	91400117 	ldw	r5,4(r18)
1000b378:	10c0010e 	bge	r2,r3,1000b380 <__multiply+0x6c>
1000b37c:	29400044 	addi	r5,r5,1
1000b380:	000aea40 	call	1000aea4 <_Balloc>
1000b384:	d8c00217 	ldw	r3,8(sp)
1000b388:	d8800615 	stw	r2,24(sp)
1000b38c:	18eb883a 	add	r21,r3,r3
1000b390:	ad6b883a 	add	r21,r21,r21
1000b394:	10c00504 	addi	r3,r2,20
1000b398:	1d6b883a 	add	r21,r3,r21
1000b39c:	d8c00115 	stw	r3,4(sp)
1000b3a0:	dd400315 	stw	r21,12(sp)
1000b3a4:	1805883a 	mov	r2,r3
1000b3a8:	1d40042e 	bgeu	r3,r21,1000b3bc <__multiply+0xa8>
1000b3ac:	d8c00317 	ldw	r3,12(sp)
1000b3b0:	10000015 	stw	zero,0(r2)
1000b3b4:	10800104 	addi	r2,r2,4
1000b3b8:	10fffc36 	bltu	r2,r3,1000b3ac <__alt_data_end+0xf800b3ac>
1000b3bc:	8c63883a 	add	r17,r17,r17
1000b3c0:	b5800504 	addi	r22,r22,20
1000b3c4:	8c63883a 	add	r17,r17,r17
1000b3c8:	94800504 	addi	r18,r18,20
1000b3cc:	8421883a 	add	r16,r16,r16
1000b3d0:	b463883a 	add	r17,r22,r17
1000b3d4:	8421883a 	add	r16,r16,r16
1000b3d8:	dd800015 	stw	r22,0(sp)
1000b3dc:	dc800415 	stw	r18,16(sp)
1000b3e0:	dc400515 	stw	r17,20(sp)
1000b3e4:	9429883a 	add	r20,r18,r16
1000b3e8:	b4404f2e 	bgeu	r22,r17,1000b528 <__multiply+0x214>
1000b3ec:	d8c00017 	ldw	r3,0(sp)
1000b3f0:	1c800017 	ldw	r18,0(r3)
1000b3f4:	947fffcc 	andi	r17,r18,65535
1000b3f8:	88001e26 	beq	r17,zero,1000b474 <__multiply+0x160>
1000b3fc:	dd800117 	ldw	r22,4(sp)
1000b400:	dd400417 	ldw	r21,16(sp)
1000b404:	0027883a 	mov	r19,zero
1000b408:	ac800017 	ldw	r18,0(r21)
1000b40c:	b4000017 	ldw	r16,0(r22)
1000b410:	880b883a 	mov	r5,r17
1000b414:	913fffcc 	andi	r4,r18,65535
1000b418:	00045280 	call	10004528 <__mulsi3>
1000b41c:	9008d43a 	srli	r4,r18,16
1000b420:	84bfffcc 	andi	r18,r16,65535
1000b424:	1485883a 	add	r2,r2,r18
1000b428:	14e5883a 	add	r18,r2,r19
1000b42c:	8020d43a 	srli	r16,r16,16
1000b430:	9026d43a 	srli	r19,r18,16
1000b434:	880b883a 	mov	r5,r17
1000b438:	00045280 	call	10004528 <__mulsi3>
1000b43c:	1405883a 	add	r2,r2,r16
1000b440:	14e1883a 	add	r16,r2,r19
1000b444:	90ffffcc 	andi	r3,r18,65535
1000b448:	8024943a 	slli	r18,r16,16
1000b44c:	ad400104 	addi	r21,r21,4
1000b450:	b005883a 	mov	r2,r22
1000b454:	90c6b03a 	or	r3,r18,r3
1000b458:	b0c00015 	stw	r3,0(r22)
1000b45c:	8026d43a 	srli	r19,r16,16
1000b460:	b5800104 	addi	r22,r22,4
1000b464:	ad3fe836 	bltu	r21,r20,1000b408 <__alt_data_end+0xf800b408>
1000b468:	d8c00017 	ldw	r3,0(sp)
1000b46c:	14c00115 	stw	r19,4(r2)
1000b470:	1c800017 	ldw	r18,0(r3)
1000b474:	9024d43a 	srli	r18,r18,16
1000b478:	90002226 	beq	r18,zero,1000b504 <__multiply+0x1f0>
1000b47c:	d8c00117 	ldw	r3,4(sp)
1000b480:	dd800417 	ldw	r22,16(sp)
1000b484:	002f883a 	mov	r23,zero
1000b488:	1f000017 	ldw	fp,0(r3)
1000b48c:	1823883a 	mov	r17,r3
1000b490:	182b883a 	mov	r21,r3
1000b494:	e021883a 	mov	r16,fp
1000b498:	00000106 	br	1000b4a0 <__multiply+0x18c>
1000b49c:	982b883a 	mov	r21,r19
1000b4a0:	b100000b 	ldhu	r4,0(r22)
1000b4a4:	8020d43a 	srli	r16,r16,16
1000b4a8:	900b883a 	mov	r5,r18
1000b4ac:	00045280 	call	10004528 <__mulsi3>
1000b4b0:	1405883a 	add	r2,r2,r16
1000b4b4:	15ef883a 	add	r23,r2,r23
1000b4b8:	b804943a 	slli	r2,r23,16
1000b4bc:	e0ffffcc 	andi	r3,fp,65535
1000b4c0:	8c400104 	addi	r17,r17,4
1000b4c4:	10c6b03a 	or	r3,r2,r3
1000b4c8:	88ffff15 	stw	r3,-4(r17)
1000b4cc:	b5800104 	addi	r22,r22,4
1000b4d0:	b13fff17 	ldw	r4,-4(r22)
1000b4d4:	acc00104 	addi	r19,r21,4
1000b4d8:	900b883a 	mov	r5,r18
1000b4dc:	2008d43a 	srli	r4,r4,16
1000b4e0:	9c000017 	ldw	r16,0(r19)
1000b4e4:	00045280 	call	10004528 <__mulsi3>
1000b4e8:	b806d43a 	srli	r3,r23,16
1000b4ec:	813fffcc 	andi	r4,r16,65535
1000b4f0:	1105883a 	add	r2,r2,r4
1000b4f4:	10f9883a 	add	fp,r2,r3
1000b4f8:	e02ed43a 	srli	r23,fp,16
1000b4fc:	b53fe736 	bltu	r22,r20,1000b49c <__alt_data_end+0xf800b49c>
1000b500:	af000115 	stw	fp,4(r21)
1000b504:	d8c00017 	ldw	r3,0(sp)
1000b508:	d9000517 	ldw	r4,20(sp)
1000b50c:	18c00104 	addi	r3,r3,4
1000b510:	d8c00015 	stw	r3,0(sp)
1000b514:	d8c00117 	ldw	r3,4(sp)
1000b518:	18c00104 	addi	r3,r3,4
1000b51c:	d8c00115 	stw	r3,4(sp)
1000b520:	d8c00017 	ldw	r3,0(sp)
1000b524:	193fb136 	bltu	r3,r4,1000b3ec <__alt_data_end+0xf800b3ec>
1000b528:	d8c00217 	ldw	r3,8(sp)
1000b52c:	00c00c0e 	bge	zero,r3,1000b560 <__multiply+0x24c>
1000b530:	d8c00317 	ldw	r3,12(sp)
1000b534:	18bfff17 	ldw	r2,-4(r3)
1000b538:	1d7fff04 	addi	r21,r3,-4
1000b53c:	10000326 	beq	r2,zero,1000b54c <__multiply+0x238>
1000b540:	00000706 	br	1000b560 <__multiply+0x24c>
1000b544:	a8800017 	ldw	r2,0(r21)
1000b548:	1000051e 	bne	r2,zero,1000b560 <__multiply+0x24c>
1000b54c:	d8c00217 	ldw	r3,8(sp)
1000b550:	ad7fff04 	addi	r21,r21,-4
1000b554:	18ffffc4 	addi	r3,r3,-1
1000b558:	d8c00215 	stw	r3,8(sp)
1000b55c:	183ff91e 	bne	r3,zero,1000b544 <__alt_data_end+0xf800b544>
1000b560:	d8c00617 	ldw	r3,24(sp)
1000b564:	d9000217 	ldw	r4,8(sp)
1000b568:	1805883a 	mov	r2,r3
1000b56c:	19000415 	stw	r4,16(r3)
1000b570:	dfc01017 	ldw	ra,64(sp)
1000b574:	df000f17 	ldw	fp,60(sp)
1000b578:	ddc00e17 	ldw	r23,56(sp)
1000b57c:	dd800d17 	ldw	r22,52(sp)
1000b580:	dd400c17 	ldw	r21,48(sp)
1000b584:	dd000b17 	ldw	r20,44(sp)
1000b588:	dcc00a17 	ldw	r19,40(sp)
1000b58c:	dc800917 	ldw	r18,36(sp)
1000b590:	dc400817 	ldw	r17,32(sp)
1000b594:	dc000717 	ldw	r16,28(sp)
1000b598:	dec01104 	addi	sp,sp,68
1000b59c:	f800283a 	ret

1000b5a0 <__pow5mult>:
1000b5a0:	defffa04 	addi	sp,sp,-24
1000b5a4:	dcc00315 	stw	r19,12(sp)
1000b5a8:	dc000015 	stw	r16,0(sp)
1000b5ac:	dfc00515 	stw	ra,20(sp)
1000b5b0:	dd000415 	stw	r20,16(sp)
1000b5b4:	dc800215 	stw	r18,8(sp)
1000b5b8:	dc400115 	stw	r17,4(sp)
1000b5bc:	308000cc 	andi	r2,r6,3
1000b5c0:	3021883a 	mov	r16,r6
1000b5c4:	2027883a 	mov	r19,r4
1000b5c8:	10002f1e 	bne	r2,zero,1000b688 <__pow5mult+0xe8>
1000b5cc:	2825883a 	mov	r18,r5
1000b5d0:	8021d0ba 	srai	r16,r16,2
1000b5d4:	80001a26 	beq	r16,zero,1000b640 <__pow5mult+0xa0>
1000b5d8:	9c401217 	ldw	r17,72(r19)
1000b5dc:	8800061e 	bne	r17,zero,1000b5f8 <__pow5mult+0x58>
1000b5e0:	00003406 	br	1000b6b4 <__pow5mult+0x114>
1000b5e4:	8021d07a 	srai	r16,r16,1
1000b5e8:	80001526 	beq	r16,zero,1000b640 <__pow5mult+0xa0>
1000b5ec:	88800017 	ldw	r2,0(r17)
1000b5f0:	10001c26 	beq	r2,zero,1000b664 <__pow5mult+0xc4>
1000b5f4:	1023883a 	mov	r17,r2
1000b5f8:	8080004c 	andi	r2,r16,1
1000b5fc:	103ff926 	beq	r2,zero,1000b5e4 <__alt_data_end+0xf800b5e4>
1000b600:	880d883a 	mov	r6,r17
1000b604:	900b883a 	mov	r5,r18
1000b608:	9809883a 	mov	r4,r19
1000b60c:	000b3140 	call	1000b314 <__multiply>
1000b610:	90001b26 	beq	r18,zero,1000b680 <__pow5mult+0xe0>
1000b614:	91000117 	ldw	r4,4(r18)
1000b618:	98c01317 	ldw	r3,76(r19)
1000b61c:	8021d07a 	srai	r16,r16,1
1000b620:	2109883a 	add	r4,r4,r4
1000b624:	2109883a 	add	r4,r4,r4
1000b628:	1907883a 	add	r3,r3,r4
1000b62c:	19000017 	ldw	r4,0(r3)
1000b630:	91000015 	stw	r4,0(r18)
1000b634:	1c800015 	stw	r18,0(r3)
1000b638:	1025883a 	mov	r18,r2
1000b63c:	803feb1e 	bne	r16,zero,1000b5ec <__alt_data_end+0xf800b5ec>
1000b640:	9005883a 	mov	r2,r18
1000b644:	dfc00517 	ldw	ra,20(sp)
1000b648:	dd000417 	ldw	r20,16(sp)
1000b64c:	dcc00317 	ldw	r19,12(sp)
1000b650:	dc800217 	ldw	r18,8(sp)
1000b654:	dc400117 	ldw	r17,4(sp)
1000b658:	dc000017 	ldw	r16,0(sp)
1000b65c:	dec00604 	addi	sp,sp,24
1000b660:	f800283a 	ret
1000b664:	880d883a 	mov	r6,r17
1000b668:	880b883a 	mov	r5,r17
1000b66c:	9809883a 	mov	r4,r19
1000b670:	000b3140 	call	1000b314 <__multiply>
1000b674:	88800015 	stw	r2,0(r17)
1000b678:	10000015 	stw	zero,0(r2)
1000b67c:	003fdd06 	br	1000b5f4 <__alt_data_end+0xf800b5f4>
1000b680:	1025883a 	mov	r18,r2
1000b684:	003fd706 	br	1000b5e4 <__alt_data_end+0xf800b5e4>
1000b688:	10bfffc4 	addi	r2,r2,-1
1000b68c:	1085883a 	add	r2,r2,r2
1000b690:	00c40074 	movhi	r3,4097
1000b694:	18d44f04 	addi	r3,r3,20796
1000b698:	1085883a 	add	r2,r2,r2
1000b69c:	1885883a 	add	r2,r3,r2
1000b6a0:	11800017 	ldw	r6,0(r2)
1000b6a4:	000f883a 	mov	r7,zero
1000b6a8:	000af740 	call	1000af74 <__multadd>
1000b6ac:	1025883a 	mov	r18,r2
1000b6b0:	003fc706 	br	1000b5d0 <__alt_data_end+0xf800b5d0>
1000b6b4:	05000044 	movi	r20,1
1000b6b8:	a00b883a 	mov	r5,r20
1000b6bc:	9809883a 	mov	r4,r19
1000b6c0:	000aea40 	call	1000aea4 <_Balloc>
1000b6c4:	1023883a 	mov	r17,r2
1000b6c8:	00809c44 	movi	r2,625
1000b6cc:	88800515 	stw	r2,20(r17)
1000b6d0:	8d000415 	stw	r20,16(r17)
1000b6d4:	9c401215 	stw	r17,72(r19)
1000b6d8:	88000015 	stw	zero,0(r17)
1000b6dc:	003fc606 	br	1000b5f8 <__alt_data_end+0xf800b5f8>

1000b6e0 <__lshift>:
1000b6e0:	defff904 	addi	sp,sp,-28
1000b6e4:	dd400515 	stw	r21,20(sp)
1000b6e8:	dcc00315 	stw	r19,12(sp)
1000b6ec:	302bd17a 	srai	r21,r6,5
1000b6f0:	2cc00417 	ldw	r19,16(r5)
1000b6f4:	28800217 	ldw	r2,8(r5)
1000b6f8:	dd000415 	stw	r20,16(sp)
1000b6fc:	ace7883a 	add	r19,r21,r19
1000b700:	dc800215 	stw	r18,8(sp)
1000b704:	dc400115 	stw	r17,4(sp)
1000b708:	dc000015 	stw	r16,0(sp)
1000b70c:	dfc00615 	stw	ra,24(sp)
1000b710:	9c000044 	addi	r16,r19,1
1000b714:	2823883a 	mov	r17,r5
1000b718:	3029883a 	mov	r20,r6
1000b71c:	2025883a 	mov	r18,r4
1000b720:	29400117 	ldw	r5,4(r5)
1000b724:	1400030e 	bge	r2,r16,1000b734 <__lshift+0x54>
1000b728:	1085883a 	add	r2,r2,r2
1000b72c:	29400044 	addi	r5,r5,1
1000b730:	143ffd16 	blt	r2,r16,1000b728 <__alt_data_end+0xf800b728>
1000b734:	9009883a 	mov	r4,r18
1000b738:	000aea40 	call	1000aea4 <_Balloc>
1000b73c:	10c00504 	addi	r3,r2,20
1000b740:	0540070e 	bge	zero,r21,1000b760 <__lshift+0x80>
1000b744:	ad6b883a 	add	r21,r21,r21
1000b748:	ad6b883a 	add	r21,r21,r21
1000b74c:	1809883a 	mov	r4,r3
1000b750:	1d47883a 	add	r3,r3,r21
1000b754:	20000015 	stw	zero,0(r4)
1000b758:	21000104 	addi	r4,r4,4
1000b75c:	193ffd1e 	bne	r3,r4,1000b754 <__alt_data_end+0xf800b754>
1000b760:	8a000417 	ldw	r8,16(r17)
1000b764:	89000504 	addi	r4,r17,20
1000b768:	a18007cc 	andi	r6,r20,31
1000b76c:	4211883a 	add	r8,r8,r8
1000b770:	4211883a 	add	r8,r8,r8
1000b774:	2211883a 	add	r8,r4,r8
1000b778:	30002326 	beq	r6,zero,1000b808 <__lshift+0x128>
1000b77c:	02400804 	movi	r9,32
1000b780:	4993c83a 	sub	r9,r9,r6
1000b784:	000b883a 	mov	r5,zero
1000b788:	21c00017 	ldw	r7,0(r4)
1000b78c:	1815883a 	mov	r10,r3
1000b790:	18c00104 	addi	r3,r3,4
1000b794:	398e983a 	sll	r7,r7,r6
1000b798:	21000104 	addi	r4,r4,4
1000b79c:	394ab03a 	or	r5,r7,r5
1000b7a0:	197fff15 	stw	r5,-4(r3)
1000b7a4:	217fff17 	ldw	r5,-4(r4)
1000b7a8:	2a4ad83a 	srl	r5,r5,r9
1000b7ac:	223ff636 	bltu	r4,r8,1000b788 <__alt_data_end+0xf800b788>
1000b7b0:	51400115 	stw	r5,4(r10)
1000b7b4:	28001a1e 	bne	r5,zero,1000b820 <__lshift+0x140>
1000b7b8:	843fffc4 	addi	r16,r16,-1
1000b7bc:	14000415 	stw	r16,16(r2)
1000b7c0:	88000826 	beq	r17,zero,1000b7e4 <__lshift+0x104>
1000b7c4:	89000117 	ldw	r4,4(r17)
1000b7c8:	90c01317 	ldw	r3,76(r18)
1000b7cc:	2109883a 	add	r4,r4,r4
1000b7d0:	2109883a 	add	r4,r4,r4
1000b7d4:	1907883a 	add	r3,r3,r4
1000b7d8:	19000017 	ldw	r4,0(r3)
1000b7dc:	89000015 	stw	r4,0(r17)
1000b7e0:	1c400015 	stw	r17,0(r3)
1000b7e4:	dfc00617 	ldw	ra,24(sp)
1000b7e8:	dd400517 	ldw	r21,20(sp)
1000b7ec:	dd000417 	ldw	r20,16(sp)
1000b7f0:	dcc00317 	ldw	r19,12(sp)
1000b7f4:	dc800217 	ldw	r18,8(sp)
1000b7f8:	dc400117 	ldw	r17,4(sp)
1000b7fc:	dc000017 	ldw	r16,0(sp)
1000b800:	dec00704 	addi	sp,sp,28
1000b804:	f800283a 	ret
1000b808:	21400017 	ldw	r5,0(r4)
1000b80c:	18c00104 	addi	r3,r3,4
1000b810:	21000104 	addi	r4,r4,4
1000b814:	197fff15 	stw	r5,-4(r3)
1000b818:	223ffb36 	bltu	r4,r8,1000b808 <__alt_data_end+0xf800b808>
1000b81c:	003fe606 	br	1000b7b8 <__alt_data_end+0xf800b7b8>
1000b820:	9c000084 	addi	r16,r19,2
1000b824:	003fe406 	br	1000b7b8 <__alt_data_end+0xf800b7b8>

1000b828 <__mcmp>:
1000b828:	20800417 	ldw	r2,16(r4)
1000b82c:	28c00417 	ldw	r3,16(r5)
1000b830:	10c5c83a 	sub	r2,r2,r3
1000b834:	1000111e 	bne	r2,zero,1000b87c <__mcmp+0x54>
1000b838:	18c7883a 	add	r3,r3,r3
1000b83c:	18c7883a 	add	r3,r3,r3
1000b840:	21000504 	addi	r4,r4,20
1000b844:	29400504 	addi	r5,r5,20
1000b848:	20c5883a 	add	r2,r4,r3
1000b84c:	28cb883a 	add	r5,r5,r3
1000b850:	00000106 	br	1000b858 <__mcmp+0x30>
1000b854:	20800a2e 	bgeu	r4,r2,1000b880 <__mcmp+0x58>
1000b858:	10bfff04 	addi	r2,r2,-4
1000b85c:	297fff04 	addi	r5,r5,-4
1000b860:	11800017 	ldw	r6,0(r2)
1000b864:	28c00017 	ldw	r3,0(r5)
1000b868:	30fffa26 	beq	r6,r3,1000b854 <__alt_data_end+0xf800b854>
1000b86c:	30c00236 	bltu	r6,r3,1000b878 <__mcmp+0x50>
1000b870:	00800044 	movi	r2,1
1000b874:	f800283a 	ret
1000b878:	00bfffc4 	movi	r2,-1
1000b87c:	f800283a 	ret
1000b880:	0005883a 	mov	r2,zero
1000b884:	f800283a 	ret

1000b888 <__mdiff>:
1000b888:	28c00417 	ldw	r3,16(r5)
1000b88c:	30800417 	ldw	r2,16(r6)
1000b890:	defffa04 	addi	sp,sp,-24
1000b894:	dcc00315 	stw	r19,12(sp)
1000b898:	dc800215 	stw	r18,8(sp)
1000b89c:	dfc00515 	stw	ra,20(sp)
1000b8a0:	dd000415 	stw	r20,16(sp)
1000b8a4:	dc400115 	stw	r17,4(sp)
1000b8a8:	dc000015 	stw	r16,0(sp)
1000b8ac:	1887c83a 	sub	r3,r3,r2
1000b8b0:	2825883a 	mov	r18,r5
1000b8b4:	3027883a 	mov	r19,r6
1000b8b8:	1800141e 	bne	r3,zero,1000b90c <__mdiff+0x84>
1000b8bc:	1085883a 	add	r2,r2,r2
1000b8c0:	1085883a 	add	r2,r2,r2
1000b8c4:	2a000504 	addi	r8,r5,20
1000b8c8:	34000504 	addi	r16,r6,20
1000b8cc:	4087883a 	add	r3,r8,r2
1000b8d0:	8085883a 	add	r2,r16,r2
1000b8d4:	00000106 	br	1000b8dc <__mdiff+0x54>
1000b8d8:	40c0592e 	bgeu	r8,r3,1000ba40 <__mdiff+0x1b8>
1000b8dc:	18ffff04 	addi	r3,r3,-4
1000b8e0:	10bfff04 	addi	r2,r2,-4
1000b8e4:	19c00017 	ldw	r7,0(r3)
1000b8e8:	11400017 	ldw	r5,0(r2)
1000b8ec:	397ffa26 	beq	r7,r5,1000b8d8 <__alt_data_end+0xf800b8d8>
1000b8f0:	3940592e 	bgeu	r7,r5,1000ba58 <__mdiff+0x1d0>
1000b8f4:	9005883a 	mov	r2,r18
1000b8f8:	4023883a 	mov	r17,r8
1000b8fc:	9825883a 	mov	r18,r19
1000b900:	05000044 	movi	r20,1
1000b904:	1027883a 	mov	r19,r2
1000b908:	00000406 	br	1000b91c <__mdiff+0x94>
1000b90c:	18005616 	blt	r3,zero,1000ba68 <__mdiff+0x1e0>
1000b910:	34400504 	addi	r17,r6,20
1000b914:	2c000504 	addi	r16,r5,20
1000b918:	0029883a 	mov	r20,zero
1000b91c:	91400117 	ldw	r5,4(r18)
1000b920:	000aea40 	call	1000aea4 <_Balloc>
1000b924:	92400417 	ldw	r9,16(r18)
1000b928:	9b000417 	ldw	r12,16(r19)
1000b92c:	12c00504 	addi	r11,r2,20
1000b930:	4a51883a 	add	r8,r9,r9
1000b934:	6319883a 	add	r12,r12,r12
1000b938:	4211883a 	add	r8,r8,r8
1000b93c:	6319883a 	add	r12,r12,r12
1000b940:	15000315 	stw	r20,12(r2)
1000b944:	8211883a 	add	r8,r16,r8
1000b948:	8b19883a 	add	r12,r17,r12
1000b94c:	0007883a 	mov	r3,zero
1000b950:	81400017 	ldw	r5,0(r16)
1000b954:	89c00017 	ldw	r7,0(r17)
1000b958:	59800104 	addi	r6,r11,4
1000b95c:	293fffcc 	andi	r4,r5,65535
1000b960:	20c7883a 	add	r3,r4,r3
1000b964:	393fffcc 	andi	r4,r7,65535
1000b968:	1909c83a 	sub	r4,r3,r4
1000b96c:	280ad43a 	srli	r5,r5,16
1000b970:	380ed43a 	srli	r7,r7,16
1000b974:	2007d43a 	srai	r3,r4,16
1000b978:	213fffcc 	andi	r4,r4,65535
1000b97c:	29cbc83a 	sub	r5,r5,r7
1000b980:	28c7883a 	add	r3,r5,r3
1000b984:	180a943a 	slli	r5,r3,16
1000b988:	8c400104 	addi	r17,r17,4
1000b98c:	84000104 	addi	r16,r16,4
1000b990:	2908b03a 	or	r4,r5,r4
1000b994:	59000015 	stw	r4,0(r11)
1000b998:	1807d43a 	srai	r3,r3,16
1000b99c:	3015883a 	mov	r10,r6
1000b9a0:	3017883a 	mov	r11,r6
1000b9a4:	8b3fea36 	bltu	r17,r12,1000b950 <__alt_data_end+0xf800b950>
1000b9a8:	8200162e 	bgeu	r16,r8,1000ba04 <__mdiff+0x17c>
1000b9ac:	8017883a 	mov	r11,r16
1000b9b0:	59400017 	ldw	r5,0(r11)
1000b9b4:	31800104 	addi	r6,r6,4
1000b9b8:	5ac00104 	addi	r11,r11,4
1000b9bc:	293fffcc 	andi	r4,r5,65535
1000b9c0:	20c7883a 	add	r3,r4,r3
1000b9c4:	280ed43a 	srli	r7,r5,16
1000b9c8:	180bd43a 	srai	r5,r3,16
1000b9cc:	193fffcc 	andi	r4,r3,65535
1000b9d0:	3947883a 	add	r3,r7,r5
1000b9d4:	180a943a 	slli	r5,r3,16
1000b9d8:	1807d43a 	srai	r3,r3,16
1000b9dc:	2908b03a 	or	r4,r5,r4
1000b9e0:	313fff15 	stw	r4,-4(r6)
1000b9e4:	5a3ff236 	bltu	r11,r8,1000b9b0 <__alt_data_end+0xf800b9b0>
1000b9e8:	0406303a 	nor	r3,zero,r16
1000b9ec:	1a07883a 	add	r3,r3,r8
1000b9f0:	1806d0ba 	srli	r3,r3,2
1000b9f4:	18c00044 	addi	r3,r3,1
1000b9f8:	18c7883a 	add	r3,r3,r3
1000b9fc:	18c7883a 	add	r3,r3,r3
1000ba00:	50d5883a 	add	r10,r10,r3
1000ba04:	50ffff04 	addi	r3,r10,-4
1000ba08:	2000041e 	bne	r4,zero,1000ba1c <__mdiff+0x194>
1000ba0c:	18ffff04 	addi	r3,r3,-4
1000ba10:	19000017 	ldw	r4,0(r3)
1000ba14:	4a7fffc4 	addi	r9,r9,-1
1000ba18:	203ffc26 	beq	r4,zero,1000ba0c <__alt_data_end+0xf800ba0c>
1000ba1c:	12400415 	stw	r9,16(r2)
1000ba20:	dfc00517 	ldw	ra,20(sp)
1000ba24:	dd000417 	ldw	r20,16(sp)
1000ba28:	dcc00317 	ldw	r19,12(sp)
1000ba2c:	dc800217 	ldw	r18,8(sp)
1000ba30:	dc400117 	ldw	r17,4(sp)
1000ba34:	dc000017 	ldw	r16,0(sp)
1000ba38:	dec00604 	addi	sp,sp,24
1000ba3c:	f800283a 	ret
1000ba40:	000b883a 	mov	r5,zero
1000ba44:	000aea40 	call	1000aea4 <_Balloc>
1000ba48:	00c00044 	movi	r3,1
1000ba4c:	10c00415 	stw	r3,16(r2)
1000ba50:	10000515 	stw	zero,20(r2)
1000ba54:	003ff206 	br	1000ba20 <__alt_data_end+0xf800ba20>
1000ba58:	8023883a 	mov	r17,r16
1000ba5c:	0029883a 	mov	r20,zero
1000ba60:	4021883a 	mov	r16,r8
1000ba64:	003fad06 	br	1000b91c <__alt_data_end+0xf800b91c>
1000ba68:	9005883a 	mov	r2,r18
1000ba6c:	94400504 	addi	r17,r18,20
1000ba70:	9c000504 	addi	r16,r19,20
1000ba74:	9825883a 	mov	r18,r19
1000ba78:	05000044 	movi	r20,1
1000ba7c:	1027883a 	mov	r19,r2
1000ba80:	003fa606 	br	1000b91c <__alt_data_end+0xf800b91c>

1000ba84 <__ulp>:
1000ba84:	295ffc2c 	andhi	r5,r5,32752
1000ba88:	00bf3034 	movhi	r2,64704
1000ba8c:	2887883a 	add	r3,r5,r2
1000ba90:	00c0020e 	bge	zero,r3,1000ba9c <__ulp+0x18>
1000ba94:	0005883a 	mov	r2,zero
1000ba98:	f800283a 	ret
1000ba9c:	00c7c83a 	sub	r3,zero,r3
1000baa0:	1807d53a 	srai	r3,r3,20
1000baa4:	008004c4 	movi	r2,19
1000baa8:	10c00b0e 	bge	r2,r3,1000bad8 <__ulp+0x54>
1000baac:	18bffb04 	addi	r2,r3,-20
1000bab0:	01000784 	movi	r4,30
1000bab4:	0007883a 	mov	r3,zero
1000bab8:	20800516 	blt	r4,r2,1000bad0 <__ulp+0x4c>
1000babc:	010007c4 	movi	r4,31
1000bac0:	2089c83a 	sub	r4,r4,r2
1000bac4:	00800044 	movi	r2,1
1000bac8:	1104983a 	sll	r2,r2,r4
1000bacc:	f800283a 	ret
1000bad0:	00800044 	movi	r2,1
1000bad4:	f800283a 	ret
1000bad8:	01400234 	movhi	r5,8
1000badc:	28c7d83a 	sra	r3,r5,r3
1000bae0:	0005883a 	mov	r2,zero
1000bae4:	f800283a 	ret

1000bae8 <__b2d>:
1000bae8:	defffa04 	addi	sp,sp,-24
1000baec:	dc000015 	stw	r16,0(sp)
1000baf0:	24000417 	ldw	r16,16(r4)
1000baf4:	dc400115 	stw	r17,4(sp)
1000baf8:	24400504 	addi	r17,r4,20
1000bafc:	8421883a 	add	r16,r16,r16
1000bb00:	8421883a 	add	r16,r16,r16
1000bb04:	8c21883a 	add	r16,r17,r16
1000bb08:	dc800215 	stw	r18,8(sp)
1000bb0c:	84bfff17 	ldw	r18,-4(r16)
1000bb10:	dd000415 	stw	r20,16(sp)
1000bb14:	dcc00315 	stw	r19,12(sp)
1000bb18:	9009883a 	mov	r4,r18
1000bb1c:	2829883a 	mov	r20,r5
1000bb20:	dfc00515 	stw	ra,20(sp)
1000bb24:	000b1c00 	call	1000b1c0 <__hi0bits>
1000bb28:	00c00804 	movi	r3,32
1000bb2c:	1889c83a 	sub	r4,r3,r2
1000bb30:	a1000015 	stw	r4,0(r20)
1000bb34:	01000284 	movi	r4,10
1000bb38:	84ffff04 	addi	r19,r16,-4
1000bb3c:	20801216 	blt	r4,r2,1000bb88 <__b2d+0xa0>
1000bb40:	018002c4 	movi	r6,11
1000bb44:	308dc83a 	sub	r6,r6,r2
1000bb48:	9186d83a 	srl	r3,r18,r6
1000bb4c:	18cffc34 	orhi	r3,r3,16368
1000bb50:	8cc0212e 	bgeu	r17,r19,1000bbd8 <__b2d+0xf0>
1000bb54:	813ffe17 	ldw	r4,-8(r16)
1000bb58:	218cd83a 	srl	r6,r4,r6
1000bb5c:	10800544 	addi	r2,r2,21
1000bb60:	9084983a 	sll	r2,r18,r2
1000bb64:	1184b03a 	or	r2,r2,r6
1000bb68:	dfc00517 	ldw	ra,20(sp)
1000bb6c:	dd000417 	ldw	r20,16(sp)
1000bb70:	dcc00317 	ldw	r19,12(sp)
1000bb74:	dc800217 	ldw	r18,8(sp)
1000bb78:	dc400117 	ldw	r17,4(sp)
1000bb7c:	dc000017 	ldw	r16,0(sp)
1000bb80:	dec00604 	addi	sp,sp,24
1000bb84:	f800283a 	ret
1000bb88:	8cc00f2e 	bgeu	r17,r19,1000bbc8 <__b2d+0xe0>
1000bb8c:	117ffd44 	addi	r5,r2,-11
1000bb90:	80bffe17 	ldw	r2,-8(r16)
1000bb94:	28000e26 	beq	r5,zero,1000bbd0 <__b2d+0xe8>
1000bb98:	1949c83a 	sub	r4,r3,r5
1000bb9c:	9164983a 	sll	r18,r18,r5
1000bba0:	1106d83a 	srl	r3,r2,r4
1000bba4:	81bffe04 	addi	r6,r16,-8
1000bba8:	948ffc34 	orhi	r18,r18,16368
1000bbac:	90c6b03a 	or	r3,r18,r3
1000bbb0:	89800e2e 	bgeu	r17,r6,1000bbec <__b2d+0x104>
1000bbb4:	81bffd17 	ldw	r6,-12(r16)
1000bbb8:	1144983a 	sll	r2,r2,r5
1000bbbc:	310ad83a 	srl	r5,r6,r4
1000bbc0:	2884b03a 	or	r2,r5,r2
1000bbc4:	003fe806 	br	1000bb68 <__alt_data_end+0xf800bb68>
1000bbc8:	10bffd44 	addi	r2,r2,-11
1000bbcc:	1000041e 	bne	r2,zero,1000bbe0 <__b2d+0xf8>
1000bbd0:	90cffc34 	orhi	r3,r18,16368
1000bbd4:	003fe406 	br	1000bb68 <__alt_data_end+0xf800bb68>
1000bbd8:	000d883a 	mov	r6,zero
1000bbdc:	003fdf06 	br	1000bb5c <__alt_data_end+0xf800bb5c>
1000bbe0:	90a4983a 	sll	r18,r18,r2
1000bbe4:	0005883a 	mov	r2,zero
1000bbe8:	003ff906 	br	1000bbd0 <__alt_data_end+0xf800bbd0>
1000bbec:	1144983a 	sll	r2,r2,r5
1000bbf0:	003fdd06 	br	1000bb68 <__alt_data_end+0xf800bb68>

1000bbf4 <__d2b>:
1000bbf4:	defff804 	addi	sp,sp,-32
1000bbf8:	dc000215 	stw	r16,8(sp)
1000bbfc:	3021883a 	mov	r16,r6
1000bc00:	dc400315 	stw	r17,12(sp)
1000bc04:	8022907a 	slli	r17,r16,1
1000bc08:	dd000615 	stw	r20,24(sp)
1000bc0c:	2829883a 	mov	r20,r5
1000bc10:	01400044 	movi	r5,1
1000bc14:	dcc00515 	stw	r19,20(sp)
1000bc18:	dc800415 	stw	r18,16(sp)
1000bc1c:	dfc00715 	stw	ra,28(sp)
1000bc20:	3825883a 	mov	r18,r7
1000bc24:	8822d57a 	srli	r17,r17,21
1000bc28:	000aea40 	call	1000aea4 <_Balloc>
1000bc2c:	1027883a 	mov	r19,r2
1000bc30:	00800434 	movhi	r2,16
1000bc34:	10bfffc4 	addi	r2,r2,-1
1000bc38:	808c703a 	and	r6,r16,r2
1000bc3c:	88000126 	beq	r17,zero,1000bc44 <__d2b+0x50>
1000bc40:	31800434 	orhi	r6,r6,16
1000bc44:	d9800015 	stw	r6,0(sp)
1000bc48:	a0002426 	beq	r20,zero,1000bcdc <__d2b+0xe8>
1000bc4c:	d9000104 	addi	r4,sp,4
1000bc50:	dd000115 	stw	r20,4(sp)
1000bc54:	000b2280 	call	1000b228 <__lo0bits>
1000bc58:	d8c00017 	ldw	r3,0(sp)
1000bc5c:	10002f1e 	bne	r2,zero,1000bd1c <__d2b+0x128>
1000bc60:	d9000117 	ldw	r4,4(sp)
1000bc64:	99000515 	stw	r4,20(r19)
1000bc68:	1821003a 	cmpeq	r16,r3,zero
1000bc6c:	01000084 	movi	r4,2
1000bc70:	2421c83a 	sub	r16,r4,r16
1000bc74:	98c00615 	stw	r3,24(r19)
1000bc78:	9c000415 	stw	r16,16(r19)
1000bc7c:	88001f1e 	bne	r17,zero,1000bcfc <__d2b+0x108>
1000bc80:	10bef384 	addi	r2,r2,-1074
1000bc84:	90800015 	stw	r2,0(r18)
1000bc88:	00900034 	movhi	r2,16384
1000bc8c:	10bfffc4 	addi	r2,r2,-1
1000bc90:	8085883a 	add	r2,r16,r2
1000bc94:	1085883a 	add	r2,r2,r2
1000bc98:	1085883a 	add	r2,r2,r2
1000bc9c:	9885883a 	add	r2,r19,r2
1000bca0:	11000517 	ldw	r4,20(r2)
1000bca4:	8020917a 	slli	r16,r16,5
1000bca8:	000b1c00 	call	1000b1c0 <__hi0bits>
1000bcac:	d8c00817 	ldw	r3,32(sp)
1000bcb0:	8085c83a 	sub	r2,r16,r2
1000bcb4:	18800015 	stw	r2,0(r3)
1000bcb8:	9805883a 	mov	r2,r19
1000bcbc:	dfc00717 	ldw	ra,28(sp)
1000bcc0:	dd000617 	ldw	r20,24(sp)
1000bcc4:	dcc00517 	ldw	r19,20(sp)
1000bcc8:	dc800417 	ldw	r18,16(sp)
1000bccc:	dc400317 	ldw	r17,12(sp)
1000bcd0:	dc000217 	ldw	r16,8(sp)
1000bcd4:	dec00804 	addi	sp,sp,32
1000bcd8:	f800283a 	ret
1000bcdc:	d809883a 	mov	r4,sp
1000bce0:	000b2280 	call	1000b228 <__lo0bits>
1000bce4:	d8c00017 	ldw	r3,0(sp)
1000bce8:	04000044 	movi	r16,1
1000bcec:	9c000415 	stw	r16,16(r19)
1000bcf0:	98c00515 	stw	r3,20(r19)
1000bcf4:	10800804 	addi	r2,r2,32
1000bcf8:	883fe126 	beq	r17,zero,1000bc80 <__alt_data_end+0xf800bc80>
1000bcfc:	00c00d44 	movi	r3,53
1000bd00:	8c7ef344 	addi	r17,r17,-1075
1000bd04:	88a3883a 	add	r17,r17,r2
1000bd08:	1885c83a 	sub	r2,r3,r2
1000bd0c:	d8c00817 	ldw	r3,32(sp)
1000bd10:	94400015 	stw	r17,0(r18)
1000bd14:	18800015 	stw	r2,0(r3)
1000bd18:	003fe706 	br	1000bcb8 <__alt_data_end+0xf800bcb8>
1000bd1c:	01000804 	movi	r4,32
1000bd20:	2089c83a 	sub	r4,r4,r2
1000bd24:	1908983a 	sll	r4,r3,r4
1000bd28:	d9400117 	ldw	r5,4(sp)
1000bd2c:	1886d83a 	srl	r3,r3,r2
1000bd30:	2148b03a 	or	r4,r4,r5
1000bd34:	99000515 	stw	r4,20(r19)
1000bd38:	d8c00015 	stw	r3,0(sp)
1000bd3c:	003fca06 	br	1000bc68 <__alt_data_end+0xf800bc68>

1000bd40 <__ratio>:
1000bd40:	defff904 	addi	sp,sp,-28
1000bd44:	dc400315 	stw	r17,12(sp)
1000bd48:	2823883a 	mov	r17,r5
1000bd4c:	d9400104 	addi	r5,sp,4
1000bd50:	dfc00615 	stw	ra,24(sp)
1000bd54:	dcc00515 	stw	r19,20(sp)
1000bd58:	dc800415 	stw	r18,16(sp)
1000bd5c:	2027883a 	mov	r19,r4
1000bd60:	dc000215 	stw	r16,8(sp)
1000bd64:	000bae80 	call	1000bae8 <__b2d>
1000bd68:	d80b883a 	mov	r5,sp
1000bd6c:	8809883a 	mov	r4,r17
1000bd70:	1025883a 	mov	r18,r2
1000bd74:	1821883a 	mov	r16,r3
1000bd78:	000bae80 	call	1000bae8 <__b2d>
1000bd7c:	8a000417 	ldw	r8,16(r17)
1000bd80:	99000417 	ldw	r4,16(r19)
1000bd84:	d9400117 	ldw	r5,4(sp)
1000bd88:	2209c83a 	sub	r4,r4,r8
1000bd8c:	2010917a 	slli	r8,r4,5
1000bd90:	d9000017 	ldw	r4,0(sp)
1000bd94:	2909c83a 	sub	r4,r5,r4
1000bd98:	4109883a 	add	r4,r8,r4
1000bd9c:	01000e0e 	bge	zero,r4,1000bdd8 <__ratio+0x98>
1000bda0:	2008953a 	slli	r4,r4,20
1000bda4:	2421883a 	add	r16,r4,r16
1000bda8:	100d883a 	mov	r6,r2
1000bdac:	180f883a 	mov	r7,r3
1000bdb0:	9009883a 	mov	r4,r18
1000bdb4:	800b883a 	mov	r5,r16
1000bdb8:	000fcd40 	call	1000fcd4 <__divdf3>
1000bdbc:	dfc00617 	ldw	ra,24(sp)
1000bdc0:	dcc00517 	ldw	r19,20(sp)
1000bdc4:	dc800417 	ldw	r18,16(sp)
1000bdc8:	dc400317 	ldw	r17,12(sp)
1000bdcc:	dc000217 	ldw	r16,8(sp)
1000bdd0:	dec00704 	addi	sp,sp,28
1000bdd4:	f800283a 	ret
1000bdd8:	2008953a 	slli	r4,r4,20
1000bddc:	1907c83a 	sub	r3,r3,r4
1000bde0:	003ff106 	br	1000bda8 <__alt_data_end+0xf800bda8>

1000bde4 <_mprec_log10>:
1000bde4:	defffe04 	addi	sp,sp,-8
1000bde8:	dc000015 	stw	r16,0(sp)
1000bdec:	dfc00115 	stw	ra,4(sp)
1000bdf0:	008005c4 	movi	r2,23
1000bdf4:	2021883a 	mov	r16,r4
1000bdf8:	11000d0e 	bge	r2,r4,1000be30 <_mprec_log10+0x4c>
1000bdfc:	0005883a 	mov	r2,zero
1000be00:	00cffc34 	movhi	r3,16368
1000be04:	843fffc4 	addi	r16,r16,-1
1000be08:	000d883a 	mov	r6,zero
1000be0c:	01d00934 	movhi	r7,16420
1000be10:	1009883a 	mov	r4,r2
1000be14:	180b883a 	mov	r5,r3
1000be18:	00108fc0 	call	100108fc <__muldf3>
1000be1c:	803ff91e 	bne	r16,zero,1000be04 <__alt_data_end+0xf800be04>
1000be20:	dfc00117 	ldw	ra,4(sp)
1000be24:	dc000017 	ldw	r16,0(sp)
1000be28:	dec00204 	addi	sp,sp,8
1000be2c:	f800283a 	ret
1000be30:	202090fa 	slli	r16,r4,3
1000be34:	00840074 	movhi	r2,4097
1000be38:	10946604 	addi	r2,r2,20888
1000be3c:	1421883a 	add	r16,r2,r16
1000be40:	80800017 	ldw	r2,0(r16)
1000be44:	80c00117 	ldw	r3,4(r16)
1000be48:	dfc00117 	ldw	ra,4(sp)
1000be4c:	dc000017 	ldw	r16,0(sp)
1000be50:	dec00204 	addi	sp,sp,8
1000be54:	f800283a 	ret

1000be58 <__copybits>:
1000be58:	297fffc4 	addi	r5,r5,-1
1000be5c:	280fd17a 	srai	r7,r5,5
1000be60:	30c00417 	ldw	r3,16(r6)
1000be64:	30800504 	addi	r2,r6,20
1000be68:	39c00044 	addi	r7,r7,1
1000be6c:	18c7883a 	add	r3,r3,r3
1000be70:	39cf883a 	add	r7,r7,r7
1000be74:	18c7883a 	add	r3,r3,r3
1000be78:	39cf883a 	add	r7,r7,r7
1000be7c:	10c7883a 	add	r3,r2,r3
1000be80:	21cf883a 	add	r7,r4,r7
1000be84:	10c00d2e 	bgeu	r2,r3,1000bebc <__copybits+0x64>
1000be88:	200b883a 	mov	r5,r4
1000be8c:	12000017 	ldw	r8,0(r2)
1000be90:	29400104 	addi	r5,r5,4
1000be94:	10800104 	addi	r2,r2,4
1000be98:	2a3fff15 	stw	r8,-4(r5)
1000be9c:	10fffb36 	bltu	r2,r3,1000be8c <__alt_data_end+0xf800be8c>
1000bea0:	1985c83a 	sub	r2,r3,r6
1000bea4:	10bffac4 	addi	r2,r2,-21
1000bea8:	1004d0ba 	srli	r2,r2,2
1000beac:	10800044 	addi	r2,r2,1
1000beb0:	1085883a 	add	r2,r2,r2
1000beb4:	1085883a 	add	r2,r2,r2
1000beb8:	2089883a 	add	r4,r4,r2
1000bebc:	21c0032e 	bgeu	r4,r7,1000becc <__copybits+0x74>
1000bec0:	20000015 	stw	zero,0(r4)
1000bec4:	21000104 	addi	r4,r4,4
1000bec8:	21fffd36 	bltu	r4,r7,1000bec0 <__alt_data_end+0xf800bec0>
1000becc:	f800283a 	ret

1000bed0 <__any_on>:
1000bed0:	20c00417 	ldw	r3,16(r4)
1000bed4:	2805d17a 	srai	r2,r5,5
1000bed8:	21000504 	addi	r4,r4,20
1000bedc:	18800d0e 	bge	r3,r2,1000bf14 <__any_on+0x44>
1000bee0:	18c7883a 	add	r3,r3,r3
1000bee4:	18c7883a 	add	r3,r3,r3
1000bee8:	20c7883a 	add	r3,r4,r3
1000beec:	20c0192e 	bgeu	r4,r3,1000bf54 <__any_on+0x84>
1000bef0:	18bfff17 	ldw	r2,-4(r3)
1000bef4:	18ffff04 	addi	r3,r3,-4
1000bef8:	1000041e 	bne	r2,zero,1000bf0c <__any_on+0x3c>
1000befc:	20c0142e 	bgeu	r4,r3,1000bf50 <__any_on+0x80>
1000bf00:	18ffff04 	addi	r3,r3,-4
1000bf04:	19400017 	ldw	r5,0(r3)
1000bf08:	283ffc26 	beq	r5,zero,1000befc <__alt_data_end+0xf800befc>
1000bf0c:	00800044 	movi	r2,1
1000bf10:	f800283a 	ret
1000bf14:	10c00a0e 	bge	r2,r3,1000bf40 <__any_on+0x70>
1000bf18:	1085883a 	add	r2,r2,r2
1000bf1c:	1085883a 	add	r2,r2,r2
1000bf20:	294007cc 	andi	r5,r5,31
1000bf24:	2087883a 	add	r3,r4,r2
1000bf28:	283ff026 	beq	r5,zero,1000beec <__alt_data_end+0xf800beec>
1000bf2c:	19800017 	ldw	r6,0(r3)
1000bf30:	3144d83a 	srl	r2,r6,r5
1000bf34:	114a983a 	sll	r5,r2,r5
1000bf38:	317ff41e 	bne	r6,r5,1000bf0c <__alt_data_end+0xf800bf0c>
1000bf3c:	003feb06 	br	1000beec <__alt_data_end+0xf800beec>
1000bf40:	1085883a 	add	r2,r2,r2
1000bf44:	1085883a 	add	r2,r2,r2
1000bf48:	2087883a 	add	r3,r4,r2
1000bf4c:	003fe706 	br	1000beec <__alt_data_end+0xf800beec>
1000bf50:	f800283a 	ret
1000bf54:	0005883a 	mov	r2,zero
1000bf58:	f800283a 	ret

1000bf5c <_realloc_r>:
1000bf5c:	defff604 	addi	sp,sp,-40
1000bf60:	dc800215 	stw	r18,8(sp)
1000bf64:	dfc00915 	stw	ra,36(sp)
1000bf68:	df000815 	stw	fp,32(sp)
1000bf6c:	ddc00715 	stw	r23,28(sp)
1000bf70:	dd800615 	stw	r22,24(sp)
1000bf74:	dd400515 	stw	r21,20(sp)
1000bf78:	dd000415 	stw	r20,16(sp)
1000bf7c:	dcc00315 	stw	r19,12(sp)
1000bf80:	dc400115 	stw	r17,4(sp)
1000bf84:	dc000015 	stw	r16,0(sp)
1000bf88:	3025883a 	mov	r18,r6
1000bf8c:	2800b726 	beq	r5,zero,1000c26c <_realloc_r+0x310>
1000bf90:	282b883a 	mov	r21,r5
1000bf94:	2029883a 	mov	r20,r4
1000bf98:	00124280 	call	10012428 <__malloc_lock>
1000bf9c:	a8bfff17 	ldw	r2,-4(r21)
1000bfa0:	043fff04 	movi	r16,-4
1000bfa4:	90c002c4 	addi	r3,r18,11
1000bfa8:	01000584 	movi	r4,22
1000bfac:	acfffe04 	addi	r19,r21,-8
1000bfb0:	1420703a 	and	r16,r2,r16
1000bfb4:	20c0332e 	bgeu	r4,r3,1000c084 <_realloc_r+0x128>
1000bfb8:	047ffe04 	movi	r17,-8
1000bfbc:	1c62703a 	and	r17,r3,r17
1000bfc0:	8807883a 	mov	r3,r17
1000bfc4:	88005816 	blt	r17,zero,1000c128 <_realloc_r+0x1cc>
1000bfc8:	8c805736 	bltu	r17,r18,1000c128 <_realloc_r+0x1cc>
1000bfcc:	80c0300e 	bge	r16,r3,1000c090 <_realloc_r+0x134>
1000bfd0:	07040074 	movhi	fp,4097
1000bfd4:	e714ed04 	addi	fp,fp,21428
1000bfd8:	e1c00217 	ldw	r7,8(fp)
1000bfdc:	9c09883a 	add	r4,r19,r16
1000bfe0:	22000117 	ldw	r8,4(r4)
1000bfe4:	21c06326 	beq	r4,r7,1000c174 <_realloc_r+0x218>
1000bfe8:	017fff84 	movi	r5,-2
1000bfec:	414a703a 	and	r5,r8,r5
1000bff0:	214b883a 	add	r5,r4,r5
1000bff4:	29800117 	ldw	r6,4(r5)
1000bff8:	3180004c 	andi	r6,r6,1
1000bffc:	30003f26 	beq	r6,zero,1000c0fc <_realloc_r+0x1a0>
1000c000:	1080004c 	andi	r2,r2,1
1000c004:	10008326 	beq	r2,zero,1000c214 <_realloc_r+0x2b8>
1000c008:	900b883a 	mov	r5,r18
1000c00c:	a009883a 	mov	r4,r20
1000c010:	0004ab00 	call	10004ab0 <_malloc_r>
1000c014:	1025883a 	mov	r18,r2
1000c018:	10011e26 	beq	r2,zero,1000c494 <_realloc_r+0x538>
1000c01c:	a93fff17 	ldw	r4,-4(r21)
1000c020:	10fffe04 	addi	r3,r2,-8
1000c024:	00bfff84 	movi	r2,-2
1000c028:	2084703a 	and	r2,r4,r2
1000c02c:	9885883a 	add	r2,r19,r2
1000c030:	1880ee26 	beq	r3,r2,1000c3ec <_realloc_r+0x490>
1000c034:	81bfff04 	addi	r6,r16,-4
1000c038:	00800904 	movi	r2,36
1000c03c:	1180b836 	bltu	r2,r6,1000c320 <_realloc_r+0x3c4>
1000c040:	00c004c4 	movi	r3,19
1000c044:	19809636 	bltu	r3,r6,1000c2a0 <_realloc_r+0x344>
1000c048:	9005883a 	mov	r2,r18
1000c04c:	a807883a 	mov	r3,r21
1000c050:	19000017 	ldw	r4,0(r3)
1000c054:	11000015 	stw	r4,0(r2)
1000c058:	19000117 	ldw	r4,4(r3)
1000c05c:	11000115 	stw	r4,4(r2)
1000c060:	18c00217 	ldw	r3,8(r3)
1000c064:	10c00215 	stw	r3,8(r2)
1000c068:	a80b883a 	mov	r5,r21
1000c06c:	a009883a 	mov	r4,r20
1000c070:	0009f240 	call	10009f24 <_free_r>
1000c074:	a009883a 	mov	r4,r20
1000c078:	001244c0 	call	1001244c <__malloc_unlock>
1000c07c:	9005883a 	mov	r2,r18
1000c080:	00001206 	br	1000c0cc <_realloc_r+0x170>
1000c084:	00c00404 	movi	r3,16
1000c088:	1823883a 	mov	r17,r3
1000c08c:	003fce06 	br	1000bfc8 <__alt_data_end+0xf800bfc8>
1000c090:	a825883a 	mov	r18,r21
1000c094:	8445c83a 	sub	r2,r16,r17
1000c098:	00c003c4 	movi	r3,15
1000c09c:	18802636 	bltu	r3,r2,1000c138 <_realloc_r+0x1dc>
1000c0a0:	99800117 	ldw	r6,4(r19)
1000c0a4:	9c07883a 	add	r3,r19,r16
1000c0a8:	3180004c 	andi	r6,r6,1
1000c0ac:	3420b03a 	or	r16,r6,r16
1000c0b0:	9c000115 	stw	r16,4(r19)
1000c0b4:	18800117 	ldw	r2,4(r3)
1000c0b8:	10800054 	ori	r2,r2,1
1000c0bc:	18800115 	stw	r2,4(r3)
1000c0c0:	a009883a 	mov	r4,r20
1000c0c4:	001244c0 	call	1001244c <__malloc_unlock>
1000c0c8:	9005883a 	mov	r2,r18
1000c0cc:	dfc00917 	ldw	ra,36(sp)
1000c0d0:	df000817 	ldw	fp,32(sp)
1000c0d4:	ddc00717 	ldw	r23,28(sp)
1000c0d8:	dd800617 	ldw	r22,24(sp)
1000c0dc:	dd400517 	ldw	r21,20(sp)
1000c0e0:	dd000417 	ldw	r20,16(sp)
1000c0e4:	dcc00317 	ldw	r19,12(sp)
1000c0e8:	dc800217 	ldw	r18,8(sp)
1000c0ec:	dc400117 	ldw	r17,4(sp)
1000c0f0:	dc000017 	ldw	r16,0(sp)
1000c0f4:	dec00a04 	addi	sp,sp,40
1000c0f8:	f800283a 	ret
1000c0fc:	017fff04 	movi	r5,-4
1000c100:	414a703a 	and	r5,r8,r5
1000c104:	814d883a 	add	r6,r16,r5
1000c108:	30c01f16 	blt	r6,r3,1000c188 <_realloc_r+0x22c>
1000c10c:	20800317 	ldw	r2,12(r4)
1000c110:	20c00217 	ldw	r3,8(r4)
1000c114:	a825883a 	mov	r18,r21
1000c118:	3021883a 	mov	r16,r6
1000c11c:	18800315 	stw	r2,12(r3)
1000c120:	10c00215 	stw	r3,8(r2)
1000c124:	003fdb06 	br	1000c094 <__alt_data_end+0xf800c094>
1000c128:	00800304 	movi	r2,12
1000c12c:	a0800015 	stw	r2,0(r20)
1000c130:	0005883a 	mov	r2,zero
1000c134:	003fe506 	br	1000c0cc <__alt_data_end+0xf800c0cc>
1000c138:	98c00117 	ldw	r3,4(r19)
1000c13c:	9c4b883a 	add	r5,r19,r17
1000c140:	11000054 	ori	r4,r2,1
1000c144:	18c0004c 	andi	r3,r3,1
1000c148:	1c62b03a 	or	r17,r3,r17
1000c14c:	9c400115 	stw	r17,4(r19)
1000c150:	29000115 	stw	r4,4(r5)
1000c154:	2885883a 	add	r2,r5,r2
1000c158:	10c00117 	ldw	r3,4(r2)
1000c15c:	29400204 	addi	r5,r5,8
1000c160:	a009883a 	mov	r4,r20
1000c164:	18c00054 	ori	r3,r3,1
1000c168:	10c00115 	stw	r3,4(r2)
1000c16c:	0009f240 	call	10009f24 <_free_r>
1000c170:	003fd306 	br	1000c0c0 <__alt_data_end+0xf800c0c0>
1000c174:	017fff04 	movi	r5,-4
1000c178:	414a703a 	and	r5,r8,r5
1000c17c:	89800404 	addi	r6,r17,16
1000c180:	8151883a 	add	r8,r16,r5
1000c184:	4180590e 	bge	r8,r6,1000c2ec <_realloc_r+0x390>
1000c188:	1080004c 	andi	r2,r2,1
1000c18c:	103f9e1e 	bne	r2,zero,1000c008 <__alt_data_end+0xf800c008>
1000c190:	adbffe17 	ldw	r22,-8(r21)
1000c194:	00bfff04 	movi	r2,-4
1000c198:	9dadc83a 	sub	r22,r19,r22
1000c19c:	b1800117 	ldw	r6,4(r22)
1000c1a0:	3084703a 	and	r2,r6,r2
1000c1a4:	20002026 	beq	r4,zero,1000c228 <_realloc_r+0x2cc>
1000c1a8:	80af883a 	add	r23,r16,r2
1000c1ac:	b96f883a 	add	r23,r23,r5
1000c1b0:	21c05f26 	beq	r4,r7,1000c330 <_realloc_r+0x3d4>
1000c1b4:	b8c01c16 	blt	r23,r3,1000c228 <_realloc_r+0x2cc>
1000c1b8:	20800317 	ldw	r2,12(r4)
1000c1bc:	20c00217 	ldw	r3,8(r4)
1000c1c0:	81bfff04 	addi	r6,r16,-4
1000c1c4:	01000904 	movi	r4,36
1000c1c8:	18800315 	stw	r2,12(r3)
1000c1cc:	10c00215 	stw	r3,8(r2)
1000c1d0:	b0c00217 	ldw	r3,8(r22)
1000c1d4:	b0800317 	ldw	r2,12(r22)
1000c1d8:	b4800204 	addi	r18,r22,8
1000c1dc:	18800315 	stw	r2,12(r3)
1000c1e0:	10c00215 	stw	r3,8(r2)
1000c1e4:	21801b36 	bltu	r4,r6,1000c254 <_realloc_r+0x2f8>
1000c1e8:	008004c4 	movi	r2,19
1000c1ec:	1180352e 	bgeu	r2,r6,1000c2c4 <_realloc_r+0x368>
1000c1f0:	a8800017 	ldw	r2,0(r21)
1000c1f4:	b0800215 	stw	r2,8(r22)
1000c1f8:	a8800117 	ldw	r2,4(r21)
1000c1fc:	b0800315 	stw	r2,12(r22)
1000c200:	008006c4 	movi	r2,27
1000c204:	11807f36 	bltu	r2,r6,1000c404 <_realloc_r+0x4a8>
1000c208:	b0800404 	addi	r2,r22,16
1000c20c:	ad400204 	addi	r21,r21,8
1000c210:	00002d06 	br	1000c2c8 <_realloc_r+0x36c>
1000c214:	adbffe17 	ldw	r22,-8(r21)
1000c218:	00bfff04 	movi	r2,-4
1000c21c:	9dadc83a 	sub	r22,r19,r22
1000c220:	b1000117 	ldw	r4,4(r22)
1000c224:	2084703a 	and	r2,r4,r2
1000c228:	b03f7726 	beq	r22,zero,1000c008 <__alt_data_end+0xf800c008>
1000c22c:	80af883a 	add	r23,r16,r2
1000c230:	b8ff7516 	blt	r23,r3,1000c008 <__alt_data_end+0xf800c008>
1000c234:	b0800317 	ldw	r2,12(r22)
1000c238:	b0c00217 	ldw	r3,8(r22)
1000c23c:	81bfff04 	addi	r6,r16,-4
1000c240:	01000904 	movi	r4,36
1000c244:	18800315 	stw	r2,12(r3)
1000c248:	10c00215 	stw	r3,8(r2)
1000c24c:	b4800204 	addi	r18,r22,8
1000c250:	21bfe52e 	bgeu	r4,r6,1000c1e8 <__alt_data_end+0xf800c1e8>
1000c254:	a80b883a 	mov	r5,r21
1000c258:	9009883a 	mov	r4,r18
1000c25c:	000ad480 	call	1000ad48 <memmove>
1000c260:	b821883a 	mov	r16,r23
1000c264:	b027883a 	mov	r19,r22
1000c268:	003f8a06 	br	1000c094 <__alt_data_end+0xf800c094>
1000c26c:	300b883a 	mov	r5,r6
1000c270:	dfc00917 	ldw	ra,36(sp)
1000c274:	df000817 	ldw	fp,32(sp)
1000c278:	ddc00717 	ldw	r23,28(sp)
1000c27c:	dd800617 	ldw	r22,24(sp)
1000c280:	dd400517 	ldw	r21,20(sp)
1000c284:	dd000417 	ldw	r20,16(sp)
1000c288:	dcc00317 	ldw	r19,12(sp)
1000c28c:	dc800217 	ldw	r18,8(sp)
1000c290:	dc400117 	ldw	r17,4(sp)
1000c294:	dc000017 	ldw	r16,0(sp)
1000c298:	dec00a04 	addi	sp,sp,40
1000c29c:	0004ab01 	jmpi	10004ab0 <_malloc_r>
1000c2a0:	a8c00017 	ldw	r3,0(r21)
1000c2a4:	90c00015 	stw	r3,0(r18)
1000c2a8:	a8c00117 	ldw	r3,4(r21)
1000c2ac:	90c00115 	stw	r3,4(r18)
1000c2b0:	00c006c4 	movi	r3,27
1000c2b4:	19804536 	bltu	r3,r6,1000c3cc <_realloc_r+0x470>
1000c2b8:	90800204 	addi	r2,r18,8
1000c2bc:	a8c00204 	addi	r3,r21,8
1000c2c0:	003f6306 	br	1000c050 <__alt_data_end+0xf800c050>
1000c2c4:	9005883a 	mov	r2,r18
1000c2c8:	a8c00017 	ldw	r3,0(r21)
1000c2cc:	b821883a 	mov	r16,r23
1000c2d0:	b027883a 	mov	r19,r22
1000c2d4:	10c00015 	stw	r3,0(r2)
1000c2d8:	a8c00117 	ldw	r3,4(r21)
1000c2dc:	10c00115 	stw	r3,4(r2)
1000c2e0:	a8c00217 	ldw	r3,8(r21)
1000c2e4:	10c00215 	stw	r3,8(r2)
1000c2e8:	003f6a06 	br	1000c094 <__alt_data_end+0xf800c094>
1000c2ec:	9c67883a 	add	r19,r19,r17
1000c2f0:	4445c83a 	sub	r2,r8,r17
1000c2f4:	e4c00215 	stw	r19,8(fp)
1000c2f8:	10800054 	ori	r2,r2,1
1000c2fc:	98800115 	stw	r2,4(r19)
1000c300:	a8bfff17 	ldw	r2,-4(r21)
1000c304:	a009883a 	mov	r4,r20
1000c308:	1080004c 	andi	r2,r2,1
1000c30c:	1462b03a 	or	r17,r2,r17
1000c310:	ac7fff15 	stw	r17,-4(r21)
1000c314:	001244c0 	call	1001244c <__malloc_unlock>
1000c318:	a805883a 	mov	r2,r21
1000c31c:	003f6b06 	br	1000c0cc <__alt_data_end+0xf800c0cc>
1000c320:	a80b883a 	mov	r5,r21
1000c324:	9009883a 	mov	r4,r18
1000c328:	000ad480 	call	1000ad48 <memmove>
1000c32c:	003f4e06 	br	1000c068 <__alt_data_end+0xf800c068>
1000c330:	89000404 	addi	r4,r17,16
1000c334:	b93fbc16 	blt	r23,r4,1000c228 <__alt_data_end+0xf800c228>
1000c338:	b0800317 	ldw	r2,12(r22)
1000c33c:	b0c00217 	ldw	r3,8(r22)
1000c340:	81bfff04 	addi	r6,r16,-4
1000c344:	01000904 	movi	r4,36
1000c348:	18800315 	stw	r2,12(r3)
1000c34c:	10c00215 	stw	r3,8(r2)
1000c350:	b4800204 	addi	r18,r22,8
1000c354:	21804336 	bltu	r4,r6,1000c464 <_realloc_r+0x508>
1000c358:	008004c4 	movi	r2,19
1000c35c:	11803f2e 	bgeu	r2,r6,1000c45c <_realloc_r+0x500>
1000c360:	a8800017 	ldw	r2,0(r21)
1000c364:	b0800215 	stw	r2,8(r22)
1000c368:	a8800117 	ldw	r2,4(r21)
1000c36c:	b0800315 	stw	r2,12(r22)
1000c370:	008006c4 	movi	r2,27
1000c374:	11803f36 	bltu	r2,r6,1000c474 <_realloc_r+0x518>
1000c378:	b0800404 	addi	r2,r22,16
1000c37c:	ad400204 	addi	r21,r21,8
1000c380:	a8c00017 	ldw	r3,0(r21)
1000c384:	10c00015 	stw	r3,0(r2)
1000c388:	a8c00117 	ldw	r3,4(r21)
1000c38c:	10c00115 	stw	r3,4(r2)
1000c390:	a8c00217 	ldw	r3,8(r21)
1000c394:	10c00215 	stw	r3,8(r2)
1000c398:	b447883a 	add	r3,r22,r17
1000c39c:	bc45c83a 	sub	r2,r23,r17
1000c3a0:	e0c00215 	stw	r3,8(fp)
1000c3a4:	10800054 	ori	r2,r2,1
1000c3a8:	18800115 	stw	r2,4(r3)
1000c3ac:	b0800117 	ldw	r2,4(r22)
1000c3b0:	a009883a 	mov	r4,r20
1000c3b4:	1080004c 	andi	r2,r2,1
1000c3b8:	1462b03a 	or	r17,r2,r17
1000c3bc:	b4400115 	stw	r17,4(r22)
1000c3c0:	001244c0 	call	1001244c <__malloc_unlock>
1000c3c4:	9005883a 	mov	r2,r18
1000c3c8:	003f4006 	br	1000c0cc <__alt_data_end+0xf800c0cc>
1000c3cc:	a8c00217 	ldw	r3,8(r21)
1000c3d0:	90c00215 	stw	r3,8(r18)
1000c3d4:	a8c00317 	ldw	r3,12(r21)
1000c3d8:	90c00315 	stw	r3,12(r18)
1000c3dc:	30801126 	beq	r6,r2,1000c424 <_realloc_r+0x4c8>
1000c3e0:	90800404 	addi	r2,r18,16
1000c3e4:	a8c00404 	addi	r3,r21,16
1000c3e8:	003f1906 	br	1000c050 <__alt_data_end+0xf800c050>
1000c3ec:	90ffff17 	ldw	r3,-4(r18)
1000c3f0:	00bfff04 	movi	r2,-4
1000c3f4:	a825883a 	mov	r18,r21
1000c3f8:	1884703a 	and	r2,r3,r2
1000c3fc:	80a1883a 	add	r16,r16,r2
1000c400:	003f2406 	br	1000c094 <__alt_data_end+0xf800c094>
1000c404:	a8800217 	ldw	r2,8(r21)
1000c408:	b0800415 	stw	r2,16(r22)
1000c40c:	a8800317 	ldw	r2,12(r21)
1000c410:	b0800515 	stw	r2,20(r22)
1000c414:	31000a26 	beq	r6,r4,1000c440 <_realloc_r+0x4e4>
1000c418:	b0800604 	addi	r2,r22,24
1000c41c:	ad400404 	addi	r21,r21,16
1000c420:	003fa906 	br	1000c2c8 <__alt_data_end+0xf800c2c8>
1000c424:	a9000417 	ldw	r4,16(r21)
1000c428:	90800604 	addi	r2,r18,24
1000c42c:	a8c00604 	addi	r3,r21,24
1000c430:	91000415 	stw	r4,16(r18)
1000c434:	a9000517 	ldw	r4,20(r21)
1000c438:	91000515 	stw	r4,20(r18)
1000c43c:	003f0406 	br	1000c050 <__alt_data_end+0xf800c050>
1000c440:	a8c00417 	ldw	r3,16(r21)
1000c444:	ad400604 	addi	r21,r21,24
1000c448:	b0800804 	addi	r2,r22,32
1000c44c:	b0c00615 	stw	r3,24(r22)
1000c450:	a8ffff17 	ldw	r3,-4(r21)
1000c454:	b0c00715 	stw	r3,28(r22)
1000c458:	003f9b06 	br	1000c2c8 <__alt_data_end+0xf800c2c8>
1000c45c:	9005883a 	mov	r2,r18
1000c460:	003fc706 	br	1000c380 <__alt_data_end+0xf800c380>
1000c464:	a80b883a 	mov	r5,r21
1000c468:	9009883a 	mov	r4,r18
1000c46c:	000ad480 	call	1000ad48 <memmove>
1000c470:	003fc906 	br	1000c398 <__alt_data_end+0xf800c398>
1000c474:	a8800217 	ldw	r2,8(r21)
1000c478:	b0800415 	stw	r2,16(r22)
1000c47c:	a8800317 	ldw	r2,12(r21)
1000c480:	b0800515 	stw	r2,20(r22)
1000c484:	31000726 	beq	r6,r4,1000c4a4 <_realloc_r+0x548>
1000c488:	b0800604 	addi	r2,r22,24
1000c48c:	ad400404 	addi	r21,r21,16
1000c490:	003fbb06 	br	1000c380 <__alt_data_end+0xf800c380>
1000c494:	a009883a 	mov	r4,r20
1000c498:	001244c0 	call	1001244c <__malloc_unlock>
1000c49c:	0005883a 	mov	r2,zero
1000c4a0:	003f0a06 	br	1000c0cc <__alt_data_end+0xf800c0cc>
1000c4a4:	a8c00417 	ldw	r3,16(r21)
1000c4a8:	ad400604 	addi	r21,r21,24
1000c4ac:	b0800804 	addi	r2,r22,32
1000c4b0:	b0c00615 	stw	r3,24(r22)
1000c4b4:	a8ffff17 	ldw	r3,-4(r21)
1000c4b8:	b0c00715 	stw	r3,28(r22)
1000c4bc:	003fb006 	br	1000c380 <__alt_data_end+0xf800c380>

1000c4c0 <__fpclassifyd>:
1000c4c0:	00a00034 	movhi	r2,32768
1000c4c4:	10bfffc4 	addi	r2,r2,-1
1000c4c8:	2884703a 	and	r2,r5,r2
1000c4cc:	10000726 	beq	r2,zero,1000c4ec <__fpclassifyd+0x2c>
1000c4d0:	00fffc34 	movhi	r3,65520
1000c4d4:	019ff834 	movhi	r6,32736
1000c4d8:	28c7883a 	add	r3,r5,r3
1000c4dc:	31bfffc4 	addi	r6,r6,-1
1000c4e0:	30c00536 	bltu	r6,r3,1000c4f8 <__fpclassifyd+0x38>
1000c4e4:	00800104 	movi	r2,4
1000c4e8:	f800283a 	ret
1000c4ec:	2000021e 	bne	r4,zero,1000c4f8 <__fpclassifyd+0x38>
1000c4f0:	00800084 	movi	r2,2
1000c4f4:	f800283a 	ret
1000c4f8:	00dffc34 	movhi	r3,32752
1000c4fc:	019ff834 	movhi	r6,32736
1000c500:	28cb883a 	add	r5,r5,r3
1000c504:	31bfffc4 	addi	r6,r6,-1
1000c508:	317ff62e 	bgeu	r6,r5,1000c4e4 <__alt_data_end+0xf800c4e4>
1000c50c:	01400434 	movhi	r5,16
1000c510:	297fffc4 	addi	r5,r5,-1
1000c514:	28800236 	bltu	r5,r2,1000c520 <__fpclassifyd+0x60>
1000c518:	008000c4 	movi	r2,3
1000c51c:	f800283a 	ret
1000c520:	10c00226 	beq	r2,r3,1000c52c <__fpclassifyd+0x6c>
1000c524:	0005883a 	mov	r2,zero
1000c528:	f800283a 	ret
1000c52c:	2005003a 	cmpeq	r2,r4,zero
1000c530:	f800283a 	ret

1000c534 <__sread>:
1000c534:	defffe04 	addi	sp,sp,-8
1000c538:	dc000015 	stw	r16,0(sp)
1000c53c:	2821883a 	mov	r16,r5
1000c540:	2940038f 	ldh	r5,14(r5)
1000c544:	dfc00115 	stw	ra,4(sp)
1000c548:	000e3140 	call	1000e314 <_read_r>
1000c54c:	10000716 	blt	r2,zero,1000c56c <__sread+0x38>
1000c550:	80c01417 	ldw	r3,80(r16)
1000c554:	1887883a 	add	r3,r3,r2
1000c558:	80c01415 	stw	r3,80(r16)
1000c55c:	dfc00117 	ldw	ra,4(sp)
1000c560:	dc000017 	ldw	r16,0(sp)
1000c564:	dec00204 	addi	sp,sp,8
1000c568:	f800283a 	ret
1000c56c:	80c0030b 	ldhu	r3,12(r16)
1000c570:	18fbffcc 	andi	r3,r3,61439
1000c574:	80c0030d 	sth	r3,12(r16)
1000c578:	dfc00117 	ldw	ra,4(sp)
1000c57c:	dc000017 	ldw	r16,0(sp)
1000c580:	dec00204 	addi	sp,sp,8
1000c584:	f800283a 	ret

1000c588 <__seofread>:
1000c588:	0005883a 	mov	r2,zero
1000c58c:	f800283a 	ret

1000c590 <__swrite>:
1000c590:	2880030b 	ldhu	r2,12(r5)
1000c594:	defffb04 	addi	sp,sp,-20
1000c598:	dcc00315 	stw	r19,12(sp)
1000c59c:	dc800215 	stw	r18,8(sp)
1000c5a0:	dc400115 	stw	r17,4(sp)
1000c5a4:	dc000015 	stw	r16,0(sp)
1000c5a8:	dfc00415 	stw	ra,16(sp)
1000c5ac:	10c0400c 	andi	r3,r2,256
1000c5b0:	2821883a 	mov	r16,r5
1000c5b4:	2023883a 	mov	r17,r4
1000c5b8:	3025883a 	mov	r18,r6
1000c5bc:	3827883a 	mov	r19,r7
1000c5c0:	18000526 	beq	r3,zero,1000c5d8 <__swrite+0x48>
1000c5c4:	2940038f 	ldh	r5,14(r5)
1000c5c8:	01c00084 	movi	r7,2
1000c5cc:	000d883a 	mov	r6,zero
1000c5d0:	000e2b40 	call	1000e2b4 <_lseek_r>
1000c5d4:	8080030b 	ldhu	r2,12(r16)
1000c5d8:	8140038f 	ldh	r5,14(r16)
1000c5dc:	10bbffcc 	andi	r2,r2,61439
1000c5e0:	980f883a 	mov	r7,r19
1000c5e4:	900d883a 	mov	r6,r18
1000c5e8:	8809883a 	mov	r4,r17
1000c5ec:	8080030d 	sth	r2,12(r16)
1000c5f0:	dfc00417 	ldw	ra,16(sp)
1000c5f4:	dcc00317 	ldw	r19,12(sp)
1000c5f8:	dc800217 	ldw	r18,8(sp)
1000c5fc:	dc400117 	ldw	r17,4(sp)
1000c600:	dc000017 	ldw	r16,0(sp)
1000c604:	dec00504 	addi	sp,sp,20
1000c608:	000dd681 	jmpi	1000dd68 <_write_r>

1000c60c <__sseek>:
1000c60c:	defffe04 	addi	sp,sp,-8
1000c610:	dc000015 	stw	r16,0(sp)
1000c614:	2821883a 	mov	r16,r5
1000c618:	2940038f 	ldh	r5,14(r5)
1000c61c:	dfc00115 	stw	ra,4(sp)
1000c620:	000e2b40 	call	1000e2b4 <_lseek_r>
1000c624:	00ffffc4 	movi	r3,-1
1000c628:	10c00826 	beq	r2,r3,1000c64c <__sseek+0x40>
1000c62c:	80c0030b 	ldhu	r3,12(r16)
1000c630:	80801415 	stw	r2,80(r16)
1000c634:	18c40014 	ori	r3,r3,4096
1000c638:	80c0030d 	sth	r3,12(r16)
1000c63c:	dfc00117 	ldw	ra,4(sp)
1000c640:	dc000017 	ldw	r16,0(sp)
1000c644:	dec00204 	addi	sp,sp,8
1000c648:	f800283a 	ret
1000c64c:	80c0030b 	ldhu	r3,12(r16)
1000c650:	18fbffcc 	andi	r3,r3,61439
1000c654:	80c0030d 	sth	r3,12(r16)
1000c658:	dfc00117 	ldw	ra,4(sp)
1000c65c:	dc000017 	ldw	r16,0(sp)
1000c660:	dec00204 	addi	sp,sp,8
1000c664:	f800283a 	ret

1000c668 <__sclose>:
1000c668:	2940038f 	ldh	r5,14(r5)
1000c66c:	000ddc81 	jmpi	1000ddc8 <_close_r>

1000c670 <__sprint_r.part.0>:
1000c670:	28801917 	ldw	r2,100(r5)
1000c674:	defff604 	addi	sp,sp,-40
1000c678:	dd400515 	stw	r21,20(sp)
1000c67c:	dfc00915 	stw	ra,36(sp)
1000c680:	df000815 	stw	fp,32(sp)
1000c684:	ddc00715 	stw	r23,28(sp)
1000c688:	dd800615 	stw	r22,24(sp)
1000c68c:	dd000415 	stw	r20,16(sp)
1000c690:	dcc00315 	stw	r19,12(sp)
1000c694:	dc800215 	stw	r18,8(sp)
1000c698:	dc400115 	stw	r17,4(sp)
1000c69c:	dc000015 	stw	r16,0(sp)
1000c6a0:	1088000c 	andi	r2,r2,8192
1000c6a4:	302b883a 	mov	r21,r6
1000c6a8:	10002e26 	beq	r2,zero,1000c764 <__sprint_r.part.0+0xf4>
1000c6ac:	30800217 	ldw	r2,8(r6)
1000c6b0:	35800017 	ldw	r22,0(r6)
1000c6b4:	10002926 	beq	r2,zero,1000c75c <__sprint_r.part.0+0xec>
1000c6b8:	2827883a 	mov	r19,r5
1000c6bc:	2029883a 	mov	r20,r4
1000c6c0:	b5c00104 	addi	r23,r22,4
1000c6c4:	04bfffc4 	movi	r18,-1
1000c6c8:	bc400017 	ldw	r17,0(r23)
1000c6cc:	b4000017 	ldw	r16,0(r22)
1000c6d0:	0039883a 	mov	fp,zero
1000c6d4:	8822d0ba 	srli	r17,r17,2
1000c6d8:	8800031e 	bne	r17,zero,1000c6e8 <__sprint_r.part.0+0x78>
1000c6dc:	00001806 	br	1000c740 <__sprint_r.part.0+0xd0>
1000c6e0:	84000104 	addi	r16,r16,4
1000c6e4:	8f001526 	beq	r17,fp,1000c73c <__sprint_r.part.0+0xcc>
1000c6e8:	81400017 	ldw	r5,0(r16)
1000c6ec:	980d883a 	mov	r6,r19
1000c6f0:	a009883a 	mov	r4,r20
1000c6f4:	000e1600 	call	1000e160 <_fputwc_r>
1000c6f8:	e7000044 	addi	fp,fp,1
1000c6fc:	14bff81e 	bne	r2,r18,1000c6e0 <__alt_data_end+0xf800c6e0>
1000c700:	9005883a 	mov	r2,r18
1000c704:	a8000215 	stw	zero,8(r21)
1000c708:	a8000115 	stw	zero,4(r21)
1000c70c:	dfc00917 	ldw	ra,36(sp)
1000c710:	df000817 	ldw	fp,32(sp)
1000c714:	ddc00717 	ldw	r23,28(sp)
1000c718:	dd800617 	ldw	r22,24(sp)
1000c71c:	dd400517 	ldw	r21,20(sp)
1000c720:	dd000417 	ldw	r20,16(sp)
1000c724:	dcc00317 	ldw	r19,12(sp)
1000c728:	dc800217 	ldw	r18,8(sp)
1000c72c:	dc400117 	ldw	r17,4(sp)
1000c730:	dc000017 	ldw	r16,0(sp)
1000c734:	dec00a04 	addi	sp,sp,40
1000c738:	f800283a 	ret
1000c73c:	a8800217 	ldw	r2,8(r21)
1000c740:	8c63883a 	add	r17,r17,r17
1000c744:	8c63883a 	add	r17,r17,r17
1000c748:	1445c83a 	sub	r2,r2,r17
1000c74c:	a8800215 	stw	r2,8(r21)
1000c750:	b5800204 	addi	r22,r22,8
1000c754:	bdc00204 	addi	r23,r23,8
1000c758:	103fdb1e 	bne	r2,zero,1000c6c8 <__alt_data_end+0xf800c6c8>
1000c75c:	0005883a 	mov	r2,zero
1000c760:	003fe806 	br	1000c704 <__alt_data_end+0xf800c704>
1000c764:	000a2340 	call	1000a234 <__sfvwrite_r>
1000c768:	003fe606 	br	1000c704 <__alt_data_end+0xf800c704>

1000c76c <__sprint_r>:
1000c76c:	30c00217 	ldw	r3,8(r6)
1000c770:	18000126 	beq	r3,zero,1000c778 <__sprint_r+0xc>
1000c774:	000c6701 	jmpi	1000c670 <__sprint_r.part.0>
1000c778:	30000115 	stw	zero,4(r6)
1000c77c:	0005883a 	mov	r2,zero
1000c780:	f800283a 	ret

1000c784 <___vfiprintf_internal_r>:
1000c784:	deffca04 	addi	sp,sp,-216
1000c788:	dd403115 	stw	r21,196(sp)
1000c78c:	dfc03515 	stw	ra,212(sp)
1000c790:	df003415 	stw	fp,208(sp)
1000c794:	ddc03315 	stw	r23,204(sp)
1000c798:	dd803215 	stw	r22,200(sp)
1000c79c:	dd003015 	stw	r20,192(sp)
1000c7a0:	dcc02f15 	stw	r19,188(sp)
1000c7a4:	dc802e15 	stw	r18,184(sp)
1000c7a8:	dc402d15 	stw	r17,180(sp)
1000c7ac:	dc002c15 	stw	r16,176(sp)
1000c7b0:	d9002115 	stw	r4,132(sp)
1000c7b4:	d9402015 	stw	r5,128(sp)
1000c7b8:	d9c02215 	stw	r7,136(sp)
1000c7bc:	302b883a 	mov	r21,r6
1000c7c0:	20000226 	beq	r4,zero,1000c7cc <___vfiprintf_internal_r+0x48>
1000c7c4:	20800e17 	ldw	r2,56(r4)
1000c7c8:	1000cf26 	beq	r2,zero,1000cb08 <___vfiprintf_internal_r+0x384>
1000c7cc:	d8c02017 	ldw	r3,128(sp)
1000c7d0:	1880030b 	ldhu	r2,12(r3)
1000c7d4:	10c8000c 	andi	r3,r2,8192
1000c7d8:	1800071e 	bne	r3,zero,1000c7f8 <___vfiprintf_internal_r+0x74>
1000c7dc:	d9402017 	ldw	r5,128(sp)
1000c7e0:	00f7ffc4 	movi	r3,-8193
1000c7e4:	10880014 	ori	r2,r2,8192
1000c7e8:	29001917 	ldw	r4,100(r5)
1000c7ec:	2880030d 	sth	r2,12(r5)
1000c7f0:	20c6703a 	and	r3,r4,r3
1000c7f4:	28c01915 	stw	r3,100(r5)
1000c7f8:	10c0020c 	andi	r3,r2,8
1000c7fc:	1800a526 	beq	r3,zero,1000ca94 <___vfiprintf_internal_r+0x310>
1000c800:	d9002017 	ldw	r4,128(sp)
1000c804:	20c00417 	ldw	r3,16(r4)
1000c808:	1800a226 	beq	r3,zero,1000ca94 <___vfiprintf_internal_r+0x310>
1000c80c:	1080068c 	andi	r2,r2,26
1000c810:	00c00284 	movi	r3,10
1000c814:	10c0a826 	beq	r2,r3,1000cab8 <___vfiprintf_internal_r+0x334>
1000c818:	d9001a04 	addi	r4,sp,104
1000c81c:	d94019c4 	addi	r5,sp,103
1000c820:	04840074 	movhi	r18,4097
1000c824:	2145c83a 	sub	r2,r4,r5
1000c828:	94949804 	addi	r18,r18,21088
1000c82c:	d9001e15 	stw	r4,120(sp)
1000c830:	d9401f15 	stw	r5,124(sp)
1000c834:	dec01a15 	stw	sp,104(sp)
1000c838:	d8001c15 	stw	zero,112(sp)
1000c83c:	d8001b15 	stw	zero,108(sp)
1000c840:	d811883a 	mov	r8,sp
1000c844:	d8002615 	stw	zero,152(sp)
1000c848:	d8002415 	stw	zero,144(sp)
1000c84c:	d8802815 	stw	r2,160(sp)
1000c850:	a82d883a 	mov	r22,r21
1000c854:	b0800007 	ldb	r2,0(r22)
1000c858:	10040d26 	beq	r2,zero,1000d890 <___vfiprintf_internal_r+0x110c>
1000c85c:	00c00944 	movi	r3,37
1000c860:	b029883a 	mov	r20,r22
1000c864:	10c0021e 	bne	r2,r3,1000c870 <___vfiprintf_internal_r+0xec>
1000c868:	00001606 	br	1000c8c4 <___vfiprintf_internal_r+0x140>
1000c86c:	10c00326 	beq	r2,r3,1000c87c <___vfiprintf_internal_r+0xf8>
1000c870:	a5000044 	addi	r20,r20,1
1000c874:	a0800007 	ldb	r2,0(r20)
1000c878:	103ffc1e 	bne	r2,zero,1000c86c <__alt_data_end+0xf800c86c>
1000c87c:	a5a1c83a 	sub	r16,r20,r22
1000c880:	80001026 	beq	r16,zero,1000c8c4 <___vfiprintf_internal_r+0x140>
1000c884:	d8c01c17 	ldw	r3,112(sp)
1000c888:	d8801b17 	ldw	r2,108(sp)
1000c88c:	45800015 	stw	r22,0(r8)
1000c890:	80c7883a 	add	r3,r16,r3
1000c894:	10800044 	addi	r2,r2,1
1000c898:	44000115 	stw	r16,4(r8)
1000c89c:	d8c01c15 	stw	r3,112(sp)
1000c8a0:	d8801b15 	stw	r2,108(sp)
1000c8a4:	010001c4 	movi	r4,7
1000c8a8:	2080750e 	bge	r4,r2,1000ca80 <___vfiprintf_internal_r+0x2fc>
1000c8ac:	1803951e 	bne	r3,zero,1000d704 <___vfiprintf_internal_r+0xf80>
1000c8b0:	d8c02417 	ldw	r3,144(sp)
1000c8b4:	d8001b15 	stw	zero,108(sp)
1000c8b8:	d811883a 	mov	r8,sp
1000c8bc:	1c07883a 	add	r3,r3,r16
1000c8c0:	d8c02415 	stw	r3,144(sp)
1000c8c4:	a0800007 	ldb	r2,0(r20)
1000c8c8:	1002e026 	beq	r2,zero,1000d44c <___vfiprintf_internal_r+0xcc8>
1000c8cc:	a5800044 	addi	r22,r20,1
1000c8d0:	a0c00047 	ldb	r3,1(r20)
1000c8d4:	d8001d85 	stb	zero,118(sp)
1000c8d8:	0027883a 	mov	r19,zero
1000c8dc:	d8002305 	stb	zero,140(sp)
1000c8e0:	043fffc4 	movi	r16,-1
1000c8e4:	d8002515 	stw	zero,148(sp)
1000c8e8:	0023883a 	mov	r17,zero
1000c8ec:	05001604 	movi	r20,88
1000c8f0:	05400244 	movi	r21,9
1000c8f4:	402f883a 	mov	r23,r8
1000c8f8:	b5800044 	addi	r22,r22,1
1000c8fc:	18bff804 	addi	r2,r3,-32
1000c900:	a0827736 	bltu	r20,r2,1000d2e0 <___vfiprintf_internal_r+0xb5c>
1000c904:	100490ba 	slli	r2,r2,2
1000c908:	01040074 	movhi	r4,4097
1000c90c:	21324704 	addi	r4,r4,-14052
1000c910:	1105883a 	add	r2,r2,r4
1000c914:	10800017 	ldw	r2,0(r2)
1000c918:	1000683a 	jmp	r2
1000c91c:	1000cfe0 	cmpeqi	zero,r2,831
1000c920:	1000d2e0 	cmpeqi	zero,r2,843
1000c924:	1000d2e0 	cmpeqi	zero,r2,843
1000c928:	1000cffc 	xorhi	zero,r2,831
1000c92c:	1000d2e0 	cmpeqi	zero,r2,843
1000c930:	1000d2e0 	cmpeqi	zero,r2,843
1000c934:	1000d2e0 	cmpeqi	zero,r2,843
1000c938:	1000d2e0 	cmpeqi	zero,r2,843
1000c93c:	1000d2e0 	cmpeqi	zero,r2,843
1000c940:	1000d2e0 	cmpeqi	zero,r2,843
1000c944:	1000d204 	addi	zero,r2,840
1000c948:	1000d228 	cmpgeui	zero,r2,840
1000c94c:	1000d2e0 	cmpeqi	zero,r2,843
1000c950:	1000cb20 	cmpeqi	zero,r2,812
1000c954:	1000d23c 	xorhi	zero,r2,840
1000c958:	1000d2e0 	cmpeqi	zero,r2,843
1000c95c:	1000d008 	cmpgei	zero,r2,832
1000c960:	1000d014 	ori	zero,r2,832
1000c964:	1000d014 	ori	zero,r2,832
1000c968:	1000d014 	ori	zero,r2,832
1000c96c:	1000d014 	ori	zero,r2,832
1000c970:	1000d014 	ori	zero,r2,832
1000c974:	1000d014 	ori	zero,r2,832
1000c978:	1000d014 	ori	zero,r2,832
1000c97c:	1000d014 	ori	zero,r2,832
1000c980:	1000d014 	ori	zero,r2,832
1000c984:	1000d2e0 	cmpeqi	zero,r2,843
1000c988:	1000d2e0 	cmpeqi	zero,r2,843
1000c98c:	1000d2e0 	cmpeqi	zero,r2,843
1000c990:	1000d2e0 	cmpeqi	zero,r2,843
1000c994:	1000d2e0 	cmpeqi	zero,r2,843
1000c998:	1000d2e0 	cmpeqi	zero,r2,843
1000c99c:	1000d2e0 	cmpeqi	zero,r2,843
1000c9a0:	1000d2e0 	cmpeqi	zero,r2,843
1000c9a4:	1000d2e0 	cmpeqi	zero,r2,843
1000c9a8:	1000d2e0 	cmpeqi	zero,r2,843
1000c9ac:	1000d054 	ori	zero,r2,833
1000c9b0:	1000d2e0 	cmpeqi	zero,r2,843
1000c9b4:	1000d2e0 	cmpeqi	zero,r2,843
1000c9b8:	1000d2e0 	cmpeqi	zero,r2,843
1000c9bc:	1000d2e0 	cmpeqi	zero,r2,843
1000c9c0:	1000d2e0 	cmpeqi	zero,r2,843
1000c9c4:	1000d2e0 	cmpeqi	zero,r2,843
1000c9c8:	1000d2e0 	cmpeqi	zero,r2,843
1000c9cc:	1000d2e0 	cmpeqi	zero,r2,843
1000c9d0:	1000d2e0 	cmpeqi	zero,r2,843
1000c9d4:	1000d2e0 	cmpeqi	zero,r2,843
1000c9d8:	1000d090 	cmplti	zero,r2,834
1000c9dc:	1000d2e0 	cmpeqi	zero,r2,843
1000c9e0:	1000d2e0 	cmpeqi	zero,r2,843
1000c9e4:	1000d2e0 	cmpeqi	zero,r2,843
1000c9e8:	1000d2e0 	cmpeqi	zero,r2,843
1000c9ec:	1000d2e0 	cmpeqi	zero,r2,843
1000c9f0:	1000d0ec 	andhi	zero,r2,835
1000c9f4:	1000d2e0 	cmpeqi	zero,r2,843
1000c9f8:	1000d2e0 	cmpeqi	zero,r2,843
1000c9fc:	1000d160 	cmpeqi	zero,r2,837
1000ca00:	1000d2e0 	cmpeqi	zero,r2,843
1000ca04:	1000d2e0 	cmpeqi	zero,r2,843
1000ca08:	1000d2e0 	cmpeqi	zero,r2,843
1000ca0c:	1000d2e0 	cmpeqi	zero,r2,843
1000ca10:	1000d2e0 	cmpeqi	zero,r2,843
1000ca14:	1000d2e0 	cmpeqi	zero,r2,843
1000ca18:	1000d2e0 	cmpeqi	zero,r2,843
1000ca1c:	1000d2e0 	cmpeqi	zero,r2,843
1000ca20:	1000d2e0 	cmpeqi	zero,r2,843
1000ca24:	1000d2e0 	cmpeqi	zero,r2,843
1000ca28:	1000cf08 	cmpgei	zero,r2,828
1000ca2c:	1000cf38 	rdprs	zero,r2,828
1000ca30:	1000d2e0 	cmpeqi	zero,r2,843
1000ca34:	1000d2e0 	cmpeqi	zero,r2,843
1000ca38:	1000d2e0 	cmpeqi	zero,r2,843
1000ca3c:	1000d288 	cmpgei	zero,r2,842
1000ca40:	1000cf38 	rdprs	zero,r2,828
1000ca44:	1000d2e0 	cmpeqi	zero,r2,843
1000ca48:	1000d2e0 	cmpeqi	zero,r2,843
1000ca4c:	1000cde0 	cmpeqi	zero,r2,823
1000ca50:	1000d2e0 	cmpeqi	zero,r2,843
1000ca54:	1000cdf4 	orhi	zero,r2,823
1000ca58:	1000ce2c 	andhi	zero,r2,824
1000ca5c:	1000cb2c 	andhi	zero,r2,812
1000ca60:	1000cdd4 	ori	zero,r2,823
1000ca64:	1000d2e0 	cmpeqi	zero,r2,843
1000ca68:	1000d1a0 	cmpeqi	zero,r2,838
1000ca6c:	1000d2e0 	cmpeqi	zero,r2,843
1000ca70:	1000d1ec 	andhi	zero,r2,839
1000ca74:	1000d2e0 	cmpeqi	zero,r2,843
1000ca78:	1000d2e0 	cmpeqi	zero,r2,843
1000ca7c:	1000ceb0 	cmpltui	zero,r2,826
1000ca80:	42000204 	addi	r8,r8,8
1000ca84:	d8c02417 	ldw	r3,144(sp)
1000ca88:	1c07883a 	add	r3,r3,r16
1000ca8c:	d8c02415 	stw	r3,144(sp)
1000ca90:	003f8c06 	br	1000c8c4 <__alt_data_end+0xf800c8c4>
1000ca94:	d9402017 	ldw	r5,128(sp)
1000ca98:	d9002117 	ldw	r4,132(sp)
1000ca9c:	0007da40 	call	10007da4 <__swsetup_r>
1000caa0:	1003c11e 	bne	r2,zero,1000d9a8 <___vfiprintf_internal_r+0x1224>
1000caa4:	d9402017 	ldw	r5,128(sp)
1000caa8:	00c00284 	movi	r3,10
1000caac:	2880030b 	ldhu	r2,12(r5)
1000cab0:	1080068c 	andi	r2,r2,26
1000cab4:	10ff581e 	bne	r2,r3,1000c818 <__alt_data_end+0xf800c818>
1000cab8:	d8c02017 	ldw	r3,128(sp)
1000cabc:	1880038f 	ldh	r2,14(r3)
1000cac0:	103f5516 	blt	r2,zero,1000c818 <__alt_data_end+0xf800c818>
1000cac4:	d9c02217 	ldw	r7,136(sp)
1000cac8:	d9002117 	ldw	r4,132(sp)
1000cacc:	a80d883a 	mov	r6,r21
1000cad0:	180b883a 	mov	r5,r3
1000cad4:	000dcac0 	call	1000dcac <__sbprintf>
1000cad8:	dfc03517 	ldw	ra,212(sp)
1000cadc:	df003417 	ldw	fp,208(sp)
1000cae0:	ddc03317 	ldw	r23,204(sp)
1000cae4:	dd803217 	ldw	r22,200(sp)
1000cae8:	dd403117 	ldw	r21,196(sp)
1000caec:	dd003017 	ldw	r20,192(sp)
1000caf0:	dcc02f17 	ldw	r19,188(sp)
1000caf4:	dc802e17 	ldw	r18,184(sp)
1000caf8:	dc402d17 	ldw	r17,180(sp)
1000cafc:	dc002c17 	ldw	r16,176(sp)
1000cb00:	dec03604 	addi	sp,sp,216
1000cb04:	f800283a 	ret
1000cb08:	0009db00 	call	10009db0 <__sinit>
1000cb0c:	003f2f06 	br	1000c7cc <__alt_data_end+0xf800c7cc>
1000cb10:	d8c02517 	ldw	r3,148(sp)
1000cb14:	d8802215 	stw	r2,136(sp)
1000cb18:	00c7c83a 	sub	r3,zero,r3
1000cb1c:	d8c02515 	stw	r3,148(sp)
1000cb20:	8c400114 	ori	r17,r17,4
1000cb24:	b0c00007 	ldb	r3,0(r22)
1000cb28:	003f7306 	br	1000c8f8 <__alt_data_end+0xf800c8f8>
1000cb2c:	00800c04 	movi	r2,48
1000cb30:	d9402217 	ldw	r5,136(sp)
1000cb34:	d8801d05 	stb	r2,116(sp)
1000cb38:	00801e04 	movi	r2,120
1000cb3c:	d8801d45 	stb	r2,117(sp)
1000cb40:	d8001d85 	stb	zero,118(sp)
1000cb44:	b811883a 	mov	r8,r23
1000cb48:	28c00104 	addi	r3,r5,4
1000cb4c:	2cc00017 	ldw	r19,0(r5)
1000cb50:	0029883a 	mov	r20,zero
1000cb54:	88800094 	ori	r2,r17,2
1000cb58:	80032516 	blt	r16,zero,1000d7f0 <___vfiprintf_internal_r+0x106c>
1000cb5c:	00bfdfc4 	movi	r2,-129
1000cb60:	88a2703a 	and	r17,r17,r2
1000cb64:	d8c02215 	stw	r3,136(sp)
1000cb68:	8c400094 	ori	r17,r17,2
1000cb6c:	98032a1e 	bne	r19,zero,1000d818 <___vfiprintf_internal_r+0x1094>
1000cb70:	00840074 	movhi	r2,4097
1000cb74:	10943704 	addi	r2,r2,20700
1000cb78:	d8802615 	stw	r2,152(sp)
1000cb7c:	002b883a 	mov	r21,zero
1000cb80:	8001741e 	bne	r16,zero,1000d154 <___vfiprintf_internal_r+0x9d0>
1000cb84:	0021883a 	mov	r16,zero
1000cb88:	0029883a 	mov	r20,zero
1000cb8c:	ddc01a04 	addi	r23,sp,104
1000cb90:	8027883a 	mov	r19,r16
1000cb94:	8500010e 	bge	r16,r20,1000cb9c <___vfiprintf_internal_r+0x418>
1000cb98:	a027883a 	mov	r19,r20
1000cb9c:	ad403fcc 	andi	r21,r21,255
1000cba0:	ad40201c 	xori	r21,r21,128
1000cba4:	ad7fe004 	addi	r21,r21,-128
1000cba8:	a8000126 	beq	r21,zero,1000cbb0 <___vfiprintf_internal_r+0x42c>
1000cbac:	9cc00044 	addi	r19,r19,1
1000cbb0:	89c0008c 	andi	r7,r17,2
1000cbb4:	38000126 	beq	r7,zero,1000cbbc <___vfiprintf_internal_r+0x438>
1000cbb8:	9cc00084 	addi	r19,r19,2
1000cbbc:	88c0210c 	andi	r3,r17,132
1000cbc0:	1801dd1e 	bne	r3,zero,1000d338 <___vfiprintf_internal_r+0xbb4>
1000cbc4:	d9402517 	ldw	r5,148(sp)
1000cbc8:	2cebc83a 	sub	r21,r5,r19
1000cbcc:	0541da0e 	bge	zero,r21,1000d338 <___vfiprintf_internal_r+0xbb4>
1000cbd0:	07000404 	movi	fp,16
1000cbd4:	d8801c17 	ldw	r2,112(sp)
1000cbd8:	e543be0e 	bge	fp,r21,1000dad4 <___vfiprintf_internal_r+0x1350>
1000cbdc:	01440074 	movhi	r5,4097
1000cbe0:	29549c04 	addi	r5,r5,21104
1000cbe4:	dc002715 	stw	r16,156(sp)
1000cbe8:	d9801b17 	ldw	r6,108(sp)
1000cbec:	a821883a 	mov	r16,r21
1000cbf0:	d9402315 	stw	r5,140(sp)
1000cbf4:	028001c4 	movi	r10,7
1000cbf8:	d9c02915 	stw	r7,164(sp)
1000cbfc:	182b883a 	mov	r21,r3
1000cc00:	00000506 	br	1000cc18 <___vfiprintf_internal_r+0x494>
1000cc04:	31000084 	addi	r4,r6,2
1000cc08:	42000204 	addi	r8,r8,8
1000cc0c:	180d883a 	mov	r6,r3
1000cc10:	843ffc04 	addi	r16,r16,-16
1000cc14:	e4000f0e 	bge	fp,r16,1000cc54 <___vfiprintf_internal_r+0x4d0>
1000cc18:	01040074 	movhi	r4,4097
1000cc1c:	10800404 	addi	r2,r2,16
1000cc20:	30c00044 	addi	r3,r6,1
1000cc24:	21149c04 	addi	r4,r4,21104
1000cc28:	41000015 	stw	r4,0(r8)
1000cc2c:	47000115 	stw	fp,4(r8)
1000cc30:	d8801c15 	stw	r2,112(sp)
1000cc34:	d8c01b15 	stw	r3,108(sp)
1000cc38:	50fff20e 	bge	r10,r3,1000cc04 <__alt_data_end+0xf800cc04>
1000cc3c:	1001b21e 	bne	r2,zero,1000d308 <___vfiprintf_internal_r+0xb84>
1000cc40:	843ffc04 	addi	r16,r16,-16
1000cc44:	000d883a 	mov	r6,zero
1000cc48:	01000044 	movi	r4,1
1000cc4c:	d811883a 	mov	r8,sp
1000cc50:	e43ff116 	blt	fp,r16,1000cc18 <__alt_data_end+0xf800cc18>
1000cc54:	a807883a 	mov	r3,r21
1000cc58:	d9c02917 	ldw	r7,164(sp)
1000cc5c:	802b883a 	mov	r21,r16
1000cc60:	dc002717 	ldw	r16,156(sp)
1000cc64:	d9402317 	ldw	r5,140(sp)
1000cc68:	a885883a 	add	r2,r21,r2
1000cc6c:	45400115 	stw	r21,4(r8)
1000cc70:	41400015 	stw	r5,0(r8)
1000cc74:	d8801c15 	stw	r2,112(sp)
1000cc78:	d9001b15 	stw	r4,108(sp)
1000cc7c:	014001c4 	movi	r5,7
1000cc80:	29026216 	blt	r5,r4,1000d60c <___vfiprintf_internal_r+0xe88>
1000cc84:	d9801d87 	ldb	r6,118(sp)
1000cc88:	42000204 	addi	r8,r8,8
1000cc8c:	21400044 	addi	r5,r4,1
1000cc90:	3001ae1e 	bne	r6,zero,1000d34c <___vfiprintf_internal_r+0xbc8>
1000cc94:	3801bb26 	beq	r7,zero,1000d384 <___vfiprintf_internal_r+0xc00>
1000cc98:	d9001d04 	addi	r4,sp,116
1000cc9c:	10800084 	addi	r2,r2,2
1000cca0:	41000015 	stw	r4,0(r8)
1000cca4:	01000084 	movi	r4,2
1000cca8:	41000115 	stw	r4,4(r8)
1000ccac:	d8801c15 	stw	r2,112(sp)
1000ccb0:	d9401b15 	stw	r5,108(sp)
1000ccb4:	010001c4 	movi	r4,7
1000ccb8:	2142680e 	bge	r4,r5,1000d65c <___vfiprintf_internal_r+0xed8>
1000ccbc:	1002b11e 	bne	r2,zero,1000d784 <___vfiprintf_internal_r+0x1000>
1000ccc0:	01802004 	movi	r6,128
1000ccc4:	01400044 	movi	r5,1
1000ccc8:	0009883a 	mov	r4,zero
1000cccc:	d811883a 	mov	r8,sp
1000ccd0:	1981ae1e 	bne	r3,r6,1000d38c <___vfiprintf_internal_r+0xc08>
1000ccd4:	d8c02517 	ldw	r3,148(sp)
1000ccd8:	1cf9c83a 	sub	fp,r3,r19
1000ccdc:	0701ab0e 	bge	zero,fp,1000d38c <___vfiprintf_internal_r+0xc08>
1000cce0:	05400404 	movi	r21,16
1000cce4:	af03a90e 	bge	r21,fp,1000db8c <___vfiprintf_internal_r+0x1408>
1000cce8:	01440074 	movhi	r5,4097
1000ccec:	29549804 	addi	r5,r5,21088
1000ccf0:	d9402315 	stw	r5,140(sp)
1000ccf4:	01c001c4 	movi	r7,7
1000ccf8:	00000506 	br	1000cd10 <___vfiprintf_internal_r+0x58c>
1000ccfc:	21800084 	addi	r6,r4,2
1000cd00:	42000204 	addi	r8,r8,8
1000cd04:	1809883a 	mov	r4,r3
1000cd08:	e73ffc04 	addi	fp,fp,-16
1000cd0c:	af000d0e 	bge	r21,fp,1000cd44 <___vfiprintf_internal_r+0x5c0>
1000cd10:	10800404 	addi	r2,r2,16
1000cd14:	20c00044 	addi	r3,r4,1
1000cd18:	44800015 	stw	r18,0(r8)
1000cd1c:	45400115 	stw	r21,4(r8)
1000cd20:	d8801c15 	stw	r2,112(sp)
1000cd24:	d8c01b15 	stw	r3,108(sp)
1000cd28:	38fff40e 	bge	r7,r3,1000ccfc <__alt_data_end+0xf800ccfc>
1000cd2c:	10022b1e 	bne	r2,zero,1000d5dc <___vfiprintf_internal_r+0xe58>
1000cd30:	e73ffc04 	addi	fp,fp,-16
1000cd34:	01800044 	movi	r6,1
1000cd38:	0009883a 	mov	r4,zero
1000cd3c:	d811883a 	mov	r8,sp
1000cd40:	af3ff316 	blt	r21,fp,1000cd10 <__alt_data_end+0xf800cd10>
1000cd44:	d8c02317 	ldw	r3,140(sp)
1000cd48:	1705883a 	add	r2,r2,fp
1000cd4c:	47000115 	stw	fp,4(r8)
1000cd50:	40c00015 	stw	r3,0(r8)
1000cd54:	d8801c15 	stw	r2,112(sp)
1000cd58:	d9801b15 	stw	r6,108(sp)
1000cd5c:	00c001c4 	movi	r3,7
1000cd60:	19829416 	blt	r3,r6,1000d7b4 <___vfiprintf_internal_r+0x1030>
1000cd64:	8521c83a 	sub	r16,r16,r20
1000cd68:	42000204 	addi	r8,r8,8
1000cd6c:	31400044 	addi	r5,r6,1
1000cd70:	3009883a 	mov	r4,r6
1000cd74:	04018716 	blt	zero,r16,1000d394 <___vfiprintf_internal_r+0xc10>
1000cd78:	a085883a 	add	r2,r20,r2
1000cd7c:	45c00015 	stw	r23,0(r8)
1000cd80:	45000115 	stw	r20,4(r8)
1000cd84:	d8801c15 	stw	r2,112(sp)
1000cd88:	d9401b15 	stw	r5,108(sp)
1000cd8c:	00c001c4 	movi	r3,7
1000cd90:	1941c20e 	bge	r3,r5,1000d49c <___vfiprintf_internal_r+0xd18>
1000cd94:	1002531e 	bne	r2,zero,1000d6e4 <___vfiprintf_internal_r+0xf60>
1000cd98:	d8001b15 	stw	zero,108(sp)
1000cd9c:	8c40010c 	andi	r17,r17,4
1000cda0:	88023226 	beq	r17,zero,1000d66c <___vfiprintf_internal_r+0xee8>
1000cda4:	d9002517 	ldw	r4,148(sp)
1000cda8:	24e3c83a 	sub	r17,r4,r19
1000cdac:	04432916 	blt	zero,r17,1000da54 <___vfiprintf_internal_r+0x12d0>
1000cdb0:	d8802517 	ldw	r2,148(sp)
1000cdb4:	14c0010e 	bge	r2,r19,1000cdbc <___vfiprintf_internal_r+0x638>
1000cdb8:	9805883a 	mov	r2,r19
1000cdbc:	d8c02417 	ldw	r3,144(sp)
1000cdc0:	1887883a 	add	r3,r3,r2
1000cdc4:	d8c02415 	stw	r3,144(sp)
1000cdc8:	d8001b15 	stw	zero,108(sp)
1000cdcc:	d811883a 	mov	r8,sp
1000cdd0:	003ea006 	br	1000c854 <__alt_data_end+0xf800c854>
1000cdd4:	8c400814 	ori	r17,r17,32
1000cdd8:	b0c00007 	ldb	r3,0(r22)
1000cddc:	003ec606 	br	1000c8f8 <__alt_data_end+0xf800c8f8>
1000cde0:	b0c00007 	ldb	r3,0(r22)
1000cde4:	00801b04 	movi	r2,108
1000cde8:	18832026 	beq	r3,r2,1000da6c <___vfiprintf_internal_r+0x12e8>
1000cdec:	8c400414 	ori	r17,r17,16
1000cdf0:	003ec106 	br	1000c8f8 <__alt_data_end+0xf800c8f8>
1000cdf4:	9cc03fcc 	andi	r19,r19,255
1000cdf8:	b811883a 	mov	r8,r23
1000cdfc:	9803981e 	bne	r19,zero,1000dc60 <___vfiprintf_internal_r+0x14dc>
1000ce00:	8880080c 	andi	r2,r17,32
1000ce04:	1002be26 	beq	r2,zero,1000d900 <___vfiprintf_internal_r+0x117c>
1000ce08:	d9002217 	ldw	r4,136(sp)
1000ce0c:	d9402417 	ldw	r5,144(sp)
1000ce10:	20800017 	ldw	r2,0(r4)
1000ce14:	2807d7fa 	srai	r3,r5,31
1000ce18:	21000104 	addi	r4,r4,4
1000ce1c:	d9002215 	stw	r4,136(sp)
1000ce20:	11400015 	stw	r5,0(r2)
1000ce24:	10c00115 	stw	r3,4(r2)
1000ce28:	003e8a06 	br	1000c854 <__alt_data_end+0xf800c854>
1000ce2c:	9cc03fcc 	andi	r19,r19,255
1000ce30:	b811883a 	mov	r8,r23
1000ce34:	9803871e 	bne	r19,zero,1000dc54 <___vfiprintf_internal_r+0x14d0>
1000ce38:	8880080c 	andi	r2,r17,32
1000ce3c:	10009a26 	beq	r2,zero,1000d0a8 <___vfiprintf_internal_r+0x924>
1000ce40:	d9002217 	ldw	r4,136(sp)
1000ce44:	d8001d85 	stb	zero,118(sp)
1000ce48:	20800204 	addi	r2,r4,8
1000ce4c:	24c00017 	ldw	r19,0(r4)
1000ce50:	25000117 	ldw	r20,4(r4)
1000ce54:	8002a416 	blt	r16,zero,1000d8e8 <___vfiprintf_internal_r+0x1164>
1000ce58:	013fdfc4 	movi	r4,-129
1000ce5c:	9d06b03a 	or	r3,r19,r20
1000ce60:	d8802215 	stw	r2,136(sp)
1000ce64:	8922703a 	and	r17,r17,r4
1000ce68:	18009b26 	beq	r3,zero,1000d0d8 <___vfiprintf_internal_r+0x954>
1000ce6c:	002b883a 	mov	r21,zero
1000ce70:	ddc01a04 	addi	r23,sp,104
1000ce74:	9806d0fa 	srli	r3,r19,3
1000ce78:	a008977a 	slli	r4,r20,29
1000ce7c:	a028d0fa 	srli	r20,r20,3
1000ce80:	9cc001cc 	andi	r19,r19,7
1000ce84:	98800c04 	addi	r2,r19,48
1000ce88:	bdffffc4 	addi	r23,r23,-1
1000ce8c:	20e6b03a 	or	r19,r4,r3
1000ce90:	b8800005 	stb	r2,0(r23)
1000ce94:	9d06b03a 	or	r3,r19,r20
1000ce98:	183ff61e 	bne	r3,zero,1000ce74 <__alt_data_end+0xf800ce74>
1000ce9c:	88c0004c 	andi	r3,r17,1
1000cea0:	18021f1e 	bne	r3,zero,1000d720 <___vfiprintf_internal_r+0xf9c>
1000cea4:	d9401e17 	ldw	r5,120(sp)
1000cea8:	2de9c83a 	sub	r20,r5,r23
1000ceac:	003f3806 	br	1000cb90 <__alt_data_end+0xf800cb90>
1000ceb0:	9cc03fcc 	andi	r19,r19,255
1000ceb4:	b811883a 	mov	r8,r23
1000ceb8:	98034f1e 	bne	r19,zero,1000dbf8 <___vfiprintf_internal_r+0x1474>
1000cebc:	00840074 	movhi	r2,4097
1000cec0:	10943704 	addi	r2,r2,20700
1000cec4:	d8802615 	stw	r2,152(sp)
1000cec8:	8880080c 	andi	r2,r17,32
1000cecc:	1000ac26 	beq	r2,zero,1000d180 <___vfiprintf_internal_r+0x9fc>
1000ced0:	d9002217 	ldw	r4,136(sp)
1000ced4:	24c00017 	ldw	r19,0(r4)
1000ced8:	25000117 	ldw	r20,4(r4)
1000cedc:	21000204 	addi	r4,r4,8
1000cee0:	d9002215 	stw	r4,136(sp)
1000cee4:	8880004c 	andi	r2,r17,1
1000cee8:	1001e726 	beq	r2,zero,1000d688 <___vfiprintf_internal_r+0xf04>
1000ceec:	9d04b03a 	or	r2,r19,r20
1000cef0:	10025c1e 	bne	r2,zero,1000d864 <___vfiprintf_internal_r+0x10e0>
1000cef4:	d8001d85 	stb	zero,118(sp)
1000cef8:	80024416 	blt	r16,zero,1000d80c <___vfiprintf_internal_r+0x1088>
1000cefc:	00bfdfc4 	movi	r2,-129
1000cf00:	88a2703a 	and	r17,r17,r2
1000cf04:	003f1d06 	br	1000cb7c <__alt_data_end+0xf800cb7c>
1000cf08:	d8c02217 	ldw	r3,136(sp)
1000cf0c:	04c00044 	movi	r19,1
1000cf10:	b811883a 	mov	r8,r23
1000cf14:	18800017 	ldw	r2,0(r3)
1000cf18:	18c00104 	addi	r3,r3,4
1000cf1c:	d8001d85 	stb	zero,118(sp)
1000cf20:	d8801005 	stb	r2,64(sp)
1000cf24:	d8c02215 	stw	r3,136(sp)
1000cf28:	9829883a 	mov	r20,r19
1000cf2c:	ddc01004 	addi	r23,sp,64
1000cf30:	0021883a 	mov	r16,zero
1000cf34:	003f1e06 	br	1000cbb0 <__alt_data_end+0xf800cbb0>
1000cf38:	9cc03fcc 	andi	r19,r19,255
1000cf3c:	b811883a 	mov	r8,r23
1000cf40:	9803331e 	bne	r19,zero,1000dc10 <___vfiprintf_internal_r+0x148c>
1000cf44:	8880080c 	andi	r2,r17,32
1000cf48:	10004826 	beq	r2,zero,1000d06c <___vfiprintf_internal_r+0x8e8>
1000cf4c:	d9002217 	ldw	r4,136(sp)
1000cf50:	20800117 	ldw	r2,4(r4)
1000cf54:	24c00017 	ldw	r19,0(r4)
1000cf58:	21000204 	addi	r4,r4,8
1000cf5c:	d9002215 	stw	r4,136(sp)
1000cf60:	1029883a 	mov	r20,r2
1000cf64:	10024c16 	blt	r2,zero,1000d898 <___vfiprintf_internal_r+0x1114>
1000cf68:	dd401d83 	ldbu	r21,118(sp)
1000cf6c:	80007116 	blt	r16,zero,1000d134 <___vfiprintf_internal_r+0x9b0>
1000cf70:	00ffdfc4 	movi	r3,-129
1000cf74:	9d04b03a 	or	r2,r19,r20
1000cf78:	88e2703a 	and	r17,r17,r3
1000cf7c:	1000d126 	beq	r2,zero,1000d2c4 <___vfiprintf_internal_r+0xb40>
1000cf80:	a0023526 	beq	r20,zero,1000d858 <___vfiprintf_internal_r+0x10d4>
1000cf84:	ddc01a04 	addi	r23,sp,104
1000cf88:	4039883a 	mov	fp,r8
1000cf8c:	9809883a 	mov	r4,r19
1000cf90:	a00b883a 	mov	r5,r20
1000cf94:	01800284 	movi	r6,10
1000cf98:	000f883a 	mov	r7,zero
1000cf9c:	000ecb00 	call	1000ecb0 <__umoddi3>
1000cfa0:	10800c04 	addi	r2,r2,48
1000cfa4:	bdffffc4 	addi	r23,r23,-1
1000cfa8:	9809883a 	mov	r4,r19
1000cfac:	a00b883a 	mov	r5,r20
1000cfb0:	b8800005 	stb	r2,0(r23)
1000cfb4:	01800284 	movi	r6,10
1000cfb8:	000f883a 	mov	r7,zero
1000cfbc:	000e6b40 	call	1000e6b4 <__udivdi3>
1000cfc0:	1027883a 	mov	r19,r2
1000cfc4:	10c4b03a 	or	r2,r2,r3
1000cfc8:	1829883a 	mov	r20,r3
1000cfcc:	103fef1e 	bne	r2,zero,1000cf8c <__alt_data_end+0xf800cf8c>
1000cfd0:	d9001e17 	ldw	r4,120(sp)
1000cfd4:	e011883a 	mov	r8,fp
1000cfd8:	25e9c83a 	sub	r20,r4,r23
1000cfdc:	003eec06 	br	1000cb90 <__alt_data_end+0xf800cb90>
1000cfe0:	d8802307 	ldb	r2,140(sp)
1000cfe4:	1002361e 	bne	r2,zero,1000d8c0 <___vfiprintf_internal_r+0x113c>
1000cfe8:	00c00804 	movi	r3,32
1000cfec:	d8c02305 	stb	r3,140(sp)
1000cff0:	04c00044 	movi	r19,1
1000cff4:	b0c00007 	ldb	r3,0(r22)
1000cff8:	003e3f06 	br	1000c8f8 <__alt_data_end+0xf800c8f8>
1000cffc:	8c400054 	ori	r17,r17,1
1000d000:	b0c00007 	ldb	r3,0(r22)
1000d004:	003e3c06 	br	1000c8f8 <__alt_data_end+0xf800c8f8>
1000d008:	8c402014 	ori	r17,r17,128
1000d00c:	b0c00007 	ldb	r3,0(r22)
1000d010:	003e3906 	br	1000c8f8 <__alt_data_end+0xf800c8f8>
1000d014:	dc002715 	stw	r16,156(sp)
1000d018:	d8002515 	stw	zero,148(sp)
1000d01c:	1f3ff404 	addi	fp,r3,-48
1000d020:	0009883a 	mov	r4,zero
1000d024:	b021883a 	mov	r16,r22
1000d028:	01400284 	movi	r5,10
1000d02c:	00045280 	call	10004528 <__mulsi3>
1000d030:	80c00007 	ldb	r3,0(r16)
1000d034:	e089883a 	add	r4,fp,r2
1000d038:	b5800044 	addi	r22,r22,1
1000d03c:	1f3ff404 	addi	fp,r3,-48
1000d040:	b021883a 	mov	r16,r22
1000d044:	af3ff82e 	bgeu	r21,fp,1000d028 <__alt_data_end+0xf800d028>
1000d048:	d9002515 	stw	r4,148(sp)
1000d04c:	dc002717 	ldw	r16,156(sp)
1000d050:	003e2a06 	br	1000c8fc <__alt_data_end+0xf800c8fc>
1000d054:	9cc03fcc 	andi	r19,r19,255
1000d058:	b811883a 	mov	r8,r23
1000d05c:	9802e91e 	bne	r19,zero,1000dc04 <___vfiprintf_internal_r+0x1480>
1000d060:	8c400414 	ori	r17,r17,16
1000d064:	8880080c 	andi	r2,r17,32
1000d068:	103fb81e 	bne	r2,zero,1000cf4c <__alt_data_end+0xf800cf4c>
1000d06c:	8880040c 	andi	r2,r17,16
1000d070:	10022e26 	beq	r2,zero,1000d92c <___vfiprintf_internal_r+0x11a8>
1000d074:	d9402217 	ldw	r5,136(sp)
1000d078:	2cc00017 	ldw	r19,0(r5)
1000d07c:	29400104 	addi	r5,r5,4
1000d080:	d9402215 	stw	r5,136(sp)
1000d084:	9829d7fa 	srai	r20,r19,31
1000d088:	a005883a 	mov	r2,r20
1000d08c:	003fb506 	br	1000cf64 <__alt_data_end+0xf800cf64>
1000d090:	9cc03fcc 	andi	r19,r19,255
1000d094:	b811883a 	mov	r8,r23
1000d098:	9802fa1e 	bne	r19,zero,1000dc84 <___vfiprintf_internal_r+0x1500>
1000d09c:	8c400414 	ori	r17,r17,16
1000d0a0:	8880080c 	andi	r2,r17,32
1000d0a4:	103f661e 	bne	r2,zero,1000ce40 <__alt_data_end+0xf800ce40>
1000d0a8:	8880040c 	andi	r2,r17,16
1000d0ac:	10020626 	beq	r2,zero,1000d8c8 <___vfiprintf_internal_r+0x1144>
1000d0b0:	d9402217 	ldw	r5,136(sp)
1000d0b4:	d8001d85 	stb	zero,118(sp)
1000d0b8:	0029883a 	mov	r20,zero
1000d0bc:	28800104 	addi	r2,r5,4
1000d0c0:	2cc00017 	ldw	r19,0(r5)
1000d0c4:	80020816 	blt	r16,zero,1000d8e8 <___vfiprintf_internal_r+0x1164>
1000d0c8:	00ffdfc4 	movi	r3,-129
1000d0cc:	d8802215 	stw	r2,136(sp)
1000d0d0:	88e2703a 	and	r17,r17,r3
1000d0d4:	983f651e 	bne	r19,zero,1000ce6c <__alt_data_end+0xf800ce6c>
1000d0d8:	002b883a 	mov	r21,zero
1000d0dc:	8002cf26 	beq	r16,zero,1000dc1c <___vfiprintf_internal_r+0x1498>
1000d0e0:	0027883a 	mov	r19,zero
1000d0e4:	0029883a 	mov	r20,zero
1000d0e8:	003f6106 	br	1000ce70 <__alt_data_end+0xf800ce70>
1000d0ec:	9cc03fcc 	andi	r19,r19,255
1000d0f0:	b811883a 	mov	r8,r23
1000d0f4:	9802e01e 	bne	r19,zero,1000dc78 <___vfiprintf_internal_r+0x14f4>
1000d0f8:	8c400414 	ori	r17,r17,16
1000d0fc:	8880080c 	andi	r2,r17,32
1000d100:	1000641e 	bne	r2,zero,1000d294 <___vfiprintf_internal_r+0xb10>
1000d104:	8880040c 	andi	r2,r17,16
1000d108:	1001c81e 	bne	r2,zero,1000d82c <___vfiprintf_internal_r+0x10a8>
1000d10c:	8880100c 	andi	r2,r17,64
1000d110:	d8001d85 	stb	zero,118(sp)
1000d114:	1002281e 	bne	r2,zero,1000d9b8 <___vfiprintf_internal_r+0x1234>
1000d118:	d9002217 	ldw	r4,136(sp)
1000d11c:	0029883a 	mov	r20,zero
1000d120:	20800104 	addi	r2,r4,4
1000d124:	24c00017 	ldw	r19,0(r4)
1000d128:	8001c60e 	bge	r16,zero,1000d844 <___vfiprintf_internal_r+0x10c0>
1000d12c:	d8802215 	stw	r2,136(sp)
1000d130:	002b883a 	mov	r21,zero
1000d134:	9d04b03a 	or	r2,r19,r20
1000d138:	103f911e 	bne	r2,zero,1000cf80 <__alt_data_end+0xf800cf80>
1000d13c:	00800044 	movi	r2,1
1000d140:	10803fcc 	andi	r2,r2,255
1000d144:	00c00044 	movi	r3,1
1000d148:	10c05f26 	beq	r2,r3,1000d2c8 <___vfiprintf_internal_r+0xb44>
1000d14c:	00c00084 	movi	r3,2
1000d150:	10ffe31e 	bne	r2,r3,1000d0e0 <__alt_data_end+0xf800d0e0>
1000d154:	0027883a 	mov	r19,zero
1000d158:	0029883a 	mov	r20,zero
1000d15c:	00015106 	br	1000d6a4 <___vfiprintf_internal_r+0xf20>
1000d160:	9cc03fcc 	andi	r19,r19,255
1000d164:	b811883a 	mov	r8,r23
1000d168:	9802c01e 	bne	r19,zero,1000dc6c <___vfiprintf_internal_r+0x14e8>
1000d16c:	01440074 	movhi	r5,4097
1000d170:	29543204 	addi	r5,r5,20680
1000d174:	d9402615 	stw	r5,152(sp)
1000d178:	8880080c 	andi	r2,r17,32
1000d17c:	103f541e 	bne	r2,zero,1000ced0 <__alt_data_end+0xf800ced0>
1000d180:	8880040c 	andi	r2,r17,16
1000d184:	1001f226 	beq	r2,zero,1000d950 <___vfiprintf_internal_r+0x11cc>
1000d188:	d9402217 	ldw	r5,136(sp)
1000d18c:	0029883a 	mov	r20,zero
1000d190:	2cc00017 	ldw	r19,0(r5)
1000d194:	29400104 	addi	r5,r5,4
1000d198:	d9402215 	stw	r5,136(sp)
1000d19c:	003f5106 	br	1000cee4 <__alt_data_end+0xf800cee4>
1000d1a0:	d8c02217 	ldw	r3,136(sp)
1000d1a4:	b811883a 	mov	r8,r23
1000d1a8:	d8001d85 	stb	zero,118(sp)
1000d1ac:	1dc00017 	ldw	r23,0(r3)
1000d1b0:	1f000104 	addi	fp,r3,4
1000d1b4:	b8025926 	beq	r23,zero,1000db1c <___vfiprintf_internal_r+0x1398>
1000d1b8:	80023316 	blt	r16,zero,1000da88 <___vfiprintf_internal_r+0x1304>
1000d1bc:	800d883a 	mov	r6,r16
1000d1c0:	000b883a 	mov	r5,zero
1000d1c4:	b809883a 	mov	r4,r23
1000d1c8:	da002a15 	stw	r8,168(sp)
1000d1cc:	000ab1c0 	call	1000ab1c <memchr>
1000d1d0:	da002a17 	ldw	r8,168(sp)
1000d1d4:	10026826 	beq	r2,zero,1000db78 <___vfiprintf_internal_r+0x13f4>
1000d1d8:	15e9c83a 	sub	r20,r2,r23
1000d1dc:	dd401d83 	ldbu	r21,118(sp)
1000d1e0:	df002215 	stw	fp,136(sp)
1000d1e4:	0021883a 	mov	r16,zero
1000d1e8:	003e6906 	br	1000cb90 <__alt_data_end+0xf800cb90>
1000d1ec:	9cc03fcc 	andi	r19,r19,255
1000d1f0:	b811883a 	mov	r8,r23
1000d1f4:	983fc126 	beq	r19,zero,1000d0fc <__alt_data_end+0xf800d0fc>
1000d1f8:	d8c02303 	ldbu	r3,140(sp)
1000d1fc:	d8c01d85 	stb	r3,118(sp)
1000d200:	003fbe06 	br	1000d0fc <__alt_data_end+0xf800d0fc>
1000d204:	d9002217 	ldw	r4,136(sp)
1000d208:	d9402217 	ldw	r5,136(sp)
1000d20c:	21000017 	ldw	r4,0(r4)
1000d210:	28800104 	addi	r2,r5,4
1000d214:	d9002515 	stw	r4,148(sp)
1000d218:	203e3d16 	blt	r4,zero,1000cb10 <__alt_data_end+0xf800cb10>
1000d21c:	d8802215 	stw	r2,136(sp)
1000d220:	b0c00007 	ldb	r3,0(r22)
1000d224:	003db406 	br	1000c8f8 <__alt_data_end+0xf800c8f8>
1000d228:	00c00ac4 	movi	r3,43
1000d22c:	d8c02305 	stb	r3,140(sp)
1000d230:	04c00044 	movi	r19,1
1000d234:	b0c00007 	ldb	r3,0(r22)
1000d238:	003daf06 	br	1000c8f8 <__alt_data_end+0xf800c8f8>
1000d23c:	b0c00007 	ldb	r3,0(r22)
1000d240:	01000a84 	movi	r4,42
1000d244:	b4000044 	addi	r16,r22,1
1000d248:	19025e26 	beq	r3,r4,1000dbc4 <___vfiprintf_internal_r+0x1440>
1000d24c:	1f3ff404 	addi	fp,r3,-48
1000d250:	0009883a 	mov	r4,zero
1000d254:	af025236 	bltu	r21,fp,1000dba0 <___vfiprintf_internal_r+0x141c>
1000d258:	01400284 	movi	r5,10
1000d25c:	00045280 	call	10004528 <__mulsi3>
1000d260:	80c00007 	ldb	r3,0(r16)
1000d264:	1709883a 	add	r4,r2,fp
1000d268:	85800044 	addi	r22,r16,1
1000d26c:	1f3ff404 	addi	fp,r3,-48
1000d270:	b021883a 	mov	r16,r22
1000d274:	af3ff82e 	bgeu	r21,fp,1000d258 <__alt_data_end+0xf800d258>
1000d278:	2021883a 	mov	r16,r4
1000d27c:	203d9f0e 	bge	r4,zero,1000c8fc <__alt_data_end+0xf800c8fc>
1000d280:	043fffc4 	movi	r16,-1
1000d284:	003d9d06 	br	1000c8fc <__alt_data_end+0xf800c8fc>
1000d288:	8c401014 	ori	r17,r17,64
1000d28c:	b0c00007 	ldb	r3,0(r22)
1000d290:	003d9906 	br	1000c8f8 <__alt_data_end+0xf800c8f8>
1000d294:	d9002217 	ldw	r4,136(sp)
1000d298:	d8001d85 	stb	zero,118(sp)
1000d29c:	20c00204 	addi	r3,r4,8
1000d2a0:	24c00017 	ldw	r19,0(r4)
1000d2a4:	25000117 	ldw	r20,4(r4)
1000d2a8:	8001e716 	blt	r16,zero,1000da48 <___vfiprintf_internal_r+0x12c4>
1000d2ac:	013fdfc4 	movi	r4,-129
1000d2b0:	9d04b03a 	or	r2,r19,r20
1000d2b4:	d8c02215 	stw	r3,136(sp)
1000d2b8:	8922703a 	and	r17,r17,r4
1000d2bc:	002b883a 	mov	r21,zero
1000d2c0:	103f2f1e 	bne	r2,zero,1000cf80 <__alt_data_end+0xf800cf80>
1000d2c4:	803e2f26 	beq	r16,zero,1000cb84 <__alt_data_end+0xf800cb84>
1000d2c8:	0027883a 	mov	r19,zero
1000d2cc:	9cc00c04 	addi	r19,r19,48
1000d2d0:	dcc019c5 	stb	r19,103(sp)
1000d2d4:	dd002817 	ldw	r20,160(sp)
1000d2d8:	ddc019c4 	addi	r23,sp,103
1000d2dc:	003e2c06 	br	1000cb90 <__alt_data_end+0xf800cb90>
1000d2e0:	9cc03fcc 	andi	r19,r19,255
1000d2e4:	b811883a 	mov	r8,r23
1000d2e8:	9802571e 	bne	r19,zero,1000dc48 <___vfiprintf_internal_r+0x14c4>
1000d2ec:	18005726 	beq	r3,zero,1000d44c <___vfiprintf_internal_r+0xcc8>
1000d2f0:	04c00044 	movi	r19,1
1000d2f4:	d8c01005 	stb	r3,64(sp)
1000d2f8:	d8001d85 	stb	zero,118(sp)
1000d2fc:	9829883a 	mov	r20,r19
1000d300:	ddc01004 	addi	r23,sp,64
1000d304:	003f0a06 	br	1000cf30 <__alt_data_end+0xf800cf30>
1000d308:	d9402017 	ldw	r5,128(sp)
1000d30c:	d9002117 	ldw	r4,132(sp)
1000d310:	d9801a04 	addi	r6,sp,104
1000d314:	da802a15 	stw	r10,168(sp)
1000d318:	000c6700 	call	1000c670 <__sprint_r.part.0>
1000d31c:	da802a17 	ldw	r10,168(sp)
1000d320:	1000501e 	bne	r2,zero,1000d464 <___vfiprintf_internal_r+0xce0>
1000d324:	d9801b17 	ldw	r6,108(sp)
1000d328:	d8801c17 	ldw	r2,112(sp)
1000d32c:	d811883a 	mov	r8,sp
1000d330:	31000044 	addi	r4,r6,1
1000d334:	003e3606 	br	1000cc10 <__alt_data_end+0xf800cc10>
1000d338:	d9001b17 	ldw	r4,108(sp)
1000d33c:	d8801c17 	ldw	r2,112(sp)
1000d340:	21400044 	addi	r5,r4,1
1000d344:	d9801d87 	ldb	r6,118(sp)
1000d348:	303e5226 	beq	r6,zero,1000cc94 <__alt_data_end+0xf800cc94>
1000d34c:	01800044 	movi	r6,1
1000d350:	d9001d84 	addi	r4,sp,118
1000d354:	1185883a 	add	r2,r2,r6
1000d358:	41000015 	stw	r4,0(r8)
1000d35c:	41800115 	stw	r6,4(r8)
1000d360:	d8801c15 	stw	r2,112(sp)
1000d364:	d9401b15 	stw	r5,108(sp)
1000d368:	010001c4 	movi	r4,7
1000d36c:	2140b00e 	bge	r4,r5,1000d630 <___vfiprintf_internal_r+0xeac>
1000d370:	1000f61e 	bne	r2,zero,1000d74c <___vfiprintf_internal_r+0xfc8>
1000d374:	3800b31e 	bne	r7,zero,1000d644 <___vfiprintf_internal_r+0xec0>
1000d378:	0009883a 	mov	r4,zero
1000d37c:	300b883a 	mov	r5,r6
1000d380:	d811883a 	mov	r8,sp
1000d384:	01802004 	movi	r6,128
1000d388:	19be5226 	beq	r3,r6,1000ccd4 <__alt_data_end+0xf800ccd4>
1000d38c:	8521c83a 	sub	r16,r16,r20
1000d390:	043e790e 	bge	zero,r16,1000cd78 <__alt_data_end+0xf800cd78>
1000d394:	05400404 	movi	r21,16
1000d398:	ac01b00e 	bge	r21,r16,1000da5c <___vfiprintf_internal_r+0x12d8>
1000d39c:	01440074 	movhi	r5,4097
1000d3a0:	29549804 	addi	r5,r5,21088
1000d3a4:	d9402315 	stw	r5,140(sp)
1000d3a8:	070001c4 	movi	fp,7
1000d3ac:	00000506 	br	1000d3c4 <___vfiprintf_internal_r+0xc40>
1000d3b0:	21400084 	addi	r5,r4,2
1000d3b4:	42000204 	addi	r8,r8,8
1000d3b8:	1809883a 	mov	r4,r3
1000d3bc:	843ffc04 	addi	r16,r16,-16
1000d3c0:	ac000d0e 	bge	r21,r16,1000d3f8 <___vfiprintf_internal_r+0xc74>
1000d3c4:	10800404 	addi	r2,r2,16
1000d3c8:	20c00044 	addi	r3,r4,1
1000d3cc:	44800015 	stw	r18,0(r8)
1000d3d0:	45400115 	stw	r21,4(r8)
1000d3d4:	d8801c15 	stw	r2,112(sp)
1000d3d8:	d8c01b15 	stw	r3,108(sp)
1000d3dc:	e0fff40e 	bge	fp,r3,1000d3b0 <__alt_data_end+0xf800d3b0>
1000d3e0:	1000101e 	bne	r2,zero,1000d424 <___vfiprintf_internal_r+0xca0>
1000d3e4:	843ffc04 	addi	r16,r16,-16
1000d3e8:	01400044 	movi	r5,1
1000d3ec:	0009883a 	mov	r4,zero
1000d3f0:	d811883a 	mov	r8,sp
1000d3f4:	ac3ff316 	blt	r21,r16,1000d3c4 <__alt_data_end+0xf800d3c4>
1000d3f8:	d8c02317 	ldw	r3,140(sp)
1000d3fc:	1405883a 	add	r2,r2,r16
1000d400:	44000115 	stw	r16,4(r8)
1000d404:	40c00015 	stw	r3,0(r8)
1000d408:	d8801c15 	stw	r2,112(sp)
1000d40c:	d9401b15 	stw	r5,108(sp)
1000d410:	00c001c4 	movi	r3,7
1000d414:	19401916 	blt	r3,r5,1000d47c <___vfiprintf_internal_r+0xcf8>
1000d418:	42000204 	addi	r8,r8,8
1000d41c:	29400044 	addi	r5,r5,1
1000d420:	003e5506 	br	1000cd78 <__alt_data_end+0xf800cd78>
1000d424:	d9402017 	ldw	r5,128(sp)
1000d428:	d9002117 	ldw	r4,132(sp)
1000d42c:	d9801a04 	addi	r6,sp,104
1000d430:	000c6700 	call	1000c670 <__sprint_r.part.0>
1000d434:	10000b1e 	bne	r2,zero,1000d464 <___vfiprintf_internal_r+0xce0>
1000d438:	d9001b17 	ldw	r4,108(sp)
1000d43c:	d8801c17 	ldw	r2,112(sp)
1000d440:	d811883a 	mov	r8,sp
1000d444:	21400044 	addi	r5,r4,1
1000d448:	003fdc06 	br	1000d3bc <__alt_data_end+0xf800d3bc>
1000d44c:	d8801c17 	ldw	r2,112(sp)
1000d450:	10000426 	beq	r2,zero,1000d464 <___vfiprintf_internal_r+0xce0>
1000d454:	d9402017 	ldw	r5,128(sp)
1000d458:	d9002117 	ldw	r4,132(sp)
1000d45c:	d9801a04 	addi	r6,sp,104
1000d460:	000c6700 	call	1000c670 <__sprint_r.part.0>
1000d464:	d9402017 	ldw	r5,128(sp)
1000d468:	2880030b 	ldhu	r2,12(r5)
1000d46c:	1080100c 	andi	r2,r2,64
1000d470:	10014d1e 	bne	r2,zero,1000d9a8 <___vfiprintf_internal_r+0x1224>
1000d474:	d8802417 	ldw	r2,144(sp)
1000d478:	003d9706 	br	1000cad8 <__alt_data_end+0xf800cad8>
1000d47c:	1000d21e 	bne	r2,zero,1000d7c8 <___vfiprintf_internal_r+0x1044>
1000d480:	00c00044 	movi	r3,1
1000d484:	a005883a 	mov	r2,r20
1000d488:	ddc00015 	stw	r23,0(sp)
1000d48c:	dd000115 	stw	r20,4(sp)
1000d490:	dd001c15 	stw	r20,112(sp)
1000d494:	d8c01b15 	stw	r3,108(sp)
1000d498:	d811883a 	mov	r8,sp
1000d49c:	42000204 	addi	r8,r8,8
1000d4a0:	8c40010c 	andi	r17,r17,4
1000d4a4:	88004026 	beq	r17,zero,1000d5a8 <___vfiprintf_internal_r+0xe24>
1000d4a8:	d9002517 	ldw	r4,148(sp)
1000d4ac:	24e3c83a 	sub	r17,r4,r19
1000d4b0:	04403d0e 	bge	zero,r17,1000d5a8 <___vfiprintf_internal_r+0xe24>
1000d4b4:	04000404 	movi	r16,16
1000d4b8:	8441a90e 	bge	r16,r17,1000db60 <___vfiprintf_internal_r+0x13dc>
1000d4bc:	00c40074 	movhi	r3,4097
1000d4c0:	18d49c04 	addi	r3,r3,21104
1000d4c4:	d9001b17 	ldw	r4,108(sp)
1000d4c8:	d8c02315 	stw	r3,140(sp)
1000d4cc:	050001c4 	movi	r20,7
1000d4d0:	dd402117 	ldw	r21,132(sp)
1000d4d4:	ddc02017 	ldw	r23,128(sp)
1000d4d8:	00000506 	br	1000d4f0 <___vfiprintf_internal_r+0xd6c>
1000d4dc:	21400084 	addi	r5,r4,2
1000d4e0:	42000204 	addi	r8,r8,8
1000d4e4:	1809883a 	mov	r4,r3
1000d4e8:	8c7ffc04 	addi	r17,r17,-16
1000d4ec:	84400f0e 	bge	r16,r17,1000d52c <___vfiprintf_internal_r+0xda8>
1000d4f0:	01440074 	movhi	r5,4097
1000d4f4:	10800404 	addi	r2,r2,16
1000d4f8:	20c00044 	addi	r3,r4,1
1000d4fc:	29549c04 	addi	r5,r5,21104
1000d500:	41400015 	stw	r5,0(r8)
1000d504:	44000115 	stw	r16,4(r8)
1000d508:	d8801c15 	stw	r2,112(sp)
1000d50c:	d8c01b15 	stw	r3,108(sp)
1000d510:	a0fff20e 	bge	r20,r3,1000d4dc <__alt_data_end+0xf800d4dc>
1000d514:	1000141e 	bne	r2,zero,1000d568 <___vfiprintf_internal_r+0xde4>
1000d518:	8c7ffc04 	addi	r17,r17,-16
1000d51c:	01400044 	movi	r5,1
1000d520:	0009883a 	mov	r4,zero
1000d524:	d811883a 	mov	r8,sp
1000d528:	847ff116 	blt	r16,r17,1000d4f0 <__alt_data_end+0xf800d4f0>
1000d52c:	d8c02317 	ldw	r3,140(sp)
1000d530:	1445883a 	add	r2,r2,r17
1000d534:	44400115 	stw	r17,4(r8)
1000d538:	40c00015 	stw	r3,0(r8)
1000d53c:	d8801c15 	stw	r2,112(sp)
1000d540:	d9401b15 	stw	r5,108(sp)
1000d544:	00c001c4 	movi	r3,7
1000d548:	1940170e 	bge	r3,r5,1000d5a8 <___vfiprintf_internal_r+0xe24>
1000d54c:	1000101e 	bne	r2,zero,1000d590 <___vfiprintf_internal_r+0xe0c>
1000d550:	d8802517 	ldw	r2,148(sp)
1000d554:	14c11616 	blt	r2,r19,1000d9b0 <___vfiprintf_internal_r+0x122c>
1000d558:	d9002417 	ldw	r4,144(sp)
1000d55c:	2089883a 	add	r4,r4,r2
1000d560:	d9002415 	stw	r4,144(sp)
1000d564:	003e1806 	br	1000cdc8 <__alt_data_end+0xf800cdc8>
1000d568:	d9801a04 	addi	r6,sp,104
1000d56c:	b80b883a 	mov	r5,r23
1000d570:	a809883a 	mov	r4,r21
1000d574:	000c6700 	call	1000c670 <__sprint_r.part.0>
1000d578:	103fba1e 	bne	r2,zero,1000d464 <__alt_data_end+0xf800d464>
1000d57c:	d9001b17 	ldw	r4,108(sp)
1000d580:	d8801c17 	ldw	r2,112(sp)
1000d584:	d811883a 	mov	r8,sp
1000d588:	21400044 	addi	r5,r4,1
1000d58c:	003fd606 	br	1000d4e8 <__alt_data_end+0xf800d4e8>
1000d590:	d9402017 	ldw	r5,128(sp)
1000d594:	d9002117 	ldw	r4,132(sp)
1000d598:	d9801a04 	addi	r6,sp,104
1000d59c:	000c6700 	call	1000c670 <__sprint_r.part.0>
1000d5a0:	103fb01e 	bne	r2,zero,1000d464 <__alt_data_end+0xf800d464>
1000d5a4:	d8801c17 	ldw	r2,112(sp)
1000d5a8:	d8c02517 	ldw	r3,148(sp)
1000d5ac:	1cc0010e 	bge	r3,r19,1000d5b4 <___vfiprintf_internal_r+0xe30>
1000d5b0:	9807883a 	mov	r3,r19
1000d5b4:	d9002417 	ldw	r4,144(sp)
1000d5b8:	20c9883a 	add	r4,r4,r3
1000d5bc:	d9002415 	stw	r4,144(sp)
1000d5c0:	103e0126 	beq	r2,zero,1000cdc8 <__alt_data_end+0xf800cdc8>
1000d5c4:	d9402017 	ldw	r5,128(sp)
1000d5c8:	d9002117 	ldw	r4,132(sp)
1000d5cc:	d9801a04 	addi	r6,sp,104
1000d5d0:	000c6700 	call	1000c670 <__sprint_r.part.0>
1000d5d4:	103dfc26 	beq	r2,zero,1000cdc8 <__alt_data_end+0xf800cdc8>
1000d5d8:	003fa206 	br	1000d464 <__alt_data_end+0xf800d464>
1000d5dc:	d9402017 	ldw	r5,128(sp)
1000d5e0:	d9002117 	ldw	r4,132(sp)
1000d5e4:	d9801a04 	addi	r6,sp,104
1000d5e8:	d9c02b15 	stw	r7,172(sp)
1000d5ec:	000c6700 	call	1000c670 <__sprint_r.part.0>
1000d5f0:	d9c02b17 	ldw	r7,172(sp)
1000d5f4:	103f9b1e 	bne	r2,zero,1000d464 <__alt_data_end+0xf800d464>
1000d5f8:	d9001b17 	ldw	r4,108(sp)
1000d5fc:	d8801c17 	ldw	r2,112(sp)
1000d600:	d811883a 	mov	r8,sp
1000d604:	21800044 	addi	r6,r4,1
1000d608:	003dbf06 	br	1000cd08 <__alt_data_end+0xf800cd08>
1000d60c:	1000d81e 	bne	r2,zero,1000d970 <___vfiprintf_internal_r+0x11ec>
1000d610:	d9001d87 	ldb	r4,118(sp)
1000d614:	20000a26 	beq	r4,zero,1000d640 <___vfiprintf_internal_r+0xebc>
1000d618:	00800044 	movi	r2,1
1000d61c:	d9001d84 	addi	r4,sp,118
1000d620:	100b883a 	mov	r5,r2
1000d624:	d9000015 	stw	r4,0(sp)
1000d628:	d8800115 	stw	r2,4(sp)
1000d62c:	d811883a 	mov	r8,sp
1000d630:	2809883a 	mov	r4,r5
1000d634:	42000204 	addi	r8,r8,8
1000d638:	29400044 	addi	r5,r5,1
1000d63c:	003d9506 	br	1000cc94 <__alt_data_end+0xf800cc94>
1000d640:	3800fd26 	beq	r7,zero,1000da38 <___vfiprintf_internal_r+0x12b4>
1000d644:	00800084 	movi	r2,2
1000d648:	d9001d04 	addi	r4,sp,116
1000d64c:	d9000015 	stw	r4,0(sp)
1000d650:	d8800115 	stw	r2,4(sp)
1000d654:	01400044 	movi	r5,1
1000d658:	d811883a 	mov	r8,sp
1000d65c:	2809883a 	mov	r4,r5
1000d660:	42000204 	addi	r8,r8,8
1000d664:	29400044 	addi	r5,r5,1
1000d668:	003f4606 	br	1000d384 <__alt_data_end+0xf800d384>
1000d66c:	d8802517 	ldw	r2,148(sp)
1000d670:	14c0010e 	bge	r2,r19,1000d678 <___vfiprintf_internal_r+0xef4>
1000d674:	9805883a 	mov	r2,r19
1000d678:	d9402417 	ldw	r5,144(sp)
1000d67c:	288b883a 	add	r5,r5,r2
1000d680:	d9402415 	stw	r5,144(sp)
1000d684:	003dd006 	br	1000cdc8 <__alt_data_end+0xf800cdc8>
1000d688:	d8001d85 	stb	zero,118(sp)
1000d68c:	80005d16 	blt	r16,zero,1000d804 <___vfiprintf_internal_r+0x1080>
1000d690:	00ffdfc4 	movi	r3,-129
1000d694:	9d04b03a 	or	r2,r19,r20
1000d698:	88e2703a 	and	r17,r17,r3
1000d69c:	103d3726 	beq	r2,zero,1000cb7c <__alt_data_end+0xf800cb7c>
1000d6a0:	002b883a 	mov	r21,zero
1000d6a4:	d9002617 	ldw	r4,152(sp)
1000d6a8:	ddc01a04 	addi	r23,sp,104
1000d6ac:	988003cc 	andi	r2,r19,15
1000d6b0:	a006973a 	slli	r3,r20,28
1000d6b4:	2085883a 	add	r2,r4,r2
1000d6b8:	9826d13a 	srli	r19,r19,4
1000d6bc:	10800003 	ldbu	r2,0(r2)
1000d6c0:	a028d13a 	srli	r20,r20,4
1000d6c4:	bdffffc4 	addi	r23,r23,-1
1000d6c8:	1ce6b03a 	or	r19,r3,r19
1000d6cc:	b8800005 	stb	r2,0(r23)
1000d6d0:	9d04b03a 	or	r2,r19,r20
1000d6d4:	103ff51e 	bne	r2,zero,1000d6ac <__alt_data_end+0xf800d6ac>
1000d6d8:	d8801e17 	ldw	r2,120(sp)
1000d6dc:	15e9c83a 	sub	r20,r2,r23
1000d6e0:	003d2b06 	br	1000cb90 <__alt_data_end+0xf800cb90>
1000d6e4:	d9402017 	ldw	r5,128(sp)
1000d6e8:	d9002117 	ldw	r4,132(sp)
1000d6ec:	d9801a04 	addi	r6,sp,104
1000d6f0:	000c6700 	call	1000c670 <__sprint_r.part.0>
1000d6f4:	103f5b1e 	bne	r2,zero,1000d464 <__alt_data_end+0xf800d464>
1000d6f8:	d8801c17 	ldw	r2,112(sp)
1000d6fc:	d811883a 	mov	r8,sp
1000d700:	003f6706 	br	1000d4a0 <__alt_data_end+0xf800d4a0>
1000d704:	d9402017 	ldw	r5,128(sp)
1000d708:	d9002117 	ldw	r4,132(sp)
1000d70c:	d9801a04 	addi	r6,sp,104
1000d710:	000c6700 	call	1000c670 <__sprint_r.part.0>
1000d714:	103f531e 	bne	r2,zero,1000d464 <__alt_data_end+0xf800d464>
1000d718:	d811883a 	mov	r8,sp
1000d71c:	003cd906 	br	1000ca84 <__alt_data_end+0xf800ca84>
1000d720:	10803fcc 	andi	r2,r2,255
1000d724:	1080201c 	xori	r2,r2,128
1000d728:	10bfe004 	addi	r2,r2,-128
1000d72c:	00c00c04 	movi	r3,48
1000d730:	10ffe926 	beq	r2,r3,1000d6d8 <__alt_data_end+0xf800d6d8>
1000d734:	b8ffffc5 	stb	r3,-1(r23)
1000d738:	d8c01e17 	ldw	r3,120(sp)
1000d73c:	b8bfffc4 	addi	r2,r23,-1
1000d740:	102f883a 	mov	r23,r2
1000d744:	18a9c83a 	sub	r20,r3,r2
1000d748:	003d1106 	br	1000cb90 <__alt_data_end+0xf800cb90>
1000d74c:	d9402017 	ldw	r5,128(sp)
1000d750:	d9002117 	ldw	r4,132(sp)
1000d754:	d9801a04 	addi	r6,sp,104
1000d758:	d8c02a15 	stw	r3,168(sp)
1000d75c:	d9c02b15 	stw	r7,172(sp)
1000d760:	000c6700 	call	1000c670 <__sprint_r.part.0>
1000d764:	d8c02a17 	ldw	r3,168(sp)
1000d768:	d9c02b17 	ldw	r7,172(sp)
1000d76c:	103f3d1e 	bne	r2,zero,1000d464 <__alt_data_end+0xf800d464>
1000d770:	d9001b17 	ldw	r4,108(sp)
1000d774:	d8801c17 	ldw	r2,112(sp)
1000d778:	d811883a 	mov	r8,sp
1000d77c:	21400044 	addi	r5,r4,1
1000d780:	003d4406 	br	1000cc94 <__alt_data_end+0xf800cc94>
1000d784:	d9402017 	ldw	r5,128(sp)
1000d788:	d9002117 	ldw	r4,132(sp)
1000d78c:	d9801a04 	addi	r6,sp,104
1000d790:	d8c02a15 	stw	r3,168(sp)
1000d794:	000c6700 	call	1000c670 <__sprint_r.part.0>
1000d798:	d8c02a17 	ldw	r3,168(sp)
1000d79c:	103f311e 	bne	r2,zero,1000d464 <__alt_data_end+0xf800d464>
1000d7a0:	d9001b17 	ldw	r4,108(sp)
1000d7a4:	d8801c17 	ldw	r2,112(sp)
1000d7a8:	d811883a 	mov	r8,sp
1000d7ac:	21400044 	addi	r5,r4,1
1000d7b0:	003ef406 	br	1000d384 <__alt_data_end+0xf800d384>
1000d7b4:	1000bd1e 	bne	r2,zero,1000daac <___vfiprintf_internal_r+0x1328>
1000d7b8:	01400044 	movi	r5,1
1000d7bc:	0009883a 	mov	r4,zero
1000d7c0:	d811883a 	mov	r8,sp
1000d7c4:	003ef106 	br	1000d38c <__alt_data_end+0xf800d38c>
1000d7c8:	d9402017 	ldw	r5,128(sp)
1000d7cc:	d9002117 	ldw	r4,132(sp)
1000d7d0:	d9801a04 	addi	r6,sp,104
1000d7d4:	000c6700 	call	1000c670 <__sprint_r.part.0>
1000d7d8:	103f221e 	bne	r2,zero,1000d464 <__alt_data_end+0xf800d464>
1000d7dc:	d9401b17 	ldw	r5,108(sp)
1000d7e0:	d8801c17 	ldw	r2,112(sp)
1000d7e4:	d811883a 	mov	r8,sp
1000d7e8:	29400044 	addi	r5,r5,1
1000d7ec:	003d6206 	br	1000cd78 <__alt_data_end+0xf800cd78>
1000d7f0:	01440074 	movhi	r5,4097
1000d7f4:	29543704 	addi	r5,r5,20700
1000d7f8:	d9402615 	stw	r5,152(sp)
1000d7fc:	d8c02215 	stw	r3,136(sp)
1000d800:	1023883a 	mov	r17,r2
1000d804:	9d04b03a 	or	r2,r19,r20
1000d808:	103fa51e 	bne	r2,zero,1000d6a0 <__alt_data_end+0xf800d6a0>
1000d80c:	002b883a 	mov	r21,zero
1000d810:	00800084 	movi	r2,2
1000d814:	003e4a06 	br	1000d140 <__alt_data_end+0xf800d140>
1000d818:	01440074 	movhi	r5,4097
1000d81c:	29543704 	addi	r5,r5,20700
1000d820:	002b883a 	mov	r21,zero
1000d824:	d9402615 	stw	r5,152(sp)
1000d828:	003f9e06 	br	1000d6a4 <__alt_data_end+0xf800d6a4>
1000d82c:	d9402217 	ldw	r5,136(sp)
1000d830:	d8001d85 	stb	zero,118(sp)
1000d834:	0029883a 	mov	r20,zero
1000d838:	28800104 	addi	r2,r5,4
1000d83c:	2cc00017 	ldw	r19,0(r5)
1000d840:	803e3a16 	blt	r16,zero,1000d12c <__alt_data_end+0xf800d12c>
1000d844:	00ffdfc4 	movi	r3,-129
1000d848:	d8802215 	stw	r2,136(sp)
1000d84c:	88e2703a 	and	r17,r17,r3
1000d850:	002b883a 	mov	r21,zero
1000d854:	983e9b26 	beq	r19,zero,1000d2c4 <__alt_data_end+0xf800d2c4>
1000d858:	00800244 	movi	r2,9
1000d85c:	14fdc936 	bltu	r2,r19,1000cf84 <__alt_data_end+0xf800cf84>
1000d860:	003e9a06 	br	1000d2cc <__alt_data_end+0xf800d2cc>
1000d864:	00800c04 	movi	r2,48
1000d868:	d8c01d45 	stb	r3,117(sp)
1000d86c:	d8801d05 	stb	r2,116(sp)
1000d870:	d8001d85 	stb	zero,118(sp)
1000d874:	88c00094 	ori	r3,r17,2
1000d878:	80009c16 	blt	r16,zero,1000daec <___vfiprintf_internal_r+0x1368>
1000d87c:	00bfdfc4 	movi	r2,-129
1000d880:	88a2703a 	and	r17,r17,r2
1000d884:	8c400094 	ori	r17,r17,2
1000d888:	002b883a 	mov	r21,zero
1000d88c:	003f8506 	br	1000d6a4 <__alt_data_end+0xf800d6a4>
1000d890:	b029883a 	mov	r20,r22
1000d894:	003c0b06 	br	1000c8c4 <__alt_data_end+0xf800c8c4>
1000d898:	04e7c83a 	sub	r19,zero,r19
1000d89c:	05400b44 	movi	r21,45
1000d8a0:	9804c03a 	cmpne	r2,r19,zero
1000d8a4:	0529c83a 	sub	r20,zero,r20
1000d8a8:	dd401d85 	stb	r21,118(sp)
1000d8ac:	a0a9c83a 	sub	r20,r20,r2
1000d8b0:	80009716 	blt	r16,zero,1000db10 <___vfiprintf_internal_r+0x138c>
1000d8b4:	00bfdfc4 	movi	r2,-129
1000d8b8:	88a2703a 	and	r17,r17,r2
1000d8bc:	003db006 	br	1000cf80 <__alt_data_end+0xf800cf80>
1000d8c0:	b0c00007 	ldb	r3,0(r22)
1000d8c4:	003c0c06 	br	1000c8f8 <__alt_data_end+0xf800c8f8>
1000d8c8:	8880100c 	andi	r2,r17,64
1000d8cc:	d8001d85 	stb	zero,118(sp)
1000d8d0:	1000461e 	bne	r2,zero,1000d9ec <___vfiprintf_internal_r+0x1268>
1000d8d4:	d9002217 	ldw	r4,136(sp)
1000d8d8:	0029883a 	mov	r20,zero
1000d8dc:	20800104 	addi	r2,r4,4
1000d8e0:	24c00017 	ldw	r19,0(r4)
1000d8e4:	803df80e 	bge	r16,zero,1000d0c8 <__alt_data_end+0xf800d0c8>
1000d8e8:	9d06b03a 	or	r3,r19,r20
1000d8ec:	d8802215 	stw	r2,136(sp)
1000d8f0:	183d5e1e 	bne	r3,zero,1000ce6c <__alt_data_end+0xf800ce6c>
1000d8f4:	002b883a 	mov	r21,zero
1000d8f8:	0005883a 	mov	r2,zero
1000d8fc:	003e1006 	br	1000d140 <__alt_data_end+0xf800d140>
1000d900:	8880040c 	andi	r2,r17,16
1000d904:	1000321e 	bne	r2,zero,1000d9d0 <___vfiprintf_internal_r+0x124c>
1000d908:	8c40100c 	andi	r17,r17,64
1000d90c:	88008d26 	beq	r17,zero,1000db44 <___vfiprintf_internal_r+0x13c0>
1000d910:	d9402217 	ldw	r5,136(sp)
1000d914:	d8c02417 	ldw	r3,144(sp)
1000d918:	28800017 	ldw	r2,0(r5)
1000d91c:	29400104 	addi	r5,r5,4
1000d920:	d9402215 	stw	r5,136(sp)
1000d924:	10c0000d 	sth	r3,0(r2)
1000d928:	003bca06 	br	1000c854 <__alt_data_end+0xf800c854>
1000d92c:	8880100c 	andi	r2,r17,64
1000d930:	10003a26 	beq	r2,zero,1000da1c <___vfiprintf_internal_r+0x1298>
1000d934:	d8802217 	ldw	r2,136(sp)
1000d938:	14c0000f 	ldh	r19,0(r2)
1000d93c:	10800104 	addi	r2,r2,4
1000d940:	d8802215 	stw	r2,136(sp)
1000d944:	9829d7fa 	srai	r20,r19,31
1000d948:	a005883a 	mov	r2,r20
1000d94c:	003d8506 	br	1000cf64 <__alt_data_end+0xf800cf64>
1000d950:	8880100c 	andi	r2,r17,64
1000d954:	10002b26 	beq	r2,zero,1000da04 <___vfiprintf_internal_r+0x1280>
1000d958:	d8802217 	ldw	r2,136(sp)
1000d95c:	0029883a 	mov	r20,zero
1000d960:	14c0000b 	ldhu	r19,0(r2)
1000d964:	10800104 	addi	r2,r2,4
1000d968:	d8802215 	stw	r2,136(sp)
1000d96c:	003d5d06 	br	1000cee4 <__alt_data_end+0xf800cee4>
1000d970:	d9402017 	ldw	r5,128(sp)
1000d974:	d9002117 	ldw	r4,132(sp)
1000d978:	d9801a04 	addi	r6,sp,104
1000d97c:	d8c02a15 	stw	r3,168(sp)
1000d980:	d9c02b15 	stw	r7,172(sp)
1000d984:	000c6700 	call	1000c670 <__sprint_r.part.0>
1000d988:	d8c02a17 	ldw	r3,168(sp)
1000d98c:	d9c02b17 	ldw	r7,172(sp)
1000d990:	103eb41e 	bne	r2,zero,1000d464 <__alt_data_end+0xf800d464>
1000d994:	d9001b17 	ldw	r4,108(sp)
1000d998:	d8801c17 	ldw	r2,112(sp)
1000d99c:	d811883a 	mov	r8,sp
1000d9a0:	21400044 	addi	r5,r4,1
1000d9a4:	003e6706 	br	1000d344 <__alt_data_end+0xf800d344>
1000d9a8:	00bfffc4 	movi	r2,-1
1000d9ac:	003c4a06 	br	1000cad8 <__alt_data_end+0xf800cad8>
1000d9b0:	9805883a 	mov	r2,r19
1000d9b4:	003ee806 	br	1000d558 <__alt_data_end+0xf800d558>
1000d9b8:	d8c02217 	ldw	r3,136(sp)
1000d9bc:	0029883a 	mov	r20,zero
1000d9c0:	18800104 	addi	r2,r3,4
1000d9c4:	1cc0000b 	ldhu	r19,0(r3)
1000d9c8:	803f9e0e 	bge	r16,zero,1000d844 <__alt_data_end+0xf800d844>
1000d9cc:	003dd706 	br	1000d12c <__alt_data_end+0xf800d12c>
1000d9d0:	d8c02217 	ldw	r3,136(sp)
1000d9d4:	d9002417 	ldw	r4,144(sp)
1000d9d8:	18800017 	ldw	r2,0(r3)
1000d9dc:	18c00104 	addi	r3,r3,4
1000d9e0:	d8c02215 	stw	r3,136(sp)
1000d9e4:	11000015 	stw	r4,0(r2)
1000d9e8:	003b9a06 	br	1000c854 <__alt_data_end+0xf800c854>
1000d9ec:	d8c02217 	ldw	r3,136(sp)
1000d9f0:	0029883a 	mov	r20,zero
1000d9f4:	18800104 	addi	r2,r3,4
1000d9f8:	1cc0000b 	ldhu	r19,0(r3)
1000d9fc:	803db20e 	bge	r16,zero,1000d0c8 <__alt_data_end+0xf800d0c8>
1000da00:	003fb906 	br	1000d8e8 <__alt_data_end+0xf800d8e8>
1000da04:	d9002217 	ldw	r4,136(sp)
1000da08:	0029883a 	mov	r20,zero
1000da0c:	24c00017 	ldw	r19,0(r4)
1000da10:	21000104 	addi	r4,r4,4
1000da14:	d9002215 	stw	r4,136(sp)
1000da18:	003d3206 	br	1000cee4 <__alt_data_end+0xf800cee4>
1000da1c:	d8c02217 	ldw	r3,136(sp)
1000da20:	1cc00017 	ldw	r19,0(r3)
1000da24:	18c00104 	addi	r3,r3,4
1000da28:	d8c02215 	stw	r3,136(sp)
1000da2c:	9829d7fa 	srai	r20,r19,31
1000da30:	a005883a 	mov	r2,r20
1000da34:	003d4b06 	br	1000cf64 <__alt_data_end+0xf800cf64>
1000da38:	0009883a 	mov	r4,zero
1000da3c:	01400044 	movi	r5,1
1000da40:	d811883a 	mov	r8,sp
1000da44:	003e4f06 	br	1000d384 <__alt_data_end+0xf800d384>
1000da48:	d8c02215 	stw	r3,136(sp)
1000da4c:	002b883a 	mov	r21,zero
1000da50:	003db806 	br	1000d134 <__alt_data_end+0xf800d134>
1000da54:	d811883a 	mov	r8,sp
1000da58:	003e9606 	br	1000d4b4 <__alt_data_end+0xf800d4b4>
1000da5c:	01040074 	movhi	r4,4097
1000da60:	21149804 	addi	r4,r4,21088
1000da64:	d9002315 	stw	r4,140(sp)
1000da68:	003e6306 	br	1000d3f8 <__alt_data_end+0xf800d3f8>
1000da6c:	b0c00043 	ldbu	r3,1(r22)
1000da70:	8c400814 	ori	r17,r17,32
1000da74:	b5800044 	addi	r22,r22,1
1000da78:	18c03fcc 	andi	r3,r3,255
1000da7c:	18c0201c 	xori	r3,r3,128
1000da80:	18ffe004 	addi	r3,r3,-128
1000da84:	003b9c06 	br	1000c8f8 <__alt_data_end+0xf800c8f8>
1000da88:	b809883a 	mov	r4,r23
1000da8c:	da002a15 	stw	r8,168(sp)
1000da90:	00059580 	call	10005958 <strlen>
1000da94:	1029883a 	mov	r20,r2
1000da98:	dd401d83 	ldbu	r21,118(sp)
1000da9c:	df002215 	stw	fp,136(sp)
1000daa0:	0021883a 	mov	r16,zero
1000daa4:	da002a17 	ldw	r8,168(sp)
1000daa8:	003c3906 	br	1000cb90 <__alt_data_end+0xf800cb90>
1000daac:	d9402017 	ldw	r5,128(sp)
1000dab0:	d9002117 	ldw	r4,132(sp)
1000dab4:	d9801a04 	addi	r6,sp,104
1000dab8:	000c6700 	call	1000c670 <__sprint_r.part.0>
1000dabc:	103e691e 	bne	r2,zero,1000d464 <__alt_data_end+0xf800d464>
1000dac0:	d9001b17 	ldw	r4,108(sp)
1000dac4:	d8801c17 	ldw	r2,112(sp)
1000dac8:	d811883a 	mov	r8,sp
1000dacc:	21400044 	addi	r5,r4,1
1000dad0:	003e2e06 	br	1000d38c <__alt_data_end+0xf800d38c>
1000dad4:	01040074 	movhi	r4,4097
1000dad8:	21149c04 	addi	r4,r4,21104
1000dadc:	d9002315 	stw	r4,140(sp)
1000dae0:	d9001b17 	ldw	r4,108(sp)
1000dae4:	21000044 	addi	r4,r4,1
1000dae8:	003c5e06 	br	1000cc64 <__alt_data_end+0xf800cc64>
1000daec:	002b883a 	mov	r21,zero
1000daf0:	00800084 	movi	r2,2
1000daf4:	10803fcc 	andi	r2,r2,255
1000daf8:	01000044 	movi	r4,1
1000dafc:	11002b26 	beq	r2,r4,1000dbac <___vfiprintf_internal_r+0x1428>
1000db00:	01000084 	movi	r4,2
1000db04:	11002b1e 	bne	r2,r4,1000dbb4 <___vfiprintf_internal_r+0x1430>
1000db08:	1823883a 	mov	r17,r3
1000db0c:	003ee506 	br	1000d6a4 <__alt_data_end+0xf800d6a4>
1000db10:	8807883a 	mov	r3,r17
1000db14:	00800044 	movi	r2,1
1000db18:	003ff606 	br	1000daf4 <__alt_data_end+0xf800daf4>
1000db1c:	00800184 	movi	r2,6
1000db20:	1400012e 	bgeu	r2,r16,1000db28 <___vfiprintf_internal_r+0x13a4>
1000db24:	1021883a 	mov	r16,r2
1000db28:	8029883a 	mov	r20,r16
1000db2c:	8027883a 	mov	r19,r16
1000db30:	80002216 	blt	r16,zero,1000dbbc <___vfiprintf_internal_r+0x1438>
1000db34:	05c40074 	movhi	r23,4097
1000db38:	df002215 	stw	fp,136(sp)
1000db3c:	bdd43c04 	addi	r23,r23,20720
1000db40:	003cfb06 	br	1000cf30 <__alt_data_end+0xf800cf30>
1000db44:	d9002217 	ldw	r4,136(sp)
1000db48:	d9402417 	ldw	r5,144(sp)
1000db4c:	20800017 	ldw	r2,0(r4)
1000db50:	21000104 	addi	r4,r4,4
1000db54:	d9002215 	stw	r4,136(sp)
1000db58:	11400015 	stw	r5,0(r2)
1000db5c:	003b3d06 	br	1000c854 <__alt_data_end+0xf800c854>
1000db60:	01440074 	movhi	r5,4097
1000db64:	29549c04 	addi	r5,r5,21104
1000db68:	d9402315 	stw	r5,140(sp)
1000db6c:	d9401b17 	ldw	r5,108(sp)
1000db70:	29400044 	addi	r5,r5,1
1000db74:	003e6d06 	br	1000d52c <__alt_data_end+0xf800d52c>
1000db78:	8029883a 	mov	r20,r16
1000db7c:	dd401d83 	ldbu	r21,118(sp)
1000db80:	df002215 	stw	fp,136(sp)
1000db84:	0021883a 	mov	r16,zero
1000db88:	003c0106 	br	1000cb90 <__alt_data_end+0xf800cb90>
1000db8c:	00c40074 	movhi	r3,4097
1000db90:	18d49804 	addi	r3,r3,21088
1000db94:	d8c02315 	stw	r3,140(sp)
1000db98:	280d883a 	mov	r6,r5
1000db9c:	003c6906 	br	1000cd44 <__alt_data_end+0xf800cd44>
1000dba0:	802d883a 	mov	r22,r16
1000dba4:	0021883a 	mov	r16,zero
1000dba8:	003b5406 	br	1000c8fc <__alt_data_end+0xf800c8fc>
1000dbac:	1823883a 	mov	r17,r3
1000dbb0:	003cf306 	br	1000cf80 <__alt_data_end+0xf800cf80>
1000dbb4:	1823883a 	mov	r17,r3
1000dbb8:	003cad06 	br	1000ce70 <__alt_data_end+0xf800ce70>
1000dbbc:	0027883a 	mov	r19,zero
1000dbc0:	003fdc06 	br	1000db34 <__alt_data_end+0xf800db34>
1000dbc4:	d9402217 	ldw	r5,136(sp)
1000dbc8:	8005883a 	mov	r2,r16
1000dbcc:	b0c00043 	ldbu	r3,1(r22)
1000dbd0:	2c000017 	ldw	r16,0(r5)
1000dbd4:	29000104 	addi	r4,r5,4
1000dbd8:	d9002215 	stw	r4,136(sp)
1000dbdc:	102d883a 	mov	r22,r2
1000dbe0:	803fa50e 	bge	r16,zero,1000da78 <__alt_data_end+0xf800da78>
1000dbe4:	18c03fcc 	andi	r3,r3,255
1000dbe8:	18c0201c 	xori	r3,r3,128
1000dbec:	043fffc4 	movi	r16,-1
1000dbf0:	18ffe004 	addi	r3,r3,-128
1000dbf4:	003b4006 	br	1000c8f8 <__alt_data_end+0xf800c8f8>
1000dbf8:	d9402303 	ldbu	r5,140(sp)
1000dbfc:	d9401d85 	stb	r5,118(sp)
1000dc00:	003cae06 	br	1000cebc <__alt_data_end+0xf800cebc>
1000dc04:	d8c02303 	ldbu	r3,140(sp)
1000dc08:	d8c01d85 	stb	r3,118(sp)
1000dc0c:	003d1406 	br	1000d060 <__alt_data_end+0xf800d060>
1000dc10:	d8c02303 	ldbu	r3,140(sp)
1000dc14:	d8c01d85 	stb	r3,118(sp)
1000dc18:	003cca06 	br	1000cf44 <__alt_data_end+0xf800cf44>
1000dc1c:	8880004c 	andi	r2,r17,1
1000dc20:	002b883a 	mov	r21,zero
1000dc24:	10000526 	beq	r2,zero,1000dc3c <___vfiprintf_internal_r+0x14b8>
1000dc28:	00800c04 	movi	r2,48
1000dc2c:	d88019c5 	stb	r2,103(sp)
1000dc30:	dd002817 	ldw	r20,160(sp)
1000dc34:	ddc019c4 	addi	r23,sp,103
1000dc38:	003bd506 	br	1000cb90 <__alt_data_end+0xf800cb90>
1000dc3c:	0029883a 	mov	r20,zero
1000dc40:	ddc01a04 	addi	r23,sp,104
1000dc44:	003bd206 	br	1000cb90 <__alt_data_end+0xf800cb90>
1000dc48:	d9002303 	ldbu	r4,140(sp)
1000dc4c:	d9001d85 	stb	r4,118(sp)
1000dc50:	003da606 	br	1000d2ec <__alt_data_end+0xf800d2ec>
1000dc54:	d8c02303 	ldbu	r3,140(sp)
1000dc58:	d8c01d85 	stb	r3,118(sp)
1000dc5c:	003c7606 	br	1000ce38 <__alt_data_end+0xf800ce38>
1000dc60:	d8c02303 	ldbu	r3,140(sp)
1000dc64:	d8c01d85 	stb	r3,118(sp)
1000dc68:	003c6506 	br	1000ce00 <__alt_data_end+0xf800ce00>
1000dc6c:	d9002303 	ldbu	r4,140(sp)
1000dc70:	d9001d85 	stb	r4,118(sp)
1000dc74:	003d3d06 	br	1000d16c <__alt_data_end+0xf800d16c>
1000dc78:	d8c02303 	ldbu	r3,140(sp)
1000dc7c:	d8c01d85 	stb	r3,118(sp)
1000dc80:	003d1d06 	br	1000d0f8 <__alt_data_end+0xf800d0f8>
1000dc84:	d8c02303 	ldbu	r3,140(sp)
1000dc88:	d8c01d85 	stb	r3,118(sp)
1000dc8c:	003d0306 	br	1000d09c <__alt_data_end+0xf800d09c>

1000dc90 <__vfiprintf_internal>:
1000dc90:	00840074 	movhi	r2,4097
1000dc94:	109ba704 	addi	r2,r2,28316
1000dc98:	300f883a 	mov	r7,r6
1000dc9c:	280d883a 	mov	r6,r5
1000dca0:	200b883a 	mov	r5,r4
1000dca4:	11000017 	ldw	r4,0(r2)
1000dca8:	000c7841 	jmpi	1000c784 <___vfiprintf_internal_r>

1000dcac <__sbprintf>:
1000dcac:	2880030b 	ldhu	r2,12(r5)
1000dcb0:	2ac01917 	ldw	r11,100(r5)
1000dcb4:	2a80038b 	ldhu	r10,14(r5)
1000dcb8:	2a400717 	ldw	r9,28(r5)
1000dcbc:	2a000917 	ldw	r8,36(r5)
1000dcc0:	defee204 	addi	sp,sp,-1144
1000dcc4:	00c10004 	movi	r3,1024
1000dcc8:	dc011a15 	stw	r16,1128(sp)
1000dccc:	10bfff4c 	andi	r2,r2,65533
1000dcd0:	2821883a 	mov	r16,r5
1000dcd4:	d8cb883a 	add	r5,sp,r3
1000dcd8:	dc811c15 	stw	r18,1136(sp)
1000dcdc:	dc411b15 	stw	r17,1132(sp)
1000dce0:	dfc11d15 	stw	ra,1140(sp)
1000dce4:	2025883a 	mov	r18,r4
1000dce8:	d881030d 	sth	r2,1036(sp)
1000dcec:	dac11915 	stw	r11,1124(sp)
1000dcf0:	da81038d 	sth	r10,1038(sp)
1000dcf4:	da410715 	stw	r9,1052(sp)
1000dcf8:	da010915 	stw	r8,1060(sp)
1000dcfc:	dec10015 	stw	sp,1024(sp)
1000dd00:	dec10415 	stw	sp,1040(sp)
1000dd04:	d8c10215 	stw	r3,1032(sp)
1000dd08:	d8c10515 	stw	r3,1044(sp)
1000dd0c:	d8010615 	stw	zero,1048(sp)
1000dd10:	000c7840 	call	1000c784 <___vfiprintf_internal_r>
1000dd14:	1023883a 	mov	r17,r2
1000dd18:	10000416 	blt	r2,zero,1000dd2c <__sbprintf+0x80>
1000dd1c:	d9410004 	addi	r5,sp,1024
1000dd20:	9009883a 	mov	r4,r18
1000dd24:	00099c40 	call	100099c4 <_fflush_r>
1000dd28:	10000d1e 	bne	r2,zero,1000dd60 <__sbprintf+0xb4>
1000dd2c:	d881030b 	ldhu	r2,1036(sp)
1000dd30:	1080100c 	andi	r2,r2,64
1000dd34:	10000326 	beq	r2,zero,1000dd44 <__sbprintf+0x98>
1000dd38:	8080030b 	ldhu	r2,12(r16)
1000dd3c:	10801014 	ori	r2,r2,64
1000dd40:	8080030d 	sth	r2,12(r16)
1000dd44:	8805883a 	mov	r2,r17
1000dd48:	dfc11d17 	ldw	ra,1140(sp)
1000dd4c:	dc811c17 	ldw	r18,1136(sp)
1000dd50:	dc411b17 	ldw	r17,1132(sp)
1000dd54:	dc011a17 	ldw	r16,1128(sp)
1000dd58:	dec11e04 	addi	sp,sp,1144
1000dd5c:	f800283a 	ret
1000dd60:	047fffc4 	movi	r17,-1
1000dd64:	003ff106 	br	1000dd2c <__alt_data_end+0xf800dd2c>

1000dd68 <_write_r>:
1000dd68:	defffd04 	addi	sp,sp,-12
1000dd6c:	2805883a 	mov	r2,r5
1000dd70:	dc000015 	stw	r16,0(sp)
1000dd74:	040400b4 	movhi	r16,4098
1000dd78:	dc400115 	stw	r17,4(sp)
1000dd7c:	300b883a 	mov	r5,r6
1000dd80:	84228304 	addi	r16,r16,-30196
1000dd84:	2023883a 	mov	r17,r4
1000dd88:	380d883a 	mov	r6,r7
1000dd8c:	1009883a 	mov	r4,r2
1000dd90:	dfc00215 	stw	ra,8(sp)
1000dd94:	80000015 	stw	zero,0(r16)
1000dd98:	00127500 	call	10012750 <write>
1000dd9c:	00ffffc4 	movi	r3,-1
1000dda0:	10c00526 	beq	r2,r3,1000ddb8 <_write_r+0x50>
1000dda4:	dfc00217 	ldw	ra,8(sp)
1000dda8:	dc400117 	ldw	r17,4(sp)
1000ddac:	dc000017 	ldw	r16,0(sp)
1000ddb0:	dec00304 	addi	sp,sp,12
1000ddb4:	f800283a 	ret
1000ddb8:	80c00017 	ldw	r3,0(r16)
1000ddbc:	183ff926 	beq	r3,zero,1000dda4 <__alt_data_end+0xf800dda4>
1000ddc0:	88c00015 	stw	r3,0(r17)
1000ddc4:	003ff706 	br	1000dda4 <__alt_data_end+0xf800dda4>

1000ddc8 <_close_r>:
1000ddc8:	defffd04 	addi	sp,sp,-12
1000ddcc:	dc000015 	stw	r16,0(sp)
1000ddd0:	040400b4 	movhi	r16,4098
1000ddd4:	dc400115 	stw	r17,4(sp)
1000ddd8:	84228304 	addi	r16,r16,-30196
1000dddc:	2023883a 	mov	r17,r4
1000dde0:	2809883a 	mov	r4,r5
1000dde4:	dfc00215 	stw	ra,8(sp)
1000dde8:	80000015 	stw	zero,0(r16)
1000ddec:	0011d080 	call	10011d08 <close>
1000ddf0:	00ffffc4 	movi	r3,-1
1000ddf4:	10c00526 	beq	r2,r3,1000de0c <_close_r+0x44>
1000ddf8:	dfc00217 	ldw	ra,8(sp)
1000ddfc:	dc400117 	ldw	r17,4(sp)
1000de00:	dc000017 	ldw	r16,0(sp)
1000de04:	dec00304 	addi	sp,sp,12
1000de08:	f800283a 	ret
1000de0c:	80c00017 	ldw	r3,0(r16)
1000de10:	183ff926 	beq	r3,zero,1000ddf8 <__alt_data_end+0xf800ddf8>
1000de14:	88c00015 	stw	r3,0(r17)
1000de18:	003ff706 	br	1000ddf8 <__alt_data_end+0xf800ddf8>

1000de1c <_calloc_r>:
1000de1c:	defffe04 	addi	sp,sp,-8
1000de20:	2805883a 	mov	r2,r5
1000de24:	dc000015 	stw	r16,0(sp)
1000de28:	300b883a 	mov	r5,r6
1000de2c:	2021883a 	mov	r16,r4
1000de30:	1009883a 	mov	r4,r2
1000de34:	dfc00115 	stw	ra,4(sp)
1000de38:	00045280 	call	10004528 <__mulsi3>
1000de3c:	100b883a 	mov	r5,r2
1000de40:	8009883a 	mov	r4,r16
1000de44:	0004ab00 	call	10004ab0 <_malloc_r>
1000de48:	10002926 	beq	r2,zero,1000def0 <_calloc_r+0xd4>
1000de4c:	11bfff17 	ldw	r6,-4(r2)
1000de50:	1021883a 	mov	r16,r2
1000de54:	00bfff04 	movi	r2,-4
1000de58:	308c703a 	and	r6,r6,r2
1000de5c:	00c00904 	movi	r3,36
1000de60:	308d883a 	add	r6,r6,r2
1000de64:	19801636 	bltu	r3,r6,1000dec0 <_calloc_r+0xa4>
1000de68:	008004c4 	movi	r2,19
1000de6c:	11800b2e 	bgeu	r2,r6,1000de9c <_calloc_r+0x80>
1000de70:	80000015 	stw	zero,0(r16)
1000de74:	80000115 	stw	zero,4(r16)
1000de78:	008006c4 	movi	r2,27
1000de7c:	11801a2e 	bgeu	r2,r6,1000dee8 <_calloc_r+0xcc>
1000de80:	80000215 	stw	zero,8(r16)
1000de84:	80000315 	stw	zero,12(r16)
1000de88:	30c0151e 	bne	r6,r3,1000dee0 <_calloc_r+0xc4>
1000de8c:	80000415 	stw	zero,16(r16)
1000de90:	80800604 	addi	r2,r16,24
1000de94:	80000515 	stw	zero,20(r16)
1000de98:	00000106 	br	1000dea0 <_calloc_r+0x84>
1000de9c:	8005883a 	mov	r2,r16
1000dea0:	10000015 	stw	zero,0(r2)
1000dea4:	10000115 	stw	zero,4(r2)
1000dea8:	10000215 	stw	zero,8(r2)
1000deac:	8005883a 	mov	r2,r16
1000deb0:	dfc00117 	ldw	ra,4(sp)
1000deb4:	dc000017 	ldw	r16,0(sp)
1000deb8:	dec00204 	addi	sp,sp,8
1000debc:	f800283a 	ret
1000dec0:	000b883a 	mov	r5,zero
1000dec4:	8009883a 	mov	r4,r16
1000dec8:	00052bc0 	call	100052bc <memset>
1000decc:	8005883a 	mov	r2,r16
1000ded0:	dfc00117 	ldw	ra,4(sp)
1000ded4:	dc000017 	ldw	r16,0(sp)
1000ded8:	dec00204 	addi	sp,sp,8
1000dedc:	f800283a 	ret
1000dee0:	80800404 	addi	r2,r16,16
1000dee4:	003fee06 	br	1000dea0 <__alt_data_end+0xf800dea0>
1000dee8:	80800204 	addi	r2,r16,8
1000deec:	003fec06 	br	1000dea0 <__alt_data_end+0xf800dea0>
1000def0:	0005883a 	mov	r2,zero
1000def4:	003fee06 	br	1000deb0 <__alt_data_end+0xf800deb0>

1000def8 <_fclose_r>:
1000def8:	28003926 	beq	r5,zero,1000dfe0 <_fclose_r+0xe8>
1000defc:	defffc04 	addi	sp,sp,-16
1000df00:	dc400115 	stw	r17,4(sp)
1000df04:	dc000015 	stw	r16,0(sp)
1000df08:	dfc00315 	stw	ra,12(sp)
1000df0c:	dc800215 	stw	r18,8(sp)
1000df10:	2023883a 	mov	r17,r4
1000df14:	2821883a 	mov	r16,r5
1000df18:	20000226 	beq	r4,zero,1000df24 <_fclose_r+0x2c>
1000df1c:	20800e17 	ldw	r2,56(r4)
1000df20:	10002726 	beq	r2,zero,1000dfc0 <_fclose_r+0xc8>
1000df24:	8080030f 	ldh	r2,12(r16)
1000df28:	1000071e 	bne	r2,zero,1000df48 <_fclose_r+0x50>
1000df2c:	0005883a 	mov	r2,zero
1000df30:	dfc00317 	ldw	ra,12(sp)
1000df34:	dc800217 	ldw	r18,8(sp)
1000df38:	dc400117 	ldw	r17,4(sp)
1000df3c:	dc000017 	ldw	r16,0(sp)
1000df40:	dec00404 	addi	sp,sp,16
1000df44:	f800283a 	ret
1000df48:	800b883a 	mov	r5,r16
1000df4c:	8809883a 	mov	r4,r17
1000df50:	00097a80 	call	100097a8 <__sflush_r>
1000df54:	1025883a 	mov	r18,r2
1000df58:	80800b17 	ldw	r2,44(r16)
1000df5c:	10000426 	beq	r2,zero,1000df70 <_fclose_r+0x78>
1000df60:	81400717 	ldw	r5,28(r16)
1000df64:	8809883a 	mov	r4,r17
1000df68:	103ee83a 	callr	r2
1000df6c:	10001616 	blt	r2,zero,1000dfc8 <_fclose_r+0xd0>
1000df70:	8080030b 	ldhu	r2,12(r16)
1000df74:	1080200c 	andi	r2,r2,128
1000df78:	1000151e 	bne	r2,zero,1000dfd0 <_fclose_r+0xd8>
1000df7c:	81400c17 	ldw	r5,48(r16)
1000df80:	28000526 	beq	r5,zero,1000df98 <_fclose_r+0xa0>
1000df84:	80801004 	addi	r2,r16,64
1000df88:	28800226 	beq	r5,r2,1000df94 <_fclose_r+0x9c>
1000df8c:	8809883a 	mov	r4,r17
1000df90:	0009f240 	call	10009f24 <_free_r>
1000df94:	80000c15 	stw	zero,48(r16)
1000df98:	81401117 	ldw	r5,68(r16)
1000df9c:	28000326 	beq	r5,zero,1000dfac <_fclose_r+0xb4>
1000dfa0:	8809883a 	mov	r4,r17
1000dfa4:	0009f240 	call	10009f24 <_free_r>
1000dfa8:	80001115 	stw	zero,68(r16)
1000dfac:	0009dc00 	call	10009dc0 <__sfp_lock_acquire>
1000dfb0:	8000030d 	sth	zero,12(r16)
1000dfb4:	0009dc40 	call	10009dc4 <__sfp_lock_release>
1000dfb8:	9005883a 	mov	r2,r18
1000dfbc:	003fdc06 	br	1000df30 <__alt_data_end+0xf800df30>
1000dfc0:	0009db00 	call	10009db0 <__sinit>
1000dfc4:	003fd706 	br	1000df24 <__alt_data_end+0xf800df24>
1000dfc8:	04bfffc4 	movi	r18,-1
1000dfcc:	003fe806 	br	1000df70 <__alt_data_end+0xf800df70>
1000dfd0:	81400417 	ldw	r5,16(r16)
1000dfd4:	8809883a 	mov	r4,r17
1000dfd8:	0009f240 	call	10009f24 <_free_r>
1000dfdc:	003fe706 	br	1000df7c <__alt_data_end+0xf800df7c>
1000dfe0:	0005883a 	mov	r2,zero
1000dfe4:	f800283a 	ret

1000dfe8 <fclose>:
1000dfe8:	00840074 	movhi	r2,4097
1000dfec:	109ba704 	addi	r2,r2,28316
1000dff0:	200b883a 	mov	r5,r4
1000dff4:	11000017 	ldw	r4,0(r2)
1000dff8:	000def81 	jmpi	1000def8 <_fclose_r>

1000dffc <__fputwc>:
1000dffc:	defff804 	addi	sp,sp,-32
1000e000:	dcc00415 	stw	r19,16(sp)
1000e004:	dc800315 	stw	r18,12(sp)
1000e008:	dc000115 	stw	r16,4(sp)
1000e00c:	dfc00715 	stw	ra,28(sp)
1000e010:	dd400615 	stw	r21,24(sp)
1000e014:	dd000515 	stw	r20,20(sp)
1000e018:	dc400215 	stw	r17,8(sp)
1000e01c:	2027883a 	mov	r19,r4
1000e020:	2825883a 	mov	r18,r5
1000e024:	3021883a 	mov	r16,r6
1000e028:	000a90c0 	call	1000a90c <__locale_mb_cur_max>
1000e02c:	00c00044 	movi	r3,1
1000e030:	10c03e26 	beq	r2,r3,1000e12c <__fputwc+0x130>
1000e034:	81c01704 	addi	r7,r16,92
1000e038:	900d883a 	mov	r6,r18
1000e03c:	d80b883a 	mov	r5,sp
1000e040:	9809883a 	mov	r4,r19
1000e044:	000e4cc0 	call	1000e4cc <_wcrtomb_r>
1000e048:	1029883a 	mov	r20,r2
1000e04c:	00bfffc4 	movi	r2,-1
1000e050:	a0802026 	beq	r20,r2,1000e0d4 <__fputwc+0xd8>
1000e054:	d9400003 	ldbu	r5,0(sp)
1000e058:	a0001c26 	beq	r20,zero,1000e0cc <__fputwc+0xd0>
1000e05c:	0023883a 	mov	r17,zero
1000e060:	05400284 	movi	r21,10
1000e064:	00000906 	br	1000e08c <__fputwc+0x90>
1000e068:	80800017 	ldw	r2,0(r16)
1000e06c:	11400005 	stb	r5,0(r2)
1000e070:	80c00017 	ldw	r3,0(r16)
1000e074:	18c00044 	addi	r3,r3,1
1000e078:	80c00015 	stw	r3,0(r16)
1000e07c:	8c400044 	addi	r17,r17,1
1000e080:	dc45883a 	add	r2,sp,r17
1000e084:	8d00112e 	bgeu	r17,r20,1000e0cc <__fputwc+0xd0>
1000e088:	11400003 	ldbu	r5,0(r2)
1000e08c:	80c00217 	ldw	r3,8(r16)
1000e090:	18ffffc4 	addi	r3,r3,-1
1000e094:	80c00215 	stw	r3,8(r16)
1000e098:	183ff30e 	bge	r3,zero,1000e068 <__alt_data_end+0xf800e068>
1000e09c:	80800617 	ldw	r2,24(r16)
1000e0a0:	18801916 	blt	r3,r2,1000e108 <__fputwc+0x10c>
1000e0a4:	80800017 	ldw	r2,0(r16)
1000e0a8:	11400005 	stb	r5,0(r2)
1000e0ac:	80800017 	ldw	r2,0(r16)
1000e0b0:	10c00003 	ldbu	r3,0(r2)
1000e0b4:	10800044 	addi	r2,r2,1
1000e0b8:	1d402326 	beq	r3,r21,1000e148 <__fputwc+0x14c>
1000e0bc:	80800015 	stw	r2,0(r16)
1000e0c0:	8c400044 	addi	r17,r17,1
1000e0c4:	dc45883a 	add	r2,sp,r17
1000e0c8:	8d3fef36 	bltu	r17,r20,1000e088 <__alt_data_end+0xf800e088>
1000e0cc:	9005883a 	mov	r2,r18
1000e0d0:	00000406 	br	1000e0e4 <__fputwc+0xe8>
1000e0d4:	80c0030b 	ldhu	r3,12(r16)
1000e0d8:	a005883a 	mov	r2,r20
1000e0dc:	18c01014 	ori	r3,r3,64
1000e0e0:	80c0030d 	sth	r3,12(r16)
1000e0e4:	dfc00717 	ldw	ra,28(sp)
1000e0e8:	dd400617 	ldw	r21,24(sp)
1000e0ec:	dd000517 	ldw	r20,20(sp)
1000e0f0:	dcc00417 	ldw	r19,16(sp)
1000e0f4:	dc800317 	ldw	r18,12(sp)
1000e0f8:	dc400217 	ldw	r17,8(sp)
1000e0fc:	dc000117 	ldw	r16,4(sp)
1000e100:	dec00804 	addi	sp,sp,32
1000e104:	f800283a 	ret
1000e108:	800d883a 	mov	r6,r16
1000e10c:	29403fcc 	andi	r5,r5,255
1000e110:	9809883a 	mov	r4,r19
1000e114:	000e3740 	call	1000e374 <__swbuf_r>
1000e118:	10bfffe0 	cmpeqi	r2,r2,-1
1000e11c:	10803fcc 	andi	r2,r2,255
1000e120:	103fd626 	beq	r2,zero,1000e07c <__alt_data_end+0xf800e07c>
1000e124:	00bfffc4 	movi	r2,-1
1000e128:	003fee06 	br	1000e0e4 <__alt_data_end+0xf800e0e4>
1000e12c:	90ffffc4 	addi	r3,r18,-1
1000e130:	01003f84 	movi	r4,254
1000e134:	20ffbf36 	bltu	r4,r3,1000e034 <__alt_data_end+0xf800e034>
1000e138:	900b883a 	mov	r5,r18
1000e13c:	dc800005 	stb	r18,0(sp)
1000e140:	1029883a 	mov	r20,r2
1000e144:	003fc506 	br	1000e05c <__alt_data_end+0xf800e05c>
1000e148:	800d883a 	mov	r6,r16
1000e14c:	a80b883a 	mov	r5,r21
1000e150:	9809883a 	mov	r4,r19
1000e154:	000e3740 	call	1000e374 <__swbuf_r>
1000e158:	10bfffe0 	cmpeqi	r2,r2,-1
1000e15c:	003fef06 	br	1000e11c <__alt_data_end+0xf800e11c>

1000e160 <_fputwc_r>:
1000e160:	3080030b 	ldhu	r2,12(r6)
1000e164:	10c8000c 	andi	r3,r2,8192
1000e168:	1800051e 	bne	r3,zero,1000e180 <_fputwc_r+0x20>
1000e16c:	30c01917 	ldw	r3,100(r6)
1000e170:	10880014 	ori	r2,r2,8192
1000e174:	3080030d 	sth	r2,12(r6)
1000e178:	18880014 	ori	r2,r3,8192
1000e17c:	30801915 	stw	r2,100(r6)
1000e180:	000dffc1 	jmpi	1000dffc <__fputwc>

1000e184 <fputwc>:
1000e184:	00840074 	movhi	r2,4097
1000e188:	defffc04 	addi	sp,sp,-16
1000e18c:	109ba704 	addi	r2,r2,28316
1000e190:	dc000115 	stw	r16,4(sp)
1000e194:	14000017 	ldw	r16,0(r2)
1000e198:	dc400215 	stw	r17,8(sp)
1000e19c:	dfc00315 	stw	ra,12(sp)
1000e1a0:	2023883a 	mov	r17,r4
1000e1a4:	80000226 	beq	r16,zero,1000e1b0 <fputwc+0x2c>
1000e1a8:	80800e17 	ldw	r2,56(r16)
1000e1ac:	10001026 	beq	r2,zero,1000e1f0 <fputwc+0x6c>
1000e1b0:	2880030b 	ldhu	r2,12(r5)
1000e1b4:	10c8000c 	andi	r3,r2,8192
1000e1b8:	1800051e 	bne	r3,zero,1000e1d0 <fputwc+0x4c>
1000e1bc:	28c01917 	ldw	r3,100(r5)
1000e1c0:	10880014 	ori	r2,r2,8192
1000e1c4:	2880030d 	sth	r2,12(r5)
1000e1c8:	18880014 	ori	r2,r3,8192
1000e1cc:	28801915 	stw	r2,100(r5)
1000e1d0:	280d883a 	mov	r6,r5
1000e1d4:	8009883a 	mov	r4,r16
1000e1d8:	880b883a 	mov	r5,r17
1000e1dc:	dfc00317 	ldw	ra,12(sp)
1000e1e0:	dc400217 	ldw	r17,8(sp)
1000e1e4:	dc000117 	ldw	r16,4(sp)
1000e1e8:	dec00404 	addi	sp,sp,16
1000e1ec:	000dffc1 	jmpi	1000dffc <__fputwc>
1000e1f0:	8009883a 	mov	r4,r16
1000e1f4:	d9400015 	stw	r5,0(sp)
1000e1f8:	0009db00 	call	10009db0 <__sinit>
1000e1fc:	d9400017 	ldw	r5,0(sp)
1000e200:	003feb06 	br	1000e1b0 <__alt_data_end+0xf800e1b0>

1000e204 <_fstat_r>:
1000e204:	defffd04 	addi	sp,sp,-12
1000e208:	2805883a 	mov	r2,r5
1000e20c:	dc000015 	stw	r16,0(sp)
1000e210:	040400b4 	movhi	r16,4098
1000e214:	dc400115 	stw	r17,4(sp)
1000e218:	84228304 	addi	r16,r16,-30196
1000e21c:	2023883a 	mov	r17,r4
1000e220:	300b883a 	mov	r5,r6
1000e224:	1009883a 	mov	r4,r2
1000e228:	dfc00215 	stw	ra,8(sp)
1000e22c:	80000015 	stw	zero,0(r16)
1000e230:	0011e7c0 	call	10011e7c <fstat>
1000e234:	00ffffc4 	movi	r3,-1
1000e238:	10c00526 	beq	r2,r3,1000e250 <_fstat_r+0x4c>
1000e23c:	dfc00217 	ldw	ra,8(sp)
1000e240:	dc400117 	ldw	r17,4(sp)
1000e244:	dc000017 	ldw	r16,0(sp)
1000e248:	dec00304 	addi	sp,sp,12
1000e24c:	f800283a 	ret
1000e250:	80c00017 	ldw	r3,0(r16)
1000e254:	183ff926 	beq	r3,zero,1000e23c <__alt_data_end+0xf800e23c>
1000e258:	88c00015 	stw	r3,0(r17)
1000e25c:	003ff706 	br	1000e23c <__alt_data_end+0xf800e23c>

1000e260 <_isatty_r>:
1000e260:	defffd04 	addi	sp,sp,-12
1000e264:	dc000015 	stw	r16,0(sp)
1000e268:	040400b4 	movhi	r16,4098
1000e26c:	dc400115 	stw	r17,4(sp)
1000e270:	84228304 	addi	r16,r16,-30196
1000e274:	2023883a 	mov	r17,r4
1000e278:	2809883a 	mov	r4,r5
1000e27c:	dfc00215 	stw	ra,8(sp)
1000e280:	80000015 	stw	zero,0(r16)
1000e284:	0011f900 	call	10011f90 <isatty>
1000e288:	00ffffc4 	movi	r3,-1
1000e28c:	10c00526 	beq	r2,r3,1000e2a4 <_isatty_r+0x44>
1000e290:	dfc00217 	ldw	ra,8(sp)
1000e294:	dc400117 	ldw	r17,4(sp)
1000e298:	dc000017 	ldw	r16,0(sp)
1000e29c:	dec00304 	addi	sp,sp,12
1000e2a0:	f800283a 	ret
1000e2a4:	80c00017 	ldw	r3,0(r16)
1000e2a8:	183ff926 	beq	r3,zero,1000e290 <__alt_data_end+0xf800e290>
1000e2ac:	88c00015 	stw	r3,0(r17)
1000e2b0:	003ff706 	br	1000e290 <__alt_data_end+0xf800e290>

1000e2b4 <_lseek_r>:
1000e2b4:	defffd04 	addi	sp,sp,-12
1000e2b8:	2805883a 	mov	r2,r5
1000e2bc:	dc000015 	stw	r16,0(sp)
1000e2c0:	040400b4 	movhi	r16,4098
1000e2c4:	dc400115 	stw	r17,4(sp)
1000e2c8:	300b883a 	mov	r5,r6
1000e2cc:	84228304 	addi	r16,r16,-30196
1000e2d0:	2023883a 	mov	r17,r4
1000e2d4:	380d883a 	mov	r6,r7
1000e2d8:	1009883a 	mov	r4,r2
1000e2dc:	dfc00215 	stw	ra,8(sp)
1000e2e0:	80000015 	stw	zero,0(r16)
1000e2e4:	00122d00 	call	100122d0 <lseek>
1000e2e8:	00ffffc4 	movi	r3,-1
1000e2ec:	10c00526 	beq	r2,r3,1000e304 <_lseek_r+0x50>
1000e2f0:	dfc00217 	ldw	ra,8(sp)
1000e2f4:	dc400117 	ldw	r17,4(sp)
1000e2f8:	dc000017 	ldw	r16,0(sp)
1000e2fc:	dec00304 	addi	sp,sp,12
1000e300:	f800283a 	ret
1000e304:	80c00017 	ldw	r3,0(r16)
1000e308:	183ff926 	beq	r3,zero,1000e2f0 <__alt_data_end+0xf800e2f0>
1000e30c:	88c00015 	stw	r3,0(r17)
1000e310:	003ff706 	br	1000e2f0 <__alt_data_end+0xf800e2f0>

1000e314 <_read_r>:
1000e314:	defffd04 	addi	sp,sp,-12
1000e318:	2805883a 	mov	r2,r5
1000e31c:	dc000015 	stw	r16,0(sp)
1000e320:	040400b4 	movhi	r16,4098
1000e324:	dc400115 	stw	r17,4(sp)
1000e328:	300b883a 	mov	r5,r6
1000e32c:	84228304 	addi	r16,r16,-30196
1000e330:	2023883a 	mov	r17,r4
1000e334:	380d883a 	mov	r6,r7
1000e338:	1009883a 	mov	r4,r2
1000e33c:	dfc00215 	stw	ra,8(sp)
1000e340:	80000015 	stw	zero,0(r16)
1000e344:	00124ac0 	call	100124ac <read>
1000e348:	00ffffc4 	movi	r3,-1
1000e34c:	10c00526 	beq	r2,r3,1000e364 <_read_r+0x50>
1000e350:	dfc00217 	ldw	ra,8(sp)
1000e354:	dc400117 	ldw	r17,4(sp)
1000e358:	dc000017 	ldw	r16,0(sp)
1000e35c:	dec00304 	addi	sp,sp,12
1000e360:	f800283a 	ret
1000e364:	80c00017 	ldw	r3,0(r16)
1000e368:	183ff926 	beq	r3,zero,1000e350 <__alt_data_end+0xf800e350>
1000e36c:	88c00015 	stw	r3,0(r17)
1000e370:	003ff706 	br	1000e350 <__alt_data_end+0xf800e350>

1000e374 <__swbuf_r>:
1000e374:	defffb04 	addi	sp,sp,-20
1000e378:	dcc00315 	stw	r19,12(sp)
1000e37c:	dc800215 	stw	r18,8(sp)
1000e380:	dc000015 	stw	r16,0(sp)
1000e384:	dfc00415 	stw	ra,16(sp)
1000e388:	dc400115 	stw	r17,4(sp)
1000e38c:	2025883a 	mov	r18,r4
1000e390:	2827883a 	mov	r19,r5
1000e394:	3021883a 	mov	r16,r6
1000e398:	20000226 	beq	r4,zero,1000e3a4 <__swbuf_r+0x30>
1000e39c:	20800e17 	ldw	r2,56(r4)
1000e3a0:	10004226 	beq	r2,zero,1000e4ac <__swbuf_r+0x138>
1000e3a4:	80800617 	ldw	r2,24(r16)
1000e3a8:	8100030b 	ldhu	r4,12(r16)
1000e3ac:	80800215 	stw	r2,8(r16)
1000e3b0:	2080020c 	andi	r2,r4,8
1000e3b4:	10003626 	beq	r2,zero,1000e490 <__swbuf_r+0x11c>
1000e3b8:	80c00417 	ldw	r3,16(r16)
1000e3bc:	18003426 	beq	r3,zero,1000e490 <__swbuf_r+0x11c>
1000e3c0:	2088000c 	andi	r2,r4,8192
1000e3c4:	9c403fcc 	andi	r17,r19,255
1000e3c8:	10001a26 	beq	r2,zero,1000e434 <__swbuf_r+0xc0>
1000e3cc:	80800017 	ldw	r2,0(r16)
1000e3d0:	81000517 	ldw	r4,20(r16)
1000e3d4:	10c7c83a 	sub	r3,r2,r3
1000e3d8:	1900200e 	bge	r3,r4,1000e45c <__swbuf_r+0xe8>
1000e3dc:	18c00044 	addi	r3,r3,1
1000e3e0:	81000217 	ldw	r4,8(r16)
1000e3e4:	11400044 	addi	r5,r2,1
1000e3e8:	81400015 	stw	r5,0(r16)
1000e3ec:	213fffc4 	addi	r4,r4,-1
1000e3f0:	81000215 	stw	r4,8(r16)
1000e3f4:	14c00005 	stb	r19,0(r2)
1000e3f8:	80800517 	ldw	r2,20(r16)
1000e3fc:	10c01e26 	beq	r2,r3,1000e478 <__swbuf_r+0x104>
1000e400:	8080030b 	ldhu	r2,12(r16)
1000e404:	1080004c 	andi	r2,r2,1
1000e408:	10000226 	beq	r2,zero,1000e414 <__swbuf_r+0xa0>
1000e40c:	00800284 	movi	r2,10
1000e410:	88801926 	beq	r17,r2,1000e478 <__swbuf_r+0x104>
1000e414:	8805883a 	mov	r2,r17
1000e418:	dfc00417 	ldw	ra,16(sp)
1000e41c:	dcc00317 	ldw	r19,12(sp)
1000e420:	dc800217 	ldw	r18,8(sp)
1000e424:	dc400117 	ldw	r17,4(sp)
1000e428:	dc000017 	ldw	r16,0(sp)
1000e42c:	dec00504 	addi	sp,sp,20
1000e430:	f800283a 	ret
1000e434:	81401917 	ldw	r5,100(r16)
1000e438:	00b7ffc4 	movi	r2,-8193
1000e43c:	21080014 	ori	r4,r4,8192
1000e440:	2884703a 	and	r2,r5,r2
1000e444:	80801915 	stw	r2,100(r16)
1000e448:	80800017 	ldw	r2,0(r16)
1000e44c:	8100030d 	sth	r4,12(r16)
1000e450:	81000517 	ldw	r4,20(r16)
1000e454:	10c7c83a 	sub	r3,r2,r3
1000e458:	193fe016 	blt	r3,r4,1000e3dc <__alt_data_end+0xf800e3dc>
1000e45c:	800b883a 	mov	r5,r16
1000e460:	9009883a 	mov	r4,r18
1000e464:	00099c40 	call	100099c4 <_fflush_r>
1000e468:	1000071e 	bne	r2,zero,1000e488 <__swbuf_r+0x114>
1000e46c:	80800017 	ldw	r2,0(r16)
1000e470:	00c00044 	movi	r3,1
1000e474:	003fda06 	br	1000e3e0 <__alt_data_end+0xf800e3e0>
1000e478:	800b883a 	mov	r5,r16
1000e47c:	9009883a 	mov	r4,r18
1000e480:	00099c40 	call	100099c4 <_fflush_r>
1000e484:	103fe326 	beq	r2,zero,1000e414 <__alt_data_end+0xf800e414>
1000e488:	00bfffc4 	movi	r2,-1
1000e48c:	003fe206 	br	1000e418 <__alt_data_end+0xf800e418>
1000e490:	800b883a 	mov	r5,r16
1000e494:	9009883a 	mov	r4,r18
1000e498:	0007da40 	call	10007da4 <__swsetup_r>
1000e49c:	103ffa1e 	bne	r2,zero,1000e488 <__alt_data_end+0xf800e488>
1000e4a0:	8100030b 	ldhu	r4,12(r16)
1000e4a4:	80c00417 	ldw	r3,16(r16)
1000e4a8:	003fc506 	br	1000e3c0 <__alt_data_end+0xf800e3c0>
1000e4ac:	0009db00 	call	10009db0 <__sinit>
1000e4b0:	003fbc06 	br	1000e3a4 <__alt_data_end+0xf800e3a4>

1000e4b4 <__swbuf>:
1000e4b4:	00840074 	movhi	r2,4097
1000e4b8:	109ba704 	addi	r2,r2,28316
1000e4bc:	280d883a 	mov	r6,r5
1000e4c0:	200b883a 	mov	r5,r4
1000e4c4:	11000017 	ldw	r4,0(r2)
1000e4c8:	000e3741 	jmpi	1000e374 <__swbuf_r>

1000e4cc <_wcrtomb_r>:
1000e4cc:	defff604 	addi	sp,sp,-40
1000e4d0:	00840074 	movhi	r2,4097
1000e4d4:	dc800815 	stw	r18,32(sp)
1000e4d8:	dc400715 	stw	r17,28(sp)
1000e4dc:	dc000615 	stw	r16,24(sp)
1000e4e0:	109ba904 	addi	r2,r2,28324
1000e4e4:	dfc00915 	stw	ra,36(sp)
1000e4e8:	2021883a 	mov	r16,r4
1000e4ec:	3823883a 	mov	r17,r7
1000e4f0:	14800017 	ldw	r18,0(r2)
1000e4f4:	28001426 	beq	r5,zero,1000e548 <_wcrtomb_r+0x7c>
1000e4f8:	d9400415 	stw	r5,16(sp)
1000e4fc:	d9800515 	stw	r6,20(sp)
1000e500:	000a9000 	call	1000a900 <__locale_charset>
1000e504:	d9800517 	ldw	r6,20(sp)
1000e508:	d9400417 	ldw	r5,16(sp)
1000e50c:	100f883a 	mov	r7,r2
1000e510:	dc400015 	stw	r17,0(sp)
1000e514:	8009883a 	mov	r4,r16
1000e518:	903ee83a 	callr	r18
1000e51c:	00ffffc4 	movi	r3,-1
1000e520:	10c0031e 	bne	r2,r3,1000e530 <_wcrtomb_r+0x64>
1000e524:	88000015 	stw	zero,0(r17)
1000e528:	00c02284 	movi	r3,138
1000e52c:	80c00015 	stw	r3,0(r16)
1000e530:	dfc00917 	ldw	ra,36(sp)
1000e534:	dc800817 	ldw	r18,32(sp)
1000e538:	dc400717 	ldw	r17,28(sp)
1000e53c:	dc000617 	ldw	r16,24(sp)
1000e540:	dec00a04 	addi	sp,sp,40
1000e544:	f800283a 	ret
1000e548:	000a9000 	call	1000a900 <__locale_charset>
1000e54c:	100f883a 	mov	r7,r2
1000e550:	dc400015 	stw	r17,0(sp)
1000e554:	000d883a 	mov	r6,zero
1000e558:	d9400104 	addi	r5,sp,4
1000e55c:	8009883a 	mov	r4,r16
1000e560:	903ee83a 	callr	r18
1000e564:	003fed06 	br	1000e51c <__alt_data_end+0xf800e51c>

1000e568 <wcrtomb>:
1000e568:	defff604 	addi	sp,sp,-40
1000e56c:	00840074 	movhi	r2,4097
1000e570:	dc800615 	stw	r18,24(sp)
1000e574:	dc400515 	stw	r17,20(sp)
1000e578:	109ba704 	addi	r2,r2,28316
1000e57c:	dfc00915 	stw	ra,36(sp)
1000e580:	dd000815 	stw	r20,32(sp)
1000e584:	dcc00715 	stw	r19,28(sp)
1000e588:	dc000415 	stw	r16,16(sp)
1000e58c:	3025883a 	mov	r18,r6
1000e590:	14400017 	ldw	r17,0(r2)
1000e594:	20001926 	beq	r4,zero,1000e5fc <wcrtomb+0x94>
1000e598:	00840074 	movhi	r2,4097
1000e59c:	109ba904 	addi	r2,r2,28324
1000e5a0:	15000017 	ldw	r20,0(r2)
1000e5a4:	2021883a 	mov	r16,r4
1000e5a8:	2827883a 	mov	r19,r5
1000e5ac:	000a9000 	call	1000a900 <__locale_charset>
1000e5b0:	100f883a 	mov	r7,r2
1000e5b4:	dc800015 	stw	r18,0(sp)
1000e5b8:	980d883a 	mov	r6,r19
1000e5bc:	800b883a 	mov	r5,r16
1000e5c0:	8809883a 	mov	r4,r17
1000e5c4:	a03ee83a 	callr	r20
1000e5c8:	00ffffc4 	movi	r3,-1
1000e5cc:	10c0031e 	bne	r2,r3,1000e5dc <wcrtomb+0x74>
1000e5d0:	90000015 	stw	zero,0(r18)
1000e5d4:	00c02284 	movi	r3,138
1000e5d8:	88c00015 	stw	r3,0(r17)
1000e5dc:	dfc00917 	ldw	ra,36(sp)
1000e5e0:	dd000817 	ldw	r20,32(sp)
1000e5e4:	dcc00717 	ldw	r19,28(sp)
1000e5e8:	dc800617 	ldw	r18,24(sp)
1000e5ec:	dc400517 	ldw	r17,20(sp)
1000e5f0:	dc000417 	ldw	r16,16(sp)
1000e5f4:	dec00a04 	addi	sp,sp,40
1000e5f8:	f800283a 	ret
1000e5fc:	00840074 	movhi	r2,4097
1000e600:	109ba904 	addi	r2,r2,28324
1000e604:	14000017 	ldw	r16,0(r2)
1000e608:	000a9000 	call	1000a900 <__locale_charset>
1000e60c:	100f883a 	mov	r7,r2
1000e610:	dc800015 	stw	r18,0(sp)
1000e614:	000d883a 	mov	r6,zero
1000e618:	d9400104 	addi	r5,sp,4
1000e61c:	8809883a 	mov	r4,r17
1000e620:	803ee83a 	callr	r16
1000e624:	003fe806 	br	1000e5c8 <__alt_data_end+0xf800e5c8>

1000e628 <__ascii_wctomb>:
1000e628:	28000526 	beq	r5,zero,1000e640 <__ascii_wctomb+0x18>
1000e62c:	00803fc4 	movi	r2,255
1000e630:	11800536 	bltu	r2,r6,1000e648 <__ascii_wctomb+0x20>
1000e634:	29800005 	stb	r6,0(r5)
1000e638:	00800044 	movi	r2,1
1000e63c:	f800283a 	ret
1000e640:	0005883a 	mov	r2,zero
1000e644:	f800283a 	ret
1000e648:	00802284 	movi	r2,138
1000e64c:	20800015 	stw	r2,0(r4)
1000e650:	00bfffc4 	movi	r2,-1
1000e654:	f800283a 	ret

1000e658 <_wctomb_r>:
1000e658:	00840074 	movhi	r2,4097
1000e65c:	defff904 	addi	sp,sp,-28
1000e660:	109ba904 	addi	r2,r2,28324
1000e664:	dfc00615 	stw	ra,24(sp)
1000e668:	dc400515 	stw	r17,20(sp)
1000e66c:	dc000415 	stw	r16,16(sp)
1000e670:	3823883a 	mov	r17,r7
1000e674:	14000017 	ldw	r16,0(r2)
1000e678:	d9000115 	stw	r4,4(sp)
1000e67c:	d9400215 	stw	r5,8(sp)
1000e680:	d9800315 	stw	r6,12(sp)
1000e684:	000a9000 	call	1000a900 <__locale_charset>
1000e688:	d9800317 	ldw	r6,12(sp)
1000e68c:	d9400217 	ldw	r5,8(sp)
1000e690:	d9000117 	ldw	r4,4(sp)
1000e694:	100f883a 	mov	r7,r2
1000e698:	dc400015 	stw	r17,0(sp)
1000e69c:	803ee83a 	callr	r16
1000e6a0:	dfc00617 	ldw	ra,24(sp)
1000e6a4:	dc400517 	ldw	r17,20(sp)
1000e6a8:	dc000417 	ldw	r16,16(sp)
1000e6ac:	dec00704 	addi	sp,sp,28
1000e6b0:	f800283a 	ret

1000e6b4 <__udivdi3>:
1000e6b4:	defff404 	addi	sp,sp,-48
1000e6b8:	dcc00515 	stw	r19,20(sp)
1000e6bc:	dc000215 	stw	r16,8(sp)
1000e6c0:	dfc00b15 	stw	ra,44(sp)
1000e6c4:	df000a15 	stw	fp,40(sp)
1000e6c8:	ddc00915 	stw	r23,36(sp)
1000e6cc:	dd800815 	stw	r22,32(sp)
1000e6d0:	dd400715 	stw	r21,28(sp)
1000e6d4:	dd000615 	stw	r20,24(sp)
1000e6d8:	dc800415 	stw	r18,16(sp)
1000e6dc:	dc400315 	stw	r17,12(sp)
1000e6e0:	2027883a 	mov	r19,r4
1000e6e4:	2821883a 	mov	r16,r5
1000e6e8:	3800461e 	bne	r7,zero,1000e804 <__udivdi3+0x150>
1000e6ec:	3023883a 	mov	r17,r6
1000e6f0:	2025883a 	mov	r18,r4
1000e6f4:	2980572e 	bgeu	r5,r6,1000e854 <__udivdi3+0x1a0>
1000e6f8:	00bfffd4 	movui	r2,65535
1000e6fc:	282d883a 	mov	r22,r5
1000e700:	1180b236 	bltu	r2,r6,1000e9cc <__udivdi3+0x318>
1000e704:	00803fc4 	movi	r2,255
1000e708:	1185803a 	cmpltu	r2,r2,r6
1000e70c:	100490fa 	slli	r2,r2,3
1000e710:	3086d83a 	srl	r3,r6,r2
1000e714:	01040074 	movhi	r4,4097
1000e718:	2114a004 	addi	r4,r4,21120
1000e71c:	20c7883a 	add	r3,r4,r3
1000e720:	18c00003 	ldbu	r3,0(r3)
1000e724:	1885883a 	add	r2,r3,r2
1000e728:	00c00804 	movi	r3,32
1000e72c:	1887c83a 	sub	r3,r3,r2
1000e730:	18000526 	beq	r3,zero,1000e748 <__udivdi3+0x94>
1000e734:	80e0983a 	sll	r16,r16,r3
1000e738:	9884d83a 	srl	r2,r19,r2
1000e73c:	30e2983a 	sll	r17,r6,r3
1000e740:	98e4983a 	sll	r18,r19,r3
1000e744:	142cb03a 	or	r22,r2,r16
1000e748:	882ad43a 	srli	r21,r17,16
1000e74c:	b009883a 	mov	r4,r22
1000e750:	8d3fffcc 	andi	r20,r17,65535
1000e754:	a80b883a 	mov	r5,r21
1000e758:	000f3d00 	call	1000f3d0 <__umodsi3>
1000e75c:	b009883a 	mov	r4,r22
1000e760:	a80b883a 	mov	r5,r21
1000e764:	1027883a 	mov	r19,r2
1000e768:	000f36c0 	call	1000f36c <__udivsi3>
1000e76c:	100b883a 	mov	r5,r2
1000e770:	a009883a 	mov	r4,r20
1000e774:	102d883a 	mov	r22,r2
1000e778:	00045280 	call	10004528 <__mulsi3>
1000e77c:	9826943a 	slli	r19,r19,16
1000e780:	9006d43a 	srli	r3,r18,16
1000e784:	1cc6b03a 	or	r3,r3,r19
1000e788:	1880052e 	bgeu	r3,r2,1000e7a0 <__udivdi3+0xec>
1000e78c:	1c47883a 	add	r3,r3,r17
1000e790:	b13fffc4 	addi	r4,r22,-1
1000e794:	1c400136 	bltu	r3,r17,1000e79c <__udivdi3+0xe8>
1000e798:	18814236 	bltu	r3,r2,1000eca4 <__udivdi3+0x5f0>
1000e79c:	202d883a 	mov	r22,r4
1000e7a0:	18a1c83a 	sub	r16,r3,r2
1000e7a4:	8009883a 	mov	r4,r16
1000e7a8:	a80b883a 	mov	r5,r21
1000e7ac:	000f3d00 	call	1000f3d0 <__umodsi3>
1000e7b0:	1027883a 	mov	r19,r2
1000e7b4:	8009883a 	mov	r4,r16
1000e7b8:	a80b883a 	mov	r5,r21
1000e7bc:	9826943a 	slli	r19,r19,16
1000e7c0:	000f36c0 	call	1000f36c <__udivsi3>
1000e7c4:	100b883a 	mov	r5,r2
1000e7c8:	a009883a 	mov	r4,r20
1000e7cc:	94bfffcc 	andi	r18,r18,65535
1000e7d0:	1021883a 	mov	r16,r2
1000e7d4:	94e4b03a 	or	r18,r18,r19
1000e7d8:	00045280 	call	10004528 <__mulsi3>
1000e7dc:	9080052e 	bgeu	r18,r2,1000e7f4 <__udivdi3+0x140>
1000e7e0:	8ca5883a 	add	r18,r17,r18
1000e7e4:	80ffffc4 	addi	r3,r16,-1
1000e7e8:	94410c36 	bltu	r18,r17,1000ec1c <__udivdi3+0x568>
1000e7ec:	90810b2e 	bgeu	r18,r2,1000ec1c <__udivdi3+0x568>
1000e7f0:	843fff84 	addi	r16,r16,-2
1000e7f4:	b004943a 	slli	r2,r22,16
1000e7f8:	0007883a 	mov	r3,zero
1000e7fc:	1404b03a 	or	r2,r2,r16
1000e800:	00005e06 	br	1000e97c <__udivdi3+0x2c8>
1000e804:	29c05b36 	bltu	r5,r7,1000e974 <__udivdi3+0x2c0>
1000e808:	00bfffd4 	movui	r2,65535
1000e80c:	11c0672e 	bgeu	r2,r7,1000e9ac <__udivdi3+0x2f8>
1000e810:	00804034 	movhi	r2,256
1000e814:	10bfffc4 	addi	r2,r2,-1
1000e818:	11c10a36 	bltu	r2,r7,1000ec44 <__udivdi3+0x590>
1000e81c:	00800404 	movi	r2,16
1000e820:	3886d83a 	srl	r3,r7,r2
1000e824:	01040074 	movhi	r4,4097
1000e828:	2114a004 	addi	r4,r4,21120
1000e82c:	20c7883a 	add	r3,r4,r3
1000e830:	18c00003 	ldbu	r3,0(r3)
1000e834:	05c00804 	movi	r23,32
1000e838:	1885883a 	add	r2,r3,r2
1000e83c:	b8afc83a 	sub	r23,r23,r2
1000e840:	b800671e 	bne	r23,zero,1000e9e0 <__udivdi3+0x32c>
1000e844:	3c010536 	bltu	r7,r16,1000ec5c <__udivdi3+0x5a8>
1000e848:	9985403a 	cmpgeu	r2,r19,r6
1000e84c:	0007883a 	mov	r3,zero
1000e850:	00004a06 	br	1000e97c <__udivdi3+0x2c8>
1000e854:	3000041e 	bne	r6,zero,1000e868 <__udivdi3+0x1b4>
1000e858:	000b883a 	mov	r5,zero
1000e85c:	01000044 	movi	r4,1
1000e860:	000f36c0 	call	1000f36c <__udivsi3>
1000e864:	1023883a 	mov	r17,r2
1000e868:	00bfffd4 	movui	r2,65535
1000e86c:	1440532e 	bgeu	r2,r17,1000e9bc <__udivdi3+0x308>
1000e870:	00804034 	movhi	r2,256
1000e874:	10bfffc4 	addi	r2,r2,-1
1000e878:	1440f436 	bltu	r2,r17,1000ec4c <__udivdi3+0x598>
1000e87c:	00800404 	movi	r2,16
1000e880:	8886d83a 	srl	r3,r17,r2
1000e884:	01040074 	movhi	r4,4097
1000e888:	2114a004 	addi	r4,r4,21120
1000e88c:	20c7883a 	add	r3,r4,r3
1000e890:	18c00003 	ldbu	r3,0(r3)
1000e894:	1885883a 	add	r2,r3,r2
1000e898:	00c00804 	movi	r3,32
1000e89c:	1887c83a 	sub	r3,r3,r2
1000e8a0:	1800a51e 	bne	r3,zero,1000eb38 <__udivdi3+0x484>
1000e8a4:	882ad43a 	srli	r21,r17,16
1000e8a8:	8461c83a 	sub	r16,r16,r17
1000e8ac:	8d3fffcc 	andi	r20,r17,65535
1000e8b0:	00c00044 	movi	r3,1
1000e8b4:	a80b883a 	mov	r5,r21
1000e8b8:	8009883a 	mov	r4,r16
1000e8bc:	d8c00115 	stw	r3,4(sp)
1000e8c0:	000f3d00 	call	1000f3d0 <__umodsi3>
1000e8c4:	a80b883a 	mov	r5,r21
1000e8c8:	8009883a 	mov	r4,r16
1000e8cc:	1027883a 	mov	r19,r2
1000e8d0:	000f36c0 	call	1000f36c <__udivsi3>
1000e8d4:	a00b883a 	mov	r5,r20
1000e8d8:	1009883a 	mov	r4,r2
1000e8dc:	102d883a 	mov	r22,r2
1000e8e0:	00045280 	call	10004528 <__mulsi3>
1000e8e4:	9826943a 	slli	r19,r19,16
1000e8e8:	900ed43a 	srli	r7,r18,16
1000e8ec:	d8c00117 	ldw	r3,4(sp)
1000e8f0:	3cceb03a 	or	r7,r7,r19
1000e8f4:	3880052e 	bgeu	r7,r2,1000e90c <__udivdi3+0x258>
1000e8f8:	3c4f883a 	add	r7,r7,r17
1000e8fc:	b13fffc4 	addi	r4,r22,-1
1000e900:	3c400136 	bltu	r7,r17,1000e908 <__udivdi3+0x254>
1000e904:	3880e436 	bltu	r7,r2,1000ec98 <__udivdi3+0x5e4>
1000e908:	202d883a 	mov	r22,r4
1000e90c:	38a1c83a 	sub	r16,r7,r2
1000e910:	8009883a 	mov	r4,r16
1000e914:	a80b883a 	mov	r5,r21
1000e918:	d8c00115 	stw	r3,4(sp)
1000e91c:	000f3d00 	call	1000f3d0 <__umodsi3>
1000e920:	1027883a 	mov	r19,r2
1000e924:	8009883a 	mov	r4,r16
1000e928:	a80b883a 	mov	r5,r21
1000e92c:	9826943a 	slli	r19,r19,16
1000e930:	000f36c0 	call	1000f36c <__udivsi3>
1000e934:	a00b883a 	mov	r5,r20
1000e938:	1009883a 	mov	r4,r2
1000e93c:	94bfffcc 	andi	r18,r18,65535
1000e940:	1021883a 	mov	r16,r2
1000e944:	94e4b03a 	or	r18,r18,r19
1000e948:	00045280 	call	10004528 <__mulsi3>
1000e94c:	d8c00117 	ldw	r3,4(sp)
1000e950:	9080052e 	bgeu	r18,r2,1000e968 <__udivdi3+0x2b4>
1000e954:	8ca5883a 	add	r18,r17,r18
1000e958:	813fffc4 	addi	r4,r16,-1
1000e95c:	9440ad36 	bltu	r18,r17,1000ec14 <__udivdi3+0x560>
1000e960:	9080ac2e 	bgeu	r18,r2,1000ec14 <__udivdi3+0x560>
1000e964:	843fff84 	addi	r16,r16,-2
1000e968:	b004943a 	slli	r2,r22,16
1000e96c:	1404b03a 	or	r2,r2,r16
1000e970:	00000206 	br	1000e97c <__udivdi3+0x2c8>
1000e974:	0007883a 	mov	r3,zero
1000e978:	0005883a 	mov	r2,zero
1000e97c:	dfc00b17 	ldw	ra,44(sp)
1000e980:	df000a17 	ldw	fp,40(sp)
1000e984:	ddc00917 	ldw	r23,36(sp)
1000e988:	dd800817 	ldw	r22,32(sp)
1000e98c:	dd400717 	ldw	r21,28(sp)
1000e990:	dd000617 	ldw	r20,24(sp)
1000e994:	dcc00517 	ldw	r19,20(sp)
1000e998:	dc800417 	ldw	r18,16(sp)
1000e99c:	dc400317 	ldw	r17,12(sp)
1000e9a0:	dc000217 	ldw	r16,8(sp)
1000e9a4:	dec00c04 	addi	sp,sp,48
1000e9a8:	f800283a 	ret
1000e9ac:	00803fc4 	movi	r2,255
1000e9b0:	11c5803a 	cmpltu	r2,r2,r7
1000e9b4:	100490fa 	slli	r2,r2,3
1000e9b8:	003f9906 	br	1000e820 <__alt_data_end+0xf800e820>
1000e9bc:	00803fc4 	movi	r2,255
1000e9c0:	1445803a 	cmpltu	r2,r2,r17
1000e9c4:	100490fa 	slli	r2,r2,3
1000e9c8:	003fad06 	br	1000e880 <__alt_data_end+0xf800e880>
1000e9cc:	00804034 	movhi	r2,256
1000e9d0:	10bfffc4 	addi	r2,r2,-1
1000e9d4:	11809f36 	bltu	r2,r6,1000ec54 <__udivdi3+0x5a0>
1000e9d8:	00800404 	movi	r2,16
1000e9dc:	003f4c06 	br	1000e710 <__alt_data_end+0xf800e710>
1000e9e0:	3dce983a 	sll	r7,r7,r23
1000e9e4:	30b8d83a 	srl	fp,r6,r2
1000e9e8:	80a2d83a 	srl	r17,r16,r2
1000e9ec:	35cc983a 	sll	r6,r6,r23
1000e9f0:	3f38b03a 	or	fp,r7,fp
1000e9f4:	e024d43a 	srli	r18,fp,16
1000e9f8:	9884d83a 	srl	r2,r19,r2
1000e9fc:	85e0983a 	sll	r16,r16,r23
1000ea00:	8809883a 	mov	r4,r17
1000ea04:	900b883a 	mov	r5,r18
1000ea08:	d9800015 	stw	r6,0(sp)
1000ea0c:	1420b03a 	or	r16,r2,r16
1000ea10:	000f3d00 	call	1000f3d0 <__umodsi3>
1000ea14:	900b883a 	mov	r5,r18
1000ea18:	8809883a 	mov	r4,r17
1000ea1c:	1029883a 	mov	r20,r2
1000ea20:	e5bfffcc 	andi	r22,fp,65535
1000ea24:	000f36c0 	call	1000f36c <__udivsi3>
1000ea28:	100b883a 	mov	r5,r2
1000ea2c:	b009883a 	mov	r4,r22
1000ea30:	102b883a 	mov	r21,r2
1000ea34:	00045280 	call	10004528 <__mulsi3>
1000ea38:	a028943a 	slli	r20,r20,16
1000ea3c:	8006d43a 	srli	r3,r16,16
1000ea40:	1d06b03a 	or	r3,r3,r20
1000ea44:	1880042e 	bgeu	r3,r2,1000ea58 <__udivdi3+0x3a4>
1000ea48:	1f07883a 	add	r3,r3,fp
1000ea4c:	a93fffc4 	addi	r4,r21,-1
1000ea50:	1f00892e 	bgeu	r3,fp,1000ec78 <__udivdi3+0x5c4>
1000ea54:	202b883a 	mov	r21,r4
1000ea58:	18a3c83a 	sub	r17,r3,r2
1000ea5c:	8809883a 	mov	r4,r17
1000ea60:	900b883a 	mov	r5,r18
1000ea64:	000f3d00 	call	1000f3d0 <__umodsi3>
1000ea68:	1029883a 	mov	r20,r2
1000ea6c:	8809883a 	mov	r4,r17
1000ea70:	900b883a 	mov	r5,r18
1000ea74:	a028943a 	slli	r20,r20,16
1000ea78:	000f36c0 	call	1000f36c <__udivsi3>
1000ea7c:	100b883a 	mov	r5,r2
1000ea80:	b009883a 	mov	r4,r22
1000ea84:	843fffcc 	andi	r16,r16,65535
1000ea88:	1023883a 	mov	r17,r2
1000ea8c:	8520b03a 	or	r16,r16,r20
1000ea90:	00045280 	call	10004528 <__mulsi3>
1000ea94:	8080042e 	bgeu	r16,r2,1000eaa8 <__udivdi3+0x3f4>
1000ea98:	8721883a 	add	r16,r16,fp
1000ea9c:	88ffffc4 	addi	r3,r17,-1
1000eaa0:	8700712e 	bgeu	r16,fp,1000ec68 <__udivdi3+0x5b4>
1000eaa4:	1823883a 	mov	r17,r3
1000eaa8:	a80e943a 	slli	r7,r21,16
1000eaac:	d8c00017 	ldw	r3,0(sp)
1000eab0:	80a1c83a 	sub	r16,r16,r2
1000eab4:	3c64b03a 	or	r18,r7,r17
1000eab8:	1d3fffcc 	andi	r20,r3,65535
1000eabc:	9022d43a 	srli	r17,r18,16
1000eac0:	95bfffcc 	andi	r22,r18,65535
1000eac4:	a00b883a 	mov	r5,r20
1000eac8:	b009883a 	mov	r4,r22
1000eacc:	182ad43a 	srli	r21,r3,16
1000ead0:	00045280 	call	10004528 <__mulsi3>
1000ead4:	a00b883a 	mov	r5,r20
1000ead8:	8809883a 	mov	r4,r17
1000eadc:	1039883a 	mov	fp,r2
1000eae0:	00045280 	call	10004528 <__mulsi3>
1000eae4:	8809883a 	mov	r4,r17
1000eae8:	a80b883a 	mov	r5,r21
1000eaec:	1029883a 	mov	r20,r2
1000eaf0:	00045280 	call	10004528 <__mulsi3>
1000eaf4:	a80b883a 	mov	r5,r21
1000eaf8:	b009883a 	mov	r4,r22
1000eafc:	1023883a 	mov	r17,r2
1000eb00:	00045280 	call	10004528 <__mulsi3>
1000eb04:	e006d43a 	srli	r3,fp,16
1000eb08:	1505883a 	add	r2,r2,r20
1000eb0c:	1887883a 	add	r3,r3,r2
1000eb10:	1d00022e 	bgeu	r3,r20,1000eb1c <__udivdi3+0x468>
1000eb14:	00800074 	movhi	r2,1
1000eb18:	88a3883a 	add	r17,r17,r2
1000eb1c:	1804d43a 	srli	r2,r3,16
1000eb20:	1463883a 	add	r17,r2,r17
1000eb24:	84404436 	bltu	r16,r17,1000ec38 <__udivdi3+0x584>
1000eb28:	84403e26 	beq	r16,r17,1000ec24 <__udivdi3+0x570>
1000eb2c:	9005883a 	mov	r2,r18
1000eb30:	0007883a 	mov	r3,zero
1000eb34:	003f9106 	br	1000e97c <__alt_data_end+0xf800e97c>
1000eb38:	88e2983a 	sll	r17,r17,r3
1000eb3c:	80aed83a 	srl	r23,r16,r2
1000eb40:	80e0983a 	sll	r16,r16,r3
1000eb44:	882ad43a 	srli	r21,r17,16
1000eb48:	9884d83a 	srl	r2,r19,r2
1000eb4c:	b809883a 	mov	r4,r23
1000eb50:	a80b883a 	mov	r5,r21
1000eb54:	98e4983a 	sll	r18,r19,r3
1000eb58:	142cb03a 	or	r22,r2,r16
1000eb5c:	000f3d00 	call	1000f3d0 <__umodsi3>
1000eb60:	b809883a 	mov	r4,r23
1000eb64:	a80b883a 	mov	r5,r21
1000eb68:	1027883a 	mov	r19,r2
1000eb6c:	8d3fffcc 	andi	r20,r17,65535
1000eb70:	000f36c0 	call	1000f36c <__udivsi3>
1000eb74:	a009883a 	mov	r4,r20
1000eb78:	100b883a 	mov	r5,r2
1000eb7c:	102f883a 	mov	r23,r2
1000eb80:	00045280 	call	10004528 <__mulsi3>
1000eb84:	9826943a 	slli	r19,r19,16
1000eb88:	b008d43a 	srli	r4,r22,16
1000eb8c:	24c8b03a 	or	r4,r4,r19
1000eb90:	2080062e 	bgeu	r4,r2,1000ebac <__udivdi3+0x4f8>
1000eb94:	2449883a 	add	r4,r4,r17
1000eb98:	b8ffffc4 	addi	r3,r23,-1
1000eb9c:	24403c36 	bltu	r4,r17,1000ec90 <__udivdi3+0x5dc>
1000eba0:	20803b2e 	bgeu	r4,r2,1000ec90 <__udivdi3+0x5dc>
1000eba4:	bdffff84 	addi	r23,r23,-2
1000eba8:	2449883a 	add	r4,r4,r17
1000ebac:	20a1c83a 	sub	r16,r4,r2
1000ebb0:	a80b883a 	mov	r5,r21
1000ebb4:	8009883a 	mov	r4,r16
1000ebb8:	000f3d00 	call	1000f3d0 <__umodsi3>
1000ebbc:	a80b883a 	mov	r5,r21
1000ebc0:	8009883a 	mov	r4,r16
1000ebc4:	1027883a 	mov	r19,r2
1000ebc8:	000f36c0 	call	1000f36c <__udivsi3>
1000ebcc:	a009883a 	mov	r4,r20
1000ebd0:	100b883a 	mov	r5,r2
1000ebd4:	9826943a 	slli	r19,r19,16
1000ebd8:	1039883a 	mov	fp,r2
1000ebdc:	00045280 	call	10004528 <__mulsi3>
1000ebe0:	b13fffcc 	andi	r4,r22,65535
1000ebe4:	24c8b03a 	or	r4,r4,r19
1000ebe8:	2080062e 	bgeu	r4,r2,1000ec04 <__udivdi3+0x550>
1000ebec:	2449883a 	add	r4,r4,r17
1000ebf0:	e0ffffc4 	addi	r3,fp,-1
1000ebf4:	24402436 	bltu	r4,r17,1000ec88 <__udivdi3+0x5d4>
1000ebf8:	2080232e 	bgeu	r4,r2,1000ec88 <__udivdi3+0x5d4>
1000ebfc:	e73fff84 	addi	fp,fp,-2
1000ec00:	2449883a 	add	r4,r4,r17
1000ec04:	b82e943a 	slli	r23,r23,16
1000ec08:	20a1c83a 	sub	r16,r4,r2
1000ec0c:	bf06b03a 	or	r3,r23,fp
1000ec10:	003f2806 	br	1000e8b4 <__alt_data_end+0xf800e8b4>
1000ec14:	2021883a 	mov	r16,r4
1000ec18:	003f5306 	br	1000e968 <__alt_data_end+0xf800e968>
1000ec1c:	1821883a 	mov	r16,r3
1000ec20:	003ef406 	br	1000e7f4 <__alt_data_end+0xf800e7f4>
1000ec24:	1806943a 	slli	r3,r3,16
1000ec28:	9de6983a 	sll	r19,r19,r23
1000ec2c:	e73fffcc 	andi	fp,fp,65535
1000ec30:	1f07883a 	add	r3,r3,fp
1000ec34:	98ffbd2e 	bgeu	r19,r3,1000eb2c <__alt_data_end+0xf800eb2c>
1000ec38:	90bfffc4 	addi	r2,r18,-1
1000ec3c:	0007883a 	mov	r3,zero
1000ec40:	003f4e06 	br	1000e97c <__alt_data_end+0xf800e97c>
1000ec44:	00800604 	movi	r2,24
1000ec48:	003ef506 	br	1000e820 <__alt_data_end+0xf800e820>
1000ec4c:	00800604 	movi	r2,24
1000ec50:	003f0b06 	br	1000e880 <__alt_data_end+0xf800e880>
1000ec54:	00800604 	movi	r2,24
1000ec58:	003ead06 	br	1000e710 <__alt_data_end+0xf800e710>
1000ec5c:	0007883a 	mov	r3,zero
1000ec60:	00800044 	movi	r2,1
1000ec64:	003f4506 	br	1000e97c <__alt_data_end+0xf800e97c>
1000ec68:	80bf8e2e 	bgeu	r16,r2,1000eaa4 <__alt_data_end+0xf800eaa4>
1000ec6c:	8c7fff84 	addi	r17,r17,-2
1000ec70:	8721883a 	add	r16,r16,fp
1000ec74:	003f8c06 	br	1000eaa8 <__alt_data_end+0xf800eaa8>
1000ec78:	18bf762e 	bgeu	r3,r2,1000ea54 <__alt_data_end+0xf800ea54>
1000ec7c:	ad7fff84 	addi	r21,r21,-2
1000ec80:	1f07883a 	add	r3,r3,fp
1000ec84:	003f7406 	br	1000ea58 <__alt_data_end+0xf800ea58>
1000ec88:	1839883a 	mov	fp,r3
1000ec8c:	003fdd06 	br	1000ec04 <__alt_data_end+0xf800ec04>
1000ec90:	182f883a 	mov	r23,r3
1000ec94:	003fc506 	br	1000ebac <__alt_data_end+0xf800ebac>
1000ec98:	b5bfff84 	addi	r22,r22,-2
1000ec9c:	3c4f883a 	add	r7,r7,r17
1000eca0:	003f1a06 	br	1000e90c <__alt_data_end+0xf800e90c>
1000eca4:	b5bfff84 	addi	r22,r22,-2
1000eca8:	1c47883a 	add	r3,r3,r17
1000ecac:	003ebc06 	br	1000e7a0 <__alt_data_end+0xf800e7a0>

1000ecb0 <__umoddi3>:
1000ecb0:	defff304 	addi	sp,sp,-52
1000ecb4:	df000b15 	stw	fp,44(sp)
1000ecb8:	dc400415 	stw	r17,16(sp)
1000ecbc:	dc000315 	stw	r16,12(sp)
1000ecc0:	dfc00c15 	stw	ra,48(sp)
1000ecc4:	ddc00a15 	stw	r23,40(sp)
1000ecc8:	dd800915 	stw	r22,36(sp)
1000eccc:	dd400815 	stw	r21,32(sp)
1000ecd0:	dd000715 	stw	r20,28(sp)
1000ecd4:	dcc00615 	stw	r19,24(sp)
1000ecd8:	dc800515 	stw	r18,20(sp)
1000ecdc:	2021883a 	mov	r16,r4
1000ece0:	2823883a 	mov	r17,r5
1000ece4:	2839883a 	mov	fp,r5
1000ece8:	3800401e 	bne	r7,zero,1000edec <__umoddi3+0x13c>
1000ecec:	3027883a 	mov	r19,r6
1000ecf0:	2029883a 	mov	r20,r4
1000ecf4:	2980552e 	bgeu	r5,r6,1000ee4c <__umoddi3+0x19c>
1000ecf8:	00bfffd4 	movui	r2,65535
1000ecfc:	1180a236 	bltu	r2,r6,1000ef88 <__umoddi3+0x2d8>
1000ed00:	01003fc4 	movi	r4,255
1000ed04:	2189803a 	cmpltu	r4,r4,r6
1000ed08:	200890fa 	slli	r4,r4,3
1000ed0c:	3104d83a 	srl	r2,r6,r4
1000ed10:	00c40074 	movhi	r3,4097
1000ed14:	18d4a004 	addi	r3,r3,21120
1000ed18:	1885883a 	add	r2,r3,r2
1000ed1c:	10c00003 	ldbu	r3,0(r2)
1000ed20:	00800804 	movi	r2,32
1000ed24:	1909883a 	add	r4,r3,r4
1000ed28:	1125c83a 	sub	r18,r2,r4
1000ed2c:	90000526 	beq	r18,zero,1000ed44 <__umoddi3+0x94>
1000ed30:	8ca2983a 	sll	r17,r17,r18
1000ed34:	8108d83a 	srl	r4,r16,r4
1000ed38:	34a6983a 	sll	r19,r6,r18
1000ed3c:	84a8983a 	sll	r20,r16,r18
1000ed40:	2478b03a 	or	fp,r4,r17
1000ed44:	982cd43a 	srli	r22,r19,16
1000ed48:	e009883a 	mov	r4,fp
1000ed4c:	9dffffcc 	andi	r23,r19,65535
1000ed50:	b00b883a 	mov	r5,r22
1000ed54:	000f3d00 	call	1000f3d0 <__umodsi3>
1000ed58:	b00b883a 	mov	r5,r22
1000ed5c:	e009883a 	mov	r4,fp
1000ed60:	102b883a 	mov	r21,r2
1000ed64:	000f36c0 	call	1000f36c <__udivsi3>
1000ed68:	100b883a 	mov	r5,r2
1000ed6c:	b809883a 	mov	r4,r23
1000ed70:	00045280 	call	10004528 <__mulsi3>
1000ed74:	a82a943a 	slli	r21,r21,16
1000ed78:	a006d43a 	srli	r3,r20,16
1000ed7c:	1d46b03a 	or	r3,r3,r21
1000ed80:	1880032e 	bgeu	r3,r2,1000ed90 <__umoddi3+0xe0>
1000ed84:	1cc7883a 	add	r3,r3,r19
1000ed88:	1cc00136 	bltu	r3,r19,1000ed90 <__umoddi3+0xe0>
1000ed8c:	18813136 	bltu	r3,r2,1000f254 <__umoddi3+0x5a4>
1000ed90:	18a1c83a 	sub	r16,r3,r2
1000ed94:	b00b883a 	mov	r5,r22
1000ed98:	8009883a 	mov	r4,r16
1000ed9c:	000f3d00 	call	1000f3d0 <__umodsi3>
1000eda0:	b00b883a 	mov	r5,r22
1000eda4:	8009883a 	mov	r4,r16
1000eda8:	1023883a 	mov	r17,r2
1000edac:	000f36c0 	call	1000f36c <__udivsi3>
1000edb0:	100b883a 	mov	r5,r2
1000edb4:	b809883a 	mov	r4,r23
1000edb8:	8822943a 	slli	r17,r17,16
1000edbc:	00045280 	call	10004528 <__mulsi3>
1000edc0:	a0ffffcc 	andi	r3,r20,65535
1000edc4:	1c46b03a 	or	r3,r3,r17
1000edc8:	1880042e 	bgeu	r3,r2,1000eddc <__umoddi3+0x12c>
1000edcc:	1cc7883a 	add	r3,r3,r19
1000edd0:	1cc00236 	bltu	r3,r19,1000eddc <__umoddi3+0x12c>
1000edd4:	1880012e 	bgeu	r3,r2,1000eddc <__umoddi3+0x12c>
1000edd8:	1cc7883a 	add	r3,r3,r19
1000eddc:	1885c83a 	sub	r2,r3,r2
1000ede0:	1484d83a 	srl	r2,r2,r18
1000ede4:	0007883a 	mov	r3,zero
1000ede8:	00005306 	br	1000ef38 <__umoddi3+0x288>
1000edec:	29c05036 	bltu	r5,r7,1000ef30 <__umoddi3+0x280>
1000edf0:	00bfffd4 	movui	r2,65535
1000edf4:	11c05c2e 	bgeu	r2,r7,1000ef68 <__umoddi3+0x2b8>
1000edf8:	00804034 	movhi	r2,256
1000edfc:	10bfffc4 	addi	r2,r2,-1
1000ee00:	11c10636 	bltu	r2,r7,1000f21c <__umoddi3+0x56c>
1000ee04:	01000404 	movi	r4,16
1000ee08:	3904d83a 	srl	r2,r7,r4
1000ee0c:	00c40074 	movhi	r3,4097
1000ee10:	18d4a004 	addi	r3,r3,21120
1000ee14:	1885883a 	add	r2,r3,r2
1000ee18:	14c00003 	ldbu	r19,0(r2)
1000ee1c:	00c00804 	movi	r3,32
1000ee20:	9927883a 	add	r19,r19,r4
1000ee24:	1ce9c83a 	sub	r20,r3,r19
1000ee28:	a0005c1e 	bne	r20,zero,1000ef9c <__umoddi3+0x2ec>
1000ee2c:	3c400136 	bltu	r7,r17,1000ee34 <__umoddi3+0x184>
1000ee30:	81810a36 	bltu	r16,r6,1000f25c <__umoddi3+0x5ac>
1000ee34:	8185c83a 	sub	r2,r16,r6
1000ee38:	89e3c83a 	sub	r17,r17,r7
1000ee3c:	8089803a 	cmpltu	r4,r16,r2
1000ee40:	8939c83a 	sub	fp,r17,r4
1000ee44:	e007883a 	mov	r3,fp
1000ee48:	00003b06 	br	1000ef38 <__umoddi3+0x288>
1000ee4c:	3000041e 	bne	r6,zero,1000ee60 <__umoddi3+0x1b0>
1000ee50:	000b883a 	mov	r5,zero
1000ee54:	01000044 	movi	r4,1
1000ee58:	000f36c0 	call	1000f36c <__udivsi3>
1000ee5c:	1027883a 	mov	r19,r2
1000ee60:	00bfffd4 	movui	r2,65535
1000ee64:	14c0442e 	bgeu	r2,r19,1000ef78 <__umoddi3+0x2c8>
1000ee68:	00804034 	movhi	r2,256
1000ee6c:	10bfffc4 	addi	r2,r2,-1
1000ee70:	14c0ec36 	bltu	r2,r19,1000f224 <__umoddi3+0x574>
1000ee74:	00800404 	movi	r2,16
1000ee78:	9886d83a 	srl	r3,r19,r2
1000ee7c:	01040074 	movhi	r4,4097
1000ee80:	2114a004 	addi	r4,r4,21120
1000ee84:	20c7883a 	add	r3,r4,r3
1000ee88:	18c00003 	ldbu	r3,0(r3)
1000ee8c:	1887883a 	add	r3,r3,r2
1000ee90:	00800804 	movi	r2,32
1000ee94:	10e5c83a 	sub	r18,r2,r3
1000ee98:	9000ab1e 	bne	r18,zero,1000f148 <__umoddi3+0x498>
1000ee9c:	982cd43a 	srli	r22,r19,16
1000eea0:	8ce3c83a 	sub	r17,r17,r19
1000eea4:	9dffffcc 	andi	r23,r19,65535
1000eea8:	b00b883a 	mov	r5,r22
1000eeac:	8809883a 	mov	r4,r17
1000eeb0:	000f3d00 	call	1000f3d0 <__umodsi3>
1000eeb4:	b00b883a 	mov	r5,r22
1000eeb8:	8809883a 	mov	r4,r17
1000eebc:	102b883a 	mov	r21,r2
1000eec0:	000f36c0 	call	1000f36c <__udivsi3>
1000eec4:	b80b883a 	mov	r5,r23
1000eec8:	1009883a 	mov	r4,r2
1000eecc:	00045280 	call	10004528 <__mulsi3>
1000eed0:	a82a943a 	slli	r21,r21,16
1000eed4:	a006d43a 	srli	r3,r20,16
1000eed8:	1d46b03a 	or	r3,r3,r21
1000eedc:	1880042e 	bgeu	r3,r2,1000eef0 <__umoddi3+0x240>
1000eee0:	1cc7883a 	add	r3,r3,r19
1000eee4:	1cc00236 	bltu	r3,r19,1000eef0 <__umoddi3+0x240>
1000eee8:	1880012e 	bgeu	r3,r2,1000eef0 <__umoddi3+0x240>
1000eeec:	1cc7883a 	add	r3,r3,r19
1000eef0:	18a1c83a 	sub	r16,r3,r2
1000eef4:	b00b883a 	mov	r5,r22
1000eef8:	8009883a 	mov	r4,r16
1000eefc:	000f3d00 	call	1000f3d0 <__umodsi3>
1000ef00:	1023883a 	mov	r17,r2
1000ef04:	b00b883a 	mov	r5,r22
1000ef08:	8009883a 	mov	r4,r16
1000ef0c:	000f36c0 	call	1000f36c <__udivsi3>
1000ef10:	8822943a 	slli	r17,r17,16
1000ef14:	b80b883a 	mov	r5,r23
1000ef18:	1009883a 	mov	r4,r2
1000ef1c:	00045280 	call	10004528 <__mulsi3>
1000ef20:	a53fffcc 	andi	r20,r20,65535
1000ef24:	a446b03a 	or	r3,r20,r17
1000ef28:	18bfac2e 	bgeu	r3,r2,1000eddc <__alt_data_end+0xf800eddc>
1000ef2c:	003fa706 	br	1000edcc <__alt_data_end+0xf800edcc>
1000ef30:	2005883a 	mov	r2,r4
1000ef34:	2807883a 	mov	r3,r5
1000ef38:	dfc00c17 	ldw	ra,48(sp)
1000ef3c:	df000b17 	ldw	fp,44(sp)
1000ef40:	ddc00a17 	ldw	r23,40(sp)
1000ef44:	dd800917 	ldw	r22,36(sp)
1000ef48:	dd400817 	ldw	r21,32(sp)
1000ef4c:	dd000717 	ldw	r20,28(sp)
1000ef50:	dcc00617 	ldw	r19,24(sp)
1000ef54:	dc800517 	ldw	r18,20(sp)
1000ef58:	dc400417 	ldw	r17,16(sp)
1000ef5c:	dc000317 	ldw	r16,12(sp)
1000ef60:	dec00d04 	addi	sp,sp,52
1000ef64:	f800283a 	ret
1000ef68:	04c03fc4 	movi	r19,255
1000ef6c:	99c9803a 	cmpltu	r4,r19,r7
1000ef70:	200890fa 	slli	r4,r4,3
1000ef74:	003fa406 	br	1000ee08 <__alt_data_end+0xf800ee08>
1000ef78:	00803fc4 	movi	r2,255
1000ef7c:	14c5803a 	cmpltu	r2,r2,r19
1000ef80:	100490fa 	slli	r2,r2,3
1000ef84:	003fbc06 	br	1000ee78 <__alt_data_end+0xf800ee78>
1000ef88:	00804034 	movhi	r2,256
1000ef8c:	10bfffc4 	addi	r2,r2,-1
1000ef90:	1180a636 	bltu	r2,r6,1000f22c <__umoddi3+0x57c>
1000ef94:	01000404 	movi	r4,16
1000ef98:	003f5c06 	br	1000ed0c <__alt_data_end+0xf800ed0c>
1000ef9c:	3d0e983a 	sll	r7,r7,r20
1000efa0:	34ead83a 	srl	r21,r6,r19
1000efa4:	8cc6d83a 	srl	r3,r17,r19
1000efa8:	8d10983a 	sll	r8,r17,r20
1000efac:	3d6ab03a 	or	r21,r7,r21
1000efb0:	a82cd43a 	srli	r22,r21,16
1000efb4:	84e2d83a 	srl	r17,r16,r19
1000efb8:	1809883a 	mov	r4,r3
1000efbc:	b00b883a 	mov	r5,r22
1000efc0:	8a22b03a 	or	r17,r17,r8
1000efc4:	3524983a 	sll	r18,r6,r20
1000efc8:	dc400015 	stw	r17,0(sp)
1000efcc:	d8c00115 	stw	r3,4(sp)
1000efd0:	000f3d00 	call	1000f3d0 <__umodsi3>
1000efd4:	d8c00117 	ldw	r3,4(sp)
1000efd8:	b00b883a 	mov	r5,r22
1000efdc:	1039883a 	mov	fp,r2
1000efe0:	1809883a 	mov	r4,r3
1000efe4:	000f36c0 	call	1000f36c <__udivsi3>
1000efe8:	adffffcc 	andi	r23,r21,65535
1000efec:	100b883a 	mov	r5,r2
1000eff0:	b809883a 	mov	r4,r23
1000eff4:	1023883a 	mov	r17,r2
1000eff8:	00045280 	call	10004528 <__mulsi3>
1000effc:	d9400017 	ldw	r5,0(sp)
1000f000:	e008943a 	slli	r4,fp,16
1000f004:	8520983a 	sll	r16,r16,r20
1000f008:	2806d43a 	srli	r3,r5,16
1000f00c:	1906b03a 	or	r3,r3,r4
1000f010:	1880042e 	bgeu	r3,r2,1000f024 <__umoddi3+0x374>
1000f014:	1d47883a 	add	r3,r3,r21
1000f018:	893fffc4 	addi	r4,r17,-1
1000f01c:	1d40892e 	bgeu	r3,r21,1000f244 <__umoddi3+0x594>
1000f020:	2023883a 	mov	r17,r4
1000f024:	18b9c83a 	sub	fp,r3,r2
1000f028:	b00b883a 	mov	r5,r22
1000f02c:	e009883a 	mov	r4,fp
1000f030:	000f3d00 	call	1000f3d0 <__umodsi3>
1000f034:	b00b883a 	mov	r5,r22
1000f038:	e009883a 	mov	r4,fp
1000f03c:	d8800215 	stw	r2,8(sp)
1000f040:	000f36c0 	call	1000f36c <__udivsi3>
1000f044:	100b883a 	mov	r5,r2
1000f048:	b809883a 	mov	r4,r23
1000f04c:	102d883a 	mov	r22,r2
1000f050:	00045280 	call	10004528 <__mulsi3>
1000f054:	d9800217 	ldw	r6,8(sp)
1000f058:	d8c00017 	ldw	r3,0(sp)
1000f05c:	300c943a 	slli	r6,r6,16
1000f060:	1a3fffcc 	andi	r8,r3,65535
1000f064:	4190b03a 	or	r8,r8,r6
1000f068:	4080042e 	bgeu	r8,r2,1000f07c <__umoddi3+0x3cc>
1000f06c:	4551883a 	add	r8,r8,r21
1000f070:	b0ffffc4 	addi	r3,r22,-1
1000f074:	45406f2e 	bgeu	r8,r21,1000f234 <__umoddi3+0x584>
1000f078:	182d883a 	mov	r22,r3
1000f07c:	880e943a 	slli	r7,r17,16
1000f080:	9006d43a 	srli	r3,r18,16
1000f084:	91bfffcc 	andi	r6,r18,65535
1000f088:	3dacb03a 	or	r22,r7,r22
1000f08c:	b02ed43a 	srli	r23,r22,16
1000f090:	b5bfffcc 	andi	r22,r22,65535
1000f094:	300b883a 	mov	r5,r6
1000f098:	b009883a 	mov	r4,r22
1000f09c:	40a3c83a 	sub	r17,r8,r2
1000f0a0:	d8c00115 	stw	r3,4(sp)
1000f0a4:	d9800215 	stw	r6,8(sp)
1000f0a8:	00045280 	call	10004528 <__mulsi3>
1000f0ac:	d9800217 	ldw	r6,8(sp)
1000f0b0:	b809883a 	mov	r4,r23
1000f0b4:	1039883a 	mov	fp,r2
1000f0b8:	300b883a 	mov	r5,r6
1000f0bc:	00045280 	call	10004528 <__mulsi3>
1000f0c0:	d8c00117 	ldw	r3,4(sp)
1000f0c4:	b809883a 	mov	r4,r23
1000f0c8:	d8800215 	stw	r2,8(sp)
1000f0cc:	180b883a 	mov	r5,r3
1000f0d0:	00045280 	call	10004528 <__mulsi3>
1000f0d4:	d8c00117 	ldw	r3,4(sp)
1000f0d8:	b009883a 	mov	r4,r22
1000f0dc:	102f883a 	mov	r23,r2
1000f0e0:	180b883a 	mov	r5,r3
1000f0e4:	00045280 	call	10004528 <__mulsi3>
1000f0e8:	d9800217 	ldw	r6,8(sp)
1000f0ec:	e006d43a 	srli	r3,fp,16
1000f0f0:	1185883a 	add	r2,r2,r6
1000f0f4:	1885883a 	add	r2,r3,r2
1000f0f8:	1180022e 	bgeu	r2,r6,1000f104 <__umoddi3+0x454>
1000f0fc:	00c00074 	movhi	r3,1
1000f100:	b8ef883a 	add	r23,r23,r3
1000f104:	1006d43a 	srli	r3,r2,16
1000f108:	1004943a 	slli	r2,r2,16
1000f10c:	e73fffcc 	andi	fp,fp,65535
1000f110:	1dc7883a 	add	r3,r3,r23
1000f114:	1739883a 	add	fp,r2,fp
1000f118:	88c03a36 	bltu	r17,r3,1000f204 <__umoddi3+0x554>
1000f11c:	88c05126 	beq	r17,r3,1000f264 <__umoddi3+0x5b4>
1000f120:	88c9c83a 	sub	r4,r17,r3
1000f124:	e00f883a 	mov	r7,fp
1000f128:	81cfc83a 	sub	r7,r16,r7
1000f12c:	81c7803a 	cmpltu	r3,r16,r7
1000f130:	20c7c83a 	sub	r3,r4,r3
1000f134:	1cc4983a 	sll	r2,r3,r19
1000f138:	3d0ed83a 	srl	r7,r7,r20
1000f13c:	1d06d83a 	srl	r3,r3,r20
1000f140:	11c4b03a 	or	r2,r2,r7
1000f144:	003f7c06 	br	1000ef38 <__alt_data_end+0xf800ef38>
1000f148:	9ca6983a 	sll	r19,r19,r18
1000f14c:	88f8d83a 	srl	fp,r17,r3
1000f150:	80c4d83a 	srl	r2,r16,r3
1000f154:	982cd43a 	srli	r22,r19,16
1000f158:	8ca2983a 	sll	r17,r17,r18
1000f15c:	e009883a 	mov	r4,fp
1000f160:	b00b883a 	mov	r5,r22
1000f164:	146ab03a 	or	r21,r2,r17
1000f168:	000f3d00 	call	1000f3d0 <__umodsi3>
1000f16c:	b00b883a 	mov	r5,r22
1000f170:	e009883a 	mov	r4,fp
1000f174:	1029883a 	mov	r20,r2
1000f178:	9dffffcc 	andi	r23,r19,65535
1000f17c:	000f36c0 	call	1000f36c <__udivsi3>
1000f180:	b809883a 	mov	r4,r23
1000f184:	100b883a 	mov	r5,r2
1000f188:	00045280 	call	10004528 <__mulsi3>
1000f18c:	a008943a 	slli	r4,r20,16
1000f190:	a806d43a 	srli	r3,r21,16
1000f194:	84a8983a 	sll	r20,r16,r18
1000f198:	1906b03a 	or	r3,r3,r4
1000f19c:	1880042e 	bgeu	r3,r2,1000f1b0 <__umoddi3+0x500>
1000f1a0:	1cc7883a 	add	r3,r3,r19
1000f1a4:	1cc00236 	bltu	r3,r19,1000f1b0 <__umoddi3+0x500>
1000f1a8:	1880012e 	bgeu	r3,r2,1000f1b0 <__umoddi3+0x500>
1000f1ac:	1cc7883a 	add	r3,r3,r19
1000f1b0:	18a3c83a 	sub	r17,r3,r2
1000f1b4:	b00b883a 	mov	r5,r22
1000f1b8:	8809883a 	mov	r4,r17
1000f1bc:	000f3d00 	call	1000f3d0 <__umodsi3>
1000f1c0:	b00b883a 	mov	r5,r22
1000f1c4:	8809883a 	mov	r4,r17
1000f1c8:	1021883a 	mov	r16,r2
1000f1cc:	000f36c0 	call	1000f36c <__udivsi3>
1000f1d0:	100b883a 	mov	r5,r2
1000f1d4:	b809883a 	mov	r4,r23
1000f1d8:	8020943a 	slli	r16,r16,16
1000f1dc:	00045280 	call	10004528 <__mulsi3>
1000f1e0:	a8ffffcc 	andi	r3,r21,65535
1000f1e4:	1c06b03a 	or	r3,r3,r16
1000f1e8:	1880042e 	bgeu	r3,r2,1000f1fc <__umoddi3+0x54c>
1000f1ec:	1cc7883a 	add	r3,r3,r19
1000f1f0:	1cc00236 	bltu	r3,r19,1000f1fc <__umoddi3+0x54c>
1000f1f4:	1880012e 	bgeu	r3,r2,1000f1fc <__umoddi3+0x54c>
1000f1f8:	1cc7883a 	add	r3,r3,r19
1000f1fc:	18a3c83a 	sub	r17,r3,r2
1000f200:	003f2906 	br	1000eea8 <__alt_data_end+0xf800eea8>
1000f204:	e48fc83a 	sub	r7,fp,r18
1000f208:	1d49c83a 	sub	r4,r3,r21
1000f20c:	e1f9803a 	cmpltu	fp,fp,r7
1000f210:	2739c83a 	sub	fp,r4,fp
1000f214:	8f09c83a 	sub	r4,r17,fp
1000f218:	003fc306 	br	1000f128 <__alt_data_end+0xf800f128>
1000f21c:	01000604 	movi	r4,24
1000f220:	003ef906 	br	1000ee08 <__alt_data_end+0xf800ee08>
1000f224:	00800604 	movi	r2,24
1000f228:	003f1306 	br	1000ee78 <__alt_data_end+0xf800ee78>
1000f22c:	01000604 	movi	r4,24
1000f230:	003eb606 	br	1000ed0c <__alt_data_end+0xf800ed0c>
1000f234:	40bf902e 	bgeu	r8,r2,1000f078 <__alt_data_end+0xf800f078>
1000f238:	b5bfff84 	addi	r22,r22,-2
1000f23c:	4551883a 	add	r8,r8,r21
1000f240:	003f8e06 	br	1000f07c <__alt_data_end+0xf800f07c>
1000f244:	18bf762e 	bgeu	r3,r2,1000f020 <__alt_data_end+0xf800f020>
1000f248:	8c7fff84 	addi	r17,r17,-2
1000f24c:	1d47883a 	add	r3,r3,r21
1000f250:	003f7406 	br	1000f024 <__alt_data_end+0xf800f024>
1000f254:	1cc7883a 	add	r3,r3,r19
1000f258:	003ecd06 	br	1000ed90 <__alt_data_end+0xf800ed90>
1000f25c:	8005883a 	mov	r2,r16
1000f260:	003ef806 	br	1000ee44 <__alt_data_end+0xf800ee44>
1000f264:	873fe736 	bltu	r16,fp,1000f204 <__alt_data_end+0xf800f204>
1000f268:	e00f883a 	mov	r7,fp
1000f26c:	0009883a 	mov	r4,zero
1000f270:	003fad06 	br	1000f128 <__alt_data_end+0xf800f128>

1000f274 <__divsi3>:
1000f274:	20001b16 	blt	r4,zero,1000f2e4 <__divsi3+0x70>
1000f278:	000f883a 	mov	r7,zero
1000f27c:	28001616 	blt	r5,zero,1000f2d8 <__divsi3+0x64>
1000f280:	200d883a 	mov	r6,r4
1000f284:	29001a2e 	bgeu	r5,r4,1000f2f0 <__divsi3+0x7c>
1000f288:	00800804 	movi	r2,32
1000f28c:	00c00044 	movi	r3,1
1000f290:	00000106 	br	1000f298 <__divsi3+0x24>
1000f294:	10000d26 	beq	r2,zero,1000f2cc <__divsi3+0x58>
1000f298:	294b883a 	add	r5,r5,r5
1000f29c:	10bfffc4 	addi	r2,r2,-1
1000f2a0:	18c7883a 	add	r3,r3,r3
1000f2a4:	293ffb36 	bltu	r5,r4,1000f294 <__alt_data_end+0xf800f294>
1000f2a8:	0005883a 	mov	r2,zero
1000f2ac:	18000726 	beq	r3,zero,1000f2cc <__divsi3+0x58>
1000f2b0:	0005883a 	mov	r2,zero
1000f2b4:	31400236 	bltu	r6,r5,1000f2c0 <__divsi3+0x4c>
1000f2b8:	314dc83a 	sub	r6,r6,r5
1000f2bc:	10c4b03a 	or	r2,r2,r3
1000f2c0:	1806d07a 	srli	r3,r3,1
1000f2c4:	280ad07a 	srli	r5,r5,1
1000f2c8:	183ffa1e 	bne	r3,zero,1000f2b4 <__alt_data_end+0xf800f2b4>
1000f2cc:	38000126 	beq	r7,zero,1000f2d4 <__divsi3+0x60>
1000f2d0:	0085c83a 	sub	r2,zero,r2
1000f2d4:	f800283a 	ret
1000f2d8:	014bc83a 	sub	r5,zero,r5
1000f2dc:	39c0005c 	xori	r7,r7,1
1000f2e0:	003fe706 	br	1000f280 <__alt_data_end+0xf800f280>
1000f2e4:	0109c83a 	sub	r4,zero,r4
1000f2e8:	01c00044 	movi	r7,1
1000f2ec:	003fe306 	br	1000f27c <__alt_data_end+0xf800f27c>
1000f2f0:	00c00044 	movi	r3,1
1000f2f4:	003fee06 	br	1000f2b0 <__alt_data_end+0xf800f2b0>

1000f2f8 <__modsi3>:
1000f2f8:	20001716 	blt	r4,zero,1000f358 <__modsi3+0x60>
1000f2fc:	000f883a 	mov	r7,zero
1000f300:	2005883a 	mov	r2,r4
1000f304:	28001216 	blt	r5,zero,1000f350 <__modsi3+0x58>
1000f308:	2900162e 	bgeu	r5,r4,1000f364 <__modsi3+0x6c>
1000f30c:	01800804 	movi	r6,32
1000f310:	00c00044 	movi	r3,1
1000f314:	00000106 	br	1000f31c <__modsi3+0x24>
1000f318:	30000a26 	beq	r6,zero,1000f344 <__modsi3+0x4c>
1000f31c:	294b883a 	add	r5,r5,r5
1000f320:	31bfffc4 	addi	r6,r6,-1
1000f324:	18c7883a 	add	r3,r3,r3
1000f328:	293ffb36 	bltu	r5,r4,1000f318 <__alt_data_end+0xf800f318>
1000f32c:	18000526 	beq	r3,zero,1000f344 <__modsi3+0x4c>
1000f330:	1806d07a 	srli	r3,r3,1
1000f334:	11400136 	bltu	r2,r5,1000f33c <__modsi3+0x44>
1000f338:	1145c83a 	sub	r2,r2,r5
1000f33c:	280ad07a 	srli	r5,r5,1
1000f340:	183ffb1e 	bne	r3,zero,1000f330 <__alt_data_end+0xf800f330>
1000f344:	38000126 	beq	r7,zero,1000f34c <__modsi3+0x54>
1000f348:	0085c83a 	sub	r2,zero,r2
1000f34c:	f800283a 	ret
1000f350:	014bc83a 	sub	r5,zero,r5
1000f354:	003fec06 	br	1000f308 <__alt_data_end+0xf800f308>
1000f358:	0109c83a 	sub	r4,zero,r4
1000f35c:	01c00044 	movi	r7,1
1000f360:	003fe706 	br	1000f300 <__alt_data_end+0xf800f300>
1000f364:	00c00044 	movi	r3,1
1000f368:	003ff106 	br	1000f330 <__alt_data_end+0xf800f330>

1000f36c <__udivsi3>:
1000f36c:	200d883a 	mov	r6,r4
1000f370:	2900152e 	bgeu	r5,r4,1000f3c8 <__udivsi3+0x5c>
1000f374:	28001416 	blt	r5,zero,1000f3c8 <__udivsi3+0x5c>
1000f378:	00800804 	movi	r2,32
1000f37c:	00c00044 	movi	r3,1
1000f380:	00000206 	br	1000f38c <__udivsi3+0x20>
1000f384:	10000e26 	beq	r2,zero,1000f3c0 <__udivsi3+0x54>
1000f388:	28000516 	blt	r5,zero,1000f3a0 <__udivsi3+0x34>
1000f38c:	294b883a 	add	r5,r5,r5
1000f390:	10bfffc4 	addi	r2,r2,-1
1000f394:	18c7883a 	add	r3,r3,r3
1000f398:	293ffa36 	bltu	r5,r4,1000f384 <__alt_data_end+0xf800f384>
1000f39c:	18000826 	beq	r3,zero,1000f3c0 <__udivsi3+0x54>
1000f3a0:	0005883a 	mov	r2,zero
1000f3a4:	31400236 	bltu	r6,r5,1000f3b0 <__udivsi3+0x44>
1000f3a8:	314dc83a 	sub	r6,r6,r5
1000f3ac:	10c4b03a 	or	r2,r2,r3
1000f3b0:	1806d07a 	srli	r3,r3,1
1000f3b4:	280ad07a 	srli	r5,r5,1
1000f3b8:	183ffa1e 	bne	r3,zero,1000f3a4 <__alt_data_end+0xf800f3a4>
1000f3bc:	f800283a 	ret
1000f3c0:	0005883a 	mov	r2,zero
1000f3c4:	f800283a 	ret
1000f3c8:	00c00044 	movi	r3,1
1000f3cc:	003ff406 	br	1000f3a0 <__alt_data_end+0xf800f3a0>

1000f3d0 <__umodsi3>:
1000f3d0:	2005883a 	mov	r2,r4
1000f3d4:	2900122e 	bgeu	r5,r4,1000f420 <__umodsi3+0x50>
1000f3d8:	28001116 	blt	r5,zero,1000f420 <__umodsi3+0x50>
1000f3dc:	01800804 	movi	r6,32
1000f3e0:	00c00044 	movi	r3,1
1000f3e4:	00000206 	br	1000f3f0 <__umodsi3+0x20>
1000f3e8:	30000c26 	beq	r6,zero,1000f41c <__umodsi3+0x4c>
1000f3ec:	28000516 	blt	r5,zero,1000f404 <__umodsi3+0x34>
1000f3f0:	294b883a 	add	r5,r5,r5
1000f3f4:	31bfffc4 	addi	r6,r6,-1
1000f3f8:	18c7883a 	add	r3,r3,r3
1000f3fc:	293ffa36 	bltu	r5,r4,1000f3e8 <__alt_data_end+0xf800f3e8>
1000f400:	18000626 	beq	r3,zero,1000f41c <__umodsi3+0x4c>
1000f404:	1806d07a 	srli	r3,r3,1
1000f408:	11400136 	bltu	r2,r5,1000f410 <__umodsi3+0x40>
1000f40c:	1145c83a 	sub	r2,r2,r5
1000f410:	280ad07a 	srli	r5,r5,1
1000f414:	183ffb1e 	bne	r3,zero,1000f404 <__alt_data_end+0xf800f404>
1000f418:	f800283a 	ret
1000f41c:	f800283a 	ret
1000f420:	00c00044 	movi	r3,1
1000f424:	003ff706 	br	1000f404 <__alt_data_end+0xf800f404>

1000f428 <__adddf3>:
1000f428:	02c00434 	movhi	r11,16
1000f42c:	5affffc4 	addi	r11,r11,-1
1000f430:	2806d7fa 	srli	r3,r5,31
1000f434:	2ad4703a 	and	r10,r5,r11
1000f438:	3ad2703a 	and	r9,r7,r11
1000f43c:	3804d53a 	srli	r2,r7,20
1000f440:	3018d77a 	srli	r12,r6,29
1000f444:	280ad53a 	srli	r5,r5,20
1000f448:	501490fa 	slli	r10,r10,3
1000f44c:	2010d77a 	srli	r8,r4,29
1000f450:	481290fa 	slli	r9,r9,3
1000f454:	380ed7fa 	srli	r7,r7,31
1000f458:	defffb04 	addi	sp,sp,-20
1000f45c:	dc800215 	stw	r18,8(sp)
1000f460:	dc400115 	stw	r17,4(sp)
1000f464:	dc000015 	stw	r16,0(sp)
1000f468:	dfc00415 	stw	ra,16(sp)
1000f46c:	dcc00315 	stw	r19,12(sp)
1000f470:	1c803fcc 	andi	r18,r3,255
1000f474:	2c01ffcc 	andi	r16,r5,2047
1000f478:	5210b03a 	or	r8,r10,r8
1000f47c:	202290fa 	slli	r17,r4,3
1000f480:	1081ffcc 	andi	r2,r2,2047
1000f484:	4b12b03a 	or	r9,r9,r12
1000f488:	300c90fa 	slli	r6,r6,3
1000f48c:	91c07526 	beq	r18,r7,1000f664 <__adddf3+0x23c>
1000f490:	8087c83a 	sub	r3,r16,r2
1000f494:	00c0ab0e 	bge	zero,r3,1000f744 <__adddf3+0x31c>
1000f498:	10002a1e 	bne	r2,zero,1000f544 <__adddf3+0x11c>
1000f49c:	4984b03a 	or	r2,r9,r6
1000f4a0:	1000961e 	bne	r2,zero,1000f6fc <__adddf3+0x2d4>
1000f4a4:	888001cc 	andi	r2,r17,7
1000f4a8:	10000726 	beq	r2,zero,1000f4c8 <__adddf3+0xa0>
1000f4ac:	888003cc 	andi	r2,r17,15
1000f4b0:	00c00104 	movi	r3,4
1000f4b4:	10c00426 	beq	r2,r3,1000f4c8 <__adddf3+0xa0>
1000f4b8:	88c7883a 	add	r3,r17,r3
1000f4bc:	1c63803a 	cmpltu	r17,r3,r17
1000f4c0:	4451883a 	add	r8,r8,r17
1000f4c4:	1823883a 	mov	r17,r3
1000f4c8:	4080202c 	andhi	r2,r8,128
1000f4cc:	10005926 	beq	r2,zero,1000f634 <__adddf3+0x20c>
1000f4d0:	84000044 	addi	r16,r16,1
1000f4d4:	0081ffc4 	movi	r2,2047
1000f4d8:	8080ba26 	beq	r16,r2,1000f7c4 <__adddf3+0x39c>
1000f4dc:	00bfe034 	movhi	r2,65408
1000f4e0:	10bfffc4 	addi	r2,r2,-1
1000f4e4:	4090703a 	and	r8,r8,r2
1000f4e8:	4004977a 	slli	r2,r8,29
1000f4ec:	4010927a 	slli	r8,r8,9
1000f4f0:	8822d0fa 	srli	r17,r17,3
1000f4f4:	8401ffcc 	andi	r16,r16,2047
1000f4f8:	4010d33a 	srli	r8,r8,12
1000f4fc:	9007883a 	mov	r3,r18
1000f500:	1444b03a 	or	r2,r2,r17
1000f504:	8401ffcc 	andi	r16,r16,2047
1000f508:	8020953a 	slli	r16,r16,20
1000f50c:	18c03fcc 	andi	r3,r3,255
1000f510:	01000434 	movhi	r4,16
1000f514:	213fffc4 	addi	r4,r4,-1
1000f518:	180697fa 	slli	r3,r3,31
1000f51c:	4110703a 	and	r8,r8,r4
1000f520:	4410b03a 	or	r8,r8,r16
1000f524:	40c6b03a 	or	r3,r8,r3
1000f528:	dfc00417 	ldw	ra,16(sp)
1000f52c:	dcc00317 	ldw	r19,12(sp)
1000f530:	dc800217 	ldw	r18,8(sp)
1000f534:	dc400117 	ldw	r17,4(sp)
1000f538:	dc000017 	ldw	r16,0(sp)
1000f53c:	dec00504 	addi	sp,sp,20
1000f540:	f800283a 	ret
1000f544:	0081ffc4 	movi	r2,2047
1000f548:	80bfd626 	beq	r16,r2,1000f4a4 <__alt_data_end+0xf800f4a4>
1000f54c:	4a402034 	orhi	r9,r9,128
1000f550:	00800e04 	movi	r2,56
1000f554:	10c09f16 	blt	r2,r3,1000f7d4 <__adddf3+0x3ac>
1000f558:	008007c4 	movi	r2,31
1000f55c:	10c0c216 	blt	r2,r3,1000f868 <__adddf3+0x440>
1000f560:	00800804 	movi	r2,32
1000f564:	10c5c83a 	sub	r2,r2,r3
1000f568:	488a983a 	sll	r5,r9,r2
1000f56c:	30c8d83a 	srl	r4,r6,r3
1000f570:	3084983a 	sll	r2,r6,r2
1000f574:	48c6d83a 	srl	r3,r9,r3
1000f578:	290cb03a 	or	r6,r5,r4
1000f57c:	1004c03a 	cmpne	r2,r2,zero
1000f580:	308cb03a 	or	r6,r6,r2
1000f584:	898dc83a 	sub	r6,r17,r6
1000f588:	89a3803a 	cmpltu	r17,r17,r6
1000f58c:	40d1c83a 	sub	r8,r8,r3
1000f590:	4451c83a 	sub	r8,r8,r17
1000f594:	3023883a 	mov	r17,r6
1000f598:	4080202c 	andhi	r2,r8,128
1000f59c:	10002326 	beq	r2,zero,1000f62c <__adddf3+0x204>
1000f5a0:	04c02034 	movhi	r19,128
1000f5a4:	9cffffc4 	addi	r19,r19,-1
1000f5a8:	44e6703a 	and	r19,r8,r19
1000f5ac:	98007626 	beq	r19,zero,1000f788 <__adddf3+0x360>
1000f5b0:	9809883a 	mov	r4,r19
1000f5b4:	0011c680 	call	10011c68 <__clzsi2>
1000f5b8:	10fffe04 	addi	r3,r2,-8
1000f5bc:	010007c4 	movi	r4,31
1000f5c0:	20c07716 	blt	r4,r3,1000f7a0 <__adddf3+0x378>
1000f5c4:	00800804 	movi	r2,32
1000f5c8:	10c5c83a 	sub	r2,r2,r3
1000f5cc:	8884d83a 	srl	r2,r17,r2
1000f5d0:	98d0983a 	sll	r8,r19,r3
1000f5d4:	88e2983a 	sll	r17,r17,r3
1000f5d8:	1204b03a 	or	r2,r2,r8
1000f5dc:	1c007416 	blt	r3,r16,1000f7b0 <__adddf3+0x388>
1000f5e0:	1c21c83a 	sub	r16,r3,r16
1000f5e4:	82000044 	addi	r8,r16,1
1000f5e8:	00c007c4 	movi	r3,31
1000f5ec:	1a009116 	blt	r3,r8,1000f834 <__adddf3+0x40c>
1000f5f0:	00c00804 	movi	r3,32
1000f5f4:	1a07c83a 	sub	r3,r3,r8
1000f5f8:	8a08d83a 	srl	r4,r17,r8
1000f5fc:	88e2983a 	sll	r17,r17,r3
1000f600:	10c6983a 	sll	r3,r2,r3
1000f604:	1210d83a 	srl	r8,r2,r8
1000f608:	8804c03a 	cmpne	r2,r17,zero
1000f60c:	1906b03a 	or	r3,r3,r4
1000f610:	18a2b03a 	or	r17,r3,r2
1000f614:	0021883a 	mov	r16,zero
1000f618:	003fa206 	br	1000f4a4 <__alt_data_end+0xf800f4a4>
1000f61c:	1890b03a 	or	r8,r3,r2
1000f620:	40017d26 	beq	r8,zero,1000fc18 <__adddf3+0x7f0>
1000f624:	1011883a 	mov	r8,r2
1000f628:	1823883a 	mov	r17,r3
1000f62c:	888001cc 	andi	r2,r17,7
1000f630:	103f9e1e 	bne	r2,zero,1000f4ac <__alt_data_end+0xf800f4ac>
1000f634:	4004977a 	slli	r2,r8,29
1000f638:	8822d0fa 	srli	r17,r17,3
1000f63c:	4010d0fa 	srli	r8,r8,3
1000f640:	9007883a 	mov	r3,r18
1000f644:	1444b03a 	or	r2,r2,r17
1000f648:	0101ffc4 	movi	r4,2047
1000f64c:	81002426 	beq	r16,r4,1000f6e0 <__adddf3+0x2b8>
1000f650:	8120703a 	and	r16,r16,r4
1000f654:	01000434 	movhi	r4,16
1000f658:	213fffc4 	addi	r4,r4,-1
1000f65c:	4110703a 	and	r8,r8,r4
1000f660:	003fa806 	br	1000f504 <__alt_data_end+0xf800f504>
1000f664:	8089c83a 	sub	r4,r16,r2
1000f668:	01005e0e 	bge	zero,r4,1000f7e4 <__adddf3+0x3bc>
1000f66c:	10002b26 	beq	r2,zero,1000f71c <__adddf3+0x2f4>
1000f670:	0081ffc4 	movi	r2,2047
1000f674:	80bf8b26 	beq	r16,r2,1000f4a4 <__alt_data_end+0xf800f4a4>
1000f678:	4a402034 	orhi	r9,r9,128
1000f67c:	00800e04 	movi	r2,56
1000f680:	1100a40e 	bge	r2,r4,1000f914 <__adddf3+0x4ec>
1000f684:	498cb03a 	or	r6,r9,r6
1000f688:	300ac03a 	cmpne	r5,r6,zero
1000f68c:	0013883a 	mov	r9,zero
1000f690:	2c4b883a 	add	r5,r5,r17
1000f694:	2c63803a 	cmpltu	r17,r5,r17
1000f698:	4a11883a 	add	r8,r9,r8
1000f69c:	8a11883a 	add	r8,r17,r8
1000f6a0:	2823883a 	mov	r17,r5
1000f6a4:	4080202c 	andhi	r2,r8,128
1000f6a8:	103fe026 	beq	r2,zero,1000f62c <__alt_data_end+0xf800f62c>
1000f6ac:	84000044 	addi	r16,r16,1
1000f6b0:	0081ffc4 	movi	r2,2047
1000f6b4:	8080d226 	beq	r16,r2,1000fa00 <__adddf3+0x5d8>
1000f6b8:	00bfe034 	movhi	r2,65408
1000f6bc:	10bfffc4 	addi	r2,r2,-1
1000f6c0:	4090703a 	and	r8,r8,r2
1000f6c4:	880ad07a 	srli	r5,r17,1
1000f6c8:	400897fa 	slli	r4,r8,31
1000f6cc:	88c0004c 	andi	r3,r17,1
1000f6d0:	28e2b03a 	or	r17,r5,r3
1000f6d4:	4010d07a 	srli	r8,r8,1
1000f6d8:	2462b03a 	or	r17,r4,r17
1000f6dc:	003f7106 	br	1000f4a4 <__alt_data_end+0xf800f4a4>
1000f6e0:	4088b03a 	or	r4,r8,r2
1000f6e4:	20014526 	beq	r4,zero,1000fbfc <__adddf3+0x7d4>
1000f6e8:	01000434 	movhi	r4,16
1000f6ec:	42000234 	orhi	r8,r8,8
1000f6f0:	213fffc4 	addi	r4,r4,-1
1000f6f4:	4110703a 	and	r8,r8,r4
1000f6f8:	003f8206 	br	1000f504 <__alt_data_end+0xf800f504>
1000f6fc:	18ffffc4 	addi	r3,r3,-1
1000f700:	1800491e 	bne	r3,zero,1000f828 <__adddf3+0x400>
1000f704:	898bc83a 	sub	r5,r17,r6
1000f708:	8963803a 	cmpltu	r17,r17,r5
1000f70c:	4251c83a 	sub	r8,r8,r9
1000f710:	4451c83a 	sub	r8,r8,r17
1000f714:	2823883a 	mov	r17,r5
1000f718:	003f9f06 	br	1000f598 <__alt_data_end+0xf800f598>
1000f71c:	4984b03a 	or	r2,r9,r6
1000f720:	103f6026 	beq	r2,zero,1000f4a4 <__alt_data_end+0xf800f4a4>
1000f724:	213fffc4 	addi	r4,r4,-1
1000f728:	2000931e 	bne	r4,zero,1000f978 <__adddf3+0x550>
1000f72c:	898d883a 	add	r6,r17,r6
1000f730:	3463803a 	cmpltu	r17,r6,r17
1000f734:	4251883a 	add	r8,r8,r9
1000f738:	8a11883a 	add	r8,r17,r8
1000f73c:	3023883a 	mov	r17,r6
1000f740:	003fd806 	br	1000f6a4 <__alt_data_end+0xf800f6a4>
1000f744:	1800541e 	bne	r3,zero,1000f898 <__adddf3+0x470>
1000f748:	80800044 	addi	r2,r16,1
1000f74c:	1081ffcc 	andi	r2,r2,2047
1000f750:	00c00044 	movi	r3,1
1000f754:	1880a00e 	bge	r3,r2,1000f9d8 <__adddf3+0x5b0>
1000f758:	8989c83a 	sub	r4,r17,r6
1000f75c:	8905803a 	cmpltu	r2,r17,r4
1000f760:	4267c83a 	sub	r19,r8,r9
1000f764:	98a7c83a 	sub	r19,r19,r2
1000f768:	9880202c 	andhi	r2,r19,128
1000f76c:	10006326 	beq	r2,zero,1000f8fc <__adddf3+0x4d4>
1000f770:	3463c83a 	sub	r17,r6,r17
1000f774:	4a07c83a 	sub	r3,r9,r8
1000f778:	344d803a 	cmpltu	r6,r6,r17
1000f77c:	19a7c83a 	sub	r19,r3,r6
1000f780:	3825883a 	mov	r18,r7
1000f784:	983f8a1e 	bne	r19,zero,1000f5b0 <__alt_data_end+0xf800f5b0>
1000f788:	8809883a 	mov	r4,r17
1000f78c:	0011c680 	call	10011c68 <__clzsi2>
1000f790:	10800804 	addi	r2,r2,32
1000f794:	10fffe04 	addi	r3,r2,-8
1000f798:	010007c4 	movi	r4,31
1000f79c:	20ff890e 	bge	r4,r3,1000f5c4 <__alt_data_end+0xf800f5c4>
1000f7a0:	10bff604 	addi	r2,r2,-40
1000f7a4:	8884983a 	sll	r2,r17,r2
1000f7a8:	0023883a 	mov	r17,zero
1000f7ac:	1c3f8c0e 	bge	r3,r16,1000f5e0 <__alt_data_end+0xf800f5e0>
1000f7b0:	023fe034 	movhi	r8,65408
1000f7b4:	423fffc4 	addi	r8,r8,-1
1000f7b8:	80e1c83a 	sub	r16,r16,r3
1000f7bc:	1210703a 	and	r8,r2,r8
1000f7c0:	003f3806 	br	1000f4a4 <__alt_data_end+0xf800f4a4>
1000f7c4:	9007883a 	mov	r3,r18
1000f7c8:	0011883a 	mov	r8,zero
1000f7cc:	0005883a 	mov	r2,zero
1000f7d0:	003f4c06 	br	1000f504 <__alt_data_end+0xf800f504>
1000f7d4:	498cb03a 	or	r6,r9,r6
1000f7d8:	300cc03a 	cmpne	r6,r6,zero
1000f7dc:	0007883a 	mov	r3,zero
1000f7e0:	003f6806 	br	1000f584 <__alt_data_end+0xf800f584>
1000f7e4:	20009c1e 	bne	r4,zero,1000fa58 <__adddf3+0x630>
1000f7e8:	80800044 	addi	r2,r16,1
1000f7ec:	1141ffcc 	andi	r5,r2,2047
1000f7f0:	01000044 	movi	r4,1
1000f7f4:	2140670e 	bge	r4,r5,1000f994 <__adddf3+0x56c>
1000f7f8:	0101ffc4 	movi	r4,2047
1000f7fc:	11007f26 	beq	r2,r4,1000f9fc <__adddf3+0x5d4>
1000f800:	898d883a 	add	r6,r17,r6
1000f804:	4247883a 	add	r3,r8,r9
1000f808:	3451803a 	cmpltu	r8,r6,r17
1000f80c:	40d1883a 	add	r8,r8,r3
1000f810:	402297fa 	slli	r17,r8,31
1000f814:	300cd07a 	srli	r6,r6,1
1000f818:	4010d07a 	srli	r8,r8,1
1000f81c:	1021883a 	mov	r16,r2
1000f820:	89a2b03a 	or	r17,r17,r6
1000f824:	003f1f06 	br	1000f4a4 <__alt_data_end+0xf800f4a4>
1000f828:	0081ffc4 	movi	r2,2047
1000f82c:	80bf481e 	bne	r16,r2,1000f550 <__alt_data_end+0xf800f550>
1000f830:	003f1c06 	br	1000f4a4 <__alt_data_end+0xf800f4a4>
1000f834:	843ff844 	addi	r16,r16,-31
1000f838:	01000804 	movi	r4,32
1000f83c:	1406d83a 	srl	r3,r2,r16
1000f840:	41005026 	beq	r8,r4,1000f984 <__adddf3+0x55c>
1000f844:	01001004 	movi	r4,64
1000f848:	2211c83a 	sub	r8,r4,r8
1000f84c:	1204983a 	sll	r2,r2,r8
1000f850:	88a2b03a 	or	r17,r17,r2
1000f854:	8822c03a 	cmpne	r17,r17,zero
1000f858:	1c62b03a 	or	r17,r3,r17
1000f85c:	0011883a 	mov	r8,zero
1000f860:	0021883a 	mov	r16,zero
1000f864:	003f7106 	br	1000f62c <__alt_data_end+0xf800f62c>
1000f868:	193ff804 	addi	r4,r3,-32
1000f86c:	00800804 	movi	r2,32
1000f870:	4908d83a 	srl	r4,r9,r4
1000f874:	18804526 	beq	r3,r2,1000f98c <__adddf3+0x564>
1000f878:	00801004 	movi	r2,64
1000f87c:	10c5c83a 	sub	r2,r2,r3
1000f880:	4886983a 	sll	r3,r9,r2
1000f884:	198cb03a 	or	r6,r3,r6
1000f888:	300cc03a 	cmpne	r6,r6,zero
1000f88c:	218cb03a 	or	r6,r4,r6
1000f890:	0007883a 	mov	r3,zero
1000f894:	003f3b06 	br	1000f584 <__alt_data_end+0xf800f584>
1000f898:	80002a26 	beq	r16,zero,1000f944 <__adddf3+0x51c>
1000f89c:	0101ffc4 	movi	r4,2047
1000f8a0:	11006826 	beq	r2,r4,1000fa44 <__adddf3+0x61c>
1000f8a4:	00c7c83a 	sub	r3,zero,r3
1000f8a8:	42002034 	orhi	r8,r8,128
1000f8ac:	01000e04 	movi	r4,56
1000f8b0:	20c07c16 	blt	r4,r3,1000faa4 <__adddf3+0x67c>
1000f8b4:	010007c4 	movi	r4,31
1000f8b8:	20c0da16 	blt	r4,r3,1000fc24 <__adddf3+0x7fc>
1000f8bc:	01000804 	movi	r4,32
1000f8c0:	20c9c83a 	sub	r4,r4,r3
1000f8c4:	4114983a 	sll	r10,r8,r4
1000f8c8:	88cad83a 	srl	r5,r17,r3
1000f8cc:	8908983a 	sll	r4,r17,r4
1000f8d0:	40c6d83a 	srl	r3,r8,r3
1000f8d4:	5162b03a 	or	r17,r10,r5
1000f8d8:	2008c03a 	cmpne	r4,r4,zero
1000f8dc:	8922b03a 	or	r17,r17,r4
1000f8e0:	3463c83a 	sub	r17,r6,r17
1000f8e4:	48c7c83a 	sub	r3,r9,r3
1000f8e8:	344d803a 	cmpltu	r6,r6,r17
1000f8ec:	1991c83a 	sub	r8,r3,r6
1000f8f0:	1021883a 	mov	r16,r2
1000f8f4:	3825883a 	mov	r18,r7
1000f8f8:	003f2706 	br	1000f598 <__alt_data_end+0xf800f598>
1000f8fc:	24d0b03a 	or	r8,r4,r19
1000f900:	40001b1e 	bne	r8,zero,1000f970 <__adddf3+0x548>
1000f904:	0005883a 	mov	r2,zero
1000f908:	0007883a 	mov	r3,zero
1000f90c:	0021883a 	mov	r16,zero
1000f910:	003f4d06 	br	1000f648 <__alt_data_end+0xf800f648>
1000f914:	008007c4 	movi	r2,31
1000f918:	11003c16 	blt	r2,r4,1000fa0c <__adddf3+0x5e4>
1000f91c:	00800804 	movi	r2,32
1000f920:	1105c83a 	sub	r2,r2,r4
1000f924:	488e983a 	sll	r7,r9,r2
1000f928:	310ad83a 	srl	r5,r6,r4
1000f92c:	3084983a 	sll	r2,r6,r2
1000f930:	4912d83a 	srl	r9,r9,r4
1000f934:	394ab03a 	or	r5,r7,r5
1000f938:	1004c03a 	cmpne	r2,r2,zero
1000f93c:	288ab03a 	or	r5,r5,r2
1000f940:	003f5306 	br	1000f690 <__alt_data_end+0xf800f690>
1000f944:	4448b03a 	or	r4,r8,r17
1000f948:	20003e26 	beq	r4,zero,1000fa44 <__adddf3+0x61c>
1000f94c:	00c6303a 	nor	r3,zero,r3
1000f950:	18003a1e 	bne	r3,zero,1000fa3c <__adddf3+0x614>
1000f954:	3463c83a 	sub	r17,r6,r17
1000f958:	4a07c83a 	sub	r3,r9,r8
1000f95c:	344d803a 	cmpltu	r6,r6,r17
1000f960:	1991c83a 	sub	r8,r3,r6
1000f964:	1021883a 	mov	r16,r2
1000f968:	3825883a 	mov	r18,r7
1000f96c:	003f0a06 	br	1000f598 <__alt_data_end+0xf800f598>
1000f970:	2023883a 	mov	r17,r4
1000f974:	003f0d06 	br	1000f5ac <__alt_data_end+0xf800f5ac>
1000f978:	0081ffc4 	movi	r2,2047
1000f97c:	80bf3f1e 	bne	r16,r2,1000f67c <__alt_data_end+0xf800f67c>
1000f980:	003ec806 	br	1000f4a4 <__alt_data_end+0xf800f4a4>
1000f984:	0005883a 	mov	r2,zero
1000f988:	003fb106 	br	1000f850 <__alt_data_end+0xf800f850>
1000f98c:	0007883a 	mov	r3,zero
1000f990:	003fbc06 	br	1000f884 <__alt_data_end+0xf800f884>
1000f994:	4444b03a 	or	r2,r8,r17
1000f998:	8000871e 	bne	r16,zero,1000fbb8 <__adddf3+0x790>
1000f99c:	1000ba26 	beq	r2,zero,1000fc88 <__adddf3+0x860>
1000f9a0:	4984b03a 	or	r2,r9,r6
1000f9a4:	103ebf26 	beq	r2,zero,1000f4a4 <__alt_data_end+0xf800f4a4>
1000f9a8:	8985883a 	add	r2,r17,r6
1000f9ac:	4247883a 	add	r3,r8,r9
1000f9b0:	1451803a 	cmpltu	r8,r2,r17
1000f9b4:	40d1883a 	add	r8,r8,r3
1000f9b8:	40c0202c 	andhi	r3,r8,128
1000f9bc:	1023883a 	mov	r17,r2
1000f9c0:	183f1a26 	beq	r3,zero,1000f62c <__alt_data_end+0xf800f62c>
1000f9c4:	00bfe034 	movhi	r2,65408
1000f9c8:	10bfffc4 	addi	r2,r2,-1
1000f9cc:	2021883a 	mov	r16,r4
1000f9d0:	4090703a 	and	r8,r8,r2
1000f9d4:	003eb306 	br	1000f4a4 <__alt_data_end+0xf800f4a4>
1000f9d8:	4444b03a 	or	r2,r8,r17
1000f9dc:	8000291e 	bne	r16,zero,1000fa84 <__adddf3+0x65c>
1000f9e0:	10004b1e 	bne	r2,zero,1000fb10 <__adddf3+0x6e8>
1000f9e4:	4990b03a 	or	r8,r9,r6
1000f9e8:	40008b26 	beq	r8,zero,1000fc18 <__adddf3+0x7f0>
1000f9ec:	4811883a 	mov	r8,r9
1000f9f0:	3023883a 	mov	r17,r6
1000f9f4:	3825883a 	mov	r18,r7
1000f9f8:	003eaa06 	br	1000f4a4 <__alt_data_end+0xf800f4a4>
1000f9fc:	1021883a 	mov	r16,r2
1000fa00:	0011883a 	mov	r8,zero
1000fa04:	0005883a 	mov	r2,zero
1000fa08:	003f0f06 	br	1000f648 <__alt_data_end+0xf800f648>
1000fa0c:	217ff804 	addi	r5,r4,-32
1000fa10:	00800804 	movi	r2,32
1000fa14:	494ad83a 	srl	r5,r9,r5
1000fa18:	20807d26 	beq	r4,r2,1000fc10 <__adddf3+0x7e8>
1000fa1c:	00801004 	movi	r2,64
1000fa20:	1109c83a 	sub	r4,r2,r4
1000fa24:	4912983a 	sll	r9,r9,r4
1000fa28:	498cb03a 	or	r6,r9,r6
1000fa2c:	300cc03a 	cmpne	r6,r6,zero
1000fa30:	298ab03a 	or	r5,r5,r6
1000fa34:	0013883a 	mov	r9,zero
1000fa38:	003f1506 	br	1000f690 <__alt_data_end+0xf800f690>
1000fa3c:	0101ffc4 	movi	r4,2047
1000fa40:	113f9a1e 	bne	r2,r4,1000f8ac <__alt_data_end+0xf800f8ac>
1000fa44:	4811883a 	mov	r8,r9
1000fa48:	3023883a 	mov	r17,r6
1000fa4c:	1021883a 	mov	r16,r2
1000fa50:	3825883a 	mov	r18,r7
1000fa54:	003e9306 	br	1000f4a4 <__alt_data_end+0xf800f4a4>
1000fa58:	8000161e 	bne	r16,zero,1000fab4 <__adddf3+0x68c>
1000fa5c:	444ab03a 	or	r5,r8,r17
1000fa60:	28005126 	beq	r5,zero,1000fba8 <__adddf3+0x780>
1000fa64:	0108303a 	nor	r4,zero,r4
1000fa68:	20004d1e 	bne	r4,zero,1000fba0 <__adddf3+0x778>
1000fa6c:	89a3883a 	add	r17,r17,r6
1000fa70:	4253883a 	add	r9,r8,r9
1000fa74:	898d803a 	cmpltu	r6,r17,r6
1000fa78:	3251883a 	add	r8,r6,r9
1000fa7c:	1021883a 	mov	r16,r2
1000fa80:	003f0806 	br	1000f6a4 <__alt_data_end+0xf800f6a4>
1000fa84:	1000301e 	bne	r2,zero,1000fb48 <__adddf3+0x720>
1000fa88:	4984b03a 	or	r2,r9,r6
1000fa8c:	10007126 	beq	r2,zero,1000fc54 <__adddf3+0x82c>
1000fa90:	4811883a 	mov	r8,r9
1000fa94:	3023883a 	mov	r17,r6
1000fa98:	3825883a 	mov	r18,r7
1000fa9c:	0401ffc4 	movi	r16,2047
1000faa0:	003e8006 	br	1000f4a4 <__alt_data_end+0xf800f4a4>
1000faa4:	4462b03a 	or	r17,r8,r17
1000faa8:	8822c03a 	cmpne	r17,r17,zero
1000faac:	0007883a 	mov	r3,zero
1000fab0:	003f8b06 	br	1000f8e0 <__alt_data_end+0xf800f8e0>
1000fab4:	0141ffc4 	movi	r5,2047
1000fab8:	11403b26 	beq	r2,r5,1000fba8 <__adddf3+0x780>
1000fabc:	0109c83a 	sub	r4,zero,r4
1000fac0:	42002034 	orhi	r8,r8,128
1000fac4:	01400e04 	movi	r5,56
1000fac8:	29006716 	blt	r5,r4,1000fc68 <__adddf3+0x840>
1000facc:	014007c4 	movi	r5,31
1000fad0:	29007016 	blt	r5,r4,1000fc94 <__adddf3+0x86c>
1000fad4:	01400804 	movi	r5,32
1000fad8:	290bc83a 	sub	r5,r5,r4
1000fadc:	4154983a 	sll	r10,r8,r5
1000fae0:	890ed83a 	srl	r7,r17,r4
1000fae4:	894a983a 	sll	r5,r17,r5
1000fae8:	4108d83a 	srl	r4,r8,r4
1000faec:	51e2b03a 	or	r17,r10,r7
1000faf0:	280ac03a 	cmpne	r5,r5,zero
1000faf4:	8962b03a 	or	r17,r17,r5
1000faf8:	89a3883a 	add	r17,r17,r6
1000fafc:	2253883a 	add	r9,r4,r9
1000fb00:	898d803a 	cmpltu	r6,r17,r6
1000fb04:	3251883a 	add	r8,r6,r9
1000fb08:	1021883a 	mov	r16,r2
1000fb0c:	003ee506 	br	1000f6a4 <__alt_data_end+0xf800f6a4>
1000fb10:	4984b03a 	or	r2,r9,r6
1000fb14:	103e6326 	beq	r2,zero,1000f4a4 <__alt_data_end+0xf800f4a4>
1000fb18:	8987c83a 	sub	r3,r17,r6
1000fb1c:	88c9803a 	cmpltu	r4,r17,r3
1000fb20:	4245c83a 	sub	r2,r8,r9
1000fb24:	1105c83a 	sub	r2,r2,r4
1000fb28:	1100202c 	andhi	r4,r2,128
1000fb2c:	203ebb26 	beq	r4,zero,1000f61c <__alt_data_end+0xf800f61c>
1000fb30:	3463c83a 	sub	r17,r6,r17
1000fb34:	4a07c83a 	sub	r3,r9,r8
1000fb38:	344d803a 	cmpltu	r6,r6,r17
1000fb3c:	1991c83a 	sub	r8,r3,r6
1000fb40:	3825883a 	mov	r18,r7
1000fb44:	003e5706 	br	1000f4a4 <__alt_data_end+0xf800f4a4>
1000fb48:	4984b03a 	or	r2,r9,r6
1000fb4c:	10002e26 	beq	r2,zero,1000fc08 <__adddf3+0x7e0>
1000fb50:	4004d0fa 	srli	r2,r8,3
1000fb54:	8822d0fa 	srli	r17,r17,3
1000fb58:	4010977a 	slli	r8,r8,29
1000fb5c:	10c0022c 	andhi	r3,r2,8
1000fb60:	4462b03a 	or	r17,r8,r17
1000fb64:	18000826 	beq	r3,zero,1000fb88 <__adddf3+0x760>
1000fb68:	4808d0fa 	srli	r4,r9,3
1000fb6c:	20c0022c 	andhi	r3,r4,8
1000fb70:	1800051e 	bne	r3,zero,1000fb88 <__adddf3+0x760>
1000fb74:	300cd0fa 	srli	r6,r6,3
1000fb78:	4806977a 	slli	r3,r9,29
1000fb7c:	2005883a 	mov	r2,r4
1000fb80:	3825883a 	mov	r18,r7
1000fb84:	19a2b03a 	or	r17,r3,r6
1000fb88:	8810d77a 	srli	r8,r17,29
1000fb8c:	100490fa 	slli	r2,r2,3
1000fb90:	882290fa 	slli	r17,r17,3
1000fb94:	0401ffc4 	movi	r16,2047
1000fb98:	4090b03a 	or	r8,r8,r2
1000fb9c:	003e4106 	br	1000f4a4 <__alt_data_end+0xf800f4a4>
1000fba0:	0141ffc4 	movi	r5,2047
1000fba4:	117fc71e 	bne	r2,r5,1000fac4 <__alt_data_end+0xf800fac4>
1000fba8:	4811883a 	mov	r8,r9
1000fbac:	3023883a 	mov	r17,r6
1000fbb0:	1021883a 	mov	r16,r2
1000fbb4:	003e3b06 	br	1000f4a4 <__alt_data_end+0xf800f4a4>
1000fbb8:	10002f26 	beq	r2,zero,1000fc78 <__adddf3+0x850>
1000fbbc:	4984b03a 	or	r2,r9,r6
1000fbc0:	10001126 	beq	r2,zero,1000fc08 <__adddf3+0x7e0>
1000fbc4:	4004d0fa 	srli	r2,r8,3
1000fbc8:	8822d0fa 	srli	r17,r17,3
1000fbcc:	4010977a 	slli	r8,r8,29
1000fbd0:	10c0022c 	andhi	r3,r2,8
1000fbd4:	4462b03a 	or	r17,r8,r17
1000fbd8:	183feb26 	beq	r3,zero,1000fb88 <__alt_data_end+0xf800fb88>
1000fbdc:	4808d0fa 	srli	r4,r9,3
1000fbe0:	20c0022c 	andhi	r3,r4,8
1000fbe4:	183fe81e 	bne	r3,zero,1000fb88 <__alt_data_end+0xf800fb88>
1000fbe8:	300cd0fa 	srli	r6,r6,3
1000fbec:	4806977a 	slli	r3,r9,29
1000fbf0:	2005883a 	mov	r2,r4
1000fbf4:	19a2b03a 	or	r17,r3,r6
1000fbf8:	003fe306 	br	1000fb88 <__alt_data_end+0xf800fb88>
1000fbfc:	0011883a 	mov	r8,zero
1000fc00:	0005883a 	mov	r2,zero
1000fc04:	003e3f06 	br	1000f504 <__alt_data_end+0xf800f504>
1000fc08:	0401ffc4 	movi	r16,2047
1000fc0c:	003e2506 	br	1000f4a4 <__alt_data_end+0xf800f4a4>
1000fc10:	0013883a 	mov	r9,zero
1000fc14:	003f8406 	br	1000fa28 <__alt_data_end+0xf800fa28>
1000fc18:	0005883a 	mov	r2,zero
1000fc1c:	0007883a 	mov	r3,zero
1000fc20:	003e8906 	br	1000f648 <__alt_data_end+0xf800f648>
1000fc24:	197ff804 	addi	r5,r3,-32
1000fc28:	01000804 	movi	r4,32
1000fc2c:	414ad83a 	srl	r5,r8,r5
1000fc30:	19002426 	beq	r3,r4,1000fcc4 <__adddf3+0x89c>
1000fc34:	01001004 	movi	r4,64
1000fc38:	20c7c83a 	sub	r3,r4,r3
1000fc3c:	40c6983a 	sll	r3,r8,r3
1000fc40:	1c46b03a 	or	r3,r3,r17
1000fc44:	1806c03a 	cmpne	r3,r3,zero
1000fc48:	28e2b03a 	or	r17,r5,r3
1000fc4c:	0007883a 	mov	r3,zero
1000fc50:	003f2306 	br	1000f8e0 <__alt_data_end+0xf800f8e0>
1000fc54:	0007883a 	mov	r3,zero
1000fc58:	5811883a 	mov	r8,r11
1000fc5c:	00bfffc4 	movi	r2,-1
1000fc60:	0401ffc4 	movi	r16,2047
1000fc64:	003e7806 	br	1000f648 <__alt_data_end+0xf800f648>
1000fc68:	4462b03a 	or	r17,r8,r17
1000fc6c:	8822c03a 	cmpne	r17,r17,zero
1000fc70:	0009883a 	mov	r4,zero
1000fc74:	003fa006 	br	1000faf8 <__alt_data_end+0xf800faf8>
1000fc78:	4811883a 	mov	r8,r9
1000fc7c:	3023883a 	mov	r17,r6
1000fc80:	0401ffc4 	movi	r16,2047
1000fc84:	003e0706 	br	1000f4a4 <__alt_data_end+0xf800f4a4>
1000fc88:	4811883a 	mov	r8,r9
1000fc8c:	3023883a 	mov	r17,r6
1000fc90:	003e0406 	br	1000f4a4 <__alt_data_end+0xf800f4a4>
1000fc94:	21fff804 	addi	r7,r4,-32
1000fc98:	01400804 	movi	r5,32
1000fc9c:	41ced83a 	srl	r7,r8,r7
1000fca0:	21400a26 	beq	r4,r5,1000fccc <__adddf3+0x8a4>
1000fca4:	01401004 	movi	r5,64
1000fca8:	2909c83a 	sub	r4,r5,r4
1000fcac:	4108983a 	sll	r4,r8,r4
1000fcb0:	2448b03a 	or	r4,r4,r17
1000fcb4:	2008c03a 	cmpne	r4,r4,zero
1000fcb8:	3922b03a 	or	r17,r7,r4
1000fcbc:	0009883a 	mov	r4,zero
1000fcc0:	003f8d06 	br	1000faf8 <__alt_data_end+0xf800faf8>
1000fcc4:	0007883a 	mov	r3,zero
1000fcc8:	003fdd06 	br	1000fc40 <__alt_data_end+0xf800fc40>
1000fccc:	0009883a 	mov	r4,zero
1000fcd0:	003ff706 	br	1000fcb0 <__alt_data_end+0xf800fcb0>

1000fcd4 <__divdf3>:
1000fcd4:	defff004 	addi	sp,sp,-64
1000fcd8:	dc800815 	stw	r18,32(sp)
1000fcdc:	2824d53a 	srli	r18,r5,20
1000fce0:	dd800c15 	stw	r22,48(sp)
1000fce4:	282cd7fa 	srli	r22,r5,31
1000fce8:	dc000615 	stw	r16,24(sp)
1000fcec:	04000434 	movhi	r16,16
1000fcf0:	843fffc4 	addi	r16,r16,-1
1000fcf4:	dfc00f15 	stw	ra,60(sp)
1000fcf8:	df000e15 	stw	fp,56(sp)
1000fcfc:	ddc00d15 	stw	r23,52(sp)
1000fd00:	dd400b15 	stw	r21,44(sp)
1000fd04:	dd000a15 	stw	r20,40(sp)
1000fd08:	dcc00915 	stw	r19,36(sp)
1000fd0c:	dc400715 	stw	r17,28(sp)
1000fd10:	9481ffcc 	andi	r18,r18,2047
1000fd14:	2c20703a 	and	r16,r5,r16
1000fd18:	b2003fcc 	andi	r8,r22,255
1000fd1c:	90006126 	beq	r18,zero,1000fea4 <__divdf3+0x1d0>
1000fd20:	0081ffc4 	movi	r2,2047
1000fd24:	202b883a 	mov	r21,r4
1000fd28:	90803726 	beq	r18,r2,1000fe08 <__divdf3+0x134>
1000fd2c:	80800434 	orhi	r2,r16,16
1000fd30:	100490fa 	slli	r2,r2,3
1000fd34:	2020d77a 	srli	r16,r4,29
1000fd38:	202a90fa 	slli	r21,r4,3
1000fd3c:	94bf0044 	addi	r18,r18,-1023
1000fd40:	80a0b03a 	or	r16,r16,r2
1000fd44:	0013883a 	mov	r9,zero
1000fd48:	000b883a 	mov	r5,zero
1000fd4c:	3806d53a 	srli	r3,r7,20
1000fd50:	382ed7fa 	srli	r23,r7,31
1000fd54:	04400434 	movhi	r17,16
1000fd58:	8c7fffc4 	addi	r17,r17,-1
1000fd5c:	18c1ffcc 	andi	r3,r3,2047
1000fd60:	3029883a 	mov	r20,r6
1000fd64:	3c62703a 	and	r17,r7,r17
1000fd68:	bf003fcc 	andi	fp,r23,255
1000fd6c:	18006e26 	beq	r3,zero,1000ff28 <__divdf3+0x254>
1000fd70:	0081ffc4 	movi	r2,2047
1000fd74:	18806626 	beq	r3,r2,1000ff10 <__divdf3+0x23c>
1000fd78:	88800434 	orhi	r2,r17,16
1000fd7c:	100490fa 	slli	r2,r2,3
1000fd80:	3022d77a 	srli	r17,r6,29
1000fd84:	302890fa 	slli	r20,r6,3
1000fd88:	18ff0044 	addi	r3,r3,-1023
1000fd8c:	88a2b03a 	or	r17,r17,r2
1000fd90:	000f883a 	mov	r7,zero
1000fd94:	b5e6f03a 	xor	r19,r22,r23
1000fd98:	3a4cb03a 	or	r6,r7,r9
1000fd9c:	008003c4 	movi	r2,15
1000fda0:	9809883a 	mov	r4,r19
1000fda4:	90c7c83a 	sub	r3,r18,r3
1000fda8:	9cc03fcc 	andi	r19,r19,255
1000fdac:	11809636 	bltu	r2,r6,10010008 <__divdf3+0x334>
1000fdb0:	300c90ba 	slli	r6,r6,2
1000fdb4:	00840074 	movhi	r2,4097
1000fdb8:	10bf7204 	addi	r2,r2,-568
1000fdbc:	308d883a 	add	r6,r6,r2
1000fdc0:	30800017 	ldw	r2,0(r6)
1000fdc4:	1000683a 	jmp	r2
1000fdc8:	10010008 	cmpgei	zero,r2,1024
1000fdcc:	1000fe40 	call	11000fe4 <_gp+0xfe2184>
1000fdd0:	1000fff8 	rdprs	zero,r2,1023
1000fdd4:	1000fe34 	orhi	zero,r2,1016
1000fdd8:	1000fff8 	rdprs	zero,r2,1023
1000fddc:	1000ffcc 	andi	zero,r2,1023
1000fde0:	1000fff8 	rdprs	zero,r2,1023
1000fde4:	1000fe34 	orhi	zero,r2,1016
1000fde8:	1000fe40 	call	11000fe4 <_gp+0xfe2184>
1000fdec:	1000fe40 	call	11000fe4 <_gp+0xfe2184>
1000fdf0:	1000ffcc 	andi	zero,r2,1023
1000fdf4:	1000fe34 	orhi	zero,r2,1016
1000fdf8:	1000fe24 	muli	zero,r2,1016
1000fdfc:	1000fe24 	muli	zero,r2,1016
1000fe00:	1000fe24 	muli	zero,r2,1016
1000fe04:	10010390 	cmplti	zero,r2,1038
1000fe08:	2404b03a 	or	r2,r4,r16
1000fe0c:	10006c1e 	bne	r2,zero,1000ffc0 <__divdf3+0x2ec>
1000fe10:	02400204 	movi	r9,8
1000fe14:	0021883a 	mov	r16,zero
1000fe18:	002b883a 	mov	r21,zero
1000fe1c:	01400084 	movi	r5,2
1000fe20:	003fca06 	br	1000fd4c <__alt_data_end+0xf800fd4c>
1000fe24:	8023883a 	mov	r17,r16
1000fe28:	a829883a 	mov	r20,r21
1000fe2c:	4039883a 	mov	fp,r8
1000fe30:	280f883a 	mov	r7,r5
1000fe34:	00800084 	movi	r2,2
1000fe38:	3881601e 	bne	r7,r2,100103bc <__divdf3+0x6e8>
1000fe3c:	e027883a 	mov	r19,fp
1000fe40:	9900004c 	andi	r4,r19,1
1000fe44:	0081ffc4 	movi	r2,2047
1000fe48:	0021883a 	mov	r16,zero
1000fe4c:	002b883a 	mov	r21,zero
1000fe50:	1004953a 	slli	r2,r2,20
1000fe54:	20c03fcc 	andi	r3,r4,255
1000fe58:	01400434 	movhi	r5,16
1000fe5c:	297fffc4 	addi	r5,r5,-1
1000fe60:	180697fa 	slli	r3,r3,31
1000fe64:	8160703a 	and	r16,r16,r5
1000fe68:	80a0b03a 	or	r16,r16,r2
1000fe6c:	80c6b03a 	or	r3,r16,r3
1000fe70:	a805883a 	mov	r2,r21
1000fe74:	dfc00f17 	ldw	ra,60(sp)
1000fe78:	df000e17 	ldw	fp,56(sp)
1000fe7c:	ddc00d17 	ldw	r23,52(sp)
1000fe80:	dd800c17 	ldw	r22,48(sp)
1000fe84:	dd400b17 	ldw	r21,44(sp)
1000fe88:	dd000a17 	ldw	r20,40(sp)
1000fe8c:	dcc00917 	ldw	r19,36(sp)
1000fe90:	dc800817 	ldw	r18,32(sp)
1000fe94:	dc400717 	ldw	r17,28(sp)
1000fe98:	dc000617 	ldw	r16,24(sp)
1000fe9c:	dec01004 	addi	sp,sp,64
1000fea0:	f800283a 	ret
1000fea4:	2404b03a 	or	r2,r4,r16
1000fea8:	2023883a 	mov	r17,r4
1000feac:	10003f26 	beq	r2,zero,1000ffac <__divdf3+0x2d8>
1000feb0:	80015e26 	beq	r16,zero,1001042c <__divdf3+0x758>
1000feb4:	8009883a 	mov	r4,r16
1000feb8:	d9800215 	stw	r6,8(sp)
1000febc:	d9c00515 	stw	r7,20(sp)
1000fec0:	da000415 	stw	r8,16(sp)
1000fec4:	0011c680 	call	10011c68 <__clzsi2>
1000fec8:	d9800217 	ldw	r6,8(sp)
1000fecc:	d9c00517 	ldw	r7,20(sp)
1000fed0:	da000417 	ldw	r8,16(sp)
1000fed4:	113ffd44 	addi	r4,r2,-11
1000fed8:	00c00704 	movi	r3,28
1000fedc:	19014f16 	blt	r3,r4,1001041c <__divdf3+0x748>
1000fee0:	00c00744 	movi	r3,29
1000fee4:	157ffe04 	addi	r21,r2,-8
1000fee8:	1907c83a 	sub	r3,r3,r4
1000feec:	8560983a 	sll	r16,r16,r21
1000fef0:	88c6d83a 	srl	r3,r17,r3
1000fef4:	8d6a983a 	sll	r21,r17,r21
1000fef8:	1c20b03a 	or	r16,r3,r16
1000fefc:	1080fcc4 	addi	r2,r2,1011
1000ff00:	00a5c83a 	sub	r18,zero,r2
1000ff04:	0013883a 	mov	r9,zero
1000ff08:	000b883a 	mov	r5,zero
1000ff0c:	003f8f06 	br	1000fd4c <__alt_data_end+0xf800fd4c>
1000ff10:	3444b03a 	or	r2,r6,r17
1000ff14:	1000231e 	bne	r2,zero,1000ffa4 <__divdf3+0x2d0>
1000ff18:	0023883a 	mov	r17,zero
1000ff1c:	0029883a 	mov	r20,zero
1000ff20:	01c00084 	movi	r7,2
1000ff24:	003f9b06 	br	1000fd94 <__alt_data_end+0xf800fd94>
1000ff28:	3444b03a 	or	r2,r6,r17
1000ff2c:	10001926 	beq	r2,zero,1000ff94 <__divdf3+0x2c0>
1000ff30:	88014b26 	beq	r17,zero,10010460 <__divdf3+0x78c>
1000ff34:	8809883a 	mov	r4,r17
1000ff38:	d9400115 	stw	r5,4(sp)
1000ff3c:	d9800215 	stw	r6,8(sp)
1000ff40:	da000415 	stw	r8,16(sp)
1000ff44:	da400315 	stw	r9,12(sp)
1000ff48:	0011c680 	call	10011c68 <__clzsi2>
1000ff4c:	d9400117 	ldw	r5,4(sp)
1000ff50:	d9800217 	ldw	r6,8(sp)
1000ff54:	da000417 	ldw	r8,16(sp)
1000ff58:	da400317 	ldw	r9,12(sp)
1000ff5c:	113ffd44 	addi	r4,r2,-11
1000ff60:	00c00704 	movi	r3,28
1000ff64:	19013a16 	blt	r3,r4,10010450 <__divdf3+0x77c>
1000ff68:	00c00744 	movi	r3,29
1000ff6c:	153ffe04 	addi	r20,r2,-8
1000ff70:	1907c83a 	sub	r3,r3,r4
1000ff74:	8d22983a 	sll	r17,r17,r20
1000ff78:	30c6d83a 	srl	r3,r6,r3
1000ff7c:	3528983a 	sll	r20,r6,r20
1000ff80:	1c62b03a 	or	r17,r3,r17
1000ff84:	1080fcc4 	addi	r2,r2,1011
1000ff88:	0087c83a 	sub	r3,zero,r2
1000ff8c:	000f883a 	mov	r7,zero
1000ff90:	003f8006 	br	1000fd94 <__alt_data_end+0xf800fd94>
1000ff94:	0023883a 	mov	r17,zero
1000ff98:	0029883a 	mov	r20,zero
1000ff9c:	01c00044 	movi	r7,1
1000ffa0:	003f7c06 	br	1000fd94 <__alt_data_end+0xf800fd94>
1000ffa4:	01c000c4 	movi	r7,3
1000ffa8:	003f7a06 	br	1000fd94 <__alt_data_end+0xf800fd94>
1000ffac:	02400104 	movi	r9,4
1000ffb0:	0021883a 	mov	r16,zero
1000ffb4:	002b883a 	mov	r21,zero
1000ffb8:	01400044 	movi	r5,1
1000ffbc:	003f6306 	br	1000fd4c <__alt_data_end+0xf800fd4c>
1000ffc0:	02400304 	movi	r9,12
1000ffc4:	014000c4 	movi	r5,3
1000ffc8:	003f6006 	br	1000fd4c <__alt_data_end+0xf800fd4c>
1000ffcc:	04000434 	movhi	r16,16
1000ffd0:	0009883a 	mov	r4,zero
1000ffd4:	843fffc4 	addi	r16,r16,-1
1000ffd8:	057fffc4 	movi	r21,-1
1000ffdc:	0081ffc4 	movi	r2,2047
1000ffe0:	003f9b06 	br	1000fe50 <__alt_data_end+0xf800fe50>
1000ffe4:	00c00044 	movi	r3,1
1000ffe8:	1887c83a 	sub	r3,r3,r2
1000ffec:	01000e04 	movi	r4,56
1000fff0:	20c1530e 	bge	r4,r3,10010540 <__divdf3+0x86c>
1000fff4:	9900004c 	andi	r4,r19,1
1000fff8:	0005883a 	mov	r2,zero
1000fffc:	0021883a 	mov	r16,zero
10010000:	002b883a 	mov	r21,zero
10010004:	003f9206 	br	1000fe50 <__alt_data_end+0xf800fe50>
10010008:	8c012e36 	bltu	r17,r16,100104c4 <__divdf3+0x7f0>
1001000c:	84412c26 	beq	r16,r17,100104c0 <__divdf3+0x7ec>
10010010:	a82f883a 	mov	r23,r21
10010014:	18ffffc4 	addi	r3,r3,-1
10010018:	002b883a 	mov	r21,zero
1001001c:	a004d63a 	srli	r2,r20,24
10010020:	8822923a 	slli	r17,r17,8
10010024:	a028923a 	slli	r20,r20,8
10010028:	8009883a 	mov	r4,r16
1001002c:	88acb03a 	or	r22,r17,r2
10010030:	dd000015 	stw	r20,0(sp)
10010034:	b028d43a 	srli	r20,r22,16
10010038:	d8c00215 	stw	r3,8(sp)
1001003c:	b4bfffcc 	andi	r18,r22,65535
10010040:	a00b883a 	mov	r5,r20
10010044:	000f36c0 	call	1000f36c <__udivsi3>
10010048:	100b883a 	mov	r5,r2
1001004c:	9009883a 	mov	r4,r18
10010050:	1023883a 	mov	r17,r2
10010054:	00045280 	call	10004528 <__mulsi3>
10010058:	8009883a 	mov	r4,r16
1001005c:	a00b883a 	mov	r5,r20
10010060:	1039883a 	mov	fp,r2
10010064:	000f3d00 	call	1000f3d0 <__umodsi3>
10010068:	1004943a 	slli	r2,r2,16
1001006c:	b808d43a 	srli	r4,r23,16
10010070:	d8c00217 	ldw	r3,8(sp)
10010074:	2084b03a 	or	r2,r4,r2
10010078:	1700062e 	bgeu	r2,fp,10010094 <__divdf3+0x3c0>
1001007c:	1585883a 	add	r2,r2,r22
10010080:	893fffc4 	addi	r4,r17,-1
10010084:	15811d36 	bltu	r2,r22,100104fc <__divdf3+0x828>
10010088:	17011c2e 	bgeu	r2,fp,100104fc <__divdf3+0x828>
1001008c:	8c7fff84 	addi	r17,r17,-2
10010090:	1585883a 	add	r2,r2,r22
10010094:	1739c83a 	sub	fp,r2,fp
10010098:	a00b883a 	mov	r5,r20
1001009c:	e009883a 	mov	r4,fp
100100a0:	d8c00215 	stw	r3,8(sp)
100100a4:	000f36c0 	call	1000f36c <__udivsi3>
100100a8:	100b883a 	mov	r5,r2
100100ac:	9009883a 	mov	r4,r18
100100b0:	1021883a 	mov	r16,r2
100100b4:	00045280 	call	10004528 <__mulsi3>
100100b8:	a00b883a 	mov	r5,r20
100100bc:	e009883a 	mov	r4,fp
100100c0:	d8800415 	stw	r2,16(sp)
100100c4:	000f3d00 	call	1000f3d0 <__umodsi3>
100100c8:	1004943a 	slli	r2,r2,16
100100cc:	da000417 	ldw	r8,16(sp)
100100d0:	bdffffcc 	andi	r23,r23,65535
100100d4:	b884b03a 	or	r2,r23,r2
100100d8:	d8c00217 	ldw	r3,8(sp)
100100dc:	1200062e 	bgeu	r2,r8,100100f8 <__divdf3+0x424>
100100e0:	1585883a 	add	r2,r2,r22
100100e4:	813fffc4 	addi	r4,r16,-1
100100e8:	15810236 	bltu	r2,r22,100104f4 <__divdf3+0x820>
100100ec:	1201012e 	bgeu	r2,r8,100104f4 <__divdf3+0x820>
100100f0:	843fff84 	addi	r16,r16,-2
100100f4:	1585883a 	add	r2,r2,r22
100100f8:	8822943a 	slli	r17,r17,16
100100fc:	d9800017 	ldw	r6,0(sp)
10010100:	1211c83a 	sub	r8,r2,r8
10010104:	8c22b03a 	or	r17,r17,r16
10010108:	373fffcc 	andi	fp,r6,65535
1001010c:	8abfffcc 	andi	r10,r17,65535
10010110:	8820d43a 	srli	r16,r17,16
10010114:	5009883a 	mov	r4,r10
10010118:	e00b883a 	mov	r5,fp
1001011c:	302ed43a 	srli	r23,r6,16
10010120:	d8c00215 	stw	r3,8(sp)
10010124:	da000415 	stw	r8,16(sp)
10010128:	da800115 	stw	r10,4(sp)
1001012c:	00045280 	call	10004528 <__mulsi3>
10010130:	800b883a 	mov	r5,r16
10010134:	e009883a 	mov	r4,fp
10010138:	d8800515 	stw	r2,20(sp)
1001013c:	00045280 	call	10004528 <__mulsi3>
10010140:	8009883a 	mov	r4,r16
10010144:	b80b883a 	mov	r5,r23
10010148:	d8800315 	stw	r2,12(sp)
1001014c:	00045280 	call	10004528 <__mulsi3>
10010150:	da800117 	ldw	r10,4(sp)
10010154:	b80b883a 	mov	r5,r23
10010158:	1021883a 	mov	r16,r2
1001015c:	5009883a 	mov	r4,r10
10010160:	00045280 	call	10004528 <__mulsi3>
10010164:	d9c00517 	ldw	r7,20(sp)
10010168:	da400317 	ldw	r9,12(sp)
1001016c:	d8c00217 	ldw	r3,8(sp)
10010170:	3808d43a 	srli	r4,r7,16
10010174:	1245883a 	add	r2,r2,r9
10010178:	da000417 	ldw	r8,16(sp)
1001017c:	2085883a 	add	r2,r4,r2
10010180:	1240022e 	bgeu	r2,r9,1001018c <__divdf3+0x4b8>
10010184:	01000074 	movhi	r4,1
10010188:	8121883a 	add	r16,r16,r4
1001018c:	1008d43a 	srli	r4,r2,16
10010190:	1004943a 	slli	r2,r2,16
10010194:	39ffffcc 	andi	r7,r7,65535
10010198:	2409883a 	add	r4,r4,r16
1001019c:	11c5883a 	add	r2,r2,r7
100101a0:	4100bb36 	bltu	r8,r4,10010490 <__divdf3+0x7bc>
100101a4:	4100d726 	beq	r8,r4,10010504 <__divdf3+0x830>
100101a8:	4109c83a 	sub	r4,r8,r4
100101ac:	a8a1c83a 	sub	r16,r21,r2
100101b0:	ac2b803a 	cmpltu	r21,r21,r16
100101b4:	256bc83a 	sub	r21,r4,r21
100101b8:	b540d926 	beq	r22,r21,10010520 <__divdf3+0x84c>
100101bc:	a00b883a 	mov	r5,r20
100101c0:	a809883a 	mov	r4,r21
100101c4:	d8c00215 	stw	r3,8(sp)
100101c8:	000f36c0 	call	1000f36c <__udivsi3>
100101cc:	100b883a 	mov	r5,r2
100101d0:	9009883a 	mov	r4,r18
100101d4:	d8800515 	stw	r2,20(sp)
100101d8:	00045280 	call	10004528 <__mulsi3>
100101dc:	a809883a 	mov	r4,r21
100101e0:	a00b883a 	mov	r5,r20
100101e4:	d8800415 	stw	r2,16(sp)
100101e8:	000f3d00 	call	1000f3d0 <__umodsi3>
100101ec:	1004943a 	slli	r2,r2,16
100101f0:	8008d43a 	srli	r4,r16,16
100101f4:	da000417 	ldw	r8,16(sp)
100101f8:	d8c00217 	ldw	r3,8(sp)
100101fc:	2084b03a 	or	r2,r4,r2
10010200:	d9c00517 	ldw	r7,20(sp)
10010204:	1200062e 	bgeu	r2,r8,10010220 <__divdf3+0x54c>
10010208:	1585883a 	add	r2,r2,r22
1001020c:	393fffc4 	addi	r4,r7,-1
10010210:	1580c536 	bltu	r2,r22,10010528 <__divdf3+0x854>
10010214:	1200c42e 	bgeu	r2,r8,10010528 <__divdf3+0x854>
10010218:	39ffff84 	addi	r7,r7,-2
1001021c:	1585883a 	add	r2,r2,r22
10010220:	122bc83a 	sub	r21,r2,r8
10010224:	a00b883a 	mov	r5,r20
10010228:	a809883a 	mov	r4,r21
1001022c:	d8c00215 	stw	r3,8(sp)
10010230:	d9c00515 	stw	r7,20(sp)
10010234:	000f36c0 	call	1000f36c <__udivsi3>
10010238:	9009883a 	mov	r4,r18
1001023c:	100b883a 	mov	r5,r2
10010240:	d8800415 	stw	r2,16(sp)
10010244:	00045280 	call	10004528 <__mulsi3>
10010248:	a809883a 	mov	r4,r21
1001024c:	a00b883a 	mov	r5,r20
10010250:	1025883a 	mov	r18,r2
10010254:	000f3d00 	call	1000f3d0 <__umodsi3>
10010258:	1004943a 	slli	r2,r2,16
1001025c:	813fffcc 	andi	r4,r16,65535
10010260:	d8c00217 	ldw	r3,8(sp)
10010264:	20a0b03a 	or	r16,r4,r2
10010268:	d9c00517 	ldw	r7,20(sp)
1001026c:	da000417 	ldw	r8,16(sp)
10010270:	8480062e 	bgeu	r16,r18,1001028c <__divdf3+0x5b8>
10010274:	85a1883a 	add	r16,r16,r22
10010278:	40bfffc4 	addi	r2,r8,-1
1001027c:	8580ac36 	bltu	r16,r22,10010530 <__divdf3+0x85c>
10010280:	8480ab2e 	bgeu	r16,r18,10010530 <__divdf3+0x85c>
10010284:	423fff84 	addi	r8,r8,-2
10010288:	85a1883a 	add	r16,r16,r22
1001028c:	3804943a 	slli	r2,r7,16
10010290:	84a1c83a 	sub	r16,r16,r18
10010294:	e009883a 	mov	r4,fp
10010298:	1228b03a 	or	r20,r2,r8
1001029c:	a1ffffcc 	andi	r7,r20,65535
100102a0:	a024d43a 	srli	r18,r20,16
100102a4:	380b883a 	mov	r5,r7
100102a8:	d8c00215 	stw	r3,8(sp)
100102ac:	d9c00515 	stw	r7,20(sp)
100102b0:	00045280 	call	10004528 <__mulsi3>
100102b4:	900b883a 	mov	r5,r18
100102b8:	e009883a 	mov	r4,fp
100102bc:	102b883a 	mov	r21,r2
100102c0:	00045280 	call	10004528 <__mulsi3>
100102c4:	900b883a 	mov	r5,r18
100102c8:	b809883a 	mov	r4,r23
100102cc:	1039883a 	mov	fp,r2
100102d0:	00045280 	call	10004528 <__mulsi3>
100102d4:	d9c00517 	ldw	r7,20(sp)
100102d8:	b80b883a 	mov	r5,r23
100102dc:	1025883a 	mov	r18,r2
100102e0:	3809883a 	mov	r4,r7
100102e4:	00045280 	call	10004528 <__mulsi3>
100102e8:	a808d43a 	srli	r4,r21,16
100102ec:	1705883a 	add	r2,r2,fp
100102f0:	d8c00217 	ldw	r3,8(sp)
100102f4:	2085883a 	add	r2,r4,r2
100102f8:	1700022e 	bgeu	r2,fp,10010304 <__divdf3+0x630>
100102fc:	01000074 	movhi	r4,1
10010300:	9125883a 	add	r18,r18,r4
10010304:	1008d43a 	srli	r4,r2,16
10010308:	1004943a 	slli	r2,r2,16
1001030c:	ad7fffcc 	andi	r21,r21,65535
10010310:	2489883a 	add	r4,r4,r18
10010314:	1545883a 	add	r2,r2,r21
10010318:	81003836 	bltu	r16,r4,100103fc <__divdf3+0x728>
1001031c:	81003626 	beq	r16,r4,100103f8 <__divdf3+0x724>
10010320:	a5000054 	ori	r20,r20,1
10010324:	1880ffc4 	addi	r2,r3,1023
10010328:	00bf2e0e 	bge	zero,r2,1000ffe4 <__alt_data_end+0xf800ffe4>
1001032c:	a10001cc 	andi	r4,r20,7
10010330:	20000726 	beq	r4,zero,10010350 <__divdf3+0x67c>
10010334:	a10003cc 	andi	r4,r20,15
10010338:	01400104 	movi	r5,4
1001033c:	21400426 	beq	r4,r5,10010350 <__divdf3+0x67c>
10010340:	a149883a 	add	r4,r20,r5
10010344:	2529803a 	cmpltu	r20,r4,r20
10010348:	8d23883a 	add	r17,r17,r20
1001034c:	2029883a 	mov	r20,r4
10010350:	8900402c 	andhi	r4,r17,256
10010354:	20000426 	beq	r4,zero,10010368 <__divdf3+0x694>
10010358:	18810004 	addi	r2,r3,1024
1001035c:	00ffc034 	movhi	r3,65280
10010360:	18ffffc4 	addi	r3,r3,-1
10010364:	88e2703a 	and	r17,r17,r3
10010368:	00c1ff84 	movi	r3,2046
1001036c:	18beb416 	blt	r3,r2,1000fe40 <__alt_data_end+0xf800fe40>
10010370:	a028d0fa 	srli	r20,r20,3
10010374:	882a977a 	slli	r21,r17,29
10010378:	8820927a 	slli	r16,r17,9
1001037c:	1081ffcc 	andi	r2,r2,2047
10010380:	ad2ab03a 	or	r21,r21,r20
10010384:	8020d33a 	srli	r16,r16,12
10010388:	9900004c 	andi	r4,r19,1
1001038c:	003eb006 	br	1000fe50 <__alt_data_end+0xf800fe50>
10010390:	8080022c 	andhi	r2,r16,8
10010394:	10001226 	beq	r2,zero,100103e0 <__divdf3+0x70c>
10010398:	8880022c 	andhi	r2,r17,8
1001039c:	1000101e 	bne	r2,zero,100103e0 <__divdf3+0x70c>
100103a0:	00800434 	movhi	r2,16
100103a4:	8c000234 	orhi	r16,r17,8
100103a8:	10bfffc4 	addi	r2,r2,-1
100103ac:	b809883a 	mov	r4,r23
100103b0:	80a0703a 	and	r16,r16,r2
100103b4:	a02b883a 	mov	r21,r20
100103b8:	003f0806 	br	1000ffdc <__alt_data_end+0xf800ffdc>
100103bc:	008000c4 	movi	r2,3
100103c0:	3880b126 	beq	r7,r2,10010688 <__divdf3+0x9b4>
100103c4:	00800044 	movi	r2,1
100103c8:	38805b1e 	bne	r7,r2,10010538 <__divdf3+0x864>
100103cc:	e009883a 	mov	r4,fp
100103d0:	0005883a 	mov	r2,zero
100103d4:	0021883a 	mov	r16,zero
100103d8:	002b883a 	mov	r21,zero
100103dc:	003e9c06 	br	1000fe50 <__alt_data_end+0xf800fe50>
100103e0:	00800434 	movhi	r2,16
100103e4:	84000234 	orhi	r16,r16,8
100103e8:	10bfffc4 	addi	r2,r2,-1
100103ec:	b009883a 	mov	r4,r22
100103f0:	80a0703a 	and	r16,r16,r2
100103f4:	003ef906 	br	1000ffdc <__alt_data_end+0xf800ffdc>
100103f8:	103fca26 	beq	r2,zero,10010324 <__alt_data_end+0xf8010324>
100103fc:	b421883a 	add	r16,r22,r16
10010400:	a17fffc4 	addi	r5,r20,-1
10010404:	8580422e 	bgeu	r16,r22,10010510 <__divdf3+0x83c>
10010408:	2829883a 	mov	r20,r5
1001040c:	813fc41e 	bne	r16,r4,10010320 <__alt_data_end+0xf8010320>
10010410:	d9800017 	ldw	r6,0(sp)
10010414:	30bfc21e 	bne	r6,r2,10010320 <__alt_data_end+0xf8010320>
10010418:	003fc206 	br	10010324 <__alt_data_end+0xf8010324>
1001041c:	143ff604 	addi	r16,r2,-40
10010420:	8c20983a 	sll	r16,r17,r16
10010424:	002b883a 	mov	r21,zero
10010428:	003eb406 	br	1000fefc <__alt_data_end+0xf800fefc>
1001042c:	d9800215 	stw	r6,8(sp)
10010430:	d9c00515 	stw	r7,20(sp)
10010434:	da000415 	stw	r8,16(sp)
10010438:	0011c680 	call	10011c68 <__clzsi2>
1001043c:	10800804 	addi	r2,r2,32
10010440:	da000417 	ldw	r8,16(sp)
10010444:	d9c00517 	ldw	r7,20(sp)
10010448:	d9800217 	ldw	r6,8(sp)
1001044c:	003ea106 	br	1000fed4 <__alt_data_end+0xf800fed4>
10010450:	147ff604 	addi	r17,r2,-40
10010454:	3462983a 	sll	r17,r6,r17
10010458:	0029883a 	mov	r20,zero
1001045c:	003ec906 	br	1000ff84 <__alt_data_end+0xf800ff84>
10010460:	3009883a 	mov	r4,r6
10010464:	d9400115 	stw	r5,4(sp)
10010468:	d9800215 	stw	r6,8(sp)
1001046c:	da000415 	stw	r8,16(sp)
10010470:	da400315 	stw	r9,12(sp)
10010474:	0011c680 	call	10011c68 <__clzsi2>
10010478:	10800804 	addi	r2,r2,32
1001047c:	da400317 	ldw	r9,12(sp)
10010480:	da000417 	ldw	r8,16(sp)
10010484:	d9800217 	ldw	r6,8(sp)
10010488:	d9400117 	ldw	r5,4(sp)
1001048c:	003eb306 	br	1000ff5c <__alt_data_end+0xf800ff5c>
10010490:	d9800017 	ldw	r6,0(sp)
10010494:	a9ab883a 	add	r21,r21,r6
10010498:	a98b803a 	cmpltu	r5,r21,r6
1001049c:	2d8b883a 	add	r5,r5,r22
100104a0:	2a11883a 	add	r8,r5,r8
100104a4:	897fffc4 	addi	r5,r17,-1
100104a8:	b2000c2e 	bgeu	r22,r8,100104dc <__divdf3+0x808>
100104ac:	41003f36 	bltu	r8,r4,100105ac <__divdf3+0x8d8>
100104b0:	22006c26 	beq	r4,r8,10010664 <__divdf3+0x990>
100104b4:	4109c83a 	sub	r4,r8,r4
100104b8:	2823883a 	mov	r17,r5
100104bc:	003f3b06 	br	100101ac <__alt_data_end+0xf80101ac>
100104c0:	ad3ed336 	bltu	r21,r20,10010010 <__alt_data_end+0xf8010010>
100104c4:	a804d07a 	srli	r2,r21,1
100104c8:	802e97fa 	slli	r23,r16,31
100104cc:	a82a97fa 	slli	r21,r21,31
100104d0:	8020d07a 	srli	r16,r16,1
100104d4:	b8aeb03a 	or	r23,r23,r2
100104d8:	003ed006 	br	1001001c <__alt_data_end+0xf801001c>
100104dc:	b23ff51e 	bne	r22,r8,100104b4 <__alt_data_end+0xf80104b4>
100104e0:	d9800017 	ldw	r6,0(sp)
100104e4:	a9bff12e 	bgeu	r21,r6,100104ac <__alt_data_end+0xf80104ac>
100104e8:	b109c83a 	sub	r4,r22,r4
100104ec:	2823883a 	mov	r17,r5
100104f0:	003f2e06 	br	100101ac <__alt_data_end+0xf80101ac>
100104f4:	2021883a 	mov	r16,r4
100104f8:	003eff06 	br	100100f8 <__alt_data_end+0xf80100f8>
100104fc:	2023883a 	mov	r17,r4
10010500:	003ee406 	br	10010094 <__alt_data_end+0xf8010094>
10010504:	a8bfe236 	bltu	r21,r2,10010490 <__alt_data_end+0xf8010490>
10010508:	0009883a 	mov	r4,zero
1001050c:	003f2706 	br	100101ac <__alt_data_end+0xf80101ac>
10010510:	81002d36 	bltu	r16,r4,100105c8 <__divdf3+0x8f4>
10010514:	24005626 	beq	r4,r16,10010670 <__divdf3+0x99c>
10010518:	2829883a 	mov	r20,r5
1001051c:	003f8006 	br	10010320 <__alt_data_end+0xf8010320>
10010520:	053fffc4 	movi	r20,-1
10010524:	003f7f06 	br	10010324 <__alt_data_end+0xf8010324>
10010528:	200f883a 	mov	r7,r4
1001052c:	003f3c06 	br	10010220 <__alt_data_end+0xf8010220>
10010530:	1011883a 	mov	r8,r2
10010534:	003f5506 	br	1001028c <__alt_data_end+0xf801028c>
10010538:	e027883a 	mov	r19,fp
1001053c:	003f7906 	br	10010324 <__alt_data_end+0xf8010324>
10010540:	010007c4 	movi	r4,31
10010544:	20c02816 	blt	r4,r3,100105e8 <__divdf3+0x914>
10010548:	00800804 	movi	r2,32
1001054c:	10c5c83a 	sub	r2,r2,r3
10010550:	888a983a 	sll	r5,r17,r2
10010554:	a0c8d83a 	srl	r4,r20,r3
10010558:	a084983a 	sll	r2,r20,r2
1001055c:	88e2d83a 	srl	r17,r17,r3
10010560:	2906b03a 	or	r3,r5,r4
10010564:	1004c03a 	cmpne	r2,r2,zero
10010568:	1886b03a 	or	r3,r3,r2
1001056c:	188001cc 	andi	r2,r3,7
10010570:	10000726 	beq	r2,zero,10010590 <__divdf3+0x8bc>
10010574:	188003cc 	andi	r2,r3,15
10010578:	01000104 	movi	r4,4
1001057c:	11000426 	beq	r2,r4,10010590 <__divdf3+0x8bc>
10010580:	1805883a 	mov	r2,r3
10010584:	10c00104 	addi	r3,r2,4
10010588:	1885803a 	cmpltu	r2,r3,r2
1001058c:	88a3883a 	add	r17,r17,r2
10010590:	8880202c 	andhi	r2,r17,128
10010594:	10002926 	beq	r2,zero,1001063c <__divdf3+0x968>
10010598:	9900004c 	andi	r4,r19,1
1001059c:	00800044 	movi	r2,1
100105a0:	0021883a 	mov	r16,zero
100105a4:	002b883a 	mov	r21,zero
100105a8:	003e2906 	br	1000fe50 <__alt_data_end+0xf800fe50>
100105ac:	d9800017 	ldw	r6,0(sp)
100105b0:	8c7fff84 	addi	r17,r17,-2
100105b4:	a9ab883a 	add	r21,r21,r6
100105b8:	a98b803a 	cmpltu	r5,r21,r6
100105bc:	2d8b883a 	add	r5,r5,r22
100105c0:	2a11883a 	add	r8,r5,r8
100105c4:	003ef806 	br	100101a8 <__alt_data_end+0xf80101a8>
100105c8:	d9800017 	ldw	r6,0(sp)
100105cc:	318f883a 	add	r7,r6,r6
100105d0:	398b803a 	cmpltu	r5,r7,r6
100105d4:	2d8d883a 	add	r6,r5,r22
100105d8:	81a1883a 	add	r16,r16,r6
100105dc:	a17fff84 	addi	r5,r20,-2
100105e0:	d9c00015 	stw	r7,0(sp)
100105e4:	003f8806 	br	10010408 <__alt_data_end+0xf8010408>
100105e8:	013ff844 	movi	r4,-31
100105ec:	2085c83a 	sub	r2,r4,r2
100105f0:	8888d83a 	srl	r4,r17,r2
100105f4:	00800804 	movi	r2,32
100105f8:	18802126 	beq	r3,r2,10010680 <__divdf3+0x9ac>
100105fc:	04001004 	movi	r16,64
10010600:	80c7c83a 	sub	r3,r16,r3
10010604:	88e0983a 	sll	r16,r17,r3
10010608:	8504b03a 	or	r2,r16,r20
1001060c:	1004c03a 	cmpne	r2,r2,zero
10010610:	2084b03a 	or	r2,r4,r2
10010614:	144001cc 	andi	r17,r2,7
10010618:	88000d1e 	bne	r17,zero,10010650 <__divdf3+0x97c>
1001061c:	0021883a 	mov	r16,zero
10010620:	102ad0fa 	srli	r21,r2,3
10010624:	9900004c 	andi	r4,r19,1
10010628:	0005883a 	mov	r2,zero
1001062c:	ac6ab03a 	or	r21,r21,r17
10010630:	003e0706 	br	1000fe50 <__alt_data_end+0xf800fe50>
10010634:	1007883a 	mov	r3,r2
10010638:	0023883a 	mov	r17,zero
1001063c:	8820927a 	slli	r16,r17,9
10010640:	1805883a 	mov	r2,r3
10010644:	8822977a 	slli	r17,r17,29
10010648:	8020d33a 	srli	r16,r16,12
1001064c:	003ff406 	br	10010620 <__alt_data_end+0xf8010620>
10010650:	10c003cc 	andi	r3,r2,15
10010654:	01000104 	movi	r4,4
10010658:	193ff626 	beq	r3,r4,10010634 <__alt_data_end+0xf8010634>
1001065c:	0023883a 	mov	r17,zero
10010660:	003fc806 	br	10010584 <__alt_data_end+0xf8010584>
10010664:	a8bfd136 	bltu	r21,r2,100105ac <__alt_data_end+0xf80105ac>
10010668:	2823883a 	mov	r17,r5
1001066c:	003fa606 	br	10010508 <__alt_data_end+0xf8010508>
10010670:	d9800017 	ldw	r6,0(sp)
10010674:	30bfd436 	bltu	r6,r2,100105c8 <__alt_data_end+0xf80105c8>
10010678:	2829883a 	mov	r20,r5
1001067c:	003f6406 	br	10010410 <__alt_data_end+0xf8010410>
10010680:	0021883a 	mov	r16,zero
10010684:	003fe006 	br	10010608 <__alt_data_end+0xf8010608>
10010688:	00800434 	movhi	r2,16
1001068c:	8c000234 	orhi	r16,r17,8
10010690:	10bfffc4 	addi	r2,r2,-1
10010694:	e009883a 	mov	r4,fp
10010698:	80a0703a 	and	r16,r16,r2
1001069c:	a02b883a 	mov	r21,r20
100106a0:	003e4e06 	br	1000ffdc <__alt_data_end+0xf800ffdc>

100106a4 <__eqdf2>:
100106a4:	2804d53a 	srli	r2,r5,20
100106a8:	3806d53a 	srli	r3,r7,20
100106ac:	02000434 	movhi	r8,16
100106b0:	423fffc4 	addi	r8,r8,-1
100106b4:	1081ffcc 	andi	r2,r2,2047
100106b8:	0281ffc4 	movi	r10,2047
100106bc:	2a12703a 	and	r9,r5,r8
100106c0:	18c1ffcc 	andi	r3,r3,2047
100106c4:	3a10703a 	and	r8,r7,r8
100106c8:	280ad7fa 	srli	r5,r5,31
100106cc:	380ed7fa 	srli	r7,r7,31
100106d0:	12801026 	beq	r2,r10,10010714 <__eqdf2+0x70>
100106d4:	0281ffc4 	movi	r10,2047
100106d8:	1a800a26 	beq	r3,r10,10010704 <__eqdf2+0x60>
100106dc:	10c00226 	beq	r2,r3,100106e8 <__eqdf2+0x44>
100106e0:	00800044 	movi	r2,1
100106e4:	f800283a 	ret
100106e8:	4a3ffd1e 	bne	r9,r8,100106e0 <__alt_data_end+0xf80106e0>
100106ec:	21bffc1e 	bne	r4,r6,100106e0 <__alt_data_end+0xf80106e0>
100106f0:	29c00c26 	beq	r5,r7,10010724 <__eqdf2+0x80>
100106f4:	103ffa1e 	bne	r2,zero,100106e0 <__alt_data_end+0xf80106e0>
100106f8:	2244b03a 	or	r2,r4,r9
100106fc:	1004c03a 	cmpne	r2,r2,zero
10010700:	f800283a 	ret
10010704:	3214b03a 	or	r10,r6,r8
10010708:	503ff426 	beq	r10,zero,100106dc <__alt_data_end+0xf80106dc>
1001070c:	00800044 	movi	r2,1
10010710:	f800283a 	ret
10010714:	2254b03a 	or	r10,r4,r9
10010718:	503fee26 	beq	r10,zero,100106d4 <__alt_data_end+0xf80106d4>
1001071c:	00800044 	movi	r2,1
10010720:	f800283a 	ret
10010724:	0005883a 	mov	r2,zero
10010728:	f800283a 	ret

1001072c <__gedf2>:
1001072c:	2804d53a 	srli	r2,r5,20
10010730:	3806d53a 	srli	r3,r7,20
10010734:	02000434 	movhi	r8,16
10010738:	423fffc4 	addi	r8,r8,-1
1001073c:	1081ffcc 	andi	r2,r2,2047
10010740:	0241ffc4 	movi	r9,2047
10010744:	2a14703a 	and	r10,r5,r8
10010748:	18c1ffcc 	andi	r3,r3,2047
1001074c:	3a10703a 	and	r8,r7,r8
10010750:	280ad7fa 	srli	r5,r5,31
10010754:	380ed7fa 	srli	r7,r7,31
10010758:	12401d26 	beq	r2,r9,100107d0 <__gedf2+0xa4>
1001075c:	0241ffc4 	movi	r9,2047
10010760:	1a401226 	beq	r3,r9,100107ac <__gedf2+0x80>
10010764:	1000081e 	bne	r2,zero,10010788 <__gedf2+0x5c>
10010768:	2296b03a 	or	r11,r4,r10
1001076c:	5813003a 	cmpeq	r9,r11,zero
10010770:	1800091e 	bne	r3,zero,10010798 <__gedf2+0x6c>
10010774:	3218b03a 	or	r12,r6,r8
10010778:	6000071e 	bne	r12,zero,10010798 <__gedf2+0x6c>
1001077c:	0005883a 	mov	r2,zero
10010780:	5800101e 	bne	r11,zero,100107c4 <__gedf2+0x98>
10010784:	f800283a 	ret
10010788:	18000c1e 	bne	r3,zero,100107bc <__gedf2+0x90>
1001078c:	3212b03a 	or	r9,r6,r8
10010790:	48000c26 	beq	r9,zero,100107c4 <__gedf2+0x98>
10010794:	0013883a 	mov	r9,zero
10010798:	39c03fcc 	andi	r7,r7,255
1001079c:	48000826 	beq	r9,zero,100107c0 <__gedf2+0x94>
100107a0:	38000926 	beq	r7,zero,100107c8 <__gedf2+0x9c>
100107a4:	00800044 	movi	r2,1
100107a8:	f800283a 	ret
100107ac:	3212b03a 	or	r9,r6,r8
100107b0:	483fec26 	beq	r9,zero,10010764 <__alt_data_end+0xf8010764>
100107b4:	00bfff84 	movi	r2,-2
100107b8:	f800283a 	ret
100107bc:	39c03fcc 	andi	r7,r7,255
100107c0:	29c00626 	beq	r5,r7,100107dc <__gedf2+0xb0>
100107c4:	283ff726 	beq	r5,zero,100107a4 <__alt_data_end+0xf80107a4>
100107c8:	00bfffc4 	movi	r2,-1
100107cc:	f800283a 	ret
100107d0:	2292b03a 	or	r9,r4,r10
100107d4:	483fe126 	beq	r9,zero,1001075c <__alt_data_end+0xf801075c>
100107d8:	003ff606 	br	100107b4 <__alt_data_end+0xf80107b4>
100107dc:	18bff916 	blt	r3,r2,100107c4 <__alt_data_end+0xf80107c4>
100107e0:	10c00316 	blt	r2,r3,100107f0 <__gedf2+0xc4>
100107e4:	42bff736 	bltu	r8,r10,100107c4 <__alt_data_end+0xf80107c4>
100107e8:	52000326 	beq	r10,r8,100107f8 <__gedf2+0xcc>
100107ec:	5200042e 	bgeu	r10,r8,10010800 <__gedf2+0xd4>
100107f0:	283fec1e 	bne	r5,zero,100107a4 <__alt_data_end+0xf80107a4>
100107f4:	003ff406 	br	100107c8 <__alt_data_end+0xf80107c8>
100107f8:	313ff236 	bltu	r6,r4,100107c4 <__alt_data_end+0xf80107c4>
100107fc:	21bffc36 	bltu	r4,r6,100107f0 <__alt_data_end+0xf80107f0>
10010800:	0005883a 	mov	r2,zero
10010804:	f800283a 	ret

10010808 <__ledf2>:
10010808:	2804d53a 	srli	r2,r5,20
1001080c:	3810d53a 	srli	r8,r7,20
10010810:	00c00434 	movhi	r3,16
10010814:	18ffffc4 	addi	r3,r3,-1
10010818:	1081ffcc 	andi	r2,r2,2047
1001081c:	0241ffc4 	movi	r9,2047
10010820:	28d4703a 	and	r10,r5,r3
10010824:	4201ffcc 	andi	r8,r8,2047
10010828:	38c6703a 	and	r3,r7,r3
1001082c:	280ad7fa 	srli	r5,r5,31
10010830:	380ed7fa 	srli	r7,r7,31
10010834:	12401f26 	beq	r2,r9,100108b4 <__ledf2+0xac>
10010838:	0241ffc4 	movi	r9,2047
1001083c:	42401426 	beq	r8,r9,10010890 <__ledf2+0x88>
10010840:	1000091e 	bne	r2,zero,10010868 <__ledf2+0x60>
10010844:	2296b03a 	or	r11,r4,r10
10010848:	5813003a 	cmpeq	r9,r11,zero
1001084c:	29403fcc 	andi	r5,r5,255
10010850:	40000a1e 	bne	r8,zero,1001087c <__ledf2+0x74>
10010854:	30d8b03a 	or	r12,r6,r3
10010858:	6000081e 	bne	r12,zero,1001087c <__ledf2+0x74>
1001085c:	0005883a 	mov	r2,zero
10010860:	5800111e 	bne	r11,zero,100108a8 <__ledf2+0xa0>
10010864:	f800283a 	ret
10010868:	29403fcc 	andi	r5,r5,255
1001086c:	40000c1e 	bne	r8,zero,100108a0 <__ledf2+0x98>
10010870:	30d2b03a 	or	r9,r6,r3
10010874:	48000c26 	beq	r9,zero,100108a8 <__ledf2+0xa0>
10010878:	0013883a 	mov	r9,zero
1001087c:	39c03fcc 	andi	r7,r7,255
10010880:	48000826 	beq	r9,zero,100108a4 <__ledf2+0x9c>
10010884:	38001126 	beq	r7,zero,100108cc <__ledf2+0xc4>
10010888:	00800044 	movi	r2,1
1001088c:	f800283a 	ret
10010890:	30d2b03a 	or	r9,r6,r3
10010894:	483fea26 	beq	r9,zero,10010840 <__alt_data_end+0xf8010840>
10010898:	00800084 	movi	r2,2
1001089c:	f800283a 	ret
100108a0:	39c03fcc 	andi	r7,r7,255
100108a4:	39400726 	beq	r7,r5,100108c4 <__ledf2+0xbc>
100108a8:	2800081e 	bne	r5,zero,100108cc <__ledf2+0xc4>
100108ac:	00800044 	movi	r2,1
100108b0:	f800283a 	ret
100108b4:	2292b03a 	or	r9,r4,r10
100108b8:	483fdf26 	beq	r9,zero,10010838 <__alt_data_end+0xf8010838>
100108bc:	00800084 	movi	r2,2
100108c0:	f800283a 	ret
100108c4:	4080030e 	bge	r8,r2,100108d4 <__ledf2+0xcc>
100108c8:	383fef26 	beq	r7,zero,10010888 <__alt_data_end+0xf8010888>
100108cc:	00bfffc4 	movi	r2,-1
100108d0:	f800283a 	ret
100108d4:	123feb16 	blt	r2,r8,10010884 <__alt_data_end+0xf8010884>
100108d8:	1abff336 	bltu	r3,r10,100108a8 <__alt_data_end+0xf80108a8>
100108dc:	50c00326 	beq	r10,r3,100108ec <__ledf2+0xe4>
100108e0:	50c0042e 	bgeu	r10,r3,100108f4 <__ledf2+0xec>
100108e4:	283fe81e 	bne	r5,zero,10010888 <__alt_data_end+0xf8010888>
100108e8:	003ff806 	br	100108cc <__alt_data_end+0xf80108cc>
100108ec:	313fee36 	bltu	r6,r4,100108a8 <__alt_data_end+0xf80108a8>
100108f0:	21bffc36 	bltu	r4,r6,100108e4 <__alt_data_end+0xf80108e4>
100108f4:	0005883a 	mov	r2,zero
100108f8:	f800283a 	ret

100108fc <__muldf3>:
100108fc:	deffee04 	addi	sp,sp,-72
10010900:	dd000c15 	stw	r20,48(sp)
10010904:	2828d53a 	srli	r20,r5,20
10010908:	ddc00f15 	stw	r23,60(sp)
1001090c:	282ed7fa 	srli	r23,r5,31
10010910:	dc000815 	stw	r16,32(sp)
10010914:	04000434 	movhi	r16,16
10010918:	dcc00b15 	stw	r19,44(sp)
1001091c:	843fffc4 	addi	r16,r16,-1
10010920:	dfc01115 	stw	ra,68(sp)
10010924:	df001015 	stw	fp,64(sp)
10010928:	dd800e15 	stw	r22,56(sp)
1001092c:	dd400d15 	stw	r21,52(sp)
10010930:	dc800a15 	stw	r18,40(sp)
10010934:	dc400915 	stw	r17,36(sp)
10010938:	a501ffcc 	andi	r20,r20,2047
1001093c:	2c20703a 	and	r16,r5,r16
10010940:	b827883a 	mov	r19,r23
10010944:	ba403fcc 	andi	r9,r23,255
10010948:	a0006026 	beq	r20,zero,10010acc <__muldf3+0x1d0>
1001094c:	0081ffc4 	movi	r2,2047
10010950:	202d883a 	mov	r22,r4
10010954:	a0803626 	beq	r20,r2,10010a30 <__muldf3+0x134>
10010958:	84000434 	orhi	r16,r16,16
1001095c:	200ad77a 	srli	r5,r4,29
10010960:	800490fa 	slli	r2,r16,3
10010964:	202c90fa 	slli	r22,r4,3
10010968:	a53f0044 	addi	r20,r20,-1023
1001096c:	28a0b03a 	or	r16,r5,r2
10010970:	002b883a 	mov	r21,zero
10010974:	000b883a 	mov	r5,zero
10010978:	3804d53a 	srli	r2,r7,20
1001097c:	3838d7fa 	srli	fp,r7,31
10010980:	04400434 	movhi	r17,16
10010984:	8c7fffc4 	addi	r17,r17,-1
10010988:	1081ffcc 	andi	r2,r2,2047
1001098c:	3025883a 	mov	r18,r6
10010990:	3c62703a 	and	r17,r7,r17
10010994:	e2803fcc 	andi	r10,fp,255
10010998:	10006d26 	beq	r2,zero,10010b50 <__muldf3+0x254>
1001099c:	00c1ffc4 	movi	r3,2047
100109a0:	10c06526 	beq	r2,r3,10010b38 <__muldf3+0x23c>
100109a4:	8c400434 	orhi	r17,r17,16
100109a8:	300ed77a 	srli	r7,r6,29
100109ac:	880690fa 	slli	r3,r17,3
100109b0:	302490fa 	slli	r18,r6,3
100109b4:	10bf0044 	addi	r2,r2,-1023
100109b8:	38e2b03a 	or	r17,r7,r3
100109bc:	000f883a 	mov	r7,zero
100109c0:	a087883a 	add	r3,r20,r2
100109c4:	010003c4 	movi	r4,15
100109c8:	3d44b03a 	or	r2,r7,r21
100109cc:	e5ccf03a 	xor	r6,fp,r23
100109d0:	1a000044 	addi	r8,r3,1
100109d4:	20809b36 	bltu	r4,r2,10010c44 <__muldf3+0x348>
100109d8:	100490ba 	slli	r2,r2,2
100109dc:	01040074 	movhi	r4,4097
100109e0:	21027c04 	addi	r4,r4,2544
100109e4:	1105883a 	add	r2,r2,r4
100109e8:	10800017 	ldw	r2,0(r2)
100109ec:	1000683a 	jmp	r2
100109f0:	10010c44 	addi	zero,r2,1073
100109f4:	10010a50 	cmplti	zero,r2,1065
100109f8:	10010a50 	cmplti	zero,r2,1065
100109fc:	10010a4c 	andi	zero,r2,1065
10010a00:	10010c20 	cmpeqi	zero,r2,1072
10010a04:	10010c20 	cmpeqi	zero,r2,1072
10010a08:	10010c08 	cmpgei	zero,r2,1072
10010a0c:	10010a4c 	andi	zero,r2,1065
10010a10:	10010c20 	cmpeqi	zero,r2,1072
10010a14:	10010c08 	cmpgei	zero,r2,1072
10010a18:	10010c20 	cmpeqi	zero,r2,1072
10010a1c:	10010a4c 	andi	zero,r2,1065
10010a20:	10010c30 	cmpltui	zero,r2,1072
10010a24:	10010c30 	cmpltui	zero,r2,1072
10010a28:	10010c30 	cmpltui	zero,r2,1072
10010a2c:	10010f90 	cmplti	zero,r2,1086
10010a30:	2404b03a 	or	r2,r4,r16
10010a34:	1000711e 	bne	r2,zero,10010bfc <__muldf3+0x300>
10010a38:	05400204 	movi	r21,8
10010a3c:	0021883a 	mov	r16,zero
10010a40:	002d883a 	mov	r22,zero
10010a44:	01400084 	movi	r5,2
10010a48:	003fcb06 	br	10010978 <__alt_data_end+0xf8010978>
10010a4c:	500d883a 	mov	r6,r10
10010a50:	00800084 	movi	r2,2
10010a54:	38805926 	beq	r7,r2,10010bbc <__muldf3+0x2c0>
10010a58:	008000c4 	movi	r2,3
10010a5c:	3881bb26 	beq	r7,r2,1001114c <__muldf3+0x850>
10010a60:	00800044 	movi	r2,1
10010a64:	3881961e 	bne	r7,r2,100110c0 <__muldf3+0x7c4>
10010a68:	3027883a 	mov	r19,r6
10010a6c:	0005883a 	mov	r2,zero
10010a70:	0021883a 	mov	r16,zero
10010a74:	002d883a 	mov	r22,zero
10010a78:	1004953a 	slli	r2,r2,20
10010a7c:	98c03fcc 	andi	r3,r19,255
10010a80:	04400434 	movhi	r17,16
10010a84:	8c7fffc4 	addi	r17,r17,-1
10010a88:	180697fa 	slli	r3,r3,31
10010a8c:	8460703a 	and	r16,r16,r17
10010a90:	80a0b03a 	or	r16,r16,r2
10010a94:	80c6b03a 	or	r3,r16,r3
10010a98:	b005883a 	mov	r2,r22
10010a9c:	dfc01117 	ldw	ra,68(sp)
10010aa0:	df001017 	ldw	fp,64(sp)
10010aa4:	ddc00f17 	ldw	r23,60(sp)
10010aa8:	dd800e17 	ldw	r22,56(sp)
10010aac:	dd400d17 	ldw	r21,52(sp)
10010ab0:	dd000c17 	ldw	r20,48(sp)
10010ab4:	dcc00b17 	ldw	r19,44(sp)
10010ab8:	dc800a17 	ldw	r18,40(sp)
10010abc:	dc400917 	ldw	r17,36(sp)
10010ac0:	dc000817 	ldw	r16,32(sp)
10010ac4:	dec01204 	addi	sp,sp,72
10010ac8:	f800283a 	ret
10010acc:	2404b03a 	or	r2,r4,r16
10010ad0:	202b883a 	mov	r21,r4
10010ad4:	10004426 	beq	r2,zero,10010be8 <__muldf3+0x2ec>
10010ad8:	80015126 	beq	r16,zero,10011020 <__muldf3+0x724>
10010adc:	8009883a 	mov	r4,r16
10010ae0:	d9800715 	stw	r6,28(sp)
10010ae4:	d9c00215 	stw	r7,8(sp)
10010ae8:	da400415 	stw	r9,16(sp)
10010aec:	0011c680 	call	10011c68 <__clzsi2>
10010af0:	d9800717 	ldw	r6,28(sp)
10010af4:	d9c00217 	ldw	r7,8(sp)
10010af8:	da400417 	ldw	r9,16(sp)
10010afc:	113ffd44 	addi	r4,r2,-11
10010b00:	00c00704 	movi	r3,28
10010b04:	19014216 	blt	r3,r4,10011010 <__muldf3+0x714>
10010b08:	00c00744 	movi	r3,29
10010b0c:	15bffe04 	addi	r22,r2,-8
10010b10:	1907c83a 	sub	r3,r3,r4
10010b14:	85a0983a 	sll	r16,r16,r22
10010b18:	a8c6d83a 	srl	r3,r21,r3
10010b1c:	adac983a 	sll	r22,r21,r22
10010b20:	1c20b03a 	or	r16,r3,r16
10010b24:	1080fcc4 	addi	r2,r2,1011
10010b28:	00a9c83a 	sub	r20,zero,r2
10010b2c:	002b883a 	mov	r21,zero
10010b30:	000b883a 	mov	r5,zero
10010b34:	003f9006 	br	10010978 <__alt_data_end+0xf8010978>
10010b38:	3446b03a 	or	r3,r6,r17
10010b3c:	1800281e 	bne	r3,zero,10010be0 <__muldf3+0x2e4>
10010b40:	0023883a 	mov	r17,zero
10010b44:	0025883a 	mov	r18,zero
10010b48:	01c00084 	movi	r7,2
10010b4c:	003f9c06 	br	100109c0 <__alt_data_end+0xf80109c0>
10010b50:	3446b03a 	or	r3,r6,r17
10010b54:	18001e26 	beq	r3,zero,10010bd0 <__muldf3+0x2d4>
10010b58:	88012126 	beq	r17,zero,10010fe0 <__muldf3+0x6e4>
10010b5c:	8809883a 	mov	r4,r17
10010b60:	d9400215 	stw	r5,8(sp)
10010b64:	d9800715 	stw	r6,28(sp)
10010b68:	da400415 	stw	r9,16(sp)
10010b6c:	da800315 	stw	r10,12(sp)
10010b70:	0011c680 	call	10011c68 <__clzsi2>
10010b74:	d9400217 	ldw	r5,8(sp)
10010b78:	d9800717 	ldw	r6,28(sp)
10010b7c:	da400417 	ldw	r9,16(sp)
10010b80:	da800317 	ldw	r10,12(sp)
10010b84:	113ffd44 	addi	r4,r2,-11
10010b88:	00c00704 	movi	r3,28
10010b8c:	19011016 	blt	r3,r4,10010fd0 <__muldf3+0x6d4>
10010b90:	00c00744 	movi	r3,29
10010b94:	14bffe04 	addi	r18,r2,-8
10010b98:	1907c83a 	sub	r3,r3,r4
10010b9c:	8ca2983a 	sll	r17,r17,r18
10010ba0:	30c6d83a 	srl	r3,r6,r3
10010ba4:	34a4983a 	sll	r18,r6,r18
10010ba8:	1c62b03a 	or	r17,r3,r17
10010bac:	1080fcc4 	addi	r2,r2,1011
10010bb0:	0085c83a 	sub	r2,zero,r2
10010bb4:	000f883a 	mov	r7,zero
10010bb8:	003f8106 	br	100109c0 <__alt_data_end+0xf80109c0>
10010bbc:	3027883a 	mov	r19,r6
10010bc0:	0081ffc4 	movi	r2,2047
10010bc4:	0021883a 	mov	r16,zero
10010bc8:	002d883a 	mov	r22,zero
10010bcc:	003faa06 	br	10010a78 <__alt_data_end+0xf8010a78>
10010bd0:	0023883a 	mov	r17,zero
10010bd4:	0025883a 	mov	r18,zero
10010bd8:	01c00044 	movi	r7,1
10010bdc:	003f7806 	br	100109c0 <__alt_data_end+0xf80109c0>
10010be0:	01c000c4 	movi	r7,3
10010be4:	003f7606 	br	100109c0 <__alt_data_end+0xf80109c0>
10010be8:	05400104 	movi	r21,4
10010bec:	0021883a 	mov	r16,zero
10010bf0:	002d883a 	mov	r22,zero
10010bf4:	01400044 	movi	r5,1
10010bf8:	003f5f06 	br	10010978 <__alt_data_end+0xf8010978>
10010bfc:	05400304 	movi	r21,12
10010c00:	014000c4 	movi	r5,3
10010c04:	003f5c06 	br	10010978 <__alt_data_end+0xf8010978>
10010c08:	04000434 	movhi	r16,16
10010c0c:	0027883a 	mov	r19,zero
10010c10:	843fffc4 	addi	r16,r16,-1
10010c14:	05bfffc4 	movi	r22,-1
10010c18:	0081ffc4 	movi	r2,2047
10010c1c:	003f9606 	br	10010a78 <__alt_data_end+0xf8010a78>
10010c20:	8023883a 	mov	r17,r16
10010c24:	b025883a 	mov	r18,r22
10010c28:	280f883a 	mov	r7,r5
10010c2c:	003f8806 	br	10010a50 <__alt_data_end+0xf8010a50>
10010c30:	8023883a 	mov	r17,r16
10010c34:	b025883a 	mov	r18,r22
10010c38:	480d883a 	mov	r6,r9
10010c3c:	280f883a 	mov	r7,r5
10010c40:	003f8306 	br	10010a50 <__alt_data_end+0xf8010a50>
10010c44:	b026d43a 	srli	r19,r22,16
10010c48:	902ed43a 	srli	r23,r18,16
10010c4c:	b5bfffcc 	andi	r22,r22,65535
10010c50:	94bfffcc 	andi	r18,r18,65535
10010c54:	b00b883a 	mov	r5,r22
10010c58:	9009883a 	mov	r4,r18
10010c5c:	d8c00515 	stw	r3,20(sp)
10010c60:	d9800715 	stw	r6,28(sp)
10010c64:	da000615 	stw	r8,24(sp)
10010c68:	00045280 	call	10004528 <__mulsi3>
10010c6c:	980b883a 	mov	r5,r19
10010c70:	9009883a 	mov	r4,r18
10010c74:	1029883a 	mov	r20,r2
10010c78:	00045280 	call	10004528 <__mulsi3>
10010c7c:	b80b883a 	mov	r5,r23
10010c80:	9809883a 	mov	r4,r19
10010c84:	102b883a 	mov	r21,r2
10010c88:	00045280 	call	10004528 <__mulsi3>
10010c8c:	b809883a 	mov	r4,r23
10010c90:	b00b883a 	mov	r5,r22
10010c94:	1039883a 	mov	fp,r2
10010c98:	00045280 	call	10004528 <__mulsi3>
10010c9c:	a008d43a 	srli	r4,r20,16
10010ca0:	1545883a 	add	r2,r2,r21
10010ca4:	d8c00517 	ldw	r3,20(sp)
10010ca8:	2085883a 	add	r2,r4,r2
10010cac:	d9800717 	ldw	r6,28(sp)
10010cb0:	da000617 	ldw	r8,24(sp)
10010cb4:	1540022e 	bgeu	r2,r21,10010cc0 <__muldf3+0x3c4>
10010cb8:	01000074 	movhi	r4,1
10010cbc:	e139883a 	add	fp,fp,r4
10010cc0:	100e943a 	slli	r7,r2,16
10010cc4:	1004d43a 	srli	r2,r2,16
10010cc8:	882ad43a 	srli	r21,r17,16
10010ccc:	a53fffcc 	andi	r20,r20,65535
10010cd0:	8c7fffcc 	andi	r17,r17,65535
10010cd4:	3d29883a 	add	r20,r7,r20
10010cd8:	b00b883a 	mov	r5,r22
10010cdc:	8809883a 	mov	r4,r17
10010ce0:	d8c00515 	stw	r3,20(sp)
10010ce4:	d9800715 	stw	r6,28(sp)
10010ce8:	da000615 	stw	r8,24(sp)
10010cec:	dd000115 	stw	r20,4(sp)
10010cf0:	d8800015 	stw	r2,0(sp)
10010cf4:	00045280 	call	10004528 <__mulsi3>
10010cf8:	980b883a 	mov	r5,r19
10010cfc:	8809883a 	mov	r4,r17
10010d00:	d8800215 	stw	r2,8(sp)
10010d04:	00045280 	call	10004528 <__mulsi3>
10010d08:	9809883a 	mov	r4,r19
10010d0c:	a80b883a 	mov	r5,r21
10010d10:	1029883a 	mov	r20,r2
10010d14:	00045280 	call	10004528 <__mulsi3>
10010d18:	b00b883a 	mov	r5,r22
10010d1c:	a809883a 	mov	r4,r21
10010d20:	d8800415 	stw	r2,16(sp)
10010d24:	00045280 	call	10004528 <__mulsi3>
10010d28:	d9c00217 	ldw	r7,8(sp)
10010d2c:	1505883a 	add	r2,r2,r20
10010d30:	d8c00517 	ldw	r3,20(sp)
10010d34:	3826d43a 	srli	r19,r7,16
10010d38:	d9800717 	ldw	r6,28(sp)
10010d3c:	da000617 	ldw	r8,24(sp)
10010d40:	9885883a 	add	r2,r19,r2
10010d44:	da400417 	ldw	r9,16(sp)
10010d48:	1500022e 	bgeu	r2,r20,10010d54 <__muldf3+0x458>
10010d4c:	01000074 	movhi	r4,1
10010d50:	4913883a 	add	r9,r9,r4
10010d54:	1028d43a 	srli	r20,r2,16
10010d58:	1004943a 	slli	r2,r2,16
10010d5c:	802cd43a 	srli	r22,r16,16
10010d60:	843fffcc 	andi	r16,r16,65535
10010d64:	3cffffcc 	andi	r19,r7,65535
10010d68:	9009883a 	mov	r4,r18
10010d6c:	800b883a 	mov	r5,r16
10010d70:	a269883a 	add	r20,r20,r9
10010d74:	d8c00515 	stw	r3,20(sp)
10010d78:	d9800715 	stw	r6,28(sp)
10010d7c:	da000615 	stw	r8,24(sp)
10010d80:	14e7883a 	add	r19,r2,r19
10010d84:	00045280 	call	10004528 <__mulsi3>
10010d88:	9009883a 	mov	r4,r18
10010d8c:	b00b883a 	mov	r5,r22
10010d90:	d8800315 	stw	r2,12(sp)
10010d94:	00045280 	call	10004528 <__mulsi3>
10010d98:	b809883a 	mov	r4,r23
10010d9c:	b00b883a 	mov	r5,r22
10010da0:	d8800215 	stw	r2,8(sp)
10010da4:	00045280 	call	10004528 <__mulsi3>
10010da8:	b80b883a 	mov	r5,r23
10010dac:	8009883a 	mov	r4,r16
10010db0:	d8800415 	stw	r2,16(sp)
10010db4:	00045280 	call	10004528 <__mulsi3>
10010db8:	da800317 	ldw	r10,12(sp)
10010dbc:	d9c00217 	ldw	r7,8(sp)
10010dc0:	d9000017 	ldw	r4,0(sp)
10010dc4:	502ed43a 	srli	r23,r10,16
10010dc8:	11c5883a 	add	r2,r2,r7
10010dcc:	24e5883a 	add	r18,r4,r19
10010dd0:	b885883a 	add	r2,r23,r2
10010dd4:	d8c00517 	ldw	r3,20(sp)
10010dd8:	d9800717 	ldw	r6,28(sp)
10010ddc:	da000617 	ldw	r8,24(sp)
10010de0:	da400417 	ldw	r9,16(sp)
10010de4:	11c0022e 	bgeu	r2,r7,10010df0 <__muldf3+0x4f4>
10010de8:	01000074 	movhi	r4,1
10010dec:	4913883a 	add	r9,r9,r4
10010df0:	100ed43a 	srli	r7,r2,16
10010df4:	1004943a 	slli	r2,r2,16
10010df8:	55ffffcc 	andi	r23,r10,65535
10010dfc:	3a53883a 	add	r9,r7,r9
10010e00:	8809883a 	mov	r4,r17
10010e04:	800b883a 	mov	r5,r16
10010e08:	d8c00515 	stw	r3,20(sp)
10010e0c:	d9800715 	stw	r6,28(sp)
10010e10:	da000615 	stw	r8,24(sp)
10010e14:	da400415 	stw	r9,16(sp)
10010e18:	15ef883a 	add	r23,r2,r23
10010e1c:	00045280 	call	10004528 <__mulsi3>
10010e20:	8809883a 	mov	r4,r17
10010e24:	b00b883a 	mov	r5,r22
10010e28:	d8800215 	stw	r2,8(sp)
10010e2c:	00045280 	call	10004528 <__mulsi3>
10010e30:	b00b883a 	mov	r5,r22
10010e34:	a809883a 	mov	r4,r21
10010e38:	d8800315 	stw	r2,12(sp)
10010e3c:	00045280 	call	10004528 <__mulsi3>
10010e40:	8009883a 	mov	r4,r16
10010e44:	a80b883a 	mov	r5,r21
10010e48:	1023883a 	mov	r17,r2
10010e4c:	00045280 	call	10004528 <__mulsi3>
10010e50:	d9c00217 	ldw	r7,8(sp)
10010e54:	da800317 	ldw	r10,12(sp)
10010e58:	d8c00517 	ldw	r3,20(sp)
10010e5c:	3808d43a 	srli	r4,r7,16
10010e60:	1285883a 	add	r2,r2,r10
10010e64:	d9800717 	ldw	r6,28(sp)
10010e68:	2085883a 	add	r2,r4,r2
10010e6c:	da000617 	ldw	r8,24(sp)
10010e70:	da400417 	ldw	r9,16(sp)
10010e74:	1280022e 	bgeu	r2,r10,10010e80 <__muldf3+0x584>
10010e78:	01000074 	movhi	r4,1
10010e7c:	8923883a 	add	r17,r17,r4
10010e80:	1008943a 	slli	r4,r2,16
10010e84:	39ffffcc 	andi	r7,r7,65535
10010e88:	e4b9883a 	add	fp,fp,r18
10010e8c:	21cf883a 	add	r7,r4,r7
10010e90:	e4e7803a 	cmpltu	r19,fp,r19
10010e94:	3d0f883a 	add	r7,r7,r20
10010e98:	bf39883a 	add	fp,r23,fp
10010e9c:	99c9883a 	add	r4,r19,r7
10010ea0:	e5ef803a 	cmpltu	r23,fp,r23
10010ea4:	490b883a 	add	r5,r9,r4
10010ea8:	1004d43a 	srli	r2,r2,16
10010eac:	b965883a 	add	r18,r23,r5
10010eb0:	24c9803a 	cmpltu	r4,r4,r19
10010eb4:	3d29803a 	cmpltu	r20,r7,r20
10010eb8:	a128b03a 	or	r20,r20,r4
10010ebc:	95ef803a 	cmpltu	r23,r18,r23
10010ec0:	2a53803a 	cmpltu	r9,r5,r9
10010ec4:	a0a9883a 	add	r20,r20,r2
10010ec8:	4deeb03a 	or	r23,r9,r23
10010ecc:	a5ef883a 	add	r23,r20,r23
10010ed0:	bc63883a 	add	r17,r23,r17
10010ed4:	e004927a 	slli	r2,fp,9
10010ed8:	d9000117 	ldw	r4,4(sp)
10010edc:	882e927a 	slli	r23,r17,9
10010ee0:	9022d5fa 	srli	r17,r18,23
10010ee4:	e038d5fa 	srli	fp,fp,23
10010ee8:	1104b03a 	or	r2,r2,r4
10010eec:	9024927a 	slli	r18,r18,9
10010ef0:	1004c03a 	cmpne	r2,r2,zero
10010ef4:	bc62b03a 	or	r17,r23,r17
10010ef8:	1738b03a 	or	fp,r2,fp
10010efc:	8880402c 	andhi	r2,r17,256
10010f00:	e4a4b03a 	or	r18,fp,r18
10010f04:	10000726 	beq	r2,zero,10010f24 <__muldf3+0x628>
10010f08:	9006d07a 	srli	r3,r18,1
10010f0c:	880497fa 	slli	r2,r17,31
10010f10:	9480004c 	andi	r18,r18,1
10010f14:	8822d07a 	srli	r17,r17,1
10010f18:	1ca4b03a 	or	r18,r3,r18
10010f1c:	14a4b03a 	or	r18,r2,r18
10010f20:	4007883a 	mov	r3,r8
10010f24:	1880ffc4 	addi	r2,r3,1023
10010f28:	0080460e 	bge	zero,r2,10011044 <__muldf3+0x748>
10010f2c:	910001cc 	andi	r4,r18,7
10010f30:	20000726 	beq	r4,zero,10010f50 <__muldf3+0x654>
10010f34:	910003cc 	andi	r4,r18,15
10010f38:	01400104 	movi	r5,4
10010f3c:	21400426 	beq	r4,r5,10010f50 <__muldf3+0x654>
10010f40:	9149883a 	add	r4,r18,r5
10010f44:	24a5803a 	cmpltu	r18,r4,r18
10010f48:	8ca3883a 	add	r17,r17,r18
10010f4c:	2025883a 	mov	r18,r4
10010f50:	8900402c 	andhi	r4,r17,256
10010f54:	20000426 	beq	r4,zero,10010f68 <__muldf3+0x66c>
10010f58:	18810004 	addi	r2,r3,1024
10010f5c:	00ffc034 	movhi	r3,65280
10010f60:	18ffffc4 	addi	r3,r3,-1
10010f64:	88e2703a 	and	r17,r17,r3
10010f68:	00c1ff84 	movi	r3,2046
10010f6c:	18bf1316 	blt	r3,r2,10010bbc <__alt_data_end+0xf8010bbc>
10010f70:	882c977a 	slli	r22,r17,29
10010f74:	9024d0fa 	srli	r18,r18,3
10010f78:	8822927a 	slli	r17,r17,9
10010f7c:	1081ffcc 	andi	r2,r2,2047
10010f80:	b4acb03a 	or	r22,r22,r18
10010f84:	8820d33a 	srli	r16,r17,12
10010f88:	3027883a 	mov	r19,r6
10010f8c:	003eba06 	br	10010a78 <__alt_data_end+0xf8010a78>
10010f90:	8080022c 	andhi	r2,r16,8
10010f94:	10000926 	beq	r2,zero,10010fbc <__muldf3+0x6c0>
10010f98:	8880022c 	andhi	r2,r17,8
10010f9c:	1000071e 	bne	r2,zero,10010fbc <__muldf3+0x6c0>
10010fa0:	00800434 	movhi	r2,16
10010fa4:	8c000234 	orhi	r16,r17,8
10010fa8:	10bfffc4 	addi	r2,r2,-1
10010fac:	e027883a 	mov	r19,fp
10010fb0:	80a0703a 	and	r16,r16,r2
10010fb4:	902d883a 	mov	r22,r18
10010fb8:	003f1706 	br	10010c18 <__alt_data_end+0xf8010c18>
10010fbc:	00800434 	movhi	r2,16
10010fc0:	84000234 	orhi	r16,r16,8
10010fc4:	10bfffc4 	addi	r2,r2,-1
10010fc8:	80a0703a 	and	r16,r16,r2
10010fcc:	003f1206 	br	10010c18 <__alt_data_end+0xf8010c18>
10010fd0:	147ff604 	addi	r17,r2,-40
10010fd4:	3462983a 	sll	r17,r6,r17
10010fd8:	0025883a 	mov	r18,zero
10010fdc:	003ef306 	br	10010bac <__alt_data_end+0xf8010bac>
10010fe0:	3009883a 	mov	r4,r6
10010fe4:	d9400215 	stw	r5,8(sp)
10010fe8:	d9800715 	stw	r6,28(sp)
10010fec:	da400415 	stw	r9,16(sp)
10010ff0:	da800315 	stw	r10,12(sp)
10010ff4:	0011c680 	call	10011c68 <__clzsi2>
10010ff8:	10800804 	addi	r2,r2,32
10010ffc:	da800317 	ldw	r10,12(sp)
10011000:	da400417 	ldw	r9,16(sp)
10011004:	d9800717 	ldw	r6,28(sp)
10011008:	d9400217 	ldw	r5,8(sp)
1001100c:	003edd06 	br	10010b84 <__alt_data_end+0xf8010b84>
10011010:	143ff604 	addi	r16,r2,-40
10011014:	ac20983a 	sll	r16,r21,r16
10011018:	002d883a 	mov	r22,zero
1001101c:	003ec106 	br	10010b24 <__alt_data_end+0xf8010b24>
10011020:	d9800715 	stw	r6,28(sp)
10011024:	d9c00215 	stw	r7,8(sp)
10011028:	da400415 	stw	r9,16(sp)
1001102c:	0011c680 	call	10011c68 <__clzsi2>
10011030:	10800804 	addi	r2,r2,32
10011034:	da400417 	ldw	r9,16(sp)
10011038:	d9c00217 	ldw	r7,8(sp)
1001103c:	d9800717 	ldw	r6,28(sp)
10011040:	003eae06 	br	10010afc <__alt_data_end+0xf8010afc>
10011044:	00c00044 	movi	r3,1
10011048:	1887c83a 	sub	r3,r3,r2
1001104c:	01000e04 	movi	r4,56
10011050:	20fe8516 	blt	r4,r3,10010a68 <__alt_data_end+0xf8010a68>
10011054:	010007c4 	movi	r4,31
10011058:	20c01b16 	blt	r4,r3,100110c8 <__muldf3+0x7cc>
1001105c:	00800804 	movi	r2,32
10011060:	10c5c83a 	sub	r2,r2,r3
10011064:	888a983a 	sll	r5,r17,r2
10011068:	90c8d83a 	srl	r4,r18,r3
1001106c:	9084983a 	sll	r2,r18,r2
10011070:	88e2d83a 	srl	r17,r17,r3
10011074:	2906b03a 	or	r3,r5,r4
10011078:	1004c03a 	cmpne	r2,r2,zero
1001107c:	1886b03a 	or	r3,r3,r2
10011080:	188001cc 	andi	r2,r3,7
10011084:	10000726 	beq	r2,zero,100110a4 <__muldf3+0x7a8>
10011088:	188003cc 	andi	r2,r3,15
1001108c:	01000104 	movi	r4,4
10011090:	11000426 	beq	r2,r4,100110a4 <__muldf3+0x7a8>
10011094:	1805883a 	mov	r2,r3
10011098:	10c00104 	addi	r3,r2,4
1001109c:	1885803a 	cmpltu	r2,r3,r2
100110a0:	88a3883a 	add	r17,r17,r2
100110a4:	8880202c 	andhi	r2,r17,128
100110a8:	10001c26 	beq	r2,zero,1001111c <__muldf3+0x820>
100110ac:	3027883a 	mov	r19,r6
100110b0:	00800044 	movi	r2,1
100110b4:	0021883a 	mov	r16,zero
100110b8:	002d883a 	mov	r22,zero
100110bc:	003e6e06 	br	10010a78 <__alt_data_end+0xf8010a78>
100110c0:	4007883a 	mov	r3,r8
100110c4:	003f9706 	br	10010f24 <__alt_data_end+0xf8010f24>
100110c8:	017ff844 	movi	r5,-31
100110cc:	2885c83a 	sub	r2,r5,r2
100110d0:	888ad83a 	srl	r5,r17,r2
100110d4:	00800804 	movi	r2,32
100110d8:	18801a26 	beq	r3,r2,10011144 <__muldf3+0x848>
100110dc:	01001004 	movi	r4,64
100110e0:	20c7c83a 	sub	r3,r4,r3
100110e4:	88e2983a 	sll	r17,r17,r3
100110e8:	8ca4b03a 	or	r18,r17,r18
100110ec:	9004c03a 	cmpne	r2,r18,zero
100110f0:	2884b03a 	or	r2,r5,r2
100110f4:	144001cc 	andi	r17,r2,7
100110f8:	88000d1e 	bne	r17,zero,10011130 <__muldf3+0x834>
100110fc:	0021883a 	mov	r16,zero
10011100:	102cd0fa 	srli	r22,r2,3
10011104:	3027883a 	mov	r19,r6
10011108:	0005883a 	mov	r2,zero
1001110c:	b46cb03a 	or	r22,r22,r17
10011110:	003e5906 	br	10010a78 <__alt_data_end+0xf8010a78>
10011114:	1007883a 	mov	r3,r2
10011118:	0023883a 	mov	r17,zero
1001111c:	8820927a 	slli	r16,r17,9
10011120:	1805883a 	mov	r2,r3
10011124:	8822977a 	slli	r17,r17,29
10011128:	8020d33a 	srli	r16,r16,12
1001112c:	003ff406 	br	10011100 <__alt_data_end+0xf8011100>
10011130:	10c003cc 	andi	r3,r2,15
10011134:	01000104 	movi	r4,4
10011138:	193ff626 	beq	r3,r4,10011114 <__alt_data_end+0xf8011114>
1001113c:	0023883a 	mov	r17,zero
10011140:	003fd506 	br	10011098 <__alt_data_end+0xf8011098>
10011144:	0023883a 	mov	r17,zero
10011148:	003fe706 	br	100110e8 <__alt_data_end+0xf80110e8>
1001114c:	00800434 	movhi	r2,16
10011150:	8c000234 	orhi	r16,r17,8
10011154:	10bfffc4 	addi	r2,r2,-1
10011158:	3027883a 	mov	r19,r6
1001115c:	80a0703a 	and	r16,r16,r2
10011160:	902d883a 	mov	r22,r18
10011164:	003eac06 	br	10010c18 <__alt_data_end+0xf8010c18>

10011168 <__subdf3>:
10011168:	02000434 	movhi	r8,16
1001116c:	423fffc4 	addi	r8,r8,-1
10011170:	defffb04 	addi	sp,sp,-20
10011174:	2a14703a 	and	r10,r5,r8
10011178:	3812d53a 	srli	r9,r7,20
1001117c:	3a10703a 	and	r8,r7,r8
10011180:	2006d77a 	srli	r3,r4,29
10011184:	3004d77a 	srli	r2,r6,29
10011188:	dc000015 	stw	r16,0(sp)
1001118c:	501490fa 	slli	r10,r10,3
10011190:	2820d53a 	srli	r16,r5,20
10011194:	401090fa 	slli	r8,r8,3
10011198:	dc800215 	stw	r18,8(sp)
1001119c:	dc400115 	stw	r17,4(sp)
100111a0:	dfc00415 	stw	ra,16(sp)
100111a4:	202290fa 	slli	r17,r4,3
100111a8:	dcc00315 	stw	r19,12(sp)
100111ac:	4a41ffcc 	andi	r9,r9,2047
100111b0:	0101ffc4 	movi	r4,2047
100111b4:	2824d7fa 	srli	r18,r5,31
100111b8:	8401ffcc 	andi	r16,r16,2047
100111bc:	50c6b03a 	or	r3,r10,r3
100111c0:	380ed7fa 	srli	r7,r7,31
100111c4:	408ab03a 	or	r5,r8,r2
100111c8:	300c90fa 	slli	r6,r6,3
100111cc:	49009626 	beq	r9,r4,10011428 <__subdf3+0x2c0>
100111d0:	39c0005c 	xori	r7,r7,1
100111d4:	8245c83a 	sub	r2,r16,r9
100111d8:	3c807426 	beq	r7,r18,100113ac <__subdf3+0x244>
100111dc:	0080af0e 	bge	zero,r2,1001149c <__subdf3+0x334>
100111e0:	48002a1e 	bne	r9,zero,1001128c <__subdf3+0x124>
100111e4:	2988b03a 	or	r4,r5,r6
100111e8:	20009a1e 	bne	r4,zero,10011454 <__subdf3+0x2ec>
100111ec:	888001cc 	andi	r2,r17,7
100111f0:	10000726 	beq	r2,zero,10011210 <__subdf3+0xa8>
100111f4:	888003cc 	andi	r2,r17,15
100111f8:	01000104 	movi	r4,4
100111fc:	11000426 	beq	r2,r4,10011210 <__subdf3+0xa8>
10011200:	890b883a 	add	r5,r17,r4
10011204:	2c63803a 	cmpltu	r17,r5,r17
10011208:	1c47883a 	add	r3,r3,r17
1001120c:	2823883a 	mov	r17,r5
10011210:	1880202c 	andhi	r2,r3,128
10011214:	10005926 	beq	r2,zero,1001137c <__subdf3+0x214>
10011218:	84000044 	addi	r16,r16,1
1001121c:	0081ffc4 	movi	r2,2047
10011220:	8080be26 	beq	r16,r2,1001151c <__subdf3+0x3b4>
10011224:	017fe034 	movhi	r5,65408
10011228:	297fffc4 	addi	r5,r5,-1
1001122c:	1946703a 	and	r3,r3,r5
10011230:	1804977a 	slli	r2,r3,29
10011234:	1806927a 	slli	r3,r3,9
10011238:	8822d0fa 	srli	r17,r17,3
1001123c:	8401ffcc 	andi	r16,r16,2047
10011240:	180ad33a 	srli	r5,r3,12
10011244:	9100004c 	andi	r4,r18,1
10011248:	1444b03a 	or	r2,r2,r17
1001124c:	80c1ffcc 	andi	r3,r16,2047
10011250:	1820953a 	slli	r16,r3,20
10011254:	20c03fcc 	andi	r3,r4,255
10011258:	180897fa 	slli	r4,r3,31
1001125c:	00c00434 	movhi	r3,16
10011260:	18ffffc4 	addi	r3,r3,-1
10011264:	28c6703a 	and	r3,r5,r3
10011268:	1c06b03a 	or	r3,r3,r16
1001126c:	1906b03a 	or	r3,r3,r4
10011270:	dfc00417 	ldw	ra,16(sp)
10011274:	dcc00317 	ldw	r19,12(sp)
10011278:	dc800217 	ldw	r18,8(sp)
1001127c:	dc400117 	ldw	r17,4(sp)
10011280:	dc000017 	ldw	r16,0(sp)
10011284:	dec00504 	addi	sp,sp,20
10011288:	f800283a 	ret
1001128c:	0101ffc4 	movi	r4,2047
10011290:	813fd626 	beq	r16,r4,100111ec <__alt_data_end+0xf80111ec>
10011294:	29402034 	orhi	r5,r5,128
10011298:	01000e04 	movi	r4,56
1001129c:	2080a316 	blt	r4,r2,1001152c <__subdf3+0x3c4>
100112a0:	010007c4 	movi	r4,31
100112a4:	2080c616 	blt	r4,r2,100115c0 <__subdf3+0x458>
100112a8:	01000804 	movi	r4,32
100112ac:	2089c83a 	sub	r4,r4,r2
100112b0:	2910983a 	sll	r8,r5,r4
100112b4:	308ed83a 	srl	r7,r6,r2
100112b8:	3108983a 	sll	r4,r6,r4
100112bc:	2884d83a 	srl	r2,r5,r2
100112c0:	41ccb03a 	or	r6,r8,r7
100112c4:	2008c03a 	cmpne	r4,r4,zero
100112c8:	310cb03a 	or	r6,r6,r4
100112cc:	898dc83a 	sub	r6,r17,r6
100112d0:	89a3803a 	cmpltu	r17,r17,r6
100112d4:	1887c83a 	sub	r3,r3,r2
100112d8:	1c47c83a 	sub	r3,r3,r17
100112dc:	3023883a 	mov	r17,r6
100112e0:	1880202c 	andhi	r2,r3,128
100112e4:	10002326 	beq	r2,zero,10011374 <__subdf3+0x20c>
100112e8:	04c02034 	movhi	r19,128
100112ec:	9cffffc4 	addi	r19,r19,-1
100112f0:	1ce6703a 	and	r19,r3,r19
100112f4:	98007a26 	beq	r19,zero,100114e0 <__subdf3+0x378>
100112f8:	9809883a 	mov	r4,r19
100112fc:	0011c680 	call	10011c68 <__clzsi2>
10011300:	113ffe04 	addi	r4,r2,-8
10011304:	00c007c4 	movi	r3,31
10011308:	19007b16 	blt	r3,r4,100114f8 <__subdf3+0x390>
1001130c:	00800804 	movi	r2,32
10011310:	1105c83a 	sub	r2,r2,r4
10011314:	8884d83a 	srl	r2,r17,r2
10011318:	9906983a 	sll	r3,r19,r4
1001131c:	8922983a 	sll	r17,r17,r4
10011320:	10c4b03a 	or	r2,r2,r3
10011324:	24007816 	blt	r4,r16,10011508 <__subdf3+0x3a0>
10011328:	2421c83a 	sub	r16,r4,r16
1001132c:	80c00044 	addi	r3,r16,1
10011330:	010007c4 	movi	r4,31
10011334:	20c09516 	blt	r4,r3,1001158c <__subdf3+0x424>
10011338:	01400804 	movi	r5,32
1001133c:	28cbc83a 	sub	r5,r5,r3
10011340:	88c8d83a 	srl	r4,r17,r3
10011344:	8962983a 	sll	r17,r17,r5
10011348:	114a983a 	sll	r5,r2,r5
1001134c:	10c6d83a 	srl	r3,r2,r3
10011350:	8804c03a 	cmpne	r2,r17,zero
10011354:	290ab03a 	or	r5,r5,r4
10011358:	28a2b03a 	or	r17,r5,r2
1001135c:	0021883a 	mov	r16,zero
10011360:	003fa206 	br	100111ec <__alt_data_end+0xf80111ec>
10011364:	2090b03a 	or	r8,r4,r2
10011368:	40018e26 	beq	r8,zero,100119a4 <__subdf3+0x83c>
1001136c:	1007883a 	mov	r3,r2
10011370:	2023883a 	mov	r17,r4
10011374:	888001cc 	andi	r2,r17,7
10011378:	103f9e1e 	bne	r2,zero,100111f4 <__alt_data_end+0xf80111f4>
1001137c:	1804977a 	slli	r2,r3,29
10011380:	8822d0fa 	srli	r17,r17,3
10011384:	1810d0fa 	srli	r8,r3,3
10011388:	9100004c 	andi	r4,r18,1
1001138c:	1444b03a 	or	r2,r2,r17
10011390:	00c1ffc4 	movi	r3,2047
10011394:	80c02826 	beq	r16,r3,10011438 <__subdf3+0x2d0>
10011398:	01400434 	movhi	r5,16
1001139c:	297fffc4 	addi	r5,r5,-1
100113a0:	80e0703a 	and	r16,r16,r3
100113a4:	414a703a 	and	r5,r8,r5
100113a8:	003fa806 	br	1001124c <__alt_data_end+0xf801124c>
100113ac:	0080630e 	bge	zero,r2,1001153c <__subdf3+0x3d4>
100113b0:	48003026 	beq	r9,zero,10011474 <__subdf3+0x30c>
100113b4:	0101ffc4 	movi	r4,2047
100113b8:	813f8c26 	beq	r16,r4,100111ec <__alt_data_end+0xf80111ec>
100113bc:	29402034 	orhi	r5,r5,128
100113c0:	01000e04 	movi	r4,56
100113c4:	2080a90e 	bge	r4,r2,1001166c <__subdf3+0x504>
100113c8:	298cb03a 	or	r6,r5,r6
100113cc:	3012c03a 	cmpne	r9,r6,zero
100113d0:	0005883a 	mov	r2,zero
100113d4:	4c53883a 	add	r9,r9,r17
100113d8:	4c63803a 	cmpltu	r17,r9,r17
100113dc:	10c7883a 	add	r3,r2,r3
100113e0:	88c7883a 	add	r3,r17,r3
100113e4:	4823883a 	mov	r17,r9
100113e8:	1880202c 	andhi	r2,r3,128
100113ec:	1000d026 	beq	r2,zero,10011730 <__subdf3+0x5c8>
100113f0:	84000044 	addi	r16,r16,1
100113f4:	0081ffc4 	movi	r2,2047
100113f8:	8080fe26 	beq	r16,r2,100117f4 <__subdf3+0x68c>
100113fc:	00bfe034 	movhi	r2,65408
10011400:	10bfffc4 	addi	r2,r2,-1
10011404:	1886703a 	and	r3,r3,r2
10011408:	880ad07a 	srli	r5,r17,1
1001140c:	180497fa 	slli	r2,r3,31
10011410:	8900004c 	andi	r4,r17,1
10011414:	2922b03a 	or	r17,r5,r4
10011418:	1806d07a 	srli	r3,r3,1
1001141c:	1462b03a 	or	r17,r2,r17
10011420:	3825883a 	mov	r18,r7
10011424:	003f7106 	br	100111ec <__alt_data_end+0xf80111ec>
10011428:	2984b03a 	or	r2,r5,r6
1001142c:	103f6826 	beq	r2,zero,100111d0 <__alt_data_end+0xf80111d0>
10011430:	39c03fcc 	andi	r7,r7,255
10011434:	003f6706 	br	100111d4 <__alt_data_end+0xf80111d4>
10011438:	4086b03a 	or	r3,r8,r2
1001143c:	18015226 	beq	r3,zero,10011988 <__subdf3+0x820>
10011440:	00c00434 	movhi	r3,16
10011444:	41400234 	orhi	r5,r8,8
10011448:	18ffffc4 	addi	r3,r3,-1
1001144c:	28ca703a 	and	r5,r5,r3
10011450:	003f7e06 	br	1001124c <__alt_data_end+0xf801124c>
10011454:	10bfffc4 	addi	r2,r2,-1
10011458:	1000491e 	bne	r2,zero,10011580 <__subdf3+0x418>
1001145c:	898fc83a 	sub	r7,r17,r6
10011460:	89e3803a 	cmpltu	r17,r17,r7
10011464:	1947c83a 	sub	r3,r3,r5
10011468:	1c47c83a 	sub	r3,r3,r17
1001146c:	3823883a 	mov	r17,r7
10011470:	003f9b06 	br	100112e0 <__alt_data_end+0xf80112e0>
10011474:	2988b03a 	or	r4,r5,r6
10011478:	203f5c26 	beq	r4,zero,100111ec <__alt_data_end+0xf80111ec>
1001147c:	10bfffc4 	addi	r2,r2,-1
10011480:	1000931e 	bne	r2,zero,100116d0 <__subdf3+0x568>
10011484:	898d883a 	add	r6,r17,r6
10011488:	3463803a 	cmpltu	r17,r6,r17
1001148c:	1947883a 	add	r3,r3,r5
10011490:	88c7883a 	add	r3,r17,r3
10011494:	3023883a 	mov	r17,r6
10011498:	003fd306 	br	100113e8 <__alt_data_end+0xf80113e8>
1001149c:	1000541e 	bne	r2,zero,100115f0 <__subdf3+0x488>
100114a0:	80800044 	addi	r2,r16,1
100114a4:	1081ffcc 	andi	r2,r2,2047
100114a8:	01000044 	movi	r4,1
100114ac:	2080a20e 	bge	r4,r2,10011738 <__subdf3+0x5d0>
100114b0:	8989c83a 	sub	r4,r17,r6
100114b4:	8905803a 	cmpltu	r2,r17,r4
100114b8:	1967c83a 	sub	r19,r3,r5
100114bc:	98a7c83a 	sub	r19,r19,r2
100114c0:	9880202c 	andhi	r2,r19,128
100114c4:	10006326 	beq	r2,zero,10011654 <__subdf3+0x4ec>
100114c8:	3463c83a 	sub	r17,r6,r17
100114cc:	28c7c83a 	sub	r3,r5,r3
100114d0:	344d803a 	cmpltu	r6,r6,r17
100114d4:	19a7c83a 	sub	r19,r3,r6
100114d8:	3825883a 	mov	r18,r7
100114dc:	983f861e 	bne	r19,zero,100112f8 <__alt_data_end+0xf80112f8>
100114e0:	8809883a 	mov	r4,r17
100114e4:	0011c680 	call	10011c68 <__clzsi2>
100114e8:	10800804 	addi	r2,r2,32
100114ec:	113ffe04 	addi	r4,r2,-8
100114f0:	00c007c4 	movi	r3,31
100114f4:	193f850e 	bge	r3,r4,1001130c <__alt_data_end+0xf801130c>
100114f8:	10bff604 	addi	r2,r2,-40
100114fc:	8884983a 	sll	r2,r17,r2
10011500:	0023883a 	mov	r17,zero
10011504:	243f880e 	bge	r4,r16,10011328 <__alt_data_end+0xf8011328>
10011508:	00ffe034 	movhi	r3,65408
1001150c:	18ffffc4 	addi	r3,r3,-1
10011510:	8121c83a 	sub	r16,r16,r4
10011514:	10c6703a 	and	r3,r2,r3
10011518:	003f3406 	br	100111ec <__alt_data_end+0xf80111ec>
1001151c:	9100004c 	andi	r4,r18,1
10011520:	000b883a 	mov	r5,zero
10011524:	0005883a 	mov	r2,zero
10011528:	003f4806 	br	1001124c <__alt_data_end+0xf801124c>
1001152c:	298cb03a 	or	r6,r5,r6
10011530:	300cc03a 	cmpne	r6,r6,zero
10011534:	0005883a 	mov	r2,zero
10011538:	003f6406 	br	100112cc <__alt_data_end+0xf80112cc>
1001153c:	10009a1e 	bne	r2,zero,100117a8 <__subdf3+0x640>
10011540:	82400044 	addi	r9,r16,1
10011544:	4881ffcc 	andi	r2,r9,2047
10011548:	02800044 	movi	r10,1
1001154c:	5080670e 	bge	r10,r2,100116ec <__subdf3+0x584>
10011550:	0081ffc4 	movi	r2,2047
10011554:	4880af26 	beq	r9,r2,10011814 <__subdf3+0x6ac>
10011558:	898d883a 	add	r6,r17,r6
1001155c:	1945883a 	add	r2,r3,r5
10011560:	3447803a 	cmpltu	r3,r6,r17
10011564:	1887883a 	add	r3,r3,r2
10011568:	182297fa 	slli	r17,r3,31
1001156c:	300cd07a 	srli	r6,r6,1
10011570:	1806d07a 	srli	r3,r3,1
10011574:	4821883a 	mov	r16,r9
10011578:	89a2b03a 	or	r17,r17,r6
1001157c:	003f1b06 	br	100111ec <__alt_data_end+0xf80111ec>
10011580:	0101ffc4 	movi	r4,2047
10011584:	813f441e 	bne	r16,r4,10011298 <__alt_data_end+0xf8011298>
10011588:	003f1806 	br	100111ec <__alt_data_end+0xf80111ec>
1001158c:	843ff844 	addi	r16,r16,-31
10011590:	01400804 	movi	r5,32
10011594:	1408d83a 	srl	r4,r2,r16
10011598:	19405026 	beq	r3,r5,100116dc <__subdf3+0x574>
1001159c:	01401004 	movi	r5,64
100115a0:	28c7c83a 	sub	r3,r5,r3
100115a4:	10c4983a 	sll	r2,r2,r3
100115a8:	88a2b03a 	or	r17,r17,r2
100115ac:	8822c03a 	cmpne	r17,r17,zero
100115b0:	2462b03a 	or	r17,r4,r17
100115b4:	0007883a 	mov	r3,zero
100115b8:	0021883a 	mov	r16,zero
100115bc:	003f6d06 	br	10011374 <__alt_data_end+0xf8011374>
100115c0:	11fff804 	addi	r7,r2,-32
100115c4:	01000804 	movi	r4,32
100115c8:	29ced83a 	srl	r7,r5,r7
100115cc:	11004526 	beq	r2,r4,100116e4 <__subdf3+0x57c>
100115d0:	01001004 	movi	r4,64
100115d4:	2089c83a 	sub	r4,r4,r2
100115d8:	2904983a 	sll	r2,r5,r4
100115dc:	118cb03a 	or	r6,r2,r6
100115e0:	300cc03a 	cmpne	r6,r6,zero
100115e4:	398cb03a 	or	r6,r7,r6
100115e8:	0005883a 	mov	r2,zero
100115ec:	003f3706 	br	100112cc <__alt_data_end+0xf80112cc>
100115f0:	80002a26 	beq	r16,zero,1001169c <__subdf3+0x534>
100115f4:	0101ffc4 	movi	r4,2047
100115f8:	49006626 	beq	r9,r4,10011794 <__subdf3+0x62c>
100115fc:	0085c83a 	sub	r2,zero,r2
10011600:	18c02034 	orhi	r3,r3,128
10011604:	01000e04 	movi	r4,56
10011608:	20807e16 	blt	r4,r2,10011804 <__subdf3+0x69c>
1001160c:	010007c4 	movi	r4,31
10011610:	2080e716 	blt	r4,r2,100119b0 <__subdf3+0x848>
10011614:	01000804 	movi	r4,32
10011618:	2089c83a 	sub	r4,r4,r2
1001161c:	1914983a 	sll	r10,r3,r4
10011620:	8890d83a 	srl	r8,r17,r2
10011624:	8908983a 	sll	r4,r17,r4
10011628:	1884d83a 	srl	r2,r3,r2
1001162c:	5222b03a 	or	r17,r10,r8
10011630:	2006c03a 	cmpne	r3,r4,zero
10011634:	88e2b03a 	or	r17,r17,r3
10011638:	3463c83a 	sub	r17,r6,r17
1001163c:	2885c83a 	sub	r2,r5,r2
10011640:	344d803a 	cmpltu	r6,r6,r17
10011644:	1187c83a 	sub	r3,r2,r6
10011648:	4821883a 	mov	r16,r9
1001164c:	3825883a 	mov	r18,r7
10011650:	003f2306 	br	100112e0 <__alt_data_end+0xf80112e0>
10011654:	24d0b03a 	or	r8,r4,r19
10011658:	40001b1e 	bne	r8,zero,100116c8 <__subdf3+0x560>
1001165c:	0005883a 	mov	r2,zero
10011660:	0009883a 	mov	r4,zero
10011664:	0021883a 	mov	r16,zero
10011668:	003f4906 	br	10011390 <__alt_data_end+0xf8011390>
1001166c:	010007c4 	movi	r4,31
10011670:	20803a16 	blt	r4,r2,1001175c <__subdf3+0x5f4>
10011674:	01000804 	movi	r4,32
10011678:	2089c83a 	sub	r4,r4,r2
1001167c:	2912983a 	sll	r9,r5,r4
10011680:	3090d83a 	srl	r8,r6,r2
10011684:	3108983a 	sll	r4,r6,r4
10011688:	2884d83a 	srl	r2,r5,r2
1001168c:	4a12b03a 	or	r9,r9,r8
10011690:	2008c03a 	cmpne	r4,r4,zero
10011694:	4912b03a 	or	r9,r9,r4
10011698:	003f4e06 	br	100113d4 <__alt_data_end+0xf80113d4>
1001169c:	1c48b03a 	or	r4,r3,r17
100116a0:	20003c26 	beq	r4,zero,10011794 <__subdf3+0x62c>
100116a4:	0084303a 	nor	r2,zero,r2
100116a8:	1000381e 	bne	r2,zero,1001178c <__subdf3+0x624>
100116ac:	3463c83a 	sub	r17,r6,r17
100116b0:	28c5c83a 	sub	r2,r5,r3
100116b4:	344d803a 	cmpltu	r6,r6,r17
100116b8:	1187c83a 	sub	r3,r2,r6
100116bc:	4821883a 	mov	r16,r9
100116c0:	3825883a 	mov	r18,r7
100116c4:	003f0606 	br	100112e0 <__alt_data_end+0xf80112e0>
100116c8:	2023883a 	mov	r17,r4
100116cc:	003f0906 	br	100112f4 <__alt_data_end+0xf80112f4>
100116d0:	0101ffc4 	movi	r4,2047
100116d4:	813f3a1e 	bne	r16,r4,100113c0 <__alt_data_end+0xf80113c0>
100116d8:	003ec406 	br	100111ec <__alt_data_end+0xf80111ec>
100116dc:	0005883a 	mov	r2,zero
100116e0:	003fb106 	br	100115a8 <__alt_data_end+0xf80115a8>
100116e4:	0005883a 	mov	r2,zero
100116e8:	003fbc06 	br	100115dc <__alt_data_end+0xf80115dc>
100116ec:	1c44b03a 	or	r2,r3,r17
100116f0:	80008e1e 	bne	r16,zero,1001192c <__subdf3+0x7c4>
100116f4:	1000c826 	beq	r2,zero,10011a18 <__subdf3+0x8b0>
100116f8:	2984b03a 	or	r2,r5,r6
100116fc:	103ebb26 	beq	r2,zero,100111ec <__alt_data_end+0xf80111ec>
10011700:	8989883a 	add	r4,r17,r6
10011704:	1945883a 	add	r2,r3,r5
10011708:	2447803a 	cmpltu	r3,r4,r17
1001170c:	1887883a 	add	r3,r3,r2
10011710:	1880202c 	andhi	r2,r3,128
10011714:	2023883a 	mov	r17,r4
10011718:	103f1626 	beq	r2,zero,10011374 <__alt_data_end+0xf8011374>
1001171c:	00bfe034 	movhi	r2,65408
10011720:	10bfffc4 	addi	r2,r2,-1
10011724:	5021883a 	mov	r16,r10
10011728:	1886703a 	and	r3,r3,r2
1001172c:	003eaf06 	br	100111ec <__alt_data_end+0xf80111ec>
10011730:	3825883a 	mov	r18,r7
10011734:	003f0f06 	br	10011374 <__alt_data_end+0xf8011374>
10011738:	1c44b03a 	or	r2,r3,r17
1001173c:	8000251e 	bne	r16,zero,100117d4 <__subdf3+0x66c>
10011740:	1000661e 	bne	r2,zero,100118dc <__subdf3+0x774>
10011744:	2990b03a 	or	r8,r5,r6
10011748:	40009626 	beq	r8,zero,100119a4 <__subdf3+0x83c>
1001174c:	2807883a 	mov	r3,r5
10011750:	3023883a 	mov	r17,r6
10011754:	3825883a 	mov	r18,r7
10011758:	003ea406 	br	100111ec <__alt_data_end+0xf80111ec>
1001175c:	127ff804 	addi	r9,r2,-32
10011760:	01000804 	movi	r4,32
10011764:	2a52d83a 	srl	r9,r5,r9
10011768:	11008c26 	beq	r2,r4,1001199c <__subdf3+0x834>
1001176c:	01001004 	movi	r4,64
10011770:	2085c83a 	sub	r2,r4,r2
10011774:	2884983a 	sll	r2,r5,r2
10011778:	118cb03a 	or	r6,r2,r6
1001177c:	300cc03a 	cmpne	r6,r6,zero
10011780:	4992b03a 	or	r9,r9,r6
10011784:	0005883a 	mov	r2,zero
10011788:	003f1206 	br	100113d4 <__alt_data_end+0xf80113d4>
1001178c:	0101ffc4 	movi	r4,2047
10011790:	493f9c1e 	bne	r9,r4,10011604 <__alt_data_end+0xf8011604>
10011794:	2807883a 	mov	r3,r5
10011798:	3023883a 	mov	r17,r6
1001179c:	4821883a 	mov	r16,r9
100117a0:	3825883a 	mov	r18,r7
100117a4:	003e9106 	br	100111ec <__alt_data_end+0xf80111ec>
100117a8:	80001f1e 	bne	r16,zero,10011828 <__subdf3+0x6c0>
100117ac:	1c48b03a 	or	r4,r3,r17
100117b0:	20005a26 	beq	r4,zero,1001191c <__subdf3+0x7b4>
100117b4:	0084303a 	nor	r2,zero,r2
100117b8:	1000561e 	bne	r2,zero,10011914 <__subdf3+0x7ac>
100117bc:	89a3883a 	add	r17,r17,r6
100117c0:	1945883a 	add	r2,r3,r5
100117c4:	898d803a 	cmpltu	r6,r17,r6
100117c8:	3087883a 	add	r3,r6,r2
100117cc:	4821883a 	mov	r16,r9
100117d0:	003f0506 	br	100113e8 <__alt_data_end+0xf80113e8>
100117d4:	10002b1e 	bne	r2,zero,10011884 <__subdf3+0x71c>
100117d8:	2984b03a 	or	r2,r5,r6
100117dc:	10008026 	beq	r2,zero,100119e0 <__subdf3+0x878>
100117e0:	2807883a 	mov	r3,r5
100117e4:	3023883a 	mov	r17,r6
100117e8:	3825883a 	mov	r18,r7
100117ec:	0401ffc4 	movi	r16,2047
100117f0:	003e7e06 	br	100111ec <__alt_data_end+0xf80111ec>
100117f4:	3809883a 	mov	r4,r7
100117f8:	0011883a 	mov	r8,zero
100117fc:	0005883a 	mov	r2,zero
10011800:	003ee306 	br	10011390 <__alt_data_end+0xf8011390>
10011804:	1c62b03a 	or	r17,r3,r17
10011808:	8822c03a 	cmpne	r17,r17,zero
1001180c:	0005883a 	mov	r2,zero
10011810:	003f8906 	br	10011638 <__alt_data_end+0xf8011638>
10011814:	3809883a 	mov	r4,r7
10011818:	4821883a 	mov	r16,r9
1001181c:	0011883a 	mov	r8,zero
10011820:	0005883a 	mov	r2,zero
10011824:	003eda06 	br	10011390 <__alt_data_end+0xf8011390>
10011828:	0101ffc4 	movi	r4,2047
1001182c:	49003b26 	beq	r9,r4,1001191c <__subdf3+0x7b4>
10011830:	0085c83a 	sub	r2,zero,r2
10011834:	18c02034 	orhi	r3,r3,128
10011838:	01000e04 	movi	r4,56
1001183c:	20806e16 	blt	r4,r2,100119f8 <__subdf3+0x890>
10011840:	010007c4 	movi	r4,31
10011844:	20807716 	blt	r4,r2,10011a24 <__subdf3+0x8bc>
10011848:	01000804 	movi	r4,32
1001184c:	2089c83a 	sub	r4,r4,r2
10011850:	1914983a 	sll	r10,r3,r4
10011854:	8890d83a 	srl	r8,r17,r2
10011858:	8908983a 	sll	r4,r17,r4
1001185c:	1884d83a 	srl	r2,r3,r2
10011860:	5222b03a 	or	r17,r10,r8
10011864:	2006c03a 	cmpne	r3,r4,zero
10011868:	88e2b03a 	or	r17,r17,r3
1001186c:	89a3883a 	add	r17,r17,r6
10011870:	1145883a 	add	r2,r2,r5
10011874:	898d803a 	cmpltu	r6,r17,r6
10011878:	3087883a 	add	r3,r6,r2
1001187c:	4821883a 	mov	r16,r9
10011880:	003ed906 	br	100113e8 <__alt_data_end+0xf80113e8>
10011884:	2984b03a 	or	r2,r5,r6
10011888:	10004226 	beq	r2,zero,10011994 <__subdf3+0x82c>
1001188c:	1808d0fa 	srli	r4,r3,3
10011890:	8822d0fa 	srli	r17,r17,3
10011894:	1806977a 	slli	r3,r3,29
10011898:	2080022c 	andhi	r2,r4,8
1001189c:	1c62b03a 	or	r17,r3,r17
100118a0:	10000826 	beq	r2,zero,100118c4 <__subdf3+0x75c>
100118a4:	2812d0fa 	srli	r9,r5,3
100118a8:	4880022c 	andhi	r2,r9,8
100118ac:	1000051e 	bne	r2,zero,100118c4 <__subdf3+0x75c>
100118b0:	300cd0fa 	srli	r6,r6,3
100118b4:	2804977a 	slli	r2,r5,29
100118b8:	4809883a 	mov	r4,r9
100118bc:	3825883a 	mov	r18,r7
100118c0:	11a2b03a 	or	r17,r2,r6
100118c4:	8806d77a 	srli	r3,r17,29
100118c8:	200890fa 	slli	r4,r4,3
100118cc:	882290fa 	slli	r17,r17,3
100118d0:	0401ffc4 	movi	r16,2047
100118d4:	1906b03a 	or	r3,r3,r4
100118d8:	003e4406 	br	100111ec <__alt_data_end+0xf80111ec>
100118dc:	2984b03a 	or	r2,r5,r6
100118e0:	103e4226 	beq	r2,zero,100111ec <__alt_data_end+0xf80111ec>
100118e4:	8989c83a 	sub	r4,r17,r6
100118e8:	8911803a 	cmpltu	r8,r17,r4
100118ec:	1945c83a 	sub	r2,r3,r5
100118f0:	1205c83a 	sub	r2,r2,r8
100118f4:	1200202c 	andhi	r8,r2,128
100118f8:	403e9a26 	beq	r8,zero,10011364 <__alt_data_end+0xf8011364>
100118fc:	3463c83a 	sub	r17,r6,r17
10011900:	28c5c83a 	sub	r2,r5,r3
10011904:	344d803a 	cmpltu	r6,r6,r17
10011908:	1187c83a 	sub	r3,r2,r6
1001190c:	3825883a 	mov	r18,r7
10011910:	003e3606 	br	100111ec <__alt_data_end+0xf80111ec>
10011914:	0101ffc4 	movi	r4,2047
10011918:	493fc71e 	bne	r9,r4,10011838 <__alt_data_end+0xf8011838>
1001191c:	2807883a 	mov	r3,r5
10011920:	3023883a 	mov	r17,r6
10011924:	4821883a 	mov	r16,r9
10011928:	003e3006 	br	100111ec <__alt_data_end+0xf80111ec>
1001192c:	10003626 	beq	r2,zero,10011a08 <__subdf3+0x8a0>
10011930:	2984b03a 	or	r2,r5,r6
10011934:	10001726 	beq	r2,zero,10011994 <__subdf3+0x82c>
10011938:	1808d0fa 	srli	r4,r3,3
1001193c:	8822d0fa 	srli	r17,r17,3
10011940:	1806977a 	slli	r3,r3,29
10011944:	2080022c 	andhi	r2,r4,8
10011948:	1c62b03a 	or	r17,r3,r17
1001194c:	10000726 	beq	r2,zero,1001196c <__subdf3+0x804>
10011950:	2812d0fa 	srli	r9,r5,3
10011954:	4880022c 	andhi	r2,r9,8
10011958:	1000041e 	bne	r2,zero,1001196c <__subdf3+0x804>
1001195c:	300cd0fa 	srli	r6,r6,3
10011960:	2804977a 	slli	r2,r5,29
10011964:	4809883a 	mov	r4,r9
10011968:	11a2b03a 	or	r17,r2,r6
1001196c:	8806d77a 	srli	r3,r17,29
10011970:	200890fa 	slli	r4,r4,3
10011974:	882290fa 	slli	r17,r17,3
10011978:	3825883a 	mov	r18,r7
1001197c:	1906b03a 	or	r3,r3,r4
10011980:	0401ffc4 	movi	r16,2047
10011984:	003e1906 	br	100111ec <__alt_data_end+0xf80111ec>
10011988:	000b883a 	mov	r5,zero
1001198c:	0005883a 	mov	r2,zero
10011990:	003e2e06 	br	1001124c <__alt_data_end+0xf801124c>
10011994:	0401ffc4 	movi	r16,2047
10011998:	003e1406 	br	100111ec <__alt_data_end+0xf80111ec>
1001199c:	0005883a 	mov	r2,zero
100119a0:	003f7506 	br	10011778 <__alt_data_end+0xf8011778>
100119a4:	0005883a 	mov	r2,zero
100119a8:	0009883a 	mov	r4,zero
100119ac:	003e7806 	br	10011390 <__alt_data_end+0xf8011390>
100119b0:	123ff804 	addi	r8,r2,-32
100119b4:	01000804 	movi	r4,32
100119b8:	1a10d83a 	srl	r8,r3,r8
100119bc:	11002526 	beq	r2,r4,10011a54 <__subdf3+0x8ec>
100119c0:	01001004 	movi	r4,64
100119c4:	2085c83a 	sub	r2,r4,r2
100119c8:	1884983a 	sll	r2,r3,r2
100119cc:	1444b03a 	or	r2,r2,r17
100119d0:	1004c03a 	cmpne	r2,r2,zero
100119d4:	40a2b03a 	or	r17,r8,r2
100119d8:	0005883a 	mov	r2,zero
100119dc:	003f1606 	br	10011638 <__alt_data_end+0xf8011638>
100119e0:	02000434 	movhi	r8,16
100119e4:	0009883a 	mov	r4,zero
100119e8:	423fffc4 	addi	r8,r8,-1
100119ec:	00bfffc4 	movi	r2,-1
100119f0:	0401ffc4 	movi	r16,2047
100119f4:	003e6606 	br	10011390 <__alt_data_end+0xf8011390>
100119f8:	1c62b03a 	or	r17,r3,r17
100119fc:	8822c03a 	cmpne	r17,r17,zero
10011a00:	0005883a 	mov	r2,zero
10011a04:	003f9906 	br	1001186c <__alt_data_end+0xf801186c>
10011a08:	2807883a 	mov	r3,r5
10011a0c:	3023883a 	mov	r17,r6
10011a10:	0401ffc4 	movi	r16,2047
10011a14:	003df506 	br	100111ec <__alt_data_end+0xf80111ec>
10011a18:	2807883a 	mov	r3,r5
10011a1c:	3023883a 	mov	r17,r6
10011a20:	003df206 	br	100111ec <__alt_data_end+0xf80111ec>
10011a24:	123ff804 	addi	r8,r2,-32
10011a28:	01000804 	movi	r4,32
10011a2c:	1a10d83a 	srl	r8,r3,r8
10011a30:	11000a26 	beq	r2,r4,10011a5c <__subdf3+0x8f4>
10011a34:	01001004 	movi	r4,64
10011a38:	2085c83a 	sub	r2,r4,r2
10011a3c:	1884983a 	sll	r2,r3,r2
10011a40:	1444b03a 	or	r2,r2,r17
10011a44:	1004c03a 	cmpne	r2,r2,zero
10011a48:	40a2b03a 	or	r17,r8,r2
10011a4c:	0005883a 	mov	r2,zero
10011a50:	003f8606 	br	1001186c <__alt_data_end+0xf801186c>
10011a54:	0005883a 	mov	r2,zero
10011a58:	003fdc06 	br	100119cc <__alt_data_end+0xf80119cc>
10011a5c:	0005883a 	mov	r2,zero
10011a60:	003ff706 	br	10011a40 <__alt_data_end+0xf8011a40>

10011a64 <__fixdfsi>:
10011a64:	280cd53a 	srli	r6,r5,20
10011a68:	00c00434 	movhi	r3,16
10011a6c:	18ffffc4 	addi	r3,r3,-1
10011a70:	3181ffcc 	andi	r6,r6,2047
10011a74:	01c0ff84 	movi	r7,1022
10011a78:	28c6703a 	and	r3,r5,r3
10011a7c:	280ad7fa 	srli	r5,r5,31
10011a80:	3980120e 	bge	r7,r6,10011acc <__fixdfsi+0x68>
10011a84:	00810744 	movi	r2,1053
10011a88:	11800c16 	blt	r2,r6,10011abc <__fixdfsi+0x58>
10011a8c:	00810cc4 	movi	r2,1075
10011a90:	1185c83a 	sub	r2,r2,r6
10011a94:	01c007c4 	movi	r7,31
10011a98:	18c00434 	orhi	r3,r3,16
10011a9c:	38800d16 	blt	r7,r2,10011ad4 <__fixdfsi+0x70>
10011aa0:	31befb44 	addi	r6,r6,-1043
10011aa4:	2084d83a 	srl	r2,r4,r2
10011aa8:	1986983a 	sll	r3,r3,r6
10011aac:	1884b03a 	or	r2,r3,r2
10011ab0:	28000726 	beq	r5,zero,10011ad0 <__fixdfsi+0x6c>
10011ab4:	0085c83a 	sub	r2,zero,r2
10011ab8:	f800283a 	ret
10011abc:	00a00034 	movhi	r2,32768
10011ac0:	10bfffc4 	addi	r2,r2,-1
10011ac4:	2885883a 	add	r2,r5,r2
10011ac8:	f800283a 	ret
10011acc:	0005883a 	mov	r2,zero
10011ad0:	f800283a 	ret
10011ad4:	008104c4 	movi	r2,1043
10011ad8:	1185c83a 	sub	r2,r2,r6
10011adc:	1884d83a 	srl	r2,r3,r2
10011ae0:	003ff306 	br	10011ab0 <__alt_data_end+0xf8011ab0>

10011ae4 <__floatsidf>:
10011ae4:	defffd04 	addi	sp,sp,-12
10011ae8:	dfc00215 	stw	ra,8(sp)
10011aec:	dc400115 	stw	r17,4(sp)
10011af0:	dc000015 	stw	r16,0(sp)
10011af4:	20002b26 	beq	r4,zero,10011ba4 <__floatsidf+0xc0>
10011af8:	2023883a 	mov	r17,r4
10011afc:	2020d7fa 	srli	r16,r4,31
10011b00:	20002d16 	blt	r4,zero,10011bb8 <__floatsidf+0xd4>
10011b04:	8809883a 	mov	r4,r17
10011b08:	0011c680 	call	10011c68 <__clzsi2>
10011b0c:	01410784 	movi	r5,1054
10011b10:	288bc83a 	sub	r5,r5,r2
10011b14:	01010cc4 	movi	r4,1075
10011b18:	2149c83a 	sub	r4,r4,r5
10011b1c:	00c007c4 	movi	r3,31
10011b20:	1900160e 	bge	r3,r4,10011b7c <__floatsidf+0x98>
10011b24:	00c104c4 	movi	r3,1043
10011b28:	1947c83a 	sub	r3,r3,r5
10011b2c:	88c6983a 	sll	r3,r17,r3
10011b30:	00800434 	movhi	r2,16
10011b34:	10bfffc4 	addi	r2,r2,-1
10011b38:	1886703a 	and	r3,r3,r2
10011b3c:	2941ffcc 	andi	r5,r5,2047
10011b40:	800d883a 	mov	r6,r16
10011b44:	0005883a 	mov	r2,zero
10011b48:	280a953a 	slli	r5,r5,20
10011b4c:	31803fcc 	andi	r6,r6,255
10011b50:	01000434 	movhi	r4,16
10011b54:	300c97fa 	slli	r6,r6,31
10011b58:	213fffc4 	addi	r4,r4,-1
10011b5c:	1906703a 	and	r3,r3,r4
10011b60:	1946b03a 	or	r3,r3,r5
10011b64:	1986b03a 	or	r3,r3,r6
10011b68:	dfc00217 	ldw	ra,8(sp)
10011b6c:	dc400117 	ldw	r17,4(sp)
10011b70:	dc000017 	ldw	r16,0(sp)
10011b74:	dec00304 	addi	sp,sp,12
10011b78:	f800283a 	ret
10011b7c:	00c002c4 	movi	r3,11
10011b80:	1887c83a 	sub	r3,r3,r2
10011b84:	88c6d83a 	srl	r3,r17,r3
10011b88:	8904983a 	sll	r2,r17,r4
10011b8c:	01000434 	movhi	r4,16
10011b90:	213fffc4 	addi	r4,r4,-1
10011b94:	2941ffcc 	andi	r5,r5,2047
10011b98:	1906703a 	and	r3,r3,r4
10011b9c:	800d883a 	mov	r6,r16
10011ba0:	003fe906 	br	10011b48 <__alt_data_end+0xf8011b48>
10011ba4:	000d883a 	mov	r6,zero
10011ba8:	000b883a 	mov	r5,zero
10011bac:	0007883a 	mov	r3,zero
10011bb0:	0005883a 	mov	r2,zero
10011bb4:	003fe406 	br	10011b48 <__alt_data_end+0xf8011b48>
10011bb8:	0123c83a 	sub	r17,zero,r4
10011bbc:	003fd106 	br	10011b04 <__alt_data_end+0xf8011b04>

10011bc0 <__floatunsidf>:
10011bc0:	defffe04 	addi	sp,sp,-8
10011bc4:	dc000015 	stw	r16,0(sp)
10011bc8:	dfc00115 	stw	ra,4(sp)
10011bcc:	2021883a 	mov	r16,r4
10011bd0:	20002226 	beq	r4,zero,10011c5c <__floatunsidf+0x9c>
10011bd4:	0011c680 	call	10011c68 <__clzsi2>
10011bd8:	01010784 	movi	r4,1054
10011bdc:	2089c83a 	sub	r4,r4,r2
10011be0:	01810cc4 	movi	r6,1075
10011be4:	310dc83a 	sub	r6,r6,r4
10011be8:	00c007c4 	movi	r3,31
10011bec:	1980120e 	bge	r3,r6,10011c38 <__floatunsidf+0x78>
10011bf0:	00c104c4 	movi	r3,1043
10011bf4:	1907c83a 	sub	r3,r3,r4
10011bf8:	80ca983a 	sll	r5,r16,r3
10011bfc:	00800434 	movhi	r2,16
10011c00:	10bfffc4 	addi	r2,r2,-1
10011c04:	2101ffcc 	andi	r4,r4,2047
10011c08:	0021883a 	mov	r16,zero
10011c0c:	288a703a 	and	r5,r5,r2
10011c10:	2008953a 	slli	r4,r4,20
10011c14:	00c00434 	movhi	r3,16
10011c18:	18ffffc4 	addi	r3,r3,-1
10011c1c:	28c6703a 	and	r3,r5,r3
10011c20:	8005883a 	mov	r2,r16
10011c24:	1906b03a 	or	r3,r3,r4
10011c28:	dfc00117 	ldw	ra,4(sp)
10011c2c:	dc000017 	ldw	r16,0(sp)
10011c30:	dec00204 	addi	sp,sp,8
10011c34:	f800283a 	ret
10011c38:	00c002c4 	movi	r3,11
10011c3c:	188bc83a 	sub	r5,r3,r2
10011c40:	814ad83a 	srl	r5,r16,r5
10011c44:	00c00434 	movhi	r3,16
10011c48:	18ffffc4 	addi	r3,r3,-1
10011c4c:	81a0983a 	sll	r16,r16,r6
10011c50:	2101ffcc 	andi	r4,r4,2047
10011c54:	28ca703a 	and	r5,r5,r3
10011c58:	003fed06 	br	10011c10 <__alt_data_end+0xf8011c10>
10011c5c:	0009883a 	mov	r4,zero
10011c60:	000b883a 	mov	r5,zero
10011c64:	003fea06 	br	10011c10 <__alt_data_end+0xf8011c10>

10011c68 <__clzsi2>:
10011c68:	00bfffd4 	movui	r2,65535
10011c6c:	11000536 	bltu	r2,r4,10011c84 <__clzsi2+0x1c>
10011c70:	00803fc4 	movi	r2,255
10011c74:	11000f36 	bltu	r2,r4,10011cb4 <__clzsi2+0x4c>
10011c78:	00800804 	movi	r2,32
10011c7c:	0007883a 	mov	r3,zero
10011c80:	00000506 	br	10011c98 <__clzsi2+0x30>
10011c84:	00804034 	movhi	r2,256
10011c88:	10bfffc4 	addi	r2,r2,-1
10011c8c:	11000c2e 	bgeu	r2,r4,10011cc0 <__clzsi2+0x58>
10011c90:	00800204 	movi	r2,8
10011c94:	00c00604 	movi	r3,24
10011c98:	20c8d83a 	srl	r4,r4,r3
10011c9c:	00c40074 	movhi	r3,4097
10011ca0:	18d4a004 	addi	r3,r3,21120
10011ca4:	1909883a 	add	r4,r3,r4
10011ca8:	20c00003 	ldbu	r3,0(r4)
10011cac:	10c5c83a 	sub	r2,r2,r3
10011cb0:	f800283a 	ret
10011cb4:	00800604 	movi	r2,24
10011cb8:	00c00204 	movi	r3,8
10011cbc:	003ff606 	br	10011c98 <__alt_data_end+0xf8011c98>
10011cc0:	00800404 	movi	r2,16
10011cc4:	1007883a 	mov	r3,r2
10011cc8:	003ff306 	br	10011c98 <__alt_data_end+0xf8011c98>

10011ccc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011ccc:	defffe04 	addi	sp,sp,-8
10011cd0:	dfc00115 	stw	ra,4(sp)
10011cd4:	df000015 	stw	fp,0(sp)
10011cd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011cdc:	d0a01717 	ldw	r2,-32676(gp)
10011ce0:	10000326 	beq	r2,zero,10011cf0 <alt_get_errno+0x24>
10011ce4:	d0a01717 	ldw	r2,-32676(gp)
10011ce8:	103ee83a 	callr	r2
10011cec:	00000106 	br	10011cf4 <alt_get_errno+0x28>
10011cf0:	d0a6eb04 	addi	r2,gp,-25684
}
10011cf4:	e037883a 	mov	sp,fp
10011cf8:	dfc00117 	ldw	ra,4(sp)
10011cfc:	df000017 	ldw	fp,0(sp)
10011d00:	dec00204 	addi	sp,sp,8
10011d04:	f800283a 	ret

10011d08 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10011d08:	defffb04 	addi	sp,sp,-20
10011d0c:	dfc00415 	stw	ra,16(sp)
10011d10:	df000315 	stw	fp,12(sp)
10011d14:	df000304 	addi	fp,sp,12
10011d18:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10011d1c:	e0bfff17 	ldw	r2,-4(fp)
10011d20:	10000816 	blt	r2,zero,10011d44 <close+0x3c>
10011d24:	01400304 	movi	r5,12
10011d28:	e13fff17 	ldw	r4,-4(fp)
10011d2c:	00045280 	call	10004528 <__mulsi3>
10011d30:	1007883a 	mov	r3,r2
10011d34:	00840074 	movhi	r2,4097
10011d38:	10972004 	addi	r2,r2,23680
10011d3c:	1885883a 	add	r2,r3,r2
10011d40:	00000106 	br	10011d48 <close+0x40>
10011d44:	0005883a 	mov	r2,zero
10011d48:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10011d4c:	e0bffd17 	ldw	r2,-12(fp)
10011d50:	10001926 	beq	r2,zero,10011db8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10011d54:	e0bffd17 	ldw	r2,-12(fp)
10011d58:	10800017 	ldw	r2,0(r2)
10011d5c:	10800417 	ldw	r2,16(r2)
10011d60:	10000626 	beq	r2,zero,10011d7c <close+0x74>
10011d64:	e0bffd17 	ldw	r2,-12(fp)
10011d68:	10800017 	ldw	r2,0(r2)
10011d6c:	10800417 	ldw	r2,16(r2)
10011d70:	e13ffd17 	ldw	r4,-12(fp)
10011d74:	103ee83a 	callr	r2
10011d78:	00000106 	br	10011d80 <close+0x78>
10011d7c:	0005883a 	mov	r2,zero
10011d80:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10011d84:	e13fff17 	ldw	r4,-4(fp)
10011d88:	00125b00 	call	100125b0 <alt_release_fd>
    if (rval < 0)
10011d8c:	e0bffe17 	ldw	r2,-8(fp)
10011d90:	1000070e 	bge	r2,zero,10011db0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
10011d94:	0011ccc0 	call	10011ccc <alt_get_errno>
10011d98:	1007883a 	mov	r3,r2
10011d9c:	e0bffe17 	ldw	r2,-8(fp)
10011da0:	0085c83a 	sub	r2,zero,r2
10011da4:	18800015 	stw	r2,0(r3)
      return -1;
10011da8:	00bfffc4 	movi	r2,-1
10011dac:	00000706 	br	10011dcc <close+0xc4>
    }
    return 0;
10011db0:	0005883a 	mov	r2,zero
10011db4:	00000506 	br	10011dcc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10011db8:	0011ccc0 	call	10011ccc <alt_get_errno>
10011dbc:	1007883a 	mov	r3,r2
10011dc0:	00801444 	movi	r2,81
10011dc4:	18800015 	stw	r2,0(r3)
    return -1;
10011dc8:	00bfffc4 	movi	r2,-1
  }
}
10011dcc:	e037883a 	mov	sp,fp
10011dd0:	dfc00117 	ldw	ra,4(sp)
10011dd4:	df000017 	ldw	fp,0(sp)
10011dd8:	dec00204 	addi	sp,sp,8
10011ddc:	f800283a 	ret

10011de0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10011de0:	defffc04 	addi	sp,sp,-16
10011de4:	df000315 	stw	fp,12(sp)
10011de8:	df000304 	addi	fp,sp,12
10011dec:	e13ffd15 	stw	r4,-12(fp)
10011df0:	e17ffe15 	stw	r5,-8(fp)
10011df4:	e1bfff15 	stw	r6,-4(fp)
  return len;
10011df8:	e0bfff17 	ldw	r2,-4(fp)
}
10011dfc:	e037883a 	mov	sp,fp
10011e00:	df000017 	ldw	fp,0(sp)
10011e04:	dec00104 	addi	sp,sp,4
10011e08:	f800283a 	ret

10011e0c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10011e0c:	defffd04 	addi	sp,sp,-12
10011e10:	df000215 	stw	fp,8(sp)
10011e14:	df000204 	addi	fp,sp,8
10011e18:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10011e1c:	0001883a 	nop
10011e20:	e0bfff17 	ldw	r2,-4(fp)
10011e24:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10011e28:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10011e2c:	10000226 	beq	r2,zero,10011e38 <_exit+0x2c>
    ALT_SIM_FAIL();
10011e30:	002af070 	cmpltui	zero,zero,43969
10011e34:	00000106 	br	10011e3c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10011e38:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10011e3c:	003fff06 	br	10011e3c <__alt_data_end+0xf8011e3c>

10011e40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011e40:	defffe04 	addi	sp,sp,-8
10011e44:	dfc00115 	stw	ra,4(sp)
10011e48:	df000015 	stw	fp,0(sp)
10011e4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011e50:	d0a01717 	ldw	r2,-32676(gp)
10011e54:	10000326 	beq	r2,zero,10011e64 <alt_get_errno+0x24>
10011e58:	d0a01717 	ldw	r2,-32676(gp)
10011e5c:	103ee83a 	callr	r2
10011e60:	00000106 	br	10011e68 <alt_get_errno+0x28>
10011e64:	d0a6eb04 	addi	r2,gp,-25684
}
10011e68:	e037883a 	mov	sp,fp
10011e6c:	dfc00117 	ldw	ra,4(sp)
10011e70:	df000017 	ldw	fp,0(sp)
10011e74:	dec00204 	addi	sp,sp,8
10011e78:	f800283a 	ret

10011e7c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10011e7c:	defffb04 	addi	sp,sp,-20
10011e80:	dfc00415 	stw	ra,16(sp)
10011e84:	df000315 	stw	fp,12(sp)
10011e88:	df000304 	addi	fp,sp,12
10011e8c:	e13ffe15 	stw	r4,-8(fp)
10011e90:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011e94:	e0bffe17 	ldw	r2,-8(fp)
10011e98:	10000816 	blt	r2,zero,10011ebc <fstat+0x40>
10011e9c:	01400304 	movi	r5,12
10011ea0:	e13ffe17 	ldw	r4,-8(fp)
10011ea4:	00045280 	call	10004528 <__mulsi3>
10011ea8:	1007883a 	mov	r3,r2
10011eac:	00840074 	movhi	r2,4097
10011eb0:	10972004 	addi	r2,r2,23680
10011eb4:	1885883a 	add	r2,r3,r2
10011eb8:	00000106 	br	10011ec0 <fstat+0x44>
10011ebc:	0005883a 	mov	r2,zero
10011ec0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10011ec4:	e0bffd17 	ldw	r2,-12(fp)
10011ec8:	10001026 	beq	r2,zero,10011f0c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10011ecc:	e0bffd17 	ldw	r2,-12(fp)
10011ed0:	10800017 	ldw	r2,0(r2)
10011ed4:	10800817 	ldw	r2,32(r2)
10011ed8:	10000726 	beq	r2,zero,10011ef8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10011edc:	e0bffd17 	ldw	r2,-12(fp)
10011ee0:	10800017 	ldw	r2,0(r2)
10011ee4:	10800817 	ldw	r2,32(r2)
10011ee8:	e17fff17 	ldw	r5,-4(fp)
10011eec:	e13ffd17 	ldw	r4,-12(fp)
10011ef0:	103ee83a 	callr	r2
10011ef4:	00000a06 	br	10011f20 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10011ef8:	e0bfff17 	ldw	r2,-4(fp)
10011efc:	00c80004 	movi	r3,8192
10011f00:	10c00115 	stw	r3,4(r2)
      return 0;
10011f04:	0005883a 	mov	r2,zero
10011f08:	00000506 	br	10011f20 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10011f0c:	0011e400 	call	10011e40 <alt_get_errno>
10011f10:	1007883a 	mov	r3,r2
10011f14:	00801444 	movi	r2,81
10011f18:	18800015 	stw	r2,0(r3)
    return -1;
10011f1c:	00bfffc4 	movi	r2,-1
  }
}
10011f20:	e037883a 	mov	sp,fp
10011f24:	dfc00117 	ldw	ra,4(sp)
10011f28:	df000017 	ldw	fp,0(sp)
10011f2c:	dec00204 	addi	sp,sp,8
10011f30:	f800283a 	ret

10011f34 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
10011f34:	deffff04 	addi	sp,sp,-4
10011f38:	df000015 	stw	fp,0(sp)
10011f3c:	d839883a 	mov	fp,sp
  return 0;
10011f40:	0005883a 	mov	r2,zero
}
10011f44:	e037883a 	mov	sp,fp
10011f48:	df000017 	ldw	fp,0(sp)
10011f4c:	dec00104 	addi	sp,sp,4
10011f50:	f800283a 	ret

10011f54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011f54:	defffe04 	addi	sp,sp,-8
10011f58:	dfc00115 	stw	ra,4(sp)
10011f5c:	df000015 	stw	fp,0(sp)
10011f60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011f64:	d0a01717 	ldw	r2,-32676(gp)
10011f68:	10000326 	beq	r2,zero,10011f78 <alt_get_errno+0x24>
10011f6c:	d0a01717 	ldw	r2,-32676(gp)
10011f70:	103ee83a 	callr	r2
10011f74:	00000106 	br	10011f7c <alt_get_errno+0x28>
10011f78:	d0a6eb04 	addi	r2,gp,-25684
}
10011f7c:	e037883a 	mov	sp,fp
10011f80:	dfc00117 	ldw	ra,4(sp)
10011f84:	df000017 	ldw	fp,0(sp)
10011f88:	dec00204 	addi	sp,sp,8
10011f8c:	f800283a 	ret

10011f90 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10011f90:	deffed04 	addi	sp,sp,-76
10011f94:	dfc01215 	stw	ra,72(sp)
10011f98:	df001115 	stw	fp,68(sp)
10011f9c:	df001104 	addi	fp,sp,68
10011fa0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011fa4:	e0bfff17 	ldw	r2,-4(fp)
10011fa8:	10000816 	blt	r2,zero,10011fcc <isatty+0x3c>
10011fac:	01400304 	movi	r5,12
10011fb0:	e13fff17 	ldw	r4,-4(fp)
10011fb4:	00045280 	call	10004528 <__mulsi3>
10011fb8:	1007883a 	mov	r3,r2
10011fbc:	00840074 	movhi	r2,4097
10011fc0:	10972004 	addi	r2,r2,23680
10011fc4:	1885883a 	add	r2,r3,r2
10011fc8:	00000106 	br	10011fd0 <isatty+0x40>
10011fcc:	0005883a 	mov	r2,zero
10011fd0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10011fd4:	e0bfef17 	ldw	r2,-68(fp)
10011fd8:	10000e26 	beq	r2,zero,10012014 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10011fdc:	e0bfef17 	ldw	r2,-68(fp)
10011fe0:	10800017 	ldw	r2,0(r2)
10011fe4:	10800817 	ldw	r2,32(r2)
10011fe8:	1000021e 	bne	r2,zero,10011ff4 <isatty+0x64>
    {
      return 1;
10011fec:	00800044 	movi	r2,1
10011ff0:	00000d06 	br	10012028 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10011ff4:	e0bff004 	addi	r2,fp,-64
10011ff8:	100b883a 	mov	r5,r2
10011ffc:	e13fff17 	ldw	r4,-4(fp)
10012000:	0011e7c0 	call	10011e7c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10012004:	e0bff117 	ldw	r2,-60(fp)
10012008:	10880020 	cmpeqi	r2,r2,8192
1001200c:	10803fcc 	andi	r2,r2,255
10012010:	00000506 	br	10012028 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10012014:	0011f540 	call	10011f54 <alt_get_errno>
10012018:	1007883a 	mov	r3,r2
1001201c:	00801444 	movi	r2,81
10012020:	18800015 	stw	r2,0(r3)
    return 0;
10012024:	0005883a 	mov	r2,zero
  }
}
10012028:	e037883a 	mov	sp,fp
1001202c:	dfc00117 	ldw	ra,4(sp)
10012030:	df000017 	ldw	fp,0(sp)
10012034:	dec00204 	addi	sp,sp,8
10012038:	f800283a 	ret

1001203c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001203c:	defffe04 	addi	sp,sp,-8
10012040:	dfc00115 	stw	ra,4(sp)
10012044:	df000015 	stw	fp,0(sp)
10012048:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001204c:	d0a01717 	ldw	r2,-32676(gp)
10012050:	10000326 	beq	r2,zero,10012060 <alt_get_errno+0x24>
10012054:	d0a01717 	ldw	r2,-32676(gp)
10012058:	103ee83a 	callr	r2
1001205c:	00000106 	br	10012064 <alt_get_errno+0x28>
10012060:	d0a6eb04 	addi	r2,gp,-25684
}
10012064:	e037883a 	mov	sp,fp
10012068:	dfc00117 	ldw	ra,4(sp)
1001206c:	df000017 	ldw	fp,0(sp)
10012070:	dec00204 	addi	sp,sp,8
10012074:	f800283a 	ret

10012078 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
10012078:	defffb04 	addi	sp,sp,-20
1001207c:	dfc00415 	stw	ra,16(sp)
10012080:	df000315 	stw	fp,12(sp)
10012084:	df000304 	addi	fp,sp,12
10012088:	e13ffe15 	stw	r4,-8(fp)
1001208c:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
10012090:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
10012094:	e0bffe17 	ldw	r2,-8(fp)
10012098:	00802f16 	blt	zero,r2,10012158 <kill+0xe0>
  {
    switch (sig)
1001209c:	e0bfff17 	ldw	r2,-4(fp)
100120a0:	10800828 	cmpgeui	r2,r2,32
100120a4:	1000291e 	bne	r2,zero,1001214c <kill+0xd4>
100120a8:	e0bfff17 	ldw	r2,-4(fp)
100120ac:	100690ba 	slli	r3,r2,2
100120b0:	00840074 	movhi	r2,4097
100120b4:	10883104 	addi	r2,r2,8388
100120b8:	1885883a 	add	r2,r3,r2
100120bc:	10800017 	ldw	r2,0(r2)
100120c0:	1000683a 	jmp	r2
100120c4:	1001216c 	andhi	zero,r2,1157
100120c8:	1001214c 	andi	zero,r2,1157
100120cc:	1001214c 	andi	zero,r2,1157
100120d0:	10012144 	addi	zero,r2,1157
100120d4:	10012144 	addi	zero,r2,1157
100120d8:	10012144 	addi	zero,r2,1157
100120dc:	10012144 	addi	zero,r2,1157
100120e0:	1001214c 	andi	zero,r2,1157
100120e4:	10012144 	addi	zero,r2,1157
100120e8:	10012144 	addi	zero,r2,1157
100120ec:	10012144 	addi	zero,r2,1157
100120f0:	10012144 	addi	zero,r2,1157
100120f4:	10012144 	addi	zero,r2,1157
100120f8:	10012144 	addi	zero,r2,1157
100120fc:	10012144 	addi	zero,r2,1157
10012100:	10012144 	addi	zero,r2,1157
10012104:	1001216c 	andhi	zero,r2,1157
10012108:	1001214c 	andi	zero,r2,1157
1001210c:	1001214c 	andi	zero,r2,1157
10012110:	1001214c 	andi	zero,r2,1157
10012114:	1001216c 	andhi	zero,r2,1157
10012118:	1001214c 	andi	zero,r2,1157
1001211c:	1001214c 	andi	zero,r2,1157
10012120:	10012144 	addi	zero,r2,1157
10012124:	10012144 	addi	zero,r2,1157
10012128:	10012144 	addi	zero,r2,1157
1001212c:	10012144 	addi	zero,r2,1157
10012130:	10012144 	addi	zero,r2,1157
10012134:	1001214c 	andi	zero,r2,1157
10012138:	1001214c 	andi	zero,r2,1157
1001213c:	10012144 	addi	zero,r2,1157
10012140:	10012144 	addi	zero,r2,1157
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
10012144:	0009883a 	mov	r4,zero
10012148:	0011e0c0 	call	10011e0c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
1001214c:	00800584 	movi	r2,22
10012150:	e0bffd15 	stw	r2,-12(fp)
10012154:	00000606 	br	10012170 <kill+0xf8>
    }
  }

  else if (pid > 0)
10012158:	e0bffe17 	ldw	r2,-8(fp)
1001215c:	0080040e 	bge	zero,r2,10012170 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
10012160:	008000c4 	movi	r2,3
10012164:	e0bffd15 	stw	r2,-12(fp)
10012168:	00000106 	br	10012170 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
1001216c:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
10012170:	e0bffd17 	ldw	r2,-12(fp)
10012174:	10000626 	beq	r2,zero,10012190 <kill+0x118>
  {
    ALT_ERRNO = status;
10012178:	001203c0 	call	1001203c <alt_get_errno>
1001217c:	1007883a 	mov	r3,r2
10012180:	e0bffd17 	ldw	r2,-12(fp)
10012184:	18800015 	stw	r2,0(r3)
    return -1;
10012188:	00bfffc4 	movi	r2,-1
1001218c:	00000106 	br	10012194 <kill+0x11c>
  }

  return 0;
10012190:	0005883a 	mov	r2,zero
}
10012194:	e037883a 	mov	sp,fp
10012198:	dfc00117 	ldw	ra,4(sp)
1001219c:	df000017 	ldw	fp,0(sp)
100121a0:	dec00204 	addi	sp,sp,8
100121a4:	f800283a 	ret

100121a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
100121a8:	defffc04 	addi	sp,sp,-16
100121ac:	df000315 	stw	fp,12(sp)
100121b0:	df000304 	addi	fp,sp,12
100121b4:	e13ffd15 	stw	r4,-12(fp)
100121b8:	e17ffe15 	stw	r5,-8(fp)
100121bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
100121c0:	e0fffe17 	ldw	r3,-8(fp)
100121c4:	e0bffd17 	ldw	r2,-12(fp)
100121c8:	18800c26 	beq	r3,r2,100121fc <alt_load_section+0x54>
  {
    while( to != end )
100121cc:	00000806 	br	100121f0 <alt_load_section+0x48>
    {
      *to++ = *from++;
100121d0:	e0bffe17 	ldw	r2,-8(fp)
100121d4:	10c00104 	addi	r3,r2,4
100121d8:	e0fffe15 	stw	r3,-8(fp)
100121dc:	e0fffd17 	ldw	r3,-12(fp)
100121e0:	19000104 	addi	r4,r3,4
100121e4:	e13ffd15 	stw	r4,-12(fp)
100121e8:	18c00017 	ldw	r3,0(r3)
100121ec:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
100121f0:	e0fffe17 	ldw	r3,-8(fp)
100121f4:	e0bfff17 	ldw	r2,-4(fp)
100121f8:	18bff51e 	bne	r3,r2,100121d0 <__alt_data_end+0xf80121d0>
    {
      *to++ = *from++;
    }
  }
}
100121fc:	0001883a 	nop
10012200:	e037883a 	mov	sp,fp
10012204:	df000017 	ldw	fp,0(sp)
10012208:	dec00104 	addi	sp,sp,4
1001220c:	f800283a 	ret

10012210 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10012210:	defffe04 	addi	sp,sp,-8
10012214:	dfc00115 	stw	ra,4(sp)
10012218:	df000015 	stw	fp,0(sp)
1001221c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10012220:	01840074 	movhi	r6,4097
10012224:	319bb404 	addi	r6,r6,28368
10012228:	01440074 	movhi	r5,4097
1001222c:	2954ed04 	addi	r5,r5,21428
10012230:	01040074 	movhi	r4,4097
10012234:	211bb404 	addi	r4,r4,28368
10012238:	00121a80 	call	100121a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1001223c:	01840034 	movhi	r6,4096
10012240:	31808c04 	addi	r6,r6,560
10012244:	01440034 	movhi	r5,4096
10012248:	29400804 	addi	r5,r5,32
1001224c:	01040034 	movhi	r4,4096
10012250:	21000804 	addi	r4,r4,32
10012254:	00121a80 	call	100121a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10012258:	01840074 	movhi	r6,4097
1001225c:	3194ed04 	addi	r6,r6,21428
10012260:	01440074 	movhi	r5,4097
10012264:	2951b204 	addi	r5,r5,18120
10012268:	01040074 	movhi	r4,4097
1001226c:	2111b204 	addi	r4,r4,18120
10012270:	00121a80 	call	100121a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10012274:	00135f40 	call	100135f4 <alt_dcache_flush_all>
  alt_icache_flush_all();
10012278:	00137b40 	call	100137b4 <alt_icache_flush_all>
}
1001227c:	0001883a 	nop
10012280:	e037883a 	mov	sp,fp
10012284:	dfc00117 	ldw	ra,4(sp)
10012288:	df000017 	ldw	fp,0(sp)
1001228c:	dec00204 	addi	sp,sp,8
10012290:	f800283a 	ret

10012294 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10012294:	defffe04 	addi	sp,sp,-8
10012298:	dfc00115 	stw	ra,4(sp)
1001229c:	df000015 	stw	fp,0(sp)
100122a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100122a4:	d0a01717 	ldw	r2,-32676(gp)
100122a8:	10000326 	beq	r2,zero,100122b8 <alt_get_errno+0x24>
100122ac:	d0a01717 	ldw	r2,-32676(gp)
100122b0:	103ee83a 	callr	r2
100122b4:	00000106 	br	100122bc <alt_get_errno+0x28>
100122b8:	d0a6eb04 	addi	r2,gp,-25684
}
100122bc:	e037883a 	mov	sp,fp
100122c0:	dfc00117 	ldw	ra,4(sp)
100122c4:	df000017 	ldw	fp,0(sp)
100122c8:	dec00204 	addi	sp,sp,8
100122cc:	f800283a 	ret

100122d0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
100122d0:	defff904 	addi	sp,sp,-28
100122d4:	dfc00615 	stw	ra,24(sp)
100122d8:	df000515 	stw	fp,20(sp)
100122dc:	df000504 	addi	fp,sp,20
100122e0:	e13ffd15 	stw	r4,-12(fp)
100122e4:	e17ffe15 	stw	r5,-8(fp)
100122e8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
100122ec:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100122f0:	e0bffd17 	ldw	r2,-12(fp)
100122f4:	10000816 	blt	r2,zero,10012318 <lseek+0x48>
100122f8:	01400304 	movi	r5,12
100122fc:	e13ffd17 	ldw	r4,-12(fp)
10012300:	00045280 	call	10004528 <__mulsi3>
10012304:	1007883a 	mov	r3,r2
10012308:	00840074 	movhi	r2,4097
1001230c:	10972004 	addi	r2,r2,23680
10012310:	1885883a 	add	r2,r3,r2
10012314:	00000106 	br	1001231c <lseek+0x4c>
10012318:	0005883a 	mov	r2,zero
1001231c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10012320:	e0bffc17 	ldw	r2,-16(fp)
10012324:	10001026 	beq	r2,zero,10012368 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10012328:	e0bffc17 	ldw	r2,-16(fp)
1001232c:	10800017 	ldw	r2,0(r2)
10012330:	10800717 	ldw	r2,28(r2)
10012334:	10000926 	beq	r2,zero,1001235c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10012338:	e0bffc17 	ldw	r2,-16(fp)
1001233c:	10800017 	ldw	r2,0(r2)
10012340:	10800717 	ldw	r2,28(r2)
10012344:	e1bfff17 	ldw	r6,-4(fp)
10012348:	e17ffe17 	ldw	r5,-8(fp)
1001234c:	e13ffc17 	ldw	r4,-16(fp)
10012350:	103ee83a 	callr	r2
10012354:	e0bffb15 	stw	r2,-20(fp)
10012358:	00000506 	br	10012370 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1001235c:	00bfde84 	movi	r2,-134
10012360:	e0bffb15 	stw	r2,-20(fp)
10012364:	00000206 	br	10012370 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10012368:	00bfebc4 	movi	r2,-81
1001236c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10012370:	e0bffb17 	ldw	r2,-20(fp)
10012374:	1000070e 	bge	r2,zero,10012394 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10012378:	00122940 	call	10012294 <alt_get_errno>
1001237c:	1007883a 	mov	r3,r2
10012380:	e0bffb17 	ldw	r2,-20(fp)
10012384:	0085c83a 	sub	r2,zero,r2
10012388:	18800015 	stw	r2,0(r3)
    rc = -1;
1001238c:	00bfffc4 	movi	r2,-1
10012390:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10012394:	e0bffb17 	ldw	r2,-20(fp)
}
10012398:	e037883a 	mov	sp,fp
1001239c:	dfc00117 	ldw	ra,4(sp)
100123a0:	df000017 	ldw	fp,0(sp)
100123a4:	dec00204 	addi	sp,sp,8
100123a8:	f800283a 	ret

100123ac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
100123ac:	defffd04 	addi	sp,sp,-12
100123b0:	dfc00215 	stw	ra,8(sp)
100123b4:	df000115 	stw	fp,4(sp)
100123b8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
100123bc:	0009883a 	mov	r4,zero
100123c0:	00128840 	call	10012884 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
100123c4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
100123c8:	00128bc0 	call	100128bc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
100123cc:	01840074 	movhi	r6,4097
100123d0:	3194e304 	addi	r6,r6,21388
100123d4:	01440074 	movhi	r5,4097
100123d8:	2954e304 	addi	r5,r5,21388
100123dc:	01040074 	movhi	r4,4097
100123e0:	2114e304 	addi	r4,r4,21388
100123e4:	0013b580 	call	10013b58 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
100123e8:	00136f40 	call	100136f4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
100123ec:	01040074 	movhi	r4,4097
100123f0:	210dd504 	addi	r4,r4,14164
100123f4:	00143180 	call	10014318 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
100123f8:	d0a6ef17 	ldw	r2,-25668(gp)
100123fc:	d0e6f017 	ldw	r3,-25664(gp)
10012400:	d126f117 	ldw	r4,-25660(gp)
10012404:	200d883a 	mov	r6,r4
10012408:	180b883a 	mov	r5,r3
1001240c:	1009883a 	mov	r4,r2
10012410:	00006280 	call	10000628 <main>
10012414:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10012418:	01000044 	movi	r4,1
1001241c:	0011d080 	call	10011d08 <close>
  exit (result);
10012420:	e13fff17 	ldw	r4,-4(fp)
10012424:	001432c0 	call	1001432c <exit>

10012428 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10012428:	defffe04 	addi	sp,sp,-8
1001242c:	df000115 	stw	fp,4(sp)
10012430:	df000104 	addi	fp,sp,4
10012434:	e13fff15 	stw	r4,-4(fp)
}
10012438:	0001883a 	nop
1001243c:	e037883a 	mov	sp,fp
10012440:	df000017 	ldw	fp,0(sp)
10012444:	dec00104 	addi	sp,sp,4
10012448:	f800283a 	ret

1001244c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1001244c:	defffe04 	addi	sp,sp,-8
10012450:	df000115 	stw	fp,4(sp)
10012454:	df000104 	addi	fp,sp,4
10012458:	e13fff15 	stw	r4,-4(fp)
}
1001245c:	0001883a 	nop
10012460:	e037883a 	mov	sp,fp
10012464:	df000017 	ldw	fp,0(sp)
10012468:	dec00104 	addi	sp,sp,4
1001246c:	f800283a 	ret

10012470 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10012470:	defffe04 	addi	sp,sp,-8
10012474:	dfc00115 	stw	ra,4(sp)
10012478:	df000015 	stw	fp,0(sp)
1001247c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10012480:	d0a01717 	ldw	r2,-32676(gp)
10012484:	10000326 	beq	r2,zero,10012494 <alt_get_errno+0x24>
10012488:	d0a01717 	ldw	r2,-32676(gp)
1001248c:	103ee83a 	callr	r2
10012490:	00000106 	br	10012498 <alt_get_errno+0x28>
10012494:	d0a6eb04 	addi	r2,gp,-25684
}
10012498:	e037883a 	mov	sp,fp
1001249c:	dfc00117 	ldw	ra,4(sp)
100124a0:	df000017 	ldw	fp,0(sp)
100124a4:	dec00204 	addi	sp,sp,8
100124a8:	f800283a 	ret

100124ac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
100124ac:	defff904 	addi	sp,sp,-28
100124b0:	dfc00615 	stw	ra,24(sp)
100124b4:	df000515 	stw	fp,20(sp)
100124b8:	df000504 	addi	fp,sp,20
100124bc:	e13ffd15 	stw	r4,-12(fp)
100124c0:	e17ffe15 	stw	r5,-8(fp)
100124c4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100124c8:	e0bffd17 	ldw	r2,-12(fp)
100124cc:	10000816 	blt	r2,zero,100124f0 <read+0x44>
100124d0:	01400304 	movi	r5,12
100124d4:	e13ffd17 	ldw	r4,-12(fp)
100124d8:	00045280 	call	10004528 <__mulsi3>
100124dc:	1007883a 	mov	r3,r2
100124e0:	00840074 	movhi	r2,4097
100124e4:	10972004 	addi	r2,r2,23680
100124e8:	1885883a 	add	r2,r3,r2
100124ec:	00000106 	br	100124f4 <read+0x48>
100124f0:	0005883a 	mov	r2,zero
100124f4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
100124f8:	e0bffb17 	ldw	r2,-20(fp)
100124fc:	10002226 	beq	r2,zero,10012588 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10012500:	e0bffb17 	ldw	r2,-20(fp)
10012504:	10800217 	ldw	r2,8(r2)
10012508:	108000cc 	andi	r2,r2,3
1001250c:	10800060 	cmpeqi	r2,r2,1
10012510:	1000181e 	bne	r2,zero,10012574 <read+0xc8>
        (fd->dev->read))
10012514:	e0bffb17 	ldw	r2,-20(fp)
10012518:	10800017 	ldw	r2,0(r2)
1001251c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10012520:	10001426 	beq	r2,zero,10012574 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10012524:	e0bffb17 	ldw	r2,-20(fp)
10012528:	10800017 	ldw	r2,0(r2)
1001252c:	10800517 	ldw	r2,20(r2)
10012530:	e0ffff17 	ldw	r3,-4(fp)
10012534:	180d883a 	mov	r6,r3
10012538:	e17ffe17 	ldw	r5,-8(fp)
1001253c:	e13ffb17 	ldw	r4,-20(fp)
10012540:	103ee83a 	callr	r2
10012544:	e0bffc15 	stw	r2,-16(fp)
10012548:	e0bffc17 	ldw	r2,-16(fp)
1001254c:	1000070e 	bge	r2,zero,1001256c <read+0xc0>
        {
          ALT_ERRNO = -rval;
10012550:	00124700 	call	10012470 <alt_get_errno>
10012554:	1007883a 	mov	r3,r2
10012558:	e0bffc17 	ldw	r2,-16(fp)
1001255c:	0085c83a 	sub	r2,zero,r2
10012560:	18800015 	stw	r2,0(r3)
          return -1;
10012564:	00bfffc4 	movi	r2,-1
10012568:	00000c06 	br	1001259c <read+0xf0>
        }
        return rval;
1001256c:	e0bffc17 	ldw	r2,-16(fp)
10012570:	00000a06 	br	1001259c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10012574:	00124700 	call	10012470 <alt_get_errno>
10012578:	1007883a 	mov	r3,r2
1001257c:	00800344 	movi	r2,13
10012580:	18800015 	stw	r2,0(r3)
10012584:	00000406 	br	10012598 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10012588:	00124700 	call	10012470 <alt_get_errno>
1001258c:	1007883a 	mov	r3,r2
10012590:	00801444 	movi	r2,81
10012594:	18800015 	stw	r2,0(r3)
  }
  return -1;
10012598:	00bfffc4 	movi	r2,-1
}
1001259c:	e037883a 	mov	sp,fp
100125a0:	dfc00117 	ldw	ra,4(sp)
100125a4:	df000017 	ldw	fp,0(sp)
100125a8:	dec00204 	addi	sp,sp,8
100125ac:	f800283a 	ret

100125b0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
100125b0:	defffc04 	addi	sp,sp,-16
100125b4:	dfc00315 	stw	ra,12(sp)
100125b8:	df000215 	stw	fp,8(sp)
100125bc:	dc000115 	stw	r16,4(sp)
100125c0:	df000204 	addi	fp,sp,8
100125c4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
100125c8:	e0bffe17 	ldw	r2,-8(fp)
100125cc:	108000d0 	cmplti	r2,r2,3
100125d0:	1000111e 	bne	r2,zero,10012618 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
100125d4:	04040074 	movhi	r16,4097
100125d8:	84172004 	addi	r16,r16,23680
100125dc:	e0bffe17 	ldw	r2,-8(fp)
100125e0:	01400304 	movi	r5,12
100125e4:	1009883a 	mov	r4,r2
100125e8:	00045280 	call	10004528 <__mulsi3>
100125ec:	8085883a 	add	r2,r16,r2
100125f0:	10800204 	addi	r2,r2,8
100125f4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
100125f8:	04040074 	movhi	r16,4097
100125fc:	84172004 	addi	r16,r16,23680
10012600:	e0bffe17 	ldw	r2,-8(fp)
10012604:	01400304 	movi	r5,12
10012608:	1009883a 	mov	r4,r2
1001260c:	00045280 	call	10004528 <__mulsi3>
10012610:	8085883a 	add	r2,r16,r2
10012614:	10000015 	stw	zero,0(r2)
  }
}
10012618:	0001883a 	nop
1001261c:	e6ffff04 	addi	sp,fp,-4
10012620:	dfc00217 	ldw	ra,8(sp)
10012624:	df000117 	ldw	fp,4(sp)
10012628:	dc000017 	ldw	r16,0(sp)
1001262c:	dec00304 	addi	sp,sp,12
10012630:	f800283a 	ret

10012634 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10012634:	defff904 	addi	sp,sp,-28
10012638:	df000615 	stw	fp,24(sp)
1001263c:	df000604 	addi	fp,sp,24
10012640:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012644:	0005303a 	rdctl	r2,status
10012648:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001264c:	e0fffe17 	ldw	r3,-8(fp)
10012650:	00bfff84 	movi	r2,-2
10012654:	1884703a 	and	r2,r3,r2
10012658:	1001703a 	wrctl	status,r2
  
  return context;
1001265c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10012660:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10012664:	d0a01817 	ldw	r2,-32672(gp)
10012668:	10c000c4 	addi	r3,r2,3
1001266c:	00bfff04 	movi	r2,-4
10012670:	1884703a 	and	r2,r3,r2
10012674:	d0a01815 	stw	r2,-32672(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10012678:	d0e01817 	ldw	r3,-32672(gp)
1001267c:	e0bfff17 	ldw	r2,-4(fp)
10012680:	1887883a 	add	r3,r3,r2
10012684:	00860034 	movhi	r2,6144
10012688:	10800004 	addi	r2,r2,0
1001268c:	10c0062e 	bgeu	r2,r3,100126a8 <sbrk+0x74>
10012690:	e0bffb17 	ldw	r2,-20(fp)
10012694:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012698:	e0bffa17 	ldw	r2,-24(fp)
1001269c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
100126a0:	00bfffc4 	movi	r2,-1
100126a4:	00000b06 	br	100126d4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
100126a8:	d0a01817 	ldw	r2,-32672(gp)
100126ac:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
100126b0:	d0e01817 	ldw	r3,-32672(gp)
100126b4:	e0bfff17 	ldw	r2,-4(fp)
100126b8:	1885883a 	add	r2,r3,r2
100126bc:	d0a01815 	stw	r2,-32672(gp)
100126c0:	e0bffb17 	ldw	r2,-20(fp)
100126c4:	e0bffc15 	stw	r2,-16(fp)
100126c8:	e0bffc17 	ldw	r2,-16(fp)
100126cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
100126d0:	e0bffd17 	ldw	r2,-12(fp)
} 
100126d4:	e037883a 	mov	sp,fp
100126d8:	df000017 	ldw	fp,0(sp)
100126dc:	dec00104 	addi	sp,sp,4
100126e0:	f800283a 	ret

100126e4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
100126e4:	defffd04 	addi	sp,sp,-12
100126e8:	dfc00215 	stw	ra,8(sp)
100126ec:	df000115 	stw	fp,4(sp)
100126f0:	df000104 	addi	fp,sp,4
100126f4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
100126f8:	e13fff17 	ldw	r4,-4(fp)
100126fc:	001349c0 	call	1001349c <alt_busy_sleep>
}
10012700:	e037883a 	mov	sp,fp
10012704:	dfc00117 	ldw	ra,4(sp)
10012708:	df000017 	ldw	fp,0(sp)
1001270c:	dec00204 	addi	sp,sp,8
10012710:	f800283a 	ret

10012714 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10012714:	defffe04 	addi	sp,sp,-8
10012718:	dfc00115 	stw	ra,4(sp)
1001271c:	df000015 	stw	fp,0(sp)
10012720:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10012724:	d0a01717 	ldw	r2,-32676(gp)
10012728:	10000326 	beq	r2,zero,10012738 <alt_get_errno+0x24>
1001272c:	d0a01717 	ldw	r2,-32676(gp)
10012730:	103ee83a 	callr	r2
10012734:	00000106 	br	1001273c <alt_get_errno+0x28>
10012738:	d0a6eb04 	addi	r2,gp,-25684
}
1001273c:	e037883a 	mov	sp,fp
10012740:	dfc00117 	ldw	ra,4(sp)
10012744:	df000017 	ldw	fp,0(sp)
10012748:	dec00204 	addi	sp,sp,8
1001274c:	f800283a 	ret

10012750 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10012750:	defff904 	addi	sp,sp,-28
10012754:	dfc00615 	stw	ra,24(sp)
10012758:	df000515 	stw	fp,20(sp)
1001275c:	df000504 	addi	fp,sp,20
10012760:	e13ffd15 	stw	r4,-12(fp)
10012764:	e17ffe15 	stw	r5,-8(fp)
10012768:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001276c:	e0bffd17 	ldw	r2,-12(fp)
10012770:	10000816 	blt	r2,zero,10012794 <write+0x44>
10012774:	01400304 	movi	r5,12
10012778:	e13ffd17 	ldw	r4,-12(fp)
1001277c:	00045280 	call	10004528 <__mulsi3>
10012780:	1007883a 	mov	r3,r2
10012784:	00840074 	movhi	r2,4097
10012788:	10972004 	addi	r2,r2,23680
1001278c:	1885883a 	add	r2,r3,r2
10012790:	00000106 	br	10012798 <write+0x48>
10012794:	0005883a 	mov	r2,zero
10012798:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1001279c:	e0bffb17 	ldw	r2,-20(fp)
100127a0:	10002126 	beq	r2,zero,10012828 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
100127a4:	e0bffb17 	ldw	r2,-20(fp)
100127a8:	10800217 	ldw	r2,8(r2)
100127ac:	108000cc 	andi	r2,r2,3
100127b0:	10001826 	beq	r2,zero,10012814 <write+0xc4>
100127b4:	e0bffb17 	ldw	r2,-20(fp)
100127b8:	10800017 	ldw	r2,0(r2)
100127bc:	10800617 	ldw	r2,24(r2)
100127c0:	10001426 	beq	r2,zero,10012814 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
100127c4:	e0bffb17 	ldw	r2,-20(fp)
100127c8:	10800017 	ldw	r2,0(r2)
100127cc:	10800617 	ldw	r2,24(r2)
100127d0:	e0ffff17 	ldw	r3,-4(fp)
100127d4:	180d883a 	mov	r6,r3
100127d8:	e17ffe17 	ldw	r5,-8(fp)
100127dc:	e13ffb17 	ldw	r4,-20(fp)
100127e0:	103ee83a 	callr	r2
100127e4:	e0bffc15 	stw	r2,-16(fp)
100127e8:	e0bffc17 	ldw	r2,-16(fp)
100127ec:	1000070e 	bge	r2,zero,1001280c <write+0xbc>
      {
        ALT_ERRNO = -rval;
100127f0:	00127140 	call	10012714 <alt_get_errno>
100127f4:	1007883a 	mov	r3,r2
100127f8:	e0bffc17 	ldw	r2,-16(fp)
100127fc:	0085c83a 	sub	r2,zero,r2
10012800:	18800015 	stw	r2,0(r3)
        return -1;
10012804:	00bfffc4 	movi	r2,-1
10012808:	00000c06 	br	1001283c <write+0xec>
      }
      return rval;
1001280c:	e0bffc17 	ldw	r2,-16(fp)
10012810:	00000a06 	br	1001283c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10012814:	00127140 	call	10012714 <alt_get_errno>
10012818:	1007883a 	mov	r3,r2
1001281c:	00800344 	movi	r2,13
10012820:	18800015 	stw	r2,0(r3)
10012824:	00000406 	br	10012838 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10012828:	00127140 	call	10012714 <alt_get_errno>
1001282c:	1007883a 	mov	r3,r2
10012830:	00801444 	movi	r2,81
10012834:	18800015 	stw	r2,0(r3)
  }
  return -1;
10012838:	00bfffc4 	movi	r2,-1
}
1001283c:	e037883a 	mov	sp,fp
10012840:	dfc00117 	ldw	ra,4(sp)
10012844:	df000017 	ldw	fp,0(sp)
10012848:	dec00204 	addi	sp,sp,8
1001284c:	f800283a 	ret

10012850 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10012850:	defffd04 	addi	sp,sp,-12
10012854:	dfc00215 	stw	ra,8(sp)
10012858:	df000115 	stw	fp,4(sp)
1001285c:	df000104 	addi	fp,sp,4
10012860:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10012864:	d1601404 	addi	r5,gp,-32688
10012868:	e13fff17 	ldw	r4,-4(fp)
1001286c:	00136500 	call	10013650 <alt_dev_llist_insert>
}
10012870:	e037883a 	mov	sp,fp
10012874:	dfc00117 	ldw	ra,4(sp)
10012878:	df000017 	ldw	fp,0(sp)
1001287c:	dec00204 	addi	sp,sp,8
10012880:	f800283a 	ret

10012884 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10012884:	defffd04 	addi	sp,sp,-12
10012888:	dfc00215 	stw	ra,8(sp)
1001288c:	df000115 	stw	fp,4(sp)
10012890:	df000104 	addi	fp,sp,4
10012894:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10012898:	0013ffc0 	call	10013ffc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1001289c:	00800044 	movi	r2,1
100128a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
100128a4:	0001883a 	nop
100128a8:	e037883a 	mov	sp,fp
100128ac:	dfc00117 	ldw	ra,4(sp)
100128b0:	df000017 	ldw	fp,0(sp)
100128b4:	dec00204 	addi	sp,sp,8
100128b8:	f800283a 	ret

100128bc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
100128bc:	defffe04 	addi	sp,sp,-8
100128c0:	dfc00115 	stw	ra,4(sp)
100128c4:	df000015 	stw	fp,0(sp)
100128c8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
100128cc:	01800144 	movi	r6,5
100128d0:	000b883a 	mov	r5,zero
100128d4:	01040074 	movhi	r4,4097
100128d8:	21178a04 	addi	r4,r4,24104
100128dc:	0012a6c0 	call	10012a6c <altera_avalon_jtag_uart_init>
100128e0:	01040074 	movhi	r4,4097
100128e4:	21178004 	addi	r4,r4,24064
100128e8:	00128500 	call	10012850 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
100128ec:	0001883a 	nop
}
100128f0:	0001883a 	nop
100128f4:	e037883a 	mov	sp,fp
100128f8:	dfc00117 	ldw	ra,4(sp)
100128fc:	df000017 	ldw	fp,0(sp)
10012900:	dec00204 	addi	sp,sp,8
10012904:	f800283a 	ret

10012908 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10012908:	defffa04 	addi	sp,sp,-24
1001290c:	dfc00515 	stw	ra,20(sp)
10012910:	df000415 	stw	fp,16(sp)
10012914:	df000404 	addi	fp,sp,16
10012918:	e13ffd15 	stw	r4,-12(fp)
1001291c:	e17ffe15 	stw	r5,-8(fp)
10012920:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10012924:	e0bffd17 	ldw	r2,-12(fp)
10012928:	10800017 	ldw	r2,0(r2)
1001292c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10012930:	e0bffc17 	ldw	r2,-16(fp)
10012934:	10c00a04 	addi	r3,r2,40
10012938:	e0bffd17 	ldw	r2,-12(fp)
1001293c:	10800217 	ldw	r2,8(r2)
10012940:	100f883a 	mov	r7,r2
10012944:	e1bfff17 	ldw	r6,-4(fp)
10012948:	e17ffe17 	ldw	r5,-8(fp)
1001294c:	1809883a 	mov	r4,r3
10012950:	0012f300 	call	10012f30 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10012954:	e037883a 	mov	sp,fp
10012958:	dfc00117 	ldw	ra,4(sp)
1001295c:	df000017 	ldw	fp,0(sp)
10012960:	dec00204 	addi	sp,sp,8
10012964:	f800283a 	ret

10012968 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10012968:	defffa04 	addi	sp,sp,-24
1001296c:	dfc00515 	stw	ra,20(sp)
10012970:	df000415 	stw	fp,16(sp)
10012974:	df000404 	addi	fp,sp,16
10012978:	e13ffd15 	stw	r4,-12(fp)
1001297c:	e17ffe15 	stw	r5,-8(fp)
10012980:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10012984:	e0bffd17 	ldw	r2,-12(fp)
10012988:	10800017 	ldw	r2,0(r2)
1001298c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10012990:	e0bffc17 	ldw	r2,-16(fp)
10012994:	10c00a04 	addi	r3,r2,40
10012998:	e0bffd17 	ldw	r2,-12(fp)
1001299c:	10800217 	ldw	r2,8(r2)
100129a0:	100f883a 	mov	r7,r2
100129a4:	e1bfff17 	ldw	r6,-4(fp)
100129a8:	e17ffe17 	ldw	r5,-8(fp)
100129ac:	1809883a 	mov	r4,r3
100129b0:	001314c0 	call	1001314c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
100129b4:	e037883a 	mov	sp,fp
100129b8:	dfc00117 	ldw	ra,4(sp)
100129bc:	df000017 	ldw	fp,0(sp)
100129c0:	dec00204 	addi	sp,sp,8
100129c4:	f800283a 	ret

100129c8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
100129c8:	defffc04 	addi	sp,sp,-16
100129cc:	dfc00315 	stw	ra,12(sp)
100129d0:	df000215 	stw	fp,8(sp)
100129d4:	df000204 	addi	fp,sp,8
100129d8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100129dc:	e0bfff17 	ldw	r2,-4(fp)
100129e0:	10800017 	ldw	r2,0(r2)
100129e4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
100129e8:	e0bffe17 	ldw	r2,-8(fp)
100129ec:	10c00a04 	addi	r3,r2,40
100129f0:	e0bfff17 	ldw	r2,-4(fp)
100129f4:	10800217 	ldw	r2,8(r2)
100129f8:	100b883a 	mov	r5,r2
100129fc:	1809883a 	mov	r4,r3
10012a00:	0012dd80 	call	10012dd8 <altera_avalon_jtag_uart_close>
}
10012a04:	e037883a 	mov	sp,fp
10012a08:	dfc00117 	ldw	ra,4(sp)
10012a0c:	df000017 	ldw	fp,0(sp)
10012a10:	dec00204 	addi	sp,sp,8
10012a14:	f800283a 	ret

10012a18 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10012a18:	defffa04 	addi	sp,sp,-24
10012a1c:	dfc00515 	stw	ra,20(sp)
10012a20:	df000415 	stw	fp,16(sp)
10012a24:	df000404 	addi	fp,sp,16
10012a28:	e13ffd15 	stw	r4,-12(fp)
10012a2c:	e17ffe15 	stw	r5,-8(fp)
10012a30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10012a34:	e0bffd17 	ldw	r2,-12(fp)
10012a38:	10800017 	ldw	r2,0(r2)
10012a3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10012a40:	e0bffc17 	ldw	r2,-16(fp)
10012a44:	10800a04 	addi	r2,r2,40
10012a48:	e1bfff17 	ldw	r6,-4(fp)
10012a4c:	e17ffe17 	ldw	r5,-8(fp)
10012a50:	1009883a 	mov	r4,r2
10012a54:	0012e400 	call	10012e40 <altera_avalon_jtag_uart_ioctl>
}
10012a58:	e037883a 	mov	sp,fp
10012a5c:	dfc00117 	ldw	ra,4(sp)
10012a60:	df000017 	ldw	fp,0(sp)
10012a64:	dec00204 	addi	sp,sp,8
10012a68:	f800283a 	ret

10012a6c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10012a6c:	defffa04 	addi	sp,sp,-24
10012a70:	dfc00515 	stw	ra,20(sp)
10012a74:	df000415 	stw	fp,16(sp)
10012a78:	df000404 	addi	fp,sp,16
10012a7c:	e13ffd15 	stw	r4,-12(fp)
10012a80:	e17ffe15 	stw	r5,-8(fp)
10012a84:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10012a88:	e0bffd17 	ldw	r2,-12(fp)
10012a8c:	00c00044 	movi	r3,1
10012a90:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10012a94:	e0bffd17 	ldw	r2,-12(fp)
10012a98:	10800017 	ldw	r2,0(r2)
10012a9c:	10800104 	addi	r2,r2,4
10012aa0:	1007883a 	mov	r3,r2
10012aa4:	e0bffd17 	ldw	r2,-12(fp)
10012aa8:	10800817 	ldw	r2,32(r2)
10012aac:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10012ab0:	e0bffe17 	ldw	r2,-8(fp)
10012ab4:	e0ffff17 	ldw	r3,-4(fp)
10012ab8:	d8000015 	stw	zero,0(sp)
10012abc:	e1fffd17 	ldw	r7,-12(fp)
10012ac0:	01840074 	movhi	r6,4097
10012ac4:	318acb04 	addi	r6,r6,11052
10012ac8:	180b883a 	mov	r5,r3
10012acc:	1009883a 	mov	r4,r2
10012ad0:	00137d40 	call	100137d4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10012ad4:	e0bffd17 	ldw	r2,-12(fp)
10012ad8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10012adc:	e0bffd17 	ldw	r2,-12(fp)
10012ae0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10012ae4:	d0e6f317 	ldw	r3,-25652(gp)
10012ae8:	e1fffd17 	ldw	r7,-12(fp)
10012aec:	01840074 	movhi	r6,4097
10012af0:	318b4e04 	addi	r6,r6,11576
10012af4:	180b883a 	mov	r5,r3
10012af8:	1009883a 	mov	r4,r2
10012afc:	00133700 	call	10013370 <alt_alarm_start>
10012b00:	1000040e 	bge	r2,zero,10012b14 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10012b04:	e0fffd17 	ldw	r3,-12(fp)
10012b08:	00a00034 	movhi	r2,32768
10012b0c:	10bfffc4 	addi	r2,r2,-1
10012b10:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10012b14:	0001883a 	nop
10012b18:	e037883a 	mov	sp,fp
10012b1c:	dfc00117 	ldw	ra,4(sp)
10012b20:	df000017 	ldw	fp,0(sp)
10012b24:	dec00204 	addi	sp,sp,8
10012b28:	f800283a 	ret

10012b2c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10012b2c:	defff804 	addi	sp,sp,-32
10012b30:	df000715 	stw	fp,28(sp)
10012b34:	df000704 	addi	fp,sp,28
10012b38:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10012b3c:	e0bfff17 	ldw	r2,-4(fp)
10012b40:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10012b44:	e0bffb17 	ldw	r2,-20(fp)
10012b48:	10800017 	ldw	r2,0(r2)
10012b4c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10012b50:	e0bffc17 	ldw	r2,-16(fp)
10012b54:	10800104 	addi	r2,r2,4
10012b58:	10800037 	ldwio	r2,0(r2)
10012b5c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10012b60:	e0bffd17 	ldw	r2,-12(fp)
10012b64:	1080c00c 	andi	r2,r2,768
10012b68:	10006d26 	beq	r2,zero,10012d20 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10012b6c:	e0bffd17 	ldw	r2,-12(fp)
10012b70:	1080400c 	andi	r2,r2,256
10012b74:	10003526 	beq	r2,zero,10012c4c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10012b78:	00800074 	movhi	r2,1
10012b7c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012b80:	e0bffb17 	ldw	r2,-20(fp)
10012b84:	10800a17 	ldw	r2,40(r2)
10012b88:	10800044 	addi	r2,r2,1
10012b8c:	1081ffcc 	andi	r2,r2,2047
10012b90:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10012b94:	e0bffb17 	ldw	r2,-20(fp)
10012b98:	10c00b17 	ldw	r3,44(r2)
10012b9c:	e0bffe17 	ldw	r2,-8(fp)
10012ba0:	18801526 	beq	r3,r2,10012bf8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10012ba4:	e0bffc17 	ldw	r2,-16(fp)
10012ba8:	10800037 	ldwio	r2,0(r2)
10012bac:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10012bb0:	e0bff917 	ldw	r2,-28(fp)
10012bb4:	10a0000c 	andi	r2,r2,32768
10012bb8:	10001126 	beq	r2,zero,10012c00 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10012bbc:	e0bffb17 	ldw	r2,-20(fp)
10012bc0:	10800a17 	ldw	r2,40(r2)
10012bc4:	e0fff917 	ldw	r3,-28(fp)
10012bc8:	1809883a 	mov	r4,r3
10012bcc:	e0fffb17 	ldw	r3,-20(fp)
10012bd0:	1885883a 	add	r2,r3,r2
10012bd4:	10800e04 	addi	r2,r2,56
10012bd8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012bdc:	e0bffb17 	ldw	r2,-20(fp)
10012be0:	10800a17 	ldw	r2,40(r2)
10012be4:	10800044 	addi	r2,r2,1
10012be8:	10c1ffcc 	andi	r3,r2,2047
10012bec:	e0bffb17 	ldw	r2,-20(fp)
10012bf0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10012bf4:	003fe206 	br	10012b80 <__alt_data_end+0xf8012b80>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10012bf8:	0001883a 	nop
10012bfc:	00000106 	br	10012c04 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10012c00:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10012c04:	e0bff917 	ldw	r2,-28(fp)
10012c08:	10bfffec 	andhi	r2,r2,65535
10012c0c:	10000f26 	beq	r2,zero,10012c4c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10012c10:	e0bffb17 	ldw	r2,-20(fp)
10012c14:	10c00817 	ldw	r3,32(r2)
10012c18:	00bfff84 	movi	r2,-2
10012c1c:	1886703a 	and	r3,r3,r2
10012c20:	e0bffb17 	ldw	r2,-20(fp)
10012c24:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10012c28:	e0bffc17 	ldw	r2,-16(fp)
10012c2c:	10800104 	addi	r2,r2,4
10012c30:	1007883a 	mov	r3,r2
10012c34:	e0bffb17 	ldw	r2,-20(fp)
10012c38:	10800817 	ldw	r2,32(r2)
10012c3c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10012c40:	e0bffc17 	ldw	r2,-16(fp)
10012c44:	10800104 	addi	r2,r2,4
10012c48:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10012c4c:	e0bffd17 	ldw	r2,-12(fp)
10012c50:	1080800c 	andi	r2,r2,512
10012c54:	103fbe26 	beq	r2,zero,10012b50 <__alt_data_end+0xf8012b50>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10012c58:	e0bffd17 	ldw	r2,-12(fp)
10012c5c:	1004d43a 	srli	r2,r2,16
10012c60:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10012c64:	00001406 	br	10012cb8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10012c68:	e0bffc17 	ldw	r2,-16(fp)
10012c6c:	e0fffb17 	ldw	r3,-20(fp)
10012c70:	18c00d17 	ldw	r3,52(r3)
10012c74:	e13ffb17 	ldw	r4,-20(fp)
10012c78:	20c7883a 	add	r3,r4,r3
10012c7c:	18c20e04 	addi	r3,r3,2104
10012c80:	18c00003 	ldbu	r3,0(r3)
10012c84:	18c03fcc 	andi	r3,r3,255
10012c88:	18c0201c 	xori	r3,r3,128
10012c8c:	18ffe004 	addi	r3,r3,-128
10012c90:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012c94:	e0bffb17 	ldw	r2,-20(fp)
10012c98:	10800d17 	ldw	r2,52(r2)
10012c9c:	10800044 	addi	r2,r2,1
10012ca0:	10c1ffcc 	andi	r3,r2,2047
10012ca4:	e0bffb17 	ldw	r2,-20(fp)
10012ca8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10012cac:	e0bffa17 	ldw	r2,-24(fp)
10012cb0:	10bfffc4 	addi	r2,r2,-1
10012cb4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10012cb8:	e0bffa17 	ldw	r2,-24(fp)
10012cbc:	10000526 	beq	r2,zero,10012cd4 <altera_avalon_jtag_uart_irq+0x1a8>
10012cc0:	e0bffb17 	ldw	r2,-20(fp)
10012cc4:	10c00d17 	ldw	r3,52(r2)
10012cc8:	e0bffb17 	ldw	r2,-20(fp)
10012ccc:	10800c17 	ldw	r2,48(r2)
10012cd0:	18bfe51e 	bne	r3,r2,10012c68 <__alt_data_end+0xf8012c68>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10012cd4:	e0bffa17 	ldw	r2,-24(fp)
10012cd8:	103f9d26 	beq	r2,zero,10012b50 <__alt_data_end+0xf8012b50>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10012cdc:	e0bffb17 	ldw	r2,-20(fp)
10012ce0:	10c00817 	ldw	r3,32(r2)
10012ce4:	00bfff44 	movi	r2,-3
10012ce8:	1886703a 	and	r3,r3,r2
10012cec:	e0bffb17 	ldw	r2,-20(fp)
10012cf0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10012cf4:	e0bffb17 	ldw	r2,-20(fp)
10012cf8:	10800017 	ldw	r2,0(r2)
10012cfc:	10800104 	addi	r2,r2,4
10012d00:	1007883a 	mov	r3,r2
10012d04:	e0bffb17 	ldw	r2,-20(fp)
10012d08:	10800817 	ldw	r2,32(r2)
10012d0c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10012d10:	e0bffc17 	ldw	r2,-16(fp)
10012d14:	10800104 	addi	r2,r2,4
10012d18:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10012d1c:	003f8c06 	br	10012b50 <__alt_data_end+0xf8012b50>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10012d20:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10012d24:	0001883a 	nop
10012d28:	e037883a 	mov	sp,fp
10012d2c:	df000017 	ldw	fp,0(sp)
10012d30:	dec00104 	addi	sp,sp,4
10012d34:	f800283a 	ret

10012d38 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10012d38:	defff804 	addi	sp,sp,-32
10012d3c:	df000715 	stw	fp,28(sp)
10012d40:	df000704 	addi	fp,sp,28
10012d44:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10012d48:	e0bffb17 	ldw	r2,-20(fp)
10012d4c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10012d50:	e0bff917 	ldw	r2,-28(fp)
10012d54:	10800017 	ldw	r2,0(r2)
10012d58:	10800104 	addi	r2,r2,4
10012d5c:	10800037 	ldwio	r2,0(r2)
10012d60:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10012d64:	e0bffa17 	ldw	r2,-24(fp)
10012d68:	1081000c 	andi	r2,r2,1024
10012d6c:	10000b26 	beq	r2,zero,10012d9c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10012d70:	e0bff917 	ldw	r2,-28(fp)
10012d74:	10800017 	ldw	r2,0(r2)
10012d78:	10800104 	addi	r2,r2,4
10012d7c:	1007883a 	mov	r3,r2
10012d80:	e0bff917 	ldw	r2,-28(fp)
10012d84:	10800817 	ldw	r2,32(r2)
10012d88:	10810014 	ori	r2,r2,1024
10012d8c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10012d90:	e0bff917 	ldw	r2,-28(fp)
10012d94:	10000915 	stw	zero,36(r2)
10012d98:	00000a06 	br	10012dc4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10012d9c:	e0bff917 	ldw	r2,-28(fp)
10012da0:	10c00917 	ldw	r3,36(r2)
10012da4:	00a00034 	movhi	r2,32768
10012da8:	10bfff04 	addi	r2,r2,-4
10012dac:	10c00536 	bltu	r2,r3,10012dc4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10012db0:	e0bff917 	ldw	r2,-28(fp)
10012db4:	10800917 	ldw	r2,36(r2)
10012db8:	10c00044 	addi	r3,r2,1
10012dbc:	e0bff917 	ldw	r2,-28(fp)
10012dc0:	10c00915 	stw	r3,36(r2)
10012dc4:	d0a6f317 	ldw	r2,-25652(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10012dc8:	e037883a 	mov	sp,fp
10012dcc:	df000017 	ldw	fp,0(sp)
10012dd0:	dec00104 	addi	sp,sp,4
10012dd4:	f800283a 	ret

10012dd8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10012dd8:	defffd04 	addi	sp,sp,-12
10012ddc:	df000215 	stw	fp,8(sp)
10012de0:	df000204 	addi	fp,sp,8
10012de4:	e13ffe15 	stw	r4,-8(fp)
10012de8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10012dec:	00000506 	br	10012e04 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10012df0:	e0bfff17 	ldw	r2,-4(fp)
10012df4:	1090000c 	andi	r2,r2,16384
10012df8:	10000226 	beq	r2,zero,10012e04 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10012dfc:	00bffd44 	movi	r2,-11
10012e00:	00000b06 	br	10012e30 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10012e04:	e0bffe17 	ldw	r2,-8(fp)
10012e08:	10c00d17 	ldw	r3,52(r2)
10012e0c:	e0bffe17 	ldw	r2,-8(fp)
10012e10:	10800c17 	ldw	r2,48(r2)
10012e14:	18800526 	beq	r3,r2,10012e2c <altera_avalon_jtag_uart_close+0x54>
10012e18:	e0bffe17 	ldw	r2,-8(fp)
10012e1c:	10c00917 	ldw	r3,36(r2)
10012e20:	e0bffe17 	ldw	r2,-8(fp)
10012e24:	10800117 	ldw	r2,4(r2)
10012e28:	18bff136 	bltu	r3,r2,10012df0 <__alt_data_end+0xf8012df0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10012e2c:	0005883a 	mov	r2,zero
}
10012e30:	e037883a 	mov	sp,fp
10012e34:	df000017 	ldw	fp,0(sp)
10012e38:	dec00104 	addi	sp,sp,4
10012e3c:	f800283a 	ret

10012e40 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10012e40:	defffa04 	addi	sp,sp,-24
10012e44:	df000515 	stw	fp,20(sp)
10012e48:	df000504 	addi	fp,sp,20
10012e4c:	e13ffd15 	stw	r4,-12(fp)
10012e50:	e17ffe15 	stw	r5,-8(fp)
10012e54:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10012e58:	00bff9c4 	movi	r2,-25
10012e5c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10012e60:	e0bffe17 	ldw	r2,-8(fp)
10012e64:	10da8060 	cmpeqi	r3,r2,27137
10012e68:	1800031e 	bne	r3,zero,10012e78 <altera_avalon_jtag_uart_ioctl+0x38>
10012e6c:	109a80a0 	cmpeqi	r2,r2,27138
10012e70:	1000181e 	bne	r2,zero,10012ed4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10012e74:	00002906 	br	10012f1c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10012e78:	e0bffd17 	ldw	r2,-12(fp)
10012e7c:	10c00117 	ldw	r3,4(r2)
10012e80:	00a00034 	movhi	r2,32768
10012e84:	10bfffc4 	addi	r2,r2,-1
10012e88:	18802126 	beq	r3,r2,10012f10 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10012e8c:	e0bfff17 	ldw	r2,-4(fp)
10012e90:	10800017 	ldw	r2,0(r2)
10012e94:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10012e98:	e0bffc17 	ldw	r2,-16(fp)
10012e9c:	10800090 	cmplti	r2,r2,2
10012ea0:	1000061e 	bne	r2,zero,10012ebc <altera_avalon_jtag_uart_ioctl+0x7c>
10012ea4:	e0fffc17 	ldw	r3,-16(fp)
10012ea8:	00a00034 	movhi	r2,32768
10012eac:	10bfffc4 	addi	r2,r2,-1
10012eb0:	18800226 	beq	r3,r2,10012ebc <altera_avalon_jtag_uart_ioctl+0x7c>
10012eb4:	e0bffc17 	ldw	r2,-16(fp)
10012eb8:	00000206 	br	10012ec4 <altera_avalon_jtag_uart_ioctl+0x84>
10012ebc:	00a00034 	movhi	r2,32768
10012ec0:	10bfff84 	addi	r2,r2,-2
10012ec4:	e0fffd17 	ldw	r3,-12(fp)
10012ec8:	18800115 	stw	r2,4(r3)
      rc = 0;
10012ecc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10012ed0:	00000f06 	br	10012f10 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10012ed4:	e0bffd17 	ldw	r2,-12(fp)
10012ed8:	10c00117 	ldw	r3,4(r2)
10012edc:	00a00034 	movhi	r2,32768
10012ee0:	10bfffc4 	addi	r2,r2,-1
10012ee4:	18800c26 	beq	r3,r2,10012f18 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10012ee8:	e0bffd17 	ldw	r2,-12(fp)
10012eec:	10c00917 	ldw	r3,36(r2)
10012ef0:	e0bffd17 	ldw	r2,-12(fp)
10012ef4:	10800117 	ldw	r2,4(r2)
10012ef8:	1885803a 	cmpltu	r2,r3,r2
10012efc:	10c03fcc 	andi	r3,r2,255
10012f00:	e0bfff17 	ldw	r2,-4(fp)
10012f04:	10c00015 	stw	r3,0(r2)
      rc = 0;
10012f08:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10012f0c:	00000206 	br	10012f18 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10012f10:	0001883a 	nop
10012f14:	00000106 	br	10012f1c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10012f18:	0001883a 	nop

  default:
    break;
  }

  return rc;
10012f1c:	e0bffb17 	ldw	r2,-20(fp)
}
10012f20:	e037883a 	mov	sp,fp
10012f24:	df000017 	ldw	fp,0(sp)
10012f28:	dec00104 	addi	sp,sp,4
10012f2c:	f800283a 	ret

10012f30 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10012f30:	defff304 	addi	sp,sp,-52
10012f34:	dfc00c15 	stw	ra,48(sp)
10012f38:	df000b15 	stw	fp,44(sp)
10012f3c:	df000b04 	addi	fp,sp,44
10012f40:	e13ffc15 	stw	r4,-16(fp)
10012f44:	e17ffd15 	stw	r5,-12(fp)
10012f48:	e1bffe15 	stw	r6,-8(fp)
10012f4c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10012f50:	e0bffd17 	ldw	r2,-12(fp)
10012f54:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10012f58:	00004706 	br	10013078 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10012f5c:	e0bffc17 	ldw	r2,-16(fp)
10012f60:	10800a17 	ldw	r2,40(r2)
10012f64:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10012f68:	e0bffc17 	ldw	r2,-16(fp)
10012f6c:	10800b17 	ldw	r2,44(r2)
10012f70:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10012f74:	e0fff717 	ldw	r3,-36(fp)
10012f78:	e0bff817 	ldw	r2,-32(fp)
10012f7c:	18800536 	bltu	r3,r2,10012f94 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10012f80:	e0fff717 	ldw	r3,-36(fp)
10012f84:	e0bff817 	ldw	r2,-32(fp)
10012f88:	1885c83a 	sub	r2,r3,r2
10012f8c:	e0bff615 	stw	r2,-40(fp)
10012f90:	00000406 	br	10012fa4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10012f94:	00c20004 	movi	r3,2048
10012f98:	e0bff817 	ldw	r2,-32(fp)
10012f9c:	1885c83a 	sub	r2,r3,r2
10012fa0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10012fa4:	e0bff617 	ldw	r2,-40(fp)
10012fa8:	10001e26 	beq	r2,zero,10013024 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10012fac:	e0fffe17 	ldw	r3,-8(fp)
10012fb0:	e0bff617 	ldw	r2,-40(fp)
10012fb4:	1880022e 	bgeu	r3,r2,10012fc0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10012fb8:	e0bffe17 	ldw	r2,-8(fp)
10012fbc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10012fc0:	e0bffc17 	ldw	r2,-16(fp)
10012fc4:	10c00e04 	addi	r3,r2,56
10012fc8:	e0bff817 	ldw	r2,-32(fp)
10012fcc:	1885883a 	add	r2,r3,r2
10012fd0:	e1bff617 	ldw	r6,-40(fp)
10012fd4:	100b883a 	mov	r5,r2
10012fd8:	e13ff517 	ldw	r4,-44(fp)
10012fdc:	000ac000 	call	1000ac00 <memcpy>
      ptr   += n;
10012fe0:	e0fff517 	ldw	r3,-44(fp)
10012fe4:	e0bff617 	ldw	r2,-40(fp)
10012fe8:	1885883a 	add	r2,r3,r2
10012fec:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10012ff0:	e0fffe17 	ldw	r3,-8(fp)
10012ff4:	e0bff617 	ldw	r2,-40(fp)
10012ff8:	1885c83a 	sub	r2,r3,r2
10012ffc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10013000:	e0fff817 	ldw	r3,-32(fp)
10013004:	e0bff617 	ldw	r2,-40(fp)
10013008:	1885883a 	add	r2,r3,r2
1001300c:	10c1ffcc 	andi	r3,r2,2047
10013010:	e0bffc17 	ldw	r2,-16(fp)
10013014:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10013018:	e0bffe17 	ldw	r2,-8(fp)
1001301c:	00bfcf16 	blt	zero,r2,10012f5c <__alt_data_end+0xf8012f5c>
10013020:	00000106 	br	10013028 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10013024:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10013028:	e0fff517 	ldw	r3,-44(fp)
1001302c:	e0bffd17 	ldw	r2,-12(fp)
10013030:	1880141e 	bne	r3,r2,10013084 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10013034:	e0bfff17 	ldw	r2,-4(fp)
10013038:	1090000c 	andi	r2,r2,16384
1001303c:	1000131e 	bne	r2,zero,1001308c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10013040:	0001883a 	nop
10013044:	e0bffc17 	ldw	r2,-16(fp)
10013048:	10c00a17 	ldw	r3,40(r2)
1001304c:	e0bff717 	ldw	r2,-36(fp)
10013050:	1880051e 	bne	r3,r2,10013068 <altera_avalon_jtag_uart_read+0x138>
10013054:	e0bffc17 	ldw	r2,-16(fp)
10013058:	10c00917 	ldw	r3,36(r2)
1001305c:	e0bffc17 	ldw	r2,-16(fp)
10013060:	10800117 	ldw	r2,4(r2)
10013064:	18bff736 	bltu	r3,r2,10013044 <__alt_data_end+0xf8013044>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10013068:	e0bffc17 	ldw	r2,-16(fp)
1001306c:	10c00a17 	ldw	r3,40(r2)
10013070:	e0bff717 	ldw	r2,-36(fp)
10013074:	18800726 	beq	r3,r2,10013094 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10013078:	e0bffe17 	ldw	r2,-8(fp)
1001307c:	00bfb716 	blt	zero,r2,10012f5c <__alt_data_end+0xf8012f5c>
10013080:	00000506 	br	10013098 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10013084:	0001883a 	nop
10013088:	00000306 	br	10013098 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
1001308c:	0001883a 	nop
10013090:	00000106 	br	10013098 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10013094:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10013098:	e0fff517 	ldw	r3,-44(fp)
1001309c:	e0bffd17 	ldw	r2,-12(fp)
100130a0:	18801826 	beq	r3,r2,10013104 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100130a4:	0005303a 	rdctl	r2,status
100130a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100130ac:	e0fffb17 	ldw	r3,-20(fp)
100130b0:	00bfff84 	movi	r2,-2
100130b4:	1884703a 	and	r2,r3,r2
100130b8:	1001703a 	wrctl	status,r2
  
  return context;
100130bc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
100130c0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100130c4:	e0bffc17 	ldw	r2,-16(fp)
100130c8:	10800817 	ldw	r2,32(r2)
100130cc:	10c00054 	ori	r3,r2,1
100130d0:	e0bffc17 	ldw	r2,-16(fp)
100130d4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100130d8:	e0bffc17 	ldw	r2,-16(fp)
100130dc:	10800017 	ldw	r2,0(r2)
100130e0:	10800104 	addi	r2,r2,4
100130e4:	1007883a 	mov	r3,r2
100130e8:	e0bffc17 	ldw	r2,-16(fp)
100130ec:	10800817 	ldw	r2,32(r2)
100130f0:	18800035 	stwio	r2,0(r3)
100130f4:	e0bffa17 	ldw	r2,-24(fp)
100130f8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100130fc:	e0bff917 	ldw	r2,-28(fp)
10013100:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10013104:	e0fff517 	ldw	r3,-44(fp)
10013108:	e0bffd17 	ldw	r2,-12(fp)
1001310c:	18800426 	beq	r3,r2,10013120 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10013110:	e0fff517 	ldw	r3,-44(fp)
10013114:	e0bffd17 	ldw	r2,-12(fp)
10013118:	1885c83a 	sub	r2,r3,r2
1001311c:	00000606 	br	10013138 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10013120:	e0bfff17 	ldw	r2,-4(fp)
10013124:	1090000c 	andi	r2,r2,16384
10013128:	10000226 	beq	r2,zero,10013134 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
1001312c:	00bffd44 	movi	r2,-11
10013130:	00000106 	br	10013138 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10013134:	00bffec4 	movi	r2,-5
}
10013138:	e037883a 	mov	sp,fp
1001313c:	dfc00117 	ldw	ra,4(sp)
10013140:	df000017 	ldw	fp,0(sp)
10013144:	dec00204 	addi	sp,sp,8
10013148:	f800283a 	ret

1001314c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1001314c:	defff304 	addi	sp,sp,-52
10013150:	dfc00c15 	stw	ra,48(sp)
10013154:	df000b15 	stw	fp,44(sp)
10013158:	df000b04 	addi	fp,sp,44
1001315c:	e13ffc15 	stw	r4,-16(fp)
10013160:	e17ffd15 	stw	r5,-12(fp)
10013164:	e1bffe15 	stw	r6,-8(fp)
10013168:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1001316c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10013170:	e0bffd17 	ldw	r2,-12(fp)
10013174:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10013178:	00003706 	br	10013258 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1001317c:	e0bffc17 	ldw	r2,-16(fp)
10013180:	10800c17 	ldw	r2,48(r2)
10013184:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10013188:	e0bffc17 	ldw	r2,-16(fp)
1001318c:	10800d17 	ldw	r2,52(r2)
10013190:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10013194:	e0fff917 	ldw	r3,-28(fp)
10013198:	e0bff517 	ldw	r2,-44(fp)
1001319c:	1880062e 	bgeu	r3,r2,100131b8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
100131a0:	e0fff517 	ldw	r3,-44(fp)
100131a4:	e0bff917 	ldw	r2,-28(fp)
100131a8:	1885c83a 	sub	r2,r3,r2
100131ac:	10bfffc4 	addi	r2,r2,-1
100131b0:	e0bff615 	stw	r2,-40(fp)
100131b4:	00000b06 	br	100131e4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
100131b8:	e0bff517 	ldw	r2,-44(fp)
100131bc:	10000526 	beq	r2,zero,100131d4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
100131c0:	00c20004 	movi	r3,2048
100131c4:	e0bff917 	ldw	r2,-28(fp)
100131c8:	1885c83a 	sub	r2,r3,r2
100131cc:	e0bff615 	stw	r2,-40(fp)
100131d0:	00000406 	br	100131e4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
100131d4:	00c1ffc4 	movi	r3,2047
100131d8:	e0bff917 	ldw	r2,-28(fp)
100131dc:	1885c83a 	sub	r2,r3,r2
100131e0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100131e4:	e0bff617 	ldw	r2,-40(fp)
100131e8:	10001e26 	beq	r2,zero,10013264 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
100131ec:	e0fffe17 	ldw	r3,-8(fp)
100131f0:	e0bff617 	ldw	r2,-40(fp)
100131f4:	1880022e 	bgeu	r3,r2,10013200 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
100131f8:	e0bffe17 	ldw	r2,-8(fp)
100131fc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10013200:	e0bffc17 	ldw	r2,-16(fp)
10013204:	10c20e04 	addi	r3,r2,2104
10013208:	e0bff917 	ldw	r2,-28(fp)
1001320c:	1885883a 	add	r2,r3,r2
10013210:	e1bff617 	ldw	r6,-40(fp)
10013214:	e17ffd17 	ldw	r5,-12(fp)
10013218:	1009883a 	mov	r4,r2
1001321c:	000ac000 	call	1000ac00 <memcpy>
      ptr   += n;
10013220:	e0fffd17 	ldw	r3,-12(fp)
10013224:	e0bff617 	ldw	r2,-40(fp)
10013228:	1885883a 	add	r2,r3,r2
1001322c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10013230:	e0fffe17 	ldw	r3,-8(fp)
10013234:	e0bff617 	ldw	r2,-40(fp)
10013238:	1885c83a 	sub	r2,r3,r2
1001323c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10013240:	e0fff917 	ldw	r3,-28(fp)
10013244:	e0bff617 	ldw	r2,-40(fp)
10013248:	1885883a 	add	r2,r3,r2
1001324c:	10c1ffcc 	andi	r3,r2,2047
10013250:	e0bffc17 	ldw	r2,-16(fp)
10013254:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10013258:	e0bffe17 	ldw	r2,-8(fp)
1001325c:	00bfc716 	blt	zero,r2,1001317c <__alt_data_end+0xf801317c>
10013260:	00000106 	br	10013268 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10013264:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013268:	0005303a 	rdctl	r2,status
1001326c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013270:	e0fffb17 	ldw	r3,-20(fp)
10013274:	00bfff84 	movi	r2,-2
10013278:	1884703a 	and	r2,r3,r2
1001327c:	1001703a 	wrctl	status,r2
  
  return context;
10013280:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10013284:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10013288:	e0bffc17 	ldw	r2,-16(fp)
1001328c:	10800817 	ldw	r2,32(r2)
10013290:	10c00094 	ori	r3,r2,2
10013294:	e0bffc17 	ldw	r2,-16(fp)
10013298:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1001329c:	e0bffc17 	ldw	r2,-16(fp)
100132a0:	10800017 	ldw	r2,0(r2)
100132a4:	10800104 	addi	r2,r2,4
100132a8:	1007883a 	mov	r3,r2
100132ac:	e0bffc17 	ldw	r2,-16(fp)
100132b0:	10800817 	ldw	r2,32(r2)
100132b4:	18800035 	stwio	r2,0(r3)
100132b8:	e0bffa17 	ldw	r2,-24(fp)
100132bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100132c0:	e0bff817 	ldw	r2,-32(fp)
100132c4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
100132c8:	e0bffe17 	ldw	r2,-8(fp)
100132cc:	0080100e 	bge	zero,r2,10013310 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
100132d0:	e0bfff17 	ldw	r2,-4(fp)
100132d4:	1090000c 	andi	r2,r2,16384
100132d8:	1000101e 	bne	r2,zero,1001331c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
100132dc:	0001883a 	nop
100132e0:	e0bffc17 	ldw	r2,-16(fp)
100132e4:	10c00d17 	ldw	r3,52(r2)
100132e8:	e0bff517 	ldw	r2,-44(fp)
100132ec:	1880051e 	bne	r3,r2,10013304 <altera_avalon_jtag_uart_write+0x1b8>
100132f0:	e0bffc17 	ldw	r2,-16(fp)
100132f4:	10c00917 	ldw	r3,36(r2)
100132f8:	e0bffc17 	ldw	r2,-16(fp)
100132fc:	10800117 	ldw	r2,4(r2)
10013300:	18bff736 	bltu	r3,r2,100132e0 <__alt_data_end+0xf80132e0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10013304:	e0bffc17 	ldw	r2,-16(fp)
10013308:	10800917 	ldw	r2,36(r2)
1001330c:	1000051e 	bne	r2,zero,10013324 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10013310:	e0bffe17 	ldw	r2,-8(fp)
10013314:	00bfd016 	blt	zero,r2,10013258 <__alt_data_end+0xf8013258>
10013318:	00000306 	br	10013328 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
1001331c:	0001883a 	nop
10013320:	00000106 	br	10013328 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10013324:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10013328:	e0fffd17 	ldw	r3,-12(fp)
1001332c:	e0bff717 	ldw	r2,-36(fp)
10013330:	18800426 	beq	r3,r2,10013344 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10013334:	e0fffd17 	ldw	r3,-12(fp)
10013338:	e0bff717 	ldw	r2,-36(fp)
1001333c:	1885c83a 	sub	r2,r3,r2
10013340:	00000606 	br	1001335c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10013344:	e0bfff17 	ldw	r2,-4(fp)
10013348:	1090000c 	andi	r2,r2,16384
1001334c:	10000226 	beq	r2,zero,10013358 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10013350:	00bffd44 	movi	r2,-11
10013354:	00000106 	br	1001335c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10013358:	00bffec4 	movi	r2,-5
}
1001335c:	e037883a 	mov	sp,fp
10013360:	dfc00117 	ldw	ra,4(sp)
10013364:	df000017 	ldw	fp,0(sp)
10013368:	dec00204 	addi	sp,sp,8
1001336c:	f800283a 	ret

10013370 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10013370:	defff504 	addi	sp,sp,-44
10013374:	df000a15 	stw	fp,40(sp)
10013378:	df000a04 	addi	fp,sp,40
1001337c:	e13ffc15 	stw	r4,-16(fp)
10013380:	e17ffd15 	stw	r5,-12(fp)
10013384:	e1bffe15 	stw	r6,-8(fp)
10013388:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1001338c:	e03ff615 	stw	zero,-40(fp)
10013390:	d0a6f317 	ldw	r2,-25652(gp)
  
  if (alt_ticks_per_second ())
10013394:	10003c26 	beq	r2,zero,10013488 <alt_alarm_start+0x118>
  {
    if (alarm)
10013398:	e0bffc17 	ldw	r2,-16(fp)
1001339c:	10003826 	beq	r2,zero,10013480 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
100133a0:	e0bffc17 	ldw	r2,-16(fp)
100133a4:	e0fffe17 	ldw	r3,-8(fp)
100133a8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
100133ac:	e0bffc17 	ldw	r2,-16(fp)
100133b0:	e0ffff17 	ldw	r3,-4(fp)
100133b4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100133b8:	0005303a 	rdctl	r2,status
100133bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100133c0:	e0fff917 	ldw	r3,-28(fp)
100133c4:	00bfff84 	movi	r2,-2
100133c8:	1884703a 	and	r2,r3,r2
100133cc:	1001703a 	wrctl	status,r2
  
  return context;
100133d0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
100133d4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
100133d8:	d0a6f417 	ldw	r2,-25648(gp)
      
      current_nticks = alt_nticks();
100133dc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
100133e0:	e0fffd17 	ldw	r3,-12(fp)
100133e4:	e0bff617 	ldw	r2,-40(fp)
100133e8:	1885883a 	add	r2,r3,r2
100133ec:	10c00044 	addi	r3,r2,1
100133f0:	e0bffc17 	ldw	r2,-16(fp)
100133f4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
100133f8:	e0bffc17 	ldw	r2,-16(fp)
100133fc:	10c00217 	ldw	r3,8(r2)
10013400:	e0bff617 	ldw	r2,-40(fp)
10013404:	1880042e 	bgeu	r3,r2,10013418 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10013408:	e0bffc17 	ldw	r2,-16(fp)
1001340c:	00c00044 	movi	r3,1
10013410:	10c00405 	stb	r3,16(r2)
10013414:	00000206 	br	10013420 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10013418:	e0bffc17 	ldw	r2,-16(fp)
1001341c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10013420:	e0bffc17 	ldw	r2,-16(fp)
10013424:	d0e01a04 	addi	r3,gp,-32664
10013428:	e0fffa15 	stw	r3,-24(fp)
1001342c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10013430:	e0bffb17 	ldw	r2,-20(fp)
10013434:	e0fffa17 	ldw	r3,-24(fp)
10013438:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1001343c:	e0bffa17 	ldw	r2,-24(fp)
10013440:	10c00017 	ldw	r3,0(r2)
10013444:	e0bffb17 	ldw	r2,-20(fp)
10013448:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1001344c:	e0bffa17 	ldw	r2,-24(fp)
10013450:	10800017 	ldw	r2,0(r2)
10013454:	e0fffb17 	ldw	r3,-20(fp)
10013458:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1001345c:	e0bffa17 	ldw	r2,-24(fp)
10013460:	e0fffb17 	ldw	r3,-20(fp)
10013464:	10c00015 	stw	r3,0(r2)
10013468:	e0bff817 	ldw	r2,-32(fp)
1001346c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013470:	e0bff717 	ldw	r2,-36(fp)
10013474:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10013478:	0005883a 	mov	r2,zero
1001347c:	00000306 	br	1001348c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10013480:	00bffa84 	movi	r2,-22
10013484:	00000106 	br	1001348c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10013488:	00bfde84 	movi	r2,-134
  }
}
1001348c:	e037883a 	mov	sp,fp
10013490:	df000017 	ldw	fp,0(sp)
10013494:	dec00104 	addi	sp,sp,4
10013498:	f800283a 	ret

1001349c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
1001349c:	defffa04 	addi	sp,sp,-24
100134a0:	dfc00515 	stw	ra,20(sp)
100134a4:	df000415 	stw	fp,16(sp)
100134a8:	df000404 	addi	fp,sp,16
100134ac:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
100134b0:	00800244 	movi	r2,9
100134b4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
100134b8:	014003f4 	movhi	r5,15
100134bc:	29509004 	addi	r5,r5,16960
100134c0:	e13ffd17 	ldw	r4,-12(fp)
100134c4:	00045280 	call	10004528 <__mulsi3>
100134c8:	100b883a 	mov	r5,r2
100134cc:	0100bef4 	movhi	r4,763
100134d0:	213c2004 	addi	r4,r4,-3968
100134d4:	000f36c0 	call	1000f36c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
100134d8:	100b883a 	mov	r5,r2
100134dc:	01200034 	movhi	r4,32768
100134e0:	213fffc4 	addi	r4,r4,-1
100134e4:	000f36c0 	call	1000f36c <__udivsi3>
100134e8:	100b883a 	mov	r5,r2
100134ec:	e13fff17 	ldw	r4,-4(fp)
100134f0:	000f36c0 	call	1000f36c <__udivsi3>
100134f4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
100134f8:	e0bffe17 	ldw	r2,-8(fp)
100134fc:	10002a26 	beq	r2,zero,100135a8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10013500:	e03ffc15 	stw	zero,-16(fp)
10013504:	00001706 	br	10013564 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10013508:	00a00034 	movhi	r2,32768
1001350c:	10bfffc4 	addi	r2,r2,-1
10013510:	10bfffc4 	addi	r2,r2,-1
10013514:	103ffe1e 	bne	r2,zero,10013510 <__alt_data_end+0xf8013510>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10013518:	014003f4 	movhi	r5,15
1001351c:	29509004 	addi	r5,r5,16960
10013520:	e13ffd17 	ldw	r4,-12(fp)
10013524:	00045280 	call	10004528 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10013528:	100b883a 	mov	r5,r2
1001352c:	0100bef4 	movhi	r4,763
10013530:	213c2004 	addi	r4,r4,-3968
10013534:	000f36c0 	call	1000f36c <__udivsi3>
10013538:	100b883a 	mov	r5,r2
1001353c:	01200034 	movhi	r4,32768
10013540:	213fffc4 	addi	r4,r4,-1
10013544:	000f36c0 	call	1000f36c <__udivsi3>
10013548:	1007883a 	mov	r3,r2
1001354c:	e0bfff17 	ldw	r2,-4(fp)
10013550:	10c5c83a 	sub	r2,r2,r3
10013554:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10013558:	e0bffc17 	ldw	r2,-16(fp)
1001355c:	10800044 	addi	r2,r2,1
10013560:	e0bffc15 	stw	r2,-16(fp)
10013564:	e0fffc17 	ldw	r3,-16(fp)
10013568:	e0bffe17 	ldw	r2,-8(fp)
1001356c:	18bfe616 	blt	r3,r2,10013508 <__alt_data_end+0xf8013508>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10013570:	014003f4 	movhi	r5,15
10013574:	29509004 	addi	r5,r5,16960
10013578:	e13ffd17 	ldw	r4,-12(fp)
1001357c:	00045280 	call	10004528 <__mulsi3>
10013580:	100b883a 	mov	r5,r2
10013584:	0100bef4 	movhi	r4,763
10013588:	213c2004 	addi	r4,r4,-3968
1001358c:	000f36c0 	call	1000f36c <__udivsi3>
10013590:	e17fff17 	ldw	r5,-4(fp)
10013594:	1009883a 	mov	r4,r2
10013598:	00045280 	call	10004528 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1001359c:	10bfffc4 	addi	r2,r2,-1
100135a0:	103ffe1e 	bne	r2,zero,1001359c <__alt_data_end+0xf801359c>
100135a4:	00000d06 	br	100135dc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
100135a8:	014003f4 	movhi	r5,15
100135ac:	29509004 	addi	r5,r5,16960
100135b0:	e13ffd17 	ldw	r4,-12(fp)
100135b4:	00045280 	call	10004528 <__mulsi3>
100135b8:	100b883a 	mov	r5,r2
100135bc:	0100bef4 	movhi	r4,763
100135c0:	213c2004 	addi	r4,r4,-3968
100135c4:	000f36c0 	call	1000f36c <__udivsi3>
100135c8:	e17fff17 	ldw	r5,-4(fp)
100135cc:	1009883a 	mov	r4,r2
100135d0:	00045280 	call	10004528 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
100135d4:	10bfffc4 	addi	r2,r2,-1
100135d8:	00bffe16 	blt	zero,r2,100135d4 <__alt_data_end+0xf80135d4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
100135dc:	0005883a 	mov	r2,zero
}
100135e0:	e037883a 	mov	sp,fp
100135e4:	dfc00117 	ldw	ra,4(sp)
100135e8:	df000017 	ldw	fp,0(sp)
100135ec:	dec00204 	addi	sp,sp,8
100135f0:	f800283a 	ret

100135f4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100135f4:	deffff04 	addi	sp,sp,-4
100135f8:	df000015 	stw	fp,0(sp)
100135fc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10013600:	0001883a 	nop
10013604:	e037883a 	mov	sp,fp
10013608:	df000017 	ldw	fp,0(sp)
1001360c:	dec00104 	addi	sp,sp,4
10013610:	f800283a 	ret

10013614 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013614:	defffe04 	addi	sp,sp,-8
10013618:	dfc00115 	stw	ra,4(sp)
1001361c:	df000015 	stw	fp,0(sp)
10013620:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013624:	d0a01717 	ldw	r2,-32676(gp)
10013628:	10000326 	beq	r2,zero,10013638 <alt_get_errno+0x24>
1001362c:	d0a01717 	ldw	r2,-32676(gp)
10013630:	103ee83a 	callr	r2
10013634:	00000106 	br	1001363c <alt_get_errno+0x28>
10013638:	d0a6eb04 	addi	r2,gp,-25684
}
1001363c:	e037883a 	mov	sp,fp
10013640:	dfc00117 	ldw	ra,4(sp)
10013644:	df000017 	ldw	fp,0(sp)
10013648:	dec00204 	addi	sp,sp,8
1001364c:	f800283a 	ret

10013650 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10013650:	defffa04 	addi	sp,sp,-24
10013654:	dfc00515 	stw	ra,20(sp)
10013658:	df000415 	stw	fp,16(sp)
1001365c:	df000404 	addi	fp,sp,16
10013660:	e13ffe15 	stw	r4,-8(fp)
10013664:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10013668:	e0bffe17 	ldw	r2,-8(fp)
1001366c:	10000326 	beq	r2,zero,1001367c <alt_dev_llist_insert+0x2c>
10013670:	e0bffe17 	ldw	r2,-8(fp)
10013674:	10800217 	ldw	r2,8(r2)
10013678:	1000061e 	bne	r2,zero,10013694 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1001367c:	00136140 	call	10013614 <alt_get_errno>
10013680:	1007883a 	mov	r3,r2
10013684:	00800584 	movi	r2,22
10013688:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1001368c:	00bffa84 	movi	r2,-22
10013690:	00001306 	br	100136e0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10013694:	e0bffe17 	ldw	r2,-8(fp)
10013698:	e0ffff17 	ldw	r3,-4(fp)
1001369c:	e0fffc15 	stw	r3,-16(fp)
100136a0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100136a4:	e0bffd17 	ldw	r2,-12(fp)
100136a8:	e0fffc17 	ldw	r3,-16(fp)
100136ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100136b0:	e0bffc17 	ldw	r2,-16(fp)
100136b4:	10c00017 	ldw	r3,0(r2)
100136b8:	e0bffd17 	ldw	r2,-12(fp)
100136bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100136c0:	e0bffc17 	ldw	r2,-16(fp)
100136c4:	10800017 	ldw	r2,0(r2)
100136c8:	e0fffd17 	ldw	r3,-12(fp)
100136cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100136d0:	e0bffc17 	ldw	r2,-16(fp)
100136d4:	e0fffd17 	ldw	r3,-12(fp)
100136d8:	10c00015 	stw	r3,0(r2)

  return 0;  
100136dc:	0005883a 	mov	r2,zero
}
100136e0:	e037883a 	mov	sp,fp
100136e4:	dfc00117 	ldw	ra,4(sp)
100136e8:	df000017 	ldw	fp,0(sp)
100136ec:	dec00204 	addi	sp,sp,8
100136f0:	f800283a 	ret

100136f4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100136f4:	defffd04 	addi	sp,sp,-12
100136f8:	dfc00215 	stw	ra,8(sp)
100136fc:	df000115 	stw	fp,4(sp)
10013700:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10013704:	00840074 	movhi	r2,4097
10013708:	1091b104 	addi	r2,r2,18116
1001370c:	e0bfff15 	stw	r2,-4(fp)
10013710:	00000606 	br	1001372c <_do_ctors+0x38>
        (*ctor) (); 
10013714:	e0bfff17 	ldw	r2,-4(fp)
10013718:	10800017 	ldw	r2,0(r2)
1001371c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10013720:	e0bfff17 	ldw	r2,-4(fp)
10013724:	10bfff04 	addi	r2,r2,-4
10013728:	e0bfff15 	stw	r2,-4(fp)
1001372c:	e0ffff17 	ldw	r3,-4(fp)
10013730:	00840074 	movhi	r2,4097
10013734:	1091b044 	addi	r2,r2,18113
10013738:	18bff62e 	bgeu	r3,r2,10013714 <__alt_data_end+0xf8013714>
        (*ctor) (); 
}
1001373c:	0001883a 	nop
10013740:	e037883a 	mov	sp,fp
10013744:	dfc00117 	ldw	ra,4(sp)
10013748:	df000017 	ldw	fp,0(sp)
1001374c:	dec00204 	addi	sp,sp,8
10013750:	f800283a 	ret

10013754 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10013754:	defffd04 	addi	sp,sp,-12
10013758:	dfc00215 	stw	ra,8(sp)
1001375c:	df000115 	stw	fp,4(sp)
10013760:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10013764:	00840074 	movhi	r2,4097
10013768:	1091b104 	addi	r2,r2,18116
1001376c:	e0bfff15 	stw	r2,-4(fp)
10013770:	00000606 	br	1001378c <_do_dtors+0x38>
        (*dtor) (); 
10013774:	e0bfff17 	ldw	r2,-4(fp)
10013778:	10800017 	ldw	r2,0(r2)
1001377c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10013780:	e0bfff17 	ldw	r2,-4(fp)
10013784:	10bfff04 	addi	r2,r2,-4
10013788:	e0bfff15 	stw	r2,-4(fp)
1001378c:	e0ffff17 	ldw	r3,-4(fp)
10013790:	00840074 	movhi	r2,4097
10013794:	1091b204 	addi	r2,r2,18120
10013798:	18bff62e 	bgeu	r3,r2,10013774 <__alt_data_end+0xf8013774>
        (*dtor) (); 
}
1001379c:	0001883a 	nop
100137a0:	e037883a 	mov	sp,fp
100137a4:	dfc00117 	ldw	ra,4(sp)
100137a8:	df000017 	ldw	fp,0(sp)
100137ac:	dec00204 	addi	sp,sp,8
100137b0:	f800283a 	ret

100137b4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
100137b4:	deffff04 	addi	sp,sp,-4
100137b8:	df000015 	stw	fp,0(sp)
100137bc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
100137c0:	0001883a 	nop
100137c4:	e037883a 	mov	sp,fp
100137c8:	df000017 	ldw	fp,0(sp)
100137cc:	dec00104 	addi	sp,sp,4
100137d0:	f800283a 	ret

100137d4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100137d4:	defff904 	addi	sp,sp,-28
100137d8:	dfc00615 	stw	ra,24(sp)
100137dc:	df000515 	stw	fp,20(sp)
100137e0:	df000504 	addi	fp,sp,20
100137e4:	e13ffc15 	stw	r4,-16(fp)
100137e8:	e17ffd15 	stw	r5,-12(fp)
100137ec:	e1bffe15 	stw	r6,-8(fp)
100137f0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100137f4:	e0800217 	ldw	r2,8(fp)
100137f8:	d8800015 	stw	r2,0(sp)
100137fc:	e1ffff17 	ldw	r7,-4(fp)
10013800:	e1bffe17 	ldw	r6,-8(fp)
10013804:	e17ffd17 	ldw	r5,-12(fp)
10013808:	e13ffc17 	ldw	r4,-16(fp)
1001380c:	00139840 	call	10013984 <alt_iic_isr_register>
}  
10013810:	e037883a 	mov	sp,fp
10013814:	dfc00117 	ldw	ra,4(sp)
10013818:	df000017 	ldw	fp,0(sp)
1001381c:	dec00204 	addi	sp,sp,8
10013820:	f800283a 	ret

10013824 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10013824:	defff904 	addi	sp,sp,-28
10013828:	df000615 	stw	fp,24(sp)
1001382c:	df000604 	addi	fp,sp,24
10013830:	e13ffe15 	stw	r4,-8(fp)
10013834:	e17fff15 	stw	r5,-4(fp)
10013838:	e0bfff17 	ldw	r2,-4(fp)
1001383c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013840:	0005303a 	rdctl	r2,status
10013844:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013848:	e0fffb17 	ldw	r3,-20(fp)
1001384c:	00bfff84 	movi	r2,-2
10013850:	1884703a 	and	r2,r3,r2
10013854:	1001703a 	wrctl	status,r2
  
  return context;
10013858:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1001385c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10013860:	00c00044 	movi	r3,1
10013864:	e0bffa17 	ldw	r2,-24(fp)
10013868:	1884983a 	sll	r2,r3,r2
1001386c:	1007883a 	mov	r3,r2
10013870:	d0a6f217 	ldw	r2,-25656(gp)
10013874:	1884b03a 	or	r2,r3,r2
10013878:	d0a6f215 	stw	r2,-25656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1001387c:	d0a6f217 	ldw	r2,-25656(gp)
10013880:	100170fa 	wrctl	ienable,r2
10013884:	e0bffc17 	ldw	r2,-16(fp)
10013888:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001388c:	e0bffd17 	ldw	r2,-12(fp)
10013890:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10013894:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10013898:	0001883a 	nop
}
1001389c:	e037883a 	mov	sp,fp
100138a0:	df000017 	ldw	fp,0(sp)
100138a4:	dec00104 	addi	sp,sp,4
100138a8:	f800283a 	ret

100138ac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
100138ac:	defff904 	addi	sp,sp,-28
100138b0:	df000615 	stw	fp,24(sp)
100138b4:	df000604 	addi	fp,sp,24
100138b8:	e13ffe15 	stw	r4,-8(fp)
100138bc:	e17fff15 	stw	r5,-4(fp)
100138c0:	e0bfff17 	ldw	r2,-4(fp)
100138c4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100138c8:	0005303a 	rdctl	r2,status
100138cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100138d0:	e0fffb17 	ldw	r3,-20(fp)
100138d4:	00bfff84 	movi	r2,-2
100138d8:	1884703a 	and	r2,r3,r2
100138dc:	1001703a 	wrctl	status,r2
  
  return context;
100138e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100138e4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100138e8:	00c00044 	movi	r3,1
100138ec:	e0bffa17 	ldw	r2,-24(fp)
100138f0:	1884983a 	sll	r2,r3,r2
100138f4:	0084303a 	nor	r2,zero,r2
100138f8:	1007883a 	mov	r3,r2
100138fc:	d0a6f217 	ldw	r2,-25656(gp)
10013900:	1884703a 	and	r2,r3,r2
10013904:	d0a6f215 	stw	r2,-25656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10013908:	d0a6f217 	ldw	r2,-25656(gp)
1001390c:	100170fa 	wrctl	ienable,r2
10013910:	e0bffc17 	ldw	r2,-16(fp)
10013914:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013918:	e0bffd17 	ldw	r2,-12(fp)
1001391c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10013920:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10013924:	0001883a 	nop
}
10013928:	e037883a 	mov	sp,fp
1001392c:	df000017 	ldw	fp,0(sp)
10013930:	dec00104 	addi	sp,sp,4
10013934:	f800283a 	ret

10013938 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10013938:	defffc04 	addi	sp,sp,-16
1001393c:	df000315 	stw	fp,12(sp)
10013940:	df000304 	addi	fp,sp,12
10013944:	e13ffe15 	stw	r4,-8(fp)
10013948:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1001394c:	000530fa 	rdctl	r2,ienable
10013950:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10013954:	00c00044 	movi	r3,1
10013958:	e0bfff17 	ldw	r2,-4(fp)
1001395c:	1884983a 	sll	r2,r3,r2
10013960:	1007883a 	mov	r3,r2
10013964:	e0bffd17 	ldw	r2,-12(fp)
10013968:	1884703a 	and	r2,r3,r2
1001396c:	1004c03a 	cmpne	r2,r2,zero
10013970:	10803fcc 	andi	r2,r2,255
}
10013974:	e037883a 	mov	sp,fp
10013978:	df000017 	ldw	fp,0(sp)
1001397c:	dec00104 	addi	sp,sp,4
10013980:	f800283a 	ret

10013984 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10013984:	defff504 	addi	sp,sp,-44
10013988:	dfc00a15 	stw	ra,40(sp)
1001398c:	df000915 	stw	fp,36(sp)
10013990:	df000904 	addi	fp,sp,36
10013994:	e13ffc15 	stw	r4,-16(fp)
10013998:	e17ffd15 	stw	r5,-12(fp)
1001399c:	e1bffe15 	stw	r6,-8(fp)
100139a0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
100139a4:	00bffa84 	movi	r2,-22
100139a8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
100139ac:	e0bffd17 	ldw	r2,-12(fp)
100139b0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
100139b4:	e0bff817 	ldw	r2,-32(fp)
100139b8:	10800808 	cmpgei	r2,r2,32
100139bc:	1000271e 	bne	r2,zero,10013a5c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100139c0:	0005303a 	rdctl	r2,status
100139c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100139c8:	e0fffb17 	ldw	r3,-20(fp)
100139cc:	00bfff84 	movi	r2,-2
100139d0:	1884703a 	and	r2,r3,r2
100139d4:	1001703a 	wrctl	status,r2
  
  return context;
100139d8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100139dc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
100139e0:	008400b4 	movhi	r2,4098
100139e4:	10a29c04 	addi	r2,r2,-30096
100139e8:	e0fff817 	ldw	r3,-32(fp)
100139ec:	180690fa 	slli	r3,r3,3
100139f0:	10c5883a 	add	r2,r2,r3
100139f4:	e0fffe17 	ldw	r3,-8(fp)
100139f8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
100139fc:	008400b4 	movhi	r2,4098
10013a00:	10a29c04 	addi	r2,r2,-30096
10013a04:	e0fff817 	ldw	r3,-32(fp)
10013a08:	180690fa 	slli	r3,r3,3
10013a0c:	10c5883a 	add	r2,r2,r3
10013a10:	10800104 	addi	r2,r2,4
10013a14:	e0ffff17 	ldw	r3,-4(fp)
10013a18:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10013a1c:	e0bffe17 	ldw	r2,-8(fp)
10013a20:	10000526 	beq	r2,zero,10013a38 <alt_iic_isr_register+0xb4>
10013a24:	e0bff817 	ldw	r2,-32(fp)
10013a28:	100b883a 	mov	r5,r2
10013a2c:	e13ffc17 	ldw	r4,-16(fp)
10013a30:	00138240 	call	10013824 <alt_ic_irq_enable>
10013a34:	00000406 	br	10013a48 <alt_iic_isr_register+0xc4>
10013a38:	e0bff817 	ldw	r2,-32(fp)
10013a3c:	100b883a 	mov	r5,r2
10013a40:	e13ffc17 	ldw	r4,-16(fp)
10013a44:	00138ac0 	call	100138ac <alt_ic_irq_disable>
10013a48:	e0bff715 	stw	r2,-36(fp)
10013a4c:	e0bffa17 	ldw	r2,-24(fp)
10013a50:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013a54:	e0bff917 	ldw	r2,-28(fp)
10013a58:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10013a5c:	e0bff717 	ldw	r2,-36(fp)
}
10013a60:	e037883a 	mov	sp,fp
10013a64:	dfc00117 	ldw	ra,4(sp)
10013a68:	df000017 	ldw	fp,0(sp)
10013a6c:	dec00204 	addi	sp,sp,8
10013a70:	f800283a 	ret

10013a74 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10013a74:	defff804 	addi	sp,sp,-32
10013a78:	dfc00715 	stw	ra,28(sp)
10013a7c:	df000615 	stw	fp,24(sp)
10013a80:	dc000515 	stw	r16,20(sp)
10013a84:	df000604 	addi	fp,sp,24
10013a88:	e13ffb15 	stw	r4,-20(fp)
10013a8c:	e17ffc15 	stw	r5,-16(fp)
10013a90:	e1bffd15 	stw	r6,-12(fp)
10013a94:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10013a98:	e1bffe17 	ldw	r6,-8(fp)
10013a9c:	e17ffd17 	ldw	r5,-12(fp)
10013aa0:	e13ffc17 	ldw	r4,-16(fp)
10013aa4:	0013cfc0 	call	10013cfc <open>
10013aa8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10013aac:	e0bffa17 	ldw	r2,-24(fp)
10013ab0:	10002216 	blt	r2,zero,10013b3c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10013ab4:	04040074 	movhi	r16,4097
10013ab8:	84172004 	addi	r16,r16,23680
10013abc:	e0bffa17 	ldw	r2,-24(fp)
10013ac0:	01400304 	movi	r5,12
10013ac4:	1009883a 	mov	r4,r2
10013ac8:	00045280 	call	10004528 <__mulsi3>
10013acc:	8085883a 	add	r2,r16,r2
10013ad0:	10c00017 	ldw	r3,0(r2)
10013ad4:	e0bffb17 	ldw	r2,-20(fp)
10013ad8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10013adc:	04040074 	movhi	r16,4097
10013ae0:	84172004 	addi	r16,r16,23680
10013ae4:	e0bffa17 	ldw	r2,-24(fp)
10013ae8:	01400304 	movi	r5,12
10013aec:	1009883a 	mov	r4,r2
10013af0:	00045280 	call	10004528 <__mulsi3>
10013af4:	8085883a 	add	r2,r16,r2
10013af8:	10800104 	addi	r2,r2,4
10013afc:	10c00017 	ldw	r3,0(r2)
10013b00:	e0bffb17 	ldw	r2,-20(fp)
10013b04:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10013b08:	04040074 	movhi	r16,4097
10013b0c:	84172004 	addi	r16,r16,23680
10013b10:	e0bffa17 	ldw	r2,-24(fp)
10013b14:	01400304 	movi	r5,12
10013b18:	1009883a 	mov	r4,r2
10013b1c:	00045280 	call	10004528 <__mulsi3>
10013b20:	8085883a 	add	r2,r16,r2
10013b24:	10800204 	addi	r2,r2,8
10013b28:	10c00017 	ldw	r3,0(r2)
10013b2c:	e0bffb17 	ldw	r2,-20(fp)
10013b30:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10013b34:	e13ffa17 	ldw	r4,-24(fp)
10013b38:	00125b00 	call	100125b0 <alt_release_fd>
  }
} 
10013b3c:	0001883a 	nop
10013b40:	e6ffff04 	addi	sp,fp,-4
10013b44:	dfc00217 	ldw	ra,8(sp)
10013b48:	df000117 	ldw	fp,4(sp)
10013b4c:	dc000017 	ldw	r16,0(sp)
10013b50:	dec00304 	addi	sp,sp,12
10013b54:	f800283a 	ret

10013b58 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10013b58:	defffb04 	addi	sp,sp,-20
10013b5c:	dfc00415 	stw	ra,16(sp)
10013b60:	df000315 	stw	fp,12(sp)
10013b64:	df000304 	addi	fp,sp,12
10013b68:	e13ffd15 	stw	r4,-12(fp)
10013b6c:	e17ffe15 	stw	r5,-8(fp)
10013b70:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10013b74:	01c07fc4 	movi	r7,511
10013b78:	01800044 	movi	r6,1
10013b7c:	e17ffd17 	ldw	r5,-12(fp)
10013b80:	01040074 	movhi	r4,4097
10013b84:	21172304 	addi	r4,r4,23692
10013b88:	0013a740 	call	10013a74 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10013b8c:	01c07fc4 	movi	r7,511
10013b90:	000d883a 	mov	r6,zero
10013b94:	e17ffe17 	ldw	r5,-8(fp)
10013b98:	01040074 	movhi	r4,4097
10013b9c:	21172004 	addi	r4,r4,23680
10013ba0:	0013a740 	call	10013a74 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10013ba4:	01c07fc4 	movi	r7,511
10013ba8:	01800044 	movi	r6,1
10013bac:	e17fff17 	ldw	r5,-4(fp)
10013bb0:	01040074 	movhi	r4,4097
10013bb4:	21172604 	addi	r4,r4,23704
10013bb8:	0013a740 	call	10013a74 <alt_open_fd>
}  
10013bbc:	0001883a 	nop
10013bc0:	e037883a 	mov	sp,fp
10013bc4:	dfc00117 	ldw	ra,4(sp)
10013bc8:	df000017 	ldw	fp,0(sp)
10013bcc:	dec00204 	addi	sp,sp,8
10013bd0:	f800283a 	ret

10013bd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013bd4:	defffe04 	addi	sp,sp,-8
10013bd8:	dfc00115 	stw	ra,4(sp)
10013bdc:	df000015 	stw	fp,0(sp)
10013be0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013be4:	d0a01717 	ldw	r2,-32676(gp)
10013be8:	10000326 	beq	r2,zero,10013bf8 <alt_get_errno+0x24>
10013bec:	d0a01717 	ldw	r2,-32676(gp)
10013bf0:	103ee83a 	callr	r2
10013bf4:	00000106 	br	10013bfc <alt_get_errno+0x28>
10013bf8:	d0a6eb04 	addi	r2,gp,-25684
}
10013bfc:	e037883a 	mov	sp,fp
10013c00:	dfc00117 	ldw	ra,4(sp)
10013c04:	df000017 	ldw	fp,0(sp)
10013c08:	dec00204 	addi	sp,sp,8
10013c0c:	f800283a 	ret

10013c10 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10013c10:	defffb04 	addi	sp,sp,-20
10013c14:	dfc00415 	stw	ra,16(sp)
10013c18:	df000315 	stw	fp,12(sp)
10013c1c:	dc000215 	stw	r16,8(sp)
10013c20:	df000304 	addi	fp,sp,12
10013c24:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10013c28:	e0bffe17 	ldw	r2,-8(fp)
10013c2c:	10800217 	ldw	r2,8(r2)
10013c30:	10d00034 	orhi	r3,r2,16384
10013c34:	e0bffe17 	ldw	r2,-8(fp)
10013c38:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10013c3c:	e03ffd15 	stw	zero,-12(fp)
10013c40:	00002306 	br	10013cd0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10013c44:	04040074 	movhi	r16,4097
10013c48:	84172004 	addi	r16,r16,23680
10013c4c:	e0bffd17 	ldw	r2,-12(fp)
10013c50:	01400304 	movi	r5,12
10013c54:	1009883a 	mov	r4,r2
10013c58:	00045280 	call	10004528 <__mulsi3>
10013c5c:	8085883a 	add	r2,r16,r2
10013c60:	10c00017 	ldw	r3,0(r2)
10013c64:	e0bffe17 	ldw	r2,-8(fp)
10013c68:	10800017 	ldw	r2,0(r2)
10013c6c:	1880151e 	bne	r3,r2,10013cc4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10013c70:	04040074 	movhi	r16,4097
10013c74:	84172004 	addi	r16,r16,23680
10013c78:	e0bffd17 	ldw	r2,-12(fp)
10013c7c:	01400304 	movi	r5,12
10013c80:	1009883a 	mov	r4,r2
10013c84:	00045280 	call	10004528 <__mulsi3>
10013c88:	8085883a 	add	r2,r16,r2
10013c8c:	10800204 	addi	r2,r2,8
10013c90:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10013c94:	10000b0e 	bge	r2,zero,10013cc4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10013c98:	01400304 	movi	r5,12
10013c9c:	e13ffd17 	ldw	r4,-12(fp)
10013ca0:	00045280 	call	10004528 <__mulsi3>
10013ca4:	1007883a 	mov	r3,r2
10013ca8:	00840074 	movhi	r2,4097
10013cac:	10972004 	addi	r2,r2,23680
10013cb0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10013cb4:	e0bffe17 	ldw	r2,-8(fp)
10013cb8:	18800226 	beq	r3,r2,10013cc4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10013cbc:	00bffcc4 	movi	r2,-13
10013cc0:	00000806 	br	10013ce4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10013cc4:	e0bffd17 	ldw	r2,-12(fp)
10013cc8:	10800044 	addi	r2,r2,1
10013ccc:	e0bffd15 	stw	r2,-12(fp)
10013cd0:	d0a01617 	ldw	r2,-32680(gp)
10013cd4:	1007883a 	mov	r3,r2
10013cd8:	e0bffd17 	ldw	r2,-12(fp)
10013cdc:	18bfd92e 	bgeu	r3,r2,10013c44 <__alt_data_end+0xf8013c44>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10013ce0:	0005883a 	mov	r2,zero
}
10013ce4:	e6ffff04 	addi	sp,fp,-4
10013ce8:	dfc00217 	ldw	ra,8(sp)
10013cec:	df000117 	ldw	fp,4(sp)
10013cf0:	dc000017 	ldw	r16,0(sp)
10013cf4:	dec00304 	addi	sp,sp,12
10013cf8:	f800283a 	ret

10013cfc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10013cfc:	defff604 	addi	sp,sp,-40
10013d00:	dfc00915 	stw	ra,36(sp)
10013d04:	df000815 	stw	fp,32(sp)
10013d08:	df000804 	addi	fp,sp,32
10013d0c:	e13ffd15 	stw	r4,-12(fp)
10013d10:	e17ffe15 	stw	r5,-8(fp)
10013d14:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10013d18:	00bfffc4 	movi	r2,-1
10013d1c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10013d20:	00bffb44 	movi	r2,-19
10013d24:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10013d28:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10013d2c:	d1601404 	addi	r5,gp,-32688
10013d30:	e13ffd17 	ldw	r4,-12(fp)
10013d34:	00140200 	call	10014020 <alt_find_dev>
10013d38:	e0bff815 	stw	r2,-32(fp)
10013d3c:	e0bff817 	ldw	r2,-32(fp)
10013d40:	1000051e 	bne	r2,zero,10013d58 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10013d44:	e13ffd17 	ldw	r4,-12(fp)
10013d48:	00140b00 	call	100140b0 <alt_find_file>
10013d4c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10013d50:	00800044 	movi	r2,1
10013d54:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10013d58:	e0bff817 	ldw	r2,-32(fp)
10013d5c:	10002b26 	beq	r2,zero,10013e0c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
10013d60:	e13ff817 	ldw	r4,-32(fp)
10013d64:	00141b80 	call	100141b8 <alt_get_fd>
10013d68:	e0bff915 	stw	r2,-28(fp)
10013d6c:	e0bff917 	ldw	r2,-28(fp)
10013d70:	1000030e 	bge	r2,zero,10013d80 <open+0x84>
    {
      status = index;
10013d74:	e0bff917 	ldw	r2,-28(fp)
10013d78:	e0bffa15 	stw	r2,-24(fp)
10013d7c:	00002506 	br	10013e14 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
10013d80:	01400304 	movi	r5,12
10013d84:	e13ff917 	ldw	r4,-28(fp)
10013d88:	00045280 	call	10004528 <__mulsi3>
10013d8c:	1007883a 	mov	r3,r2
10013d90:	00840074 	movhi	r2,4097
10013d94:	10972004 	addi	r2,r2,23680
10013d98:	1885883a 	add	r2,r3,r2
10013d9c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10013da0:	e0fffe17 	ldw	r3,-8(fp)
10013da4:	00900034 	movhi	r2,16384
10013da8:	10bfffc4 	addi	r2,r2,-1
10013dac:	1886703a 	and	r3,r3,r2
10013db0:	e0bffc17 	ldw	r2,-16(fp)
10013db4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10013db8:	e0bffb17 	ldw	r2,-20(fp)
10013dbc:	1000051e 	bne	r2,zero,10013dd4 <open+0xd8>
10013dc0:	e13ffc17 	ldw	r4,-16(fp)
10013dc4:	0013c100 	call	10013c10 <alt_file_locked>
10013dc8:	e0bffa15 	stw	r2,-24(fp)
10013dcc:	e0bffa17 	ldw	r2,-24(fp)
10013dd0:	10001016 	blt	r2,zero,10013e14 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10013dd4:	e0bff817 	ldw	r2,-32(fp)
10013dd8:	10800317 	ldw	r2,12(r2)
10013ddc:	10000826 	beq	r2,zero,10013e00 <open+0x104>
10013de0:	e0bff817 	ldw	r2,-32(fp)
10013de4:	10800317 	ldw	r2,12(r2)
10013de8:	e1ffff17 	ldw	r7,-4(fp)
10013dec:	e1bffe17 	ldw	r6,-8(fp)
10013df0:	e17ffd17 	ldw	r5,-12(fp)
10013df4:	e13ffc17 	ldw	r4,-16(fp)
10013df8:	103ee83a 	callr	r2
10013dfc:	00000106 	br	10013e04 <open+0x108>
10013e00:	0005883a 	mov	r2,zero
10013e04:	e0bffa15 	stw	r2,-24(fp)
10013e08:	00000206 	br	10013e14 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
10013e0c:	00bffb44 	movi	r2,-19
10013e10:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10013e14:	e0bffa17 	ldw	r2,-24(fp)
10013e18:	1000090e 	bge	r2,zero,10013e40 <open+0x144>
  {
    alt_release_fd (index);  
10013e1c:	e13ff917 	ldw	r4,-28(fp)
10013e20:	00125b00 	call	100125b0 <alt_release_fd>
    ALT_ERRNO = -status;
10013e24:	0013bd40 	call	10013bd4 <alt_get_errno>
10013e28:	1007883a 	mov	r3,r2
10013e2c:	e0bffa17 	ldw	r2,-24(fp)
10013e30:	0085c83a 	sub	r2,zero,r2
10013e34:	18800015 	stw	r2,0(r3)
    return -1;
10013e38:	00bfffc4 	movi	r2,-1
10013e3c:	00000106 	br	10013e44 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
10013e40:	e0bff917 	ldw	r2,-28(fp)
}
10013e44:	e037883a 	mov	sp,fp
10013e48:	dfc00117 	ldw	ra,4(sp)
10013e4c:	df000017 	ldw	fp,0(sp)
10013e50:	dec00204 	addi	sp,sp,8
10013e54:	f800283a 	ret

10013e58 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10013e58:	defffa04 	addi	sp,sp,-24
10013e5c:	df000515 	stw	fp,20(sp)
10013e60:	df000504 	addi	fp,sp,20
10013e64:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013e68:	0005303a 	rdctl	r2,status
10013e6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013e70:	e0fffc17 	ldw	r3,-16(fp)
10013e74:	00bfff84 	movi	r2,-2
10013e78:	1884703a 	and	r2,r3,r2
10013e7c:	1001703a 	wrctl	status,r2
  
  return context;
10013e80:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10013e84:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10013e88:	e0bfff17 	ldw	r2,-4(fp)
10013e8c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10013e90:	e0bffd17 	ldw	r2,-12(fp)
10013e94:	10800017 	ldw	r2,0(r2)
10013e98:	e0fffd17 	ldw	r3,-12(fp)
10013e9c:	18c00117 	ldw	r3,4(r3)
10013ea0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10013ea4:	e0bffd17 	ldw	r2,-12(fp)
10013ea8:	10800117 	ldw	r2,4(r2)
10013eac:	e0fffd17 	ldw	r3,-12(fp)
10013eb0:	18c00017 	ldw	r3,0(r3)
10013eb4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10013eb8:	e0bffd17 	ldw	r2,-12(fp)
10013ebc:	e0fffd17 	ldw	r3,-12(fp)
10013ec0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10013ec4:	e0bffd17 	ldw	r2,-12(fp)
10013ec8:	e0fffd17 	ldw	r3,-12(fp)
10013ecc:	10c00015 	stw	r3,0(r2)
10013ed0:	e0bffb17 	ldw	r2,-20(fp)
10013ed4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013ed8:	e0bffe17 	ldw	r2,-8(fp)
10013edc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10013ee0:	0001883a 	nop
10013ee4:	e037883a 	mov	sp,fp
10013ee8:	df000017 	ldw	fp,0(sp)
10013eec:	dec00104 	addi	sp,sp,4
10013ef0:	f800283a 	ret

10013ef4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10013ef4:	defffb04 	addi	sp,sp,-20
10013ef8:	dfc00415 	stw	ra,16(sp)
10013efc:	df000315 	stw	fp,12(sp)
10013f00:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10013f04:	d0a01a17 	ldw	r2,-32664(gp)
10013f08:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10013f0c:	d0a6f417 	ldw	r2,-25648(gp)
10013f10:	10800044 	addi	r2,r2,1
10013f14:	d0a6f415 	stw	r2,-25648(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10013f18:	00002e06 	br	10013fd4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10013f1c:	e0bffd17 	ldw	r2,-12(fp)
10013f20:	10800017 	ldw	r2,0(r2)
10013f24:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10013f28:	e0bffd17 	ldw	r2,-12(fp)
10013f2c:	10800403 	ldbu	r2,16(r2)
10013f30:	10803fcc 	andi	r2,r2,255
10013f34:	10000426 	beq	r2,zero,10013f48 <alt_tick+0x54>
10013f38:	d0a6f417 	ldw	r2,-25648(gp)
10013f3c:	1000021e 	bne	r2,zero,10013f48 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10013f40:	e0bffd17 	ldw	r2,-12(fp)
10013f44:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10013f48:	e0bffd17 	ldw	r2,-12(fp)
10013f4c:	10800217 	ldw	r2,8(r2)
10013f50:	d0e6f417 	ldw	r3,-25648(gp)
10013f54:	18801d36 	bltu	r3,r2,10013fcc <alt_tick+0xd8>
10013f58:	e0bffd17 	ldw	r2,-12(fp)
10013f5c:	10800403 	ldbu	r2,16(r2)
10013f60:	10803fcc 	andi	r2,r2,255
10013f64:	1000191e 	bne	r2,zero,10013fcc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10013f68:	e0bffd17 	ldw	r2,-12(fp)
10013f6c:	10800317 	ldw	r2,12(r2)
10013f70:	e0fffd17 	ldw	r3,-12(fp)
10013f74:	18c00517 	ldw	r3,20(r3)
10013f78:	1809883a 	mov	r4,r3
10013f7c:	103ee83a 	callr	r2
10013f80:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10013f84:	e0bfff17 	ldw	r2,-4(fp)
10013f88:	1000031e 	bne	r2,zero,10013f98 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10013f8c:	e13ffd17 	ldw	r4,-12(fp)
10013f90:	0013e580 	call	10013e58 <alt_alarm_stop>
10013f94:	00000d06 	br	10013fcc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10013f98:	e0bffd17 	ldw	r2,-12(fp)
10013f9c:	10c00217 	ldw	r3,8(r2)
10013fa0:	e0bfff17 	ldw	r2,-4(fp)
10013fa4:	1887883a 	add	r3,r3,r2
10013fa8:	e0bffd17 	ldw	r2,-12(fp)
10013fac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10013fb0:	e0bffd17 	ldw	r2,-12(fp)
10013fb4:	10c00217 	ldw	r3,8(r2)
10013fb8:	d0a6f417 	ldw	r2,-25648(gp)
10013fbc:	1880032e 	bgeu	r3,r2,10013fcc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10013fc0:	e0bffd17 	ldw	r2,-12(fp)
10013fc4:	00c00044 	movi	r3,1
10013fc8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10013fcc:	e0bffe17 	ldw	r2,-8(fp)
10013fd0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10013fd4:	e0fffd17 	ldw	r3,-12(fp)
10013fd8:	d0a01a04 	addi	r2,gp,-32664
10013fdc:	18bfcf1e 	bne	r3,r2,10013f1c <__alt_data_end+0xf8013f1c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10013fe0:	0001883a 	nop
}
10013fe4:	0001883a 	nop
10013fe8:	e037883a 	mov	sp,fp
10013fec:	dfc00117 	ldw	ra,4(sp)
10013ff0:	df000017 	ldw	fp,0(sp)
10013ff4:	dec00204 	addi	sp,sp,8
10013ff8:	f800283a 	ret

10013ffc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10013ffc:	deffff04 	addi	sp,sp,-4
10014000:	df000015 	stw	fp,0(sp)
10014004:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10014008:	000170fa 	wrctl	ienable,zero
}
1001400c:	0001883a 	nop
10014010:	e037883a 	mov	sp,fp
10014014:	df000017 	ldw	fp,0(sp)
10014018:	dec00104 	addi	sp,sp,4
1001401c:	f800283a 	ret

10014020 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10014020:	defffa04 	addi	sp,sp,-24
10014024:	dfc00515 	stw	ra,20(sp)
10014028:	df000415 	stw	fp,16(sp)
1001402c:	df000404 	addi	fp,sp,16
10014030:	e13ffe15 	stw	r4,-8(fp)
10014034:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10014038:	e0bfff17 	ldw	r2,-4(fp)
1001403c:	10800017 	ldw	r2,0(r2)
10014040:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10014044:	e13ffe17 	ldw	r4,-8(fp)
10014048:	00059580 	call	10005958 <strlen>
1001404c:	10800044 	addi	r2,r2,1
10014050:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10014054:	00000d06 	br	1001408c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10014058:	e0bffc17 	ldw	r2,-16(fp)
1001405c:	10800217 	ldw	r2,8(r2)
10014060:	e0fffd17 	ldw	r3,-12(fp)
10014064:	180d883a 	mov	r6,r3
10014068:	e17ffe17 	ldw	r5,-8(fp)
1001406c:	1009883a 	mov	r4,r2
10014070:	00143640 	call	10014364 <memcmp>
10014074:	1000021e 	bne	r2,zero,10014080 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10014078:	e0bffc17 	ldw	r2,-16(fp)
1001407c:	00000706 	br	1001409c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10014080:	e0bffc17 	ldw	r2,-16(fp)
10014084:	10800017 	ldw	r2,0(r2)
10014088:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1001408c:	e0fffc17 	ldw	r3,-16(fp)
10014090:	e0bfff17 	ldw	r2,-4(fp)
10014094:	18bff01e 	bne	r3,r2,10014058 <__alt_data_end+0xf8014058>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10014098:	0005883a 	mov	r2,zero
}
1001409c:	e037883a 	mov	sp,fp
100140a0:	dfc00117 	ldw	ra,4(sp)
100140a4:	df000017 	ldw	fp,0(sp)
100140a8:	dec00204 	addi	sp,sp,8
100140ac:	f800283a 	ret

100140b0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100140b0:	defffb04 	addi	sp,sp,-20
100140b4:	dfc00415 	stw	ra,16(sp)
100140b8:	df000315 	stw	fp,12(sp)
100140bc:	df000304 	addi	fp,sp,12
100140c0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100140c4:	d0a01217 	ldw	r2,-32696(gp)
100140c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100140cc:	00003106 	br	10014194 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
100140d0:	e0bffd17 	ldw	r2,-12(fp)
100140d4:	10800217 	ldw	r2,8(r2)
100140d8:	1009883a 	mov	r4,r2
100140dc:	00059580 	call	10005958 <strlen>
100140e0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
100140e4:	e0bffd17 	ldw	r2,-12(fp)
100140e8:	10c00217 	ldw	r3,8(r2)
100140ec:	e0bffe17 	ldw	r2,-8(fp)
100140f0:	10bfffc4 	addi	r2,r2,-1
100140f4:	1885883a 	add	r2,r3,r2
100140f8:	10800003 	ldbu	r2,0(r2)
100140fc:	10803fcc 	andi	r2,r2,255
10014100:	1080201c 	xori	r2,r2,128
10014104:	10bfe004 	addi	r2,r2,-128
10014108:	10800bd8 	cmpnei	r2,r2,47
1001410c:	1000031e 	bne	r2,zero,1001411c <alt_find_file+0x6c>
    {
      len -= 1;
10014110:	e0bffe17 	ldw	r2,-8(fp)
10014114:	10bfffc4 	addi	r2,r2,-1
10014118:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1001411c:	e0bffe17 	ldw	r2,-8(fp)
10014120:	e0ffff17 	ldw	r3,-4(fp)
10014124:	1885883a 	add	r2,r3,r2
10014128:	10800003 	ldbu	r2,0(r2)
1001412c:	10803fcc 	andi	r2,r2,255
10014130:	1080201c 	xori	r2,r2,128
10014134:	10bfe004 	addi	r2,r2,-128
10014138:	10800be0 	cmpeqi	r2,r2,47
1001413c:	1000081e 	bne	r2,zero,10014160 <alt_find_file+0xb0>
10014140:	e0bffe17 	ldw	r2,-8(fp)
10014144:	e0ffff17 	ldw	r3,-4(fp)
10014148:	1885883a 	add	r2,r3,r2
1001414c:	10800003 	ldbu	r2,0(r2)
10014150:	10803fcc 	andi	r2,r2,255
10014154:	1080201c 	xori	r2,r2,128
10014158:	10bfe004 	addi	r2,r2,-128
1001415c:	10000a1e 	bne	r2,zero,10014188 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10014160:	e0bffd17 	ldw	r2,-12(fp)
10014164:	10800217 	ldw	r2,8(r2)
10014168:	e0fffe17 	ldw	r3,-8(fp)
1001416c:	180d883a 	mov	r6,r3
10014170:	e17fff17 	ldw	r5,-4(fp)
10014174:	1009883a 	mov	r4,r2
10014178:	00143640 	call	10014364 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1001417c:	1000021e 	bne	r2,zero,10014188 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10014180:	e0bffd17 	ldw	r2,-12(fp)
10014184:	00000706 	br	100141a4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10014188:	e0bffd17 	ldw	r2,-12(fp)
1001418c:	10800017 	ldw	r2,0(r2)
10014190:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10014194:	e0fffd17 	ldw	r3,-12(fp)
10014198:	d0a01204 	addi	r2,gp,-32696
1001419c:	18bfcc1e 	bne	r3,r2,100140d0 <__alt_data_end+0xf80140d0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
100141a0:	0005883a 	mov	r2,zero
}
100141a4:	e037883a 	mov	sp,fp
100141a8:	dfc00117 	ldw	ra,4(sp)
100141ac:	df000017 	ldw	fp,0(sp)
100141b0:	dec00204 	addi	sp,sp,8
100141b4:	f800283a 	ret

100141b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100141b8:	defffa04 	addi	sp,sp,-24
100141bc:	dfc00515 	stw	ra,20(sp)
100141c0:	df000415 	stw	fp,16(sp)
100141c4:	dc000315 	stw	r16,12(sp)
100141c8:	df000404 	addi	fp,sp,16
100141cc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
100141d0:	00bffa04 	movi	r2,-24
100141d4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100141d8:	e03ffc15 	stw	zero,-16(fp)
100141dc:	00001d06 	br	10014254 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
100141e0:	04040074 	movhi	r16,4097
100141e4:	84172004 	addi	r16,r16,23680
100141e8:	e0bffc17 	ldw	r2,-16(fp)
100141ec:	01400304 	movi	r5,12
100141f0:	1009883a 	mov	r4,r2
100141f4:	00045280 	call	10004528 <__mulsi3>
100141f8:	8085883a 	add	r2,r16,r2
100141fc:	10800017 	ldw	r2,0(r2)
10014200:	1000111e 	bne	r2,zero,10014248 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10014204:	04040074 	movhi	r16,4097
10014208:	84172004 	addi	r16,r16,23680
1001420c:	e0bffc17 	ldw	r2,-16(fp)
10014210:	01400304 	movi	r5,12
10014214:	1009883a 	mov	r4,r2
10014218:	00045280 	call	10004528 <__mulsi3>
1001421c:	8085883a 	add	r2,r16,r2
10014220:	e0fffe17 	ldw	r3,-8(fp)
10014224:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10014228:	d0e01617 	ldw	r3,-32680(gp)
1001422c:	e0bffc17 	ldw	r2,-16(fp)
10014230:	1880020e 	bge	r3,r2,1001423c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10014234:	e0bffc17 	ldw	r2,-16(fp)
10014238:	d0a01615 	stw	r2,-32680(gp)
      }
      rc = i;
1001423c:	e0bffc17 	ldw	r2,-16(fp)
10014240:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10014244:	00000606 	br	10014260 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10014248:	e0bffc17 	ldw	r2,-16(fp)
1001424c:	10800044 	addi	r2,r2,1
10014250:	e0bffc15 	stw	r2,-16(fp)
10014254:	e0bffc17 	ldw	r2,-16(fp)
10014258:	10800810 	cmplti	r2,r2,32
1001425c:	103fe01e 	bne	r2,zero,100141e0 <__alt_data_end+0xf80141e0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10014260:	e0bffd17 	ldw	r2,-12(fp)
}
10014264:	e6ffff04 	addi	sp,fp,-4
10014268:	dfc00217 	ldw	ra,8(sp)
1001426c:	df000117 	ldw	fp,4(sp)
10014270:	dc000017 	ldw	r16,0(sp)
10014274:	dec00304 	addi	sp,sp,12
10014278:	f800283a 	ret

1001427c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
1001427c:	defffe04 	addi	sp,sp,-8
10014280:	df000115 	stw	fp,4(sp)
10014284:	df000104 	addi	fp,sp,4
10014288:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
1001428c:	e0bfff17 	ldw	r2,-4(fp)
10014290:	10bffe84 	addi	r2,r2,-6
10014294:	10c00428 	cmpgeui	r3,r2,16
10014298:	18001a1e 	bne	r3,zero,10014304 <alt_exception_cause_generated_bad_addr+0x88>
1001429c:	100690ba 	slli	r3,r2,2
100142a0:	00840074 	movhi	r2,4097
100142a4:	1090ad04 	addi	r2,r2,17076
100142a8:	1885883a 	add	r2,r3,r2
100142ac:	10800017 	ldw	r2,0(r2)
100142b0:	1000683a 	jmp	r2
100142b4:	100142f4 	orhi	zero,r2,1291
100142b8:	100142f4 	orhi	zero,r2,1291
100142bc:	10014304 	addi	zero,r2,1292
100142c0:	10014304 	addi	zero,r2,1292
100142c4:	10014304 	addi	zero,r2,1292
100142c8:	100142f4 	orhi	zero,r2,1291
100142cc:	100142fc 	xorhi	zero,r2,1291
100142d0:	10014304 	addi	zero,r2,1292
100142d4:	100142f4 	orhi	zero,r2,1291
100142d8:	100142f4 	orhi	zero,r2,1291
100142dc:	10014304 	addi	zero,r2,1292
100142e0:	100142f4 	orhi	zero,r2,1291
100142e4:	100142fc 	xorhi	zero,r2,1291
100142e8:	10014304 	addi	zero,r2,1292
100142ec:	10014304 	addi	zero,r2,1292
100142f0:	100142f4 	orhi	zero,r2,1291
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
100142f4:	00800044 	movi	r2,1
100142f8:	00000306 	br	10014308 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
100142fc:	0005883a 	mov	r2,zero
10014300:	00000106 	br	10014308 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10014304:	0005883a 	mov	r2,zero
  }
}
10014308:	e037883a 	mov	sp,fp
1001430c:	df000017 	ldw	fp,0(sp)
10014310:	dec00104 	addi	sp,sp,4
10014314:	f800283a 	ret

10014318 <atexit>:
10014318:	200b883a 	mov	r5,r4
1001431c:	000f883a 	mov	r7,zero
10014320:	000d883a 	mov	r6,zero
10014324:	0009883a 	mov	r4,zero
10014328:	00143e01 	jmpi	100143e0 <__register_exitproc>

1001432c <exit>:
1001432c:	defffe04 	addi	sp,sp,-8
10014330:	000b883a 	mov	r5,zero
10014334:	dc000015 	stw	r16,0(sp)
10014338:	dfc00115 	stw	ra,4(sp)
1001433c:	2021883a 	mov	r16,r4
10014340:	00144f80 	call	100144f8 <__call_exitprocs>
10014344:	00840074 	movhi	r2,4097
10014348:	109ba604 	addi	r2,r2,28312
1001434c:	11000017 	ldw	r4,0(r2)
10014350:	20800f17 	ldw	r2,60(r4)
10014354:	10000126 	beq	r2,zero,1001435c <exit+0x30>
10014358:	103ee83a 	callr	r2
1001435c:	8009883a 	mov	r4,r16
10014360:	0011e0c0 	call	10011e0c <_exit>

10014364 <memcmp>:
10014364:	01c000c4 	movi	r7,3
10014368:	3980192e 	bgeu	r7,r6,100143d0 <memcmp+0x6c>
1001436c:	2144b03a 	or	r2,r4,r5
10014370:	11c4703a 	and	r2,r2,r7
10014374:	10000f26 	beq	r2,zero,100143b4 <memcmp+0x50>
10014378:	20800003 	ldbu	r2,0(r4)
1001437c:	28c00003 	ldbu	r3,0(r5)
10014380:	10c0151e 	bne	r2,r3,100143d8 <memcmp+0x74>
10014384:	31bfff84 	addi	r6,r6,-2
10014388:	01ffffc4 	movi	r7,-1
1001438c:	00000406 	br	100143a0 <memcmp+0x3c>
10014390:	20800003 	ldbu	r2,0(r4)
10014394:	28c00003 	ldbu	r3,0(r5)
10014398:	31bfffc4 	addi	r6,r6,-1
1001439c:	10c00e1e 	bne	r2,r3,100143d8 <memcmp+0x74>
100143a0:	21000044 	addi	r4,r4,1
100143a4:	29400044 	addi	r5,r5,1
100143a8:	31fff91e 	bne	r6,r7,10014390 <__alt_data_end+0xf8014390>
100143ac:	0005883a 	mov	r2,zero
100143b0:	f800283a 	ret
100143b4:	20c00017 	ldw	r3,0(r4)
100143b8:	28800017 	ldw	r2,0(r5)
100143bc:	18bfee1e 	bne	r3,r2,10014378 <__alt_data_end+0xf8014378>
100143c0:	31bfff04 	addi	r6,r6,-4
100143c4:	21000104 	addi	r4,r4,4
100143c8:	29400104 	addi	r5,r5,4
100143cc:	39bff936 	bltu	r7,r6,100143b4 <__alt_data_end+0xf80143b4>
100143d0:	303fe91e 	bne	r6,zero,10014378 <__alt_data_end+0xf8014378>
100143d4:	003ff506 	br	100143ac <__alt_data_end+0xf80143ac>
100143d8:	10c5c83a 	sub	r2,r2,r3
100143dc:	f800283a 	ret

100143e0 <__register_exitproc>:
100143e0:	defffa04 	addi	sp,sp,-24
100143e4:	dc000315 	stw	r16,12(sp)
100143e8:	04040074 	movhi	r16,4097
100143ec:	841ba604 	addi	r16,r16,28312
100143f0:	80c00017 	ldw	r3,0(r16)
100143f4:	dc400415 	stw	r17,16(sp)
100143f8:	dfc00515 	stw	ra,20(sp)
100143fc:	18805217 	ldw	r2,328(r3)
10014400:	2023883a 	mov	r17,r4
10014404:	10003726 	beq	r2,zero,100144e4 <__register_exitproc+0x104>
10014408:	10c00117 	ldw	r3,4(r2)
1001440c:	010007c4 	movi	r4,31
10014410:	20c00e16 	blt	r4,r3,1001444c <__register_exitproc+0x6c>
10014414:	1a000044 	addi	r8,r3,1
10014418:	8800221e 	bne	r17,zero,100144a4 <__register_exitproc+0xc4>
1001441c:	18c00084 	addi	r3,r3,2
10014420:	18c7883a 	add	r3,r3,r3
10014424:	18c7883a 	add	r3,r3,r3
10014428:	12000115 	stw	r8,4(r2)
1001442c:	10c7883a 	add	r3,r2,r3
10014430:	19400015 	stw	r5,0(r3)
10014434:	0005883a 	mov	r2,zero
10014438:	dfc00517 	ldw	ra,20(sp)
1001443c:	dc400417 	ldw	r17,16(sp)
10014440:	dc000317 	ldw	r16,12(sp)
10014444:	dec00604 	addi	sp,sp,24
10014448:	f800283a 	ret
1001444c:	00840034 	movhi	r2,4096
10014450:	1092a204 	addi	r2,r2,19080
10014454:	10002626 	beq	r2,zero,100144f0 <__register_exitproc+0x110>
10014458:	01006404 	movi	r4,400
1001445c:	d9400015 	stw	r5,0(sp)
10014460:	d9800115 	stw	r6,4(sp)
10014464:	d9c00215 	stw	r7,8(sp)
10014468:	0004a880 	call	10004a88 <malloc>
1001446c:	d9400017 	ldw	r5,0(sp)
10014470:	d9800117 	ldw	r6,4(sp)
10014474:	d9c00217 	ldw	r7,8(sp)
10014478:	10001d26 	beq	r2,zero,100144f0 <__register_exitproc+0x110>
1001447c:	81000017 	ldw	r4,0(r16)
10014480:	10000115 	stw	zero,4(r2)
10014484:	02000044 	movi	r8,1
10014488:	22405217 	ldw	r9,328(r4)
1001448c:	0007883a 	mov	r3,zero
10014490:	12400015 	stw	r9,0(r2)
10014494:	20805215 	stw	r2,328(r4)
10014498:	10006215 	stw	zero,392(r2)
1001449c:	10006315 	stw	zero,396(r2)
100144a0:	883fde26 	beq	r17,zero,1001441c <__alt_data_end+0xf801441c>
100144a4:	18c9883a 	add	r4,r3,r3
100144a8:	2109883a 	add	r4,r4,r4
100144ac:	1109883a 	add	r4,r2,r4
100144b0:	21802215 	stw	r6,136(r4)
100144b4:	01800044 	movi	r6,1
100144b8:	12406217 	ldw	r9,392(r2)
100144bc:	30cc983a 	sll	r6,r6,r3
100144c0:	4992b03a 	or	r9,r9,r6
100144c4:	12406215 	stw	r9,392(r2)
100144c8:	21c04215 	stw	r7,264(r4)
100144cc:	01000084 	movi	r4,2
100144d0:	893fd21e 	bne	r17,r4,1001441c <__alt_data_end+0xf801441c>
100144d4:	11006317 	ldw	r4,396(r2)
100144d8:	218cb03a 	or	r6,r4,r6
100144dc:	11806315 	stw	r6,396(r2)
100144e0:	003fce06 	br	1001441c <__alt_data_end+0xf801441c>
100144e4:	18805304 	addi	r2,r3,332
100144e8:	18805215 	stw	r2,328(r3)
100144ec:	003fc606 	br	10014408 <__alt_data_end+0xf8014408>
100144f0:	00bfffc4 	movi	r2,-1
100144f4:	003fd006 	br	10014438 <__alt_data_end+0xf8014438>

100144f8 <__call_exitprocs>:
100144f8:	defff504 	addi	sp,sp,-44
100144fc:	df000915 	stw	fp,36(sp)
10014500:	dd400615 	stw	r21,24(sp)
10014504:	dc800315 	stw	r18,12(sp)
10014508:	dfc00a15 	stw	ra,40(sp)
1001450c:	ddc00815 	stw	r23,32(sp)
10014510:	dd800715 	stw	r22,28(sp)
10014514:	dd000515 	stw	r20,20(sp)
10014518:	dcc00415 	stw	r19,16(sp)
1001451c:	dc400215 	stw	r17,8(sp)
10014520:	dc000115 	stw	r16,4(sp)
10014524:	d9000015 	stw	r4,0(sp)
10014528:	2839883a 	mov	fp,r5
1001452c:	04800044 	movi	r18,1
10014530:	057fffc4 	movi	r21,-1
10014534:	00840074 	movhi	r2,4097
10014538:	109ba604 	addi	r2,r2,28312
1001453c:	12000017 	ldw	r8,0(r2)
10014540:	45005217 	ldw	r20,328(r8)
10014544:	44c05204 	addi	r19,r8,328
10014548:	a0001c26 	beq	r20,zero,100145bc <__call_exitprocs+0xc4>
1001454c:	a0800117 	ldw	r2,4(r20)
10014550:	15ffffc4 	addi	r23,r2,-1
10014554:	b8000d16 	blt	r23,zero,1001458c <__call_exitprocs+0x94>
10014558:	14000044 	addi	r16,r2,1
1001455c:	8421883a 	add	r16,r16,r16
10014560:	8421883a 	add	r16,r16,r16
10014564:	84402004 	addi	r17,r16,128
10014568:	a463883a 	add	r17,r20,r17
1001456c:	a421883a 	add	r16,r20,r16
10014570:	e0001e26 	beq	fp,zero,100145ec <__call_exitprocs+0xf4>
10014574:	80804017 	ldw	r2,256(r16)
10014578:	e0801c26 	beq	fp,r2,100145ec <__call_exitprocs+0xf4>
1001457c:	bdffffc4 	addi	r23,r23,-1
10014580:	843fff04 	addi	r16,r16,-4
10014584:	8c7fff04 	addi	r17,r17,-4
10014588:	bd7ff91e 	bne	r23,r21,10014570 <__alt_data_end+0xf8014570>
1001458c:	00840034 	movhi	r2,4096
10014590:	1092a704 	addi	r2,r2,19100
10014594:	10000926 	beq	r2,zero,100145bc <__call_exitprocs+0xc4>
10014598:	a0800117 	ldw	r2,4(r20)
1001459c:	1000301e 	bne	r2,zero,10014660 <__call_exitprocs+0x168>
100145a0:	a0800017 	ldw	r2,0(r20)
100145a4:	10003226 	beq	r2,zero,10014670 <__call_exitprocs+0x178>
100145a8:	a009883a 	mov	r4,r20
100145ac:	98800015 	stw	r2,0(r19)
100145b0:	0004a9c0 	call	10004a9c <free>
100145b4:	9d000017 	ldw	r20,0(r19)
100145b8:	a03fe41e 	bne	r20,zero,1001454c <__alt_data_end+0xf801454c>
100145bc:	dfc00a17 	ldw	ra,40(sp)
100145c0:	df000917 	ldw	fp,36(sp)
100145c4:	ddc00817 	ldw	r23,32(sp)
100145c8:	dd800717 	ldw	r22,28(sp)
100145cc:	dd400617 	ldw	r21,24(sp)
100145d0:	dd000517 	ldw	r20,20(sp)
100145d4:	dcc00417 	ldw	r19,16(sp)
100145d8:	dc800317 	ldw	r18,12(sp)
100145dc:	dc400217 	ldw	r17,8(sp)
100145e0:	dc000117 	ldw	r16,4(sp)
100145e4:	dec00b04 	addi	sp,sp,44
100145e8:	f800283a 	ret
100145ec:	a0800117 	ldw	r2,4(r20)
100145f0:	80c00017 	ldw	r3,0(r16)
100145f4:	10bfffc4 	addi	r2,r2,-1
100145f8:	15c01426 	beq	r2,r23,1001464c <__call_exitprocs+0x154>
100145fc:	80000015 	stw	zero,0(r16)
10014600:	183fde26 	beq	r3,zero,1001457c <__alt_data_end+0xf801457c>
10014604:	95c8983a 	sll	r4,r18,r23
10014608:	a0806217 	ldw	r2,392(r20)
1001460c:	a5800117 	ldw	r22,4(r20)
10014610:	2084703a 	and	r2,r4,r2
10014614:	10000b26 	beq	r2,zero,10014644 <__call_exitprocs+0x14c>
10014618:	a0806317 	ldw	r2,396(r20)
1001461c:	2088703a 	and	r4,r4,r2
10014620:	20000c1e 	bne	r4,zero,10014654 <__call_exitprocs+0x15c>
10014624:	89400017 	ldw	r5,0(r17)
10014628:	d9000017 	ldw	r4,0(sp)
1001462c:	183ee83a 	callr	r3
10014630:	a0800117 	ldw	r2,4(r20)
10014634:	15bfbf1e 	bne	r2,r22,10014534 <__alt_data_end+0xf8014534>
10014638:	98800017 	ldw	r2,0(r19)
1001463c:	153fcf26 	beq	r2,r20,1001457c <__alt_data_end+0xf801457c>
10014640:	003fbc06 	br	10014534 <__alt_data_end+0xf8014534>
10014644:	183ee83a 	callr	r3
10014648:	003ff906 	br	10014630 <__alt_data_end+0xf8014630>
1001464c:	a5c00115 	stw	r23,4(r20)
10014650:	003feb06 	br	10014600 <__alt_data_end+0xf8014600>
10014654:	89000017 	ldw	r4,0(r17)
10014658:	183ee83a 	callr	r3
1001465c:	003ff406 	br	10014630 <__alt_data_end+0xf8014630>
10014660:	a0800017 	ldw	r2,0(r20)
10014664:	a027883a 	mov	r19,r20
10014668:	1029883a 	mov	r20,r2
1001466c:	003fb606 	br	10014548 <__alt_data_end+0xf8014548>
10014670:	0005883a 	mov	r2,zero
10014674:	003ffb06 	br	10014664 <__alt_data_end+0xf8014664>
10014678:	010d0bff 	0x10d0bff
1001467c:	7f010002 	0x7f010002
10014680:	00000000 	call	10000000 <__alt_mem_sdram>
10014684:	10014e84 	addi	zero,r2,1338
10014688:	883a0001 	jmpi	1883a000 <__alt_data_end+0x83a000>
1001468c:	010d0bff 	0x10d0bff
10014690:	01010002 	0x1010002
	...
1001469c:	010d0bff 	0x10d0bff
100146a0:	01010004 	movi	r4,1024
100146a4:	00000100 	call	10000010 <__alt_mem_sdram+0x10>
100146a8:	00000000 	call	10000000 <__alt_mem_sdram>
100146ac:	01110bff 	0x1110bff
100146b0:	01010004 	movi	r4,1024
100146b4:	7f000105 	stb	fp,4(r15)
100146b8:	007d0000 	call	1007d000 <_gp+0x5e1a0>
100146bc:	00000000 	call	10000000 <__alt_mem_sdram>
100146c0:	01883a00 	call	101883a0 <_gp+0x169540>
100146c4:	10003dfc 	xorhi	zero,r2,247
